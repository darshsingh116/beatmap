2024-09-03 09:52:34,367 - Error processing row 424: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (859,) + inhomogeneous part.
2024-09-03 09:52:36,356 - Error processing row 904: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (859,) + inhomogeneous part.
2024-09-03 09:52:50,657 - Error processing row 4358: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (1243,) + inhomogeneous part.
2024-09-03 09:52:57,651 - Error processing row 6175: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (695,) + inhomogeneous part.
2024-09-03 09:53:03,772 - Error processing row 7483: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (971,) + inhomogeneous part.
2024-09-03 09:53:06,037 - Error processing row 7968: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (1856,) + inhomogeneous part.
2024-09-03 09:53:15,111 - Error processing row 9971: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (505,) + inhomogeneous part.
2024-09-03 13:28:55,539 - Error processing row 424: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (859,) + inhomogeneous part.
2024-09-03 13:28:57,184 - Error processing row 904: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (859,) + inhomogeneous part.
2024-09-03 13:29:12,081 - Error processing row 4358: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (1243,) + inhomogeneous part.
2024-09-03 13:29:19,635 - Error processing row 6175: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (695,) + inhomogeneous part.
2024-09-03 13:29:25,897 - Error processing row 7483: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (971,) + inhomogeneous part.
2024-09-03 13:29:28,666 - Error processing row 7968: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (1856,) + inhomogeneous part.
2024-09-03 13:29:38,405 - Error processing row 9971: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (505,) + inhomogeneous part.
2024-09-03 13:30:54,002 - Error processing row 424: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (859,) + inhomogeneous part.
2024-09-03 13:30:55,914 - Error processing row 904: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (859,) + inhomogeneous part.
2024-09-03 13:37:06,201 - Error processing row 424: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (859,) + inhomogeneous part.
2024-09-03 13:37:07,780 - Error processing row 904: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (859,) + inhomogeneous part.
2024-09-03 13:37:24,411 - Error processing row 4358: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (1243,) + inhomogeneous part.
2024-09-03 13:37:31,672 - Error processing row 6175: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (695,) + inhomogeneous part.
2024-09-03 13:37:37,914 - Error processing row 7483: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (971,) + inhomogeneous part.
2024-09-03 13:37:40,399 - Error processing row 7968: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (1856,) + inhomogeneous part.
2024-09-03 13:37:49,733 - Error processing row 9971: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (505,) + inhomogeneous part.
2024-09-04 18:31:34,209 - bytecode dump:
>          0	NOP(arg=None, lineno=1141)
           2	LOAD_FAST(arg=0, lineno=1144)
           4	LOAD_CONST(arg=1, lineno=1144)
           6	BINARY_SUBSCR(arg=None, lineno=1144)
           8	STORE_FAST(arg=3, lineno=1144)
          10	LOAD_FAST(arg=1, lineno=1145)
          12	UNARY_NEGATIVE(arg=None, lineno=1145)
          14	LOAD_FAST(arg=3, lineno=1145)
          16	DUP_TOP(arg=None, lineno=1145)
          18	ROT_THREE(arg=None, lineno=1145)
          20	COMPARE_OP(arg=1, lineno=1145)
          22	POP_JUMP_IF_FALSE(arg=17, lineno=1145)
          24	LOAD_FAST(arg=1, lineno=1145)
          26	COMPARE_OP(arg=1, lineno=1145)
          28	POP_JUMP_IF_FALSE(arg=21, lineno=1145)
          30	JUMP_FORWARD(arg=2, lineno=1145)
>         32	POP_TOP(arg=None, lineno=1145)
          34	JUMP_FORWARD(arg=2, lineno=1145)
>         36	LOAD_CONST(arg=1, lineno=1146)
          38	STORE_FAST(arg=3, lineno=1146)
>         40	LOAD_FAST(arg=0, lineno=1148)
          42	LOAD_CONST(arg=2, lineno=1148)
          44	BINARY_SUBSCR(arg=None, lineno=1148)
          46	STORE_FAST(arg=4, lineno=1148)
          48	LOAD_FAST(arg=1, lineno=1149)
          50	UNARY_NEGATIVE(arg=None, lineno=1149)
          52	LOAD_FAST(arg=4, lineno=1149)
          54	DUP_TOP(arg=None, lineno=1149)
          56	ROT_THREE(arg=None, lineno=1149)
          58	COMPARE_OP(arg=1, lineno=1149)
          60	POP_JUMP_IF_FALSE(arg=36, lineno=1149)
          62	LOAD_FAST(arg=1, lineno=1149)
          64	COMPARE_OP(arg=1, lineno=1149)
          66	POP_JUMP_IF_FALSE(arg=40, lineno=1149)
          68	JUMP_FORWARD(arg=2, lineno=1149)
>         70	POP_TOP(arg=None, lineno=1149)
          72	JUMP_FORWARD(arg=2, lineno=1149)
>         74	LOAD_CONST(arg=1, lineno=1150)
          76	STORE_FAST(arg=4, lineno=1150)
>         78	LOAD_FAST(arg=2, lineno=1152)
          80	POP_JUMP_IF_FALSE(arg=52, lineno=1152)
          82	LOAD_GLOBAL(arg=0, lineno=1153)
          84	LOAD_METHOD(arg=1, lineno=1153)
          86	LOAD_FAST(arg=3, lineno=1153)
          88	CALL_METHOD(arg=1, lineno=1153)
          90	LOAD_GLOBAL(arg=0, lineno=1153)
          92	LOAD_METHOD(arg=1, lineno=1153)
          94	LOAD_FAST(arg=4, lineno=1153)
          96	CALL_METHOD(arg=1, lineno=1153)
          98	COMPARE_OP(arg=3, lineno=1153)
         100	RETURN_VALUE(arg=None, lineno=1153)
>        102	LOAD_GLOBAL(arg=0, lineno=1155)
         104	LOAD_METHOD(arg=2, lineno=1155)
         106	LOAD_FAST(arg=3, lineno=1155)
         108	CALL_METHOD(arg=1, lineno=1155)
         110	LOAD_GLOBAL(arg=0, lineno=1155)
         112	LOAD_METHOD(arg=2, lineno=1155)
         114	LOAD_FAST(arg=4, lineno=1155)
         116	CALL_METHOD(arg=1, lineno=1155)
         118	COMPARE_OP(arg=3, lineno=1155)
         120	RETURN_VALUE(arg=None, lineno=1155)
2024-09-04 18:31:34,209 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:34,209 - stack: []
2024-09-04 18:31:34,209 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:34,209 - dispatch pc=0, inst=NOP(arg=None, lineno=1141)
2024-09-04 18:31:34,212 - stack []
2024-09-04 18:31:34,212 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1144)
2024-09-04 18:31:34,212 - stack []
2024-09-04 18:31:34,212 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1144)
2024-09-04 18:31:34,212 - stack ['$x2.0']
2024-09-04 18:31:34,212 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1144)
2024-09-04 18:31:34,212 - stack ['$x2.0', '$const4.1']
2024-09-04 18:31:34,212 - dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1144)
2024-09-04 18:31:34,212 - stack ['$6binary_subscr.2']
2024-09-04 18:31:34,212 - dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=1145)
2024-09-04 18:31:34,212 - stack []
2024-09-04 18:31:34,212 - dispatch pc=12, inst=UNARY_NEGATIVE(arg=None, lineno=1145)
2024-09-04 18:31:34,212 - stack ['$threshold10.3']
2024-09-04 18:31:34,212 - dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=1145)
2024-09-04 18:31:34,212 - stack ['$12unary_negative.4']
2024-09-04 18:31:34,212 - dispatch pc=16, inst=DUP_TOP(arg=None, lineno=1145)
2024-09-04 18:31:34,212 - stack ['$12unary_negative.4', '$x014.5']
2024-09-04 18:31:34,212 - dispatch pc=18, inst=ROT_THREE(arg=None, lineno=1145)
2024-09-04 18:31:34,212 - stack ['$12unary_negative.4', '$x014.5', '$16dup_top.6']
2024-09-04 18:31:34,212 - dispatch pc=20, inst=COMPARE_OP(arg=1, lineno=1145)
2024-09-04 18:31:34,212 - stack ['$16dup_top.6', '$12unary_negative.4', '$x014.5']
2024-09-04 18:31:34,212 - dispatch pc=22, inst=POP_JUMP_IF_FALSE(arg=17, lineno=1145)
2024-09-04 18:31:34,212 - stack ['$16dup_top.6', '$20compare_op.7']
2024-09-04 18:31:34,212 - end state. edges=[Edge(pc=24, stack=('$16dup_top.6',), blockstack=(), npush=0), Edge(pc=32, stack=('$16dup_top.6',), blockstack=(), npush=0)]
2024-09-04 18:31:34,212 - pending: deque([State(pc_initial=24 nstack_initial=1), State(pc_initial=32 nstack_initial=1)])
2024-09-04 18:31:34,212 - stack: ['$phi24.0']
2024-09-04 18:31:34,215 - state.pc_initial: State(pc_initial=24 nstack_initial=1)
2024-09-04 18:31:34,215 - dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=1145)
2024-09-04 18:31:34,215 - stack ['$phi24.0']
2024-09-04 18:31:34,215 - dispatch pc=26, inst=COMPARE_OP(arg=1, lineno=1145)
2024-09-04 18:31:34,215 - stack ['$phi24.0', '$threshold24.1']
2024-09-04 18:31:34,215 - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=21, lineno=1145)
2024-09-04 18:31:34,215 - stack ['$26compare_op.2']
2024-09-04 18:31:34,215 - end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=40, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:34,215 - pending: deque([State(pc_initial=32 nstack_initial=1), State(pc_initial=30 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2024-09-04 18:31:34,215 - stack: ['$phi32.0']
2024-09-04 18:31:34,215 - state.pc_initial: State(pc_initial=32 nstack_initial=1)
2024-09-04 18:31:34,215 - dispatch pc=32, inst=POP_TOP(arg=None, lineno=1145)
2024-09-04 18:31:34,215 - stack ['$phi32.0']
2024-09-04 18:31:34,215 - dispatch pc=34, inst=JUMP_FORWARD(arg=2, lineno=1145)
2024-09-04 18:31:34,216 - stack []
2024-09-04 18:31:34,216 - end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:34,216 - pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2024-09-04 18:31:34,216 - stack: []
2024-09-04 18:31:34,216 - state.pc_initial: State(pc_initial=30 nstack_initial=0)
2024-09-04 18:31:34,216 - dispatch pc=30, inst=JUMP_FORWARD(arg=2, lineno=1145)
2024-09-04 18:31:34,216 - stack []
2024-09-04 18:31:34,216 - end state. edges=[Edge(pc=36, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:34,216 - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2024-09-04 18:31:34,216 - stack: []
2024-09-04 18:31:34,216 - state.pc_initial: State(pc_initial=40 nstack_initial=0)
2024-09-04 18:31:34,216 - dispatch pc=40, inst=LOAD_FAST(arg=0, lineno=1148)
2024-09-04 18:31:34,216 - stack []
2024-09-04 18:31:34,216 - dispatch pc=42, inst=LOAD_CONST(arg=2, lineno=1148)
2024-09-04 18:31:34,217 - stack ['$x40.0']
2024-09-04 18:31:34,217 - dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=1148)
2024-09-04 18:31:34,217 - stack ['$x40.0', '$const42.1']
2024-09-04 18:31:34,217 - dispatch pc=46, inst=STORE_FAST(arg=4, lineno=1148)
2024-09-04 18:31:34,217 - stack ['$44binary_subscr.2']
2024-09-04 18:31:34,217 - dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=1149)
2024-09-04 18:31:34,217 - stack []
2024-09-04 18:31:34,217 - dispatch pc=50, inst=UNARY_NEGATIVE(arg=None, lineno=1149)
2024-09-04 18:31:34,217 - stack ['$threshold48.3']
2024-09-04 18:31:34,217 - dispatch pc=52, inst=LOAD_FAST(arg=4, lineno=1149)
2024-09-04 18:31:34,217 - stack ['$50unary_negative.4']
2024-09-04 18:31:34,217 - dispatch pc=54, inst=DUP_TOP(arg=None, lineno=1149)
2024-09-04 18:31:34,218 - stack ['$50unary_negative.4', '$x152.5']
2024-09-04 18:31:34,218 - dispatch pc=56, inst=ROT_THREE(arg=None, lineno=1149)
2024-09-04 18:31:34,218 - stack ['$50unary_negative.4', '$x152.5', '$54dup_top.6']
2024-09-04 18:31:34,218 - dispatch pc=58, inst=COMPARE_OP(arg=1, lineno=1149)
2024-09-04 18:31:34,218 - stack ['$54dup_top.6', '$50unary_negative.4', '$x152.5']
2024-09-04 18:31:34,218 - dispatch pc=60, inst=POP_JUMP_IF_FALSE(arg=36, lineno=1149)
2024-09-04 18:31:34,218 - stack ['$54dup_top.6', '$58compare_op.7']
2024-09-04 18:31:34,218 - end state. edges=[Edge(pc=62, stack=('$54dup_top.6',), blockstack=(), npush=0), Edge(pc=70, stack=('$54dup_top.6',), blockstack=(), npush=0)]
2024-09-04 18:31:34,218 - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
2024-09-04 18:31:34,218 - pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
2024-09-04 18:31:34,218 - stack: []
2024-09-04 18:31:34,218 - state.pc_initial: State(pc_initial=36 nstack_initial=0)
2024-09-04 18:31:34,218 - dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=1146)
2024-09-04 18:31:34,219 - stack []
2024-09-04 18:31:34,219 - dispatch pc=38, inst=STORE_FAST(arg=3, lineno=1146)
2024-09-04 18:31:34,219 - stack ['$const36.0']
2024-09-04 18:31:34,219 - end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:34,219 - pending: deque([State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1), State(pc_initial=40 nstack_initial=0)])
2024-09-04 18:31:34,219 - stack: ['$phi62.0']
2024-09-04 18:31:34,219 - state.pc_initial: State(pc_initial=62 nstack_initial=1)
2024-09-04 18:31:34,219 - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=1149)
2024-09-04 18:31:34,219 - stack ['$phi62.0']
2024-09-04 18:31:34,219 - dispatch pc=64, inst=COMPARE_OP(arg=1, lineno=1149)
2024-09-04 18:31:34,219 - stack ['$phi62.0', '$threshold62.1']
2024-09-04 18:31:34,219 - dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=40, lineno=1149)
2024-09-04 18:31:34,219 - stack ['$64compare_op.2']
2024-09-04 18:31:34,220 - end state. edges=[Edge(pc=68, stack=(), blockstack=(), npush=0), Edge(pc=78, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:34,220 - pending: deque([State(pc_initial=70 nstack_initial=1), State(pc_initial=40 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-04 18:31:34,220 - stack: ['$phi70.0']
2024-09-04 18:31:34,220 - state.pc_initial: State(pc_initial=70 nstack_initial=1)
2024-09-04 18:31:34,220 - dispatch pc=70, inst=POP_TOP(arg=None, lineno=1149)
2024-09-04 18:31:34,220 - stack ['$phi70.0']
2024-09-04 18:31:34,220 - dispatch pc=72, inst=JUMP_FORWARD(arg=2, lineno=1149)
2024-09-04 18:31:34,220 - stack []
2024-09-04 18:31:34,220 - end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:34,220 - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-04 18:31:34,220 - pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-04 18:31:34,220 - stack: []
2024-09-04 18:31:34,220 - state.pc_initial: State(pc_initial=68 nstack_initial=0)
2024-09-04 18:31:34,221 - dispatch pc=68, inst=JUMP_FORWARD(arg=2, lineno=1149)
2024-09-04 18:31:34,221 - stack []
2024-09-04 18:31:34,221 - end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:34,221 - pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=74 nstack_initial=0)])
2024-09-04 18:31:34,221 - stack: []
2024-09-04 18:31:34,221 - state.pc_initial: State(pc_initial=78 nstack_initial=0)
2024-09-04 18:31:34,221 - dispatch pc=78, inst=LOAD_FAST(arg=2, lineno=1152)
2024-09-04 18:31:34,221 - stack []
2024-09-04 18:31:34,221 - dispatch pc=80, inst=POP_JUMP_IF_FALSE(arg=52, lineno=1152)
2024-09-04 18:31:34,221 - stack ['$zero_pos78.0']
2024-09-04 18:31:34,221 - end state. edges=[Edge(pc=82, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:34,221 - pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2024-09-04 18:31:34,221 - pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2024-09-04 18:31:34,221 - stack: []
2024-09-04 18:31:34,222 - state.pc_initial: State(pc_initial=74 nstack_initial=0)
2024-09-04 18:31:34,222 - dispatch pc=74, inst=LOAD_CONST(arg=1, lineno=1150)
2024-09-04 18:31:34,222 - stack []
2024-09-04 18:31:34,222 - dispatch pc=76, inst=STORE_FAST(arg=4, lineno=1150)
2024-09-04 18:31:34,222 - stack ['$const74.0']
2024-09-04 18:31:34,222 - end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:34,222 - pending: deque([State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-04 18:31:34,222 - stack: []
2024-09-04 18:31:34,222 - state.pc_initial: State(pc_initial=82 nstack_initial=0)
2024-09-04 18:31:34,222 - dispatch pc=82, inst=LOAD_GLOBAL(arg=0, lineno=1153)
2024-09-04 18:31:34,222 - stack []
2024-09-04 18:31:34,222 - dispatch pc=84, inst=LOAD_METHOD(arg=1, lineno=1153)
2024-09-04 18:31:34,222 - stack ['$82load_global.0']
2024-09-04 18:31:34,222 - dispatch pc=86, inst=LOAD_FAST(arg=3, lineno=1153)
2024-09-04 18:31:34,222 - stack ['$84load_method.1']
2024-09-04 18:31:34,223 - dispatch pc=88, inst=CALL_METHOD(arg=1, lineno=1153)
2024-09-04 18:31:34,223 - stack ['$84load_method.1', '$x086.2']
2024-09-04 18:31:34,223 - dispatch pc=90, inst=LOAD_GLOBAL(arg=0, lineno=1153)
2024-09-04 18:31:34,223 - stack ['$88call_method.3']
2024-09-04 18:31:34,223 - dispatch pc=92, inst=LOAD_METHOD(arg=1, lineno=1153)
2024-09-04 18:31:34,223 - stack ['$88call_method.3', '$90load_global.4']
2024-09-04 18:31:34,223 - dispatch pc=94, inst=LOAD_FAST(arg=4, lineno=1153)
2024-09-04 18:31:34,223 - stack ['$88call_method.3', '$92load_method.5']
2024-09-04 18:31:34,223 - dispatch pc=96, inst=CALL_METHOD(arg=1, lineno=1153)
2024-09-04 18:31:34,223 - stack ['$88call_method.3', '$92load_method.5', '$x194.6']
2024-09-04 18:31:34,223 - dispatch pc=98, inst=COMPARE_OP(arg=3, lineno=1153)
2024-09-04 18:31:34,223 - stack ['$88call_method.3', '$96call_method.7']
2024-09-04 18:31:34,223 - dispatch pc=100, inst=RETURN_VALUE(arg=None, lineno=1153)
2024-09-04 18:31:34,224 - stack ['$98compare_op.8']
2024-09-04 18:31:34,224 - end state. edges=[]
2024-09-04 18:31:34,224 - pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-04 18:31:34,224 - stack: []
2024-09-04 18:31:34,224 - state.pc_initial: State(pc_initial=102 nstack_initial=0)
2024-09-04 18:31:34,224 - dispatch pc=102, inst=LOAD_GLOBAL(arg=0, lineno=1155)
2024-09-04 18:31:34,224 - stack []
2024-09-04 18:31:34,224 - dispatch pc=104, inst=LOAD_METHOD(arg=2, lineno=1155)
2024-09-04 18:31:34,224 - stack ['$102load_global.0']
2024-09-04 18:31:34,224 - dispatch pc=106, inst=LOAD_FAST(arg=3, lineno=1155)
2024-09-04 18:31:34,224 - stack ['$104load_method.1']
2024-09-04 18:31:34,224 - dispatch pc=108, inst=CALL_METHOD(arg=1, lineno=1155)
2024-09-04 18:31:34,224 - stack ['$104load_method.1', '$x0106.2']
2024-09-04 18:31:34,224 - dispatch pc=110, inst=LOAD_GLOBAL(arg=0, lineno=1155)
2024-09-04 18:31:34,225 - stack ['$108call_method.3']
2024-09-04 18:31:34,225 - dispatch pc=112, inst=LOAD_METHOD(arg=2, lineno=1155)
2024-09-04 18:31:34,225 - stack ['$108call_method.3', '$110load_global.4']
2024-09-04 18:31:34,225 - dispatch pc=114, inst=LOAD_FAST(arg=4, lineno=1155)
2024-09-04 18:31:34,225 - stack ['$108call_method.3', '$112load_method.5']
2024-09-04 18:31:34,225 - dispatch pc=116, inst=CALL_METHOD(arg=1, lineno=1155)
2024-09-04 18:31:34,225 - stack ['$108call_method.3', '$112load_method.5', '$x1114.6']
2024-09-04 18:31:34,225 - dispatch pc=118, inst=COMPARE_OP(arg=3, lineno=1155)
2024-09-04 18:31:34,225 - stack ['$108call_method.3', '$116call_method.7']
2024-09-04 18:31:34,225 - dispatch pc=120, inst=RETURN_VALUE(arg=None, lineno=1155)
2024-09-04 18:31:34,225 - stack ['$118compare_op.8']
2024-09-04 18:31:34,225 - end state. edges=[]
2024-09-04 18:31:34,225 - pending: deque([State(pc_initial=78 nstack_initial=0)])
2024-09-04 18:31:34,226 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:34,226 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=1): {'$phi24.0'},
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=1): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=1): {'$phi62.0'},
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=1): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=82 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set()})
2024-09-04 18:31:34,226 - defmap: {'$phi24.0': State(pc_initial=0 nstack_initial=0),
 '$phi32.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.0': State(pc_initial=40 nstack_initial=0),
 '$phi70.0': State(pc_initial=40 nstack_initial=0)}
2024-09-04 18:31:34,226 - phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))},
             '$phi70.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))}})
2024-09-04 18:31:34,227 - changing phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))},
             '$phi70.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))}})
2024-09-04 18:31:34,227 - keep phismap: {'$phi24.0': {('$16dup_top.6', State(pc_initial=0 nstack_initial=0))},
 '$phi62.0': {('$54dup_top.6', State(pc_initial=40 nstack_initial=0))}}
2024-09-04 18:31:34,227 - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi24.0': '$16dup_top.6'},
             State(pc_initial=40 nstack_initial=0): {'$phi62.0': '$54dup_top.6'}})
2024-09-04 18:31:34,227 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:34,227 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'value': '$6binary_subscr.2'}), (10, {'res': '$threshold10.3'}), (12, {'value': '$threshold10.3', 'res': '$12unary_negative.4'}), (14, {'res': '$x014.5'}), (16, {'orig': ['$x014.5'], 'duped': ['$16dup_top.6']}), (20, {'lhs': '$12unary_negative.4', 'rhs': '$x014.5', 'res': '$20compare_op.7'}), (22, {'pred': '$20compare_op.7'})), outgoing_phis={'$phi24.0': '$16dup_top.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={24: ('$16dup_top.6',), 32: ('$16dup_top.6',)})
2024-09-04 18:31:34,228 - block_infos State(pc_initial=24 nstack_initial=1):
AdaptBlockInfo(insts=((24, {'res': '$threshold24.1'}), (26, {'lhs': '$phi24.0', 'rhs': '$threshold24.1', 'res': '$26compare_op.2'}), (28, {'pred': '$26compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 40: ()})
2024-09-04 18:31:34,228 - block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ()})
2024-09-04 18:31:34,228 - block_infos State(pc_initial=32 nstack_initial=1):
AdaptBlockInfo(insts=((34, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2024-09-04 18:31:34,228 - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$const36.0'}), (38, {'value': '$const36.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2024-09-04 18:31:34,228 - block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$x40.0'}), (42, {'res': '$const42.1'}), (44, {'index': '$const42.1', 'target': '$x40.0', 'res': '$44binary_subscr.2'}), (46, {'value': '$44binary_subscr.2'}), (48, {'res': '$threshold48.3'}), (50, {'value': '$threshold48.3', 'res': '$50unary_negative.4'}), (52, {'res': '$x152.5'}), (54, {'orig': ['$x152.5'], 'duped': ['$54dup_top.6']}), (58, {'lhs': '$50unary_negative.4', 'rhs': '$x152.5', 'res': '$58compare_op.7'}), (60, {'pred': '$58compare_op.7'})), outgoing_phis={'$phi62.0': '$54dup_top.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ('$54dup_top.6',), 70: ('$54dup_top.6',)})
2024-09-04 18:31:34,228 - block_infos State(pc_initial=62 nstack_initial=1):
AdaptBlockInfo(insts=((62, {'res': '$threshold62.1'}), (64, {'lhs': '$phi62.0', 'rhs': '$threshold62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={68: (), 78: ()})
2024-09-04 18:31:34,228 - block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: ()})
2024-09-04 18:31:34,228 - block_infos State(pc_initial=70 nstack_initial=1):
AdaptBlockInfo(insts=((72, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: ()})
2024-09-04 18:31:34,228 - block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$const74.0'}), (76, {'value': '$const74.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: ()})
2024-09-04 18:31:34,228 - block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$zero_pos78.0'}), (80, {'pred': '$zero_pos78.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: (), 102: ()})
2024-09-04 18:31:34,228 - block_infos State(pc_initial=82 nstack_initial=0):
AdaptBlockInfo(insts=((82, {'res': '$82load_global.0'}), (84, {'item': '$82load_global.0', 'res': '$84load_method.1'}), (86, {'res': '$x086.2'}), (88, {'func': '$84load_method.1', 'args': ['$x086.2'], 'res': '$88call_method.3'}), (90, {'res': '$90load_global.4'}), (92, {'item': '$90load_global.4', 'res': '$92load_method.5'}), (94, {'res': '$x194.6'}), (96, {'func': '$92load_method.5', 'args': ['$x194.6'], 'res': '$96call_method.7'}), (98, {'lhs': '$88call_method.3', 'rhs': '$96call_method.7', 'res': '$98compare_op.8'}), (100, {'retval': '$98compare_op.8', 'castval': '$100return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:34,228 - block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$102load_global.0'}), (104, {'item': '$102load_global.0', 'res': '$104load_method.1'}), (106, {'res': '$x0106.2'}), (108, {'func': '$104load_method.1', 'args': ['$x0106.2'], 'res': '$108call_method.3'}), (110, {'res': '$110load_global.4'}), (112, {'item': '$110load_global.4', 'res': '$112load_method.5'}), (114, {'res': '$x1114.6'}), (116, {'func': '$112load_method.5', 'args': ['$x1114.6'], 'res': '$116call_method.7'}), (118, {'lhs': '$108call_method.3', 'rhs': '$116call_method.7', 'res': '$118compare_op.8'}), (120, {'retval': '$118compare_op.8', 'castval': '$120return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:34,232 - label 0:
    x = arg(0, name=x)                       ['x']
    threshold = arg(1, name=threshold)       ['threshold']
    zero_pos = arg(2, name=zero_pos)         ['zero_pos']
    $const4.1 = const(int, 0)                ['$const4.1']
    x0 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$const4.1', 'x', 'x0']
    $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$12unary_negative.4', 'threshold']
    $20compare_op.7 = $12unary_negative.4 <= x0 ['$12unary_negative.4', '$20compare_op.7', 'x0']
    bool22 = global(bool: <class 'bool'>)    ['bool22']
    $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None) ['$20compare_op.7', '$22pred', 'bool22']
    $phi24.0 = x0                            ['$phi24.0', 'x0']
    branch $22pred, 24, 32                   ['$22pred']
label 24:
    $26compare_op.2 = $phi24.0 <= threshold  ['$26compare_op.2', '$phi24.0', 'threshold']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.2', '$28pred', 'bool28']
    branch $28pred, 30, 40                   ['$28pred']
label 30:
    jump 36                                  []
label 32:
    jump 40                                  []
label 36:
    x0 = const(int, 0)                       ['x0']
    jump 40                                  []
label 40:
    $const42.1 = const(int, -1)              ['$const42.1']
    x1 = getitem(value=x, index=$const42.1, fn=<built-in function getitem>) ['$const42.1', 'x', 'x1']
    $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$50unary_negative.4', 'threshold']
    $58compare_op.7 = $50unary_negative.4 <= x1 ['$50unary_negative.4', '$58compare_op.7', 'x1']
    bool60 = global(bool: <class 'bool'>)    ['bool60']
    $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None) ['$58compare_op.7', '$60pred', 'bool60']
    $phi62.0 = x1                            ['$phi62.0', 'x1']
    branch $60pred, 62, 70                   ['$60pred']
label 62:
    $64compare_op.2 = $phi62.0 <= threshold  ['$64compare_op.2', '$phi62.0', 'threshold']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 78                   ['$66pred']
label 68:
    jump 74                                  []
label 70:
    jump 78                                  []
label 74:
    x1 = const(int, 0)                       ['x1']
    jump 78                                  []
label 78:
    bool80 = global(bool: <class 'bool'>)    ['bool80']
    $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None) ['$80pred', 'bool80', 'zero_pos']
    branch $80pred, 82, 102                  ['$80pred']
label 82:
    $82load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$82load_global.0']
    $84load_method.1 = getattr(value=$82load_global.0, attr=signbit) ['$82load_global.0', '$84load_method.1']
    $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None) ['$84load_method.1', '$88call_method.3', 'x0']
    $90load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$90load_global.4']
    $92load_method.5 = getattr(value=$90load_global.4, attr=signbit) ['$90load_global.4', '$92load_method.5']
    $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None) ['$92load_method.5', '$96call_method.7', 'x1']
    $98compare_op.8 = $88call_method.3 != $96call_method.7 ['$88call_method.3', '$96call_method.7', '$98compare_op.8']
    $100return_value.9 = cast(value=$98compare_op.8) ['$100return_value.9', '$98compare_op.8']
    return $100return_value.9                ['$100return_value.9']
label 102:
    $102load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$102load_global.0']
    $104load_method.1 = getattr(value=$102load_global.0, attr=sign) ['$102load_global.0', '$104load_method.1']
    $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None) ['$104load_method.1', '$108call_method.3', 'x0']
    $110load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$110load_global.4']
    $112load_method.5 = getattr(value=$110load_global.4, attr=sign) ['$110load_global.4', '$112load_method.5']
    $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None) ['$112load_method.5', '$116call_method.7', 'x1']
    $118compare_op.8 = $108call_method.3 != $116call_method.7 ['$108call_method.3', '$116call_method.7', '$118compare_op.8']
    $120return_value.9 = cast(value=$118compare_op.8) ['$118compare_op.8', '$120return_value.9']
    return $120return_value.9                ['$120return_value.9']

2024-09-04 18:31:34,655 - bytecode dump:
>          0	NOP(arg=None, lineno=1158)
           2	LOAD_GLOBAL(arg=0, lineno=1174)
           4	LOAD_FAST(arg=0, lineno=1174)
           6	LOAD_FAST(arg=1, lineno=1174)
           8	LOAD_FAST(arg=2, lineno=1174)
          10	CALL_FUNCTION(arg=3, lineno=1174)
          12	LOAD_FAST(arg=3, lineno=1174)
          14	LOAD_CONST(arg=1, lineno=1174)
          16	LOAD_CONST(arg=1, lineno=1174)
          18	BUILD_SLICE(arg=2, lineno=1174)
          20	STORE_SUBSCR(arg=None, lineno=1174)
          22	LOAD_CONST(arg=1, lineno=1174)
          24	RETURN_VALUE(arg=None, lineno=1174)
2024-09-04 18:31:34,655 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:34,655 - stack: []
2024-09-04 18:31:34,656 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:34,656 - dispatch pc=0, inst=NOP(arg=None, lineno=1158)
2024-09-04 18:31:34,656 - stack []
2024-09-04 18:31:34,656 - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1174)
2024-09-04 18:31:34,656 - stack []
2024-09-04 18:31:34,656 - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1174)
2024-09-04 18:31:34,656 - stack ['$2load_global.0']
2024-09-04 18:31:34,656 - dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=1174)
2024-09-04 18:31:34,656 - stack ['$2load_global.0', '$x4.1']
2024-09-04 18:31:34,656 - dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=1174)
2024-09-04 18:31:34,656 - stack ['$2load_global.0', '$x4.1', '$threshold6.2']
2024-09-04 18:31:34,657 - dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=1174)
2024-09-04 18:31:34,657 - stack ['$2load_global.0', '$x4.1', '$threshold6.2', '$zero_pos8.3']
2024-09-04 18:31:34,657 - dispatch pc=12, inst=LOAD_FAST(arg=3, lineno=1174)
2024-09-04 18:31:34,657 - stack ['$10call_function.4']
2024-09-04 18:31:34,657 - dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=1174)
2024-09-04 18:31:34,657 - stack ['$10call_function.4', '$y12.5']
2024-09-04 18:31:34,657 - dispatch pc=16, inst=LOAD_CONST(arg=1, lineno=1174)
2024-09-04 18:31:34,657 - stack ['$10call_function.4', '$y12.5', '$const14.6']
2024-09-04 18:31:34,657 - dispatch pc=18, inst=BUILD_SLICE(arg=2, lineno=1174)
2024-09-04 18:31:34,657 - stack ['$10call_function.4', '$y12.5', '$const14.6', '$const16.7']
2024-09-04 18:31:34,657 - dispatch pc=20, inst=STORE_SUBSCR(arg=None, lineno=1174)
2024-09-04 18:31:34,657 - stack ['$10call_function.4', '$y12.5', '$18build_slice.9']
2024-09-04 18:31:34,657 - dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=1174)
2024-09-04 18:31:34,658 - stack []
2024-09-04 18:31:34,658 - dispatch pc=24, inst=RETURN_VALUE(arg=None, lineno=1174)
2024-09-04 18:31:34,658 - stack ['$const22.10']
2024-09-04 18:31:34,658 - end state. edges=[]
2024-09-04 18:31:34,658 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:34,658 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 18:31:34,658 - defmap: {}
2024-09-04 18:31:34,658 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:34,658 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:34,658 - keep phismap: {}
2024-09-04 18:31:34,658 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:34,659 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:34,659 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'res': '$threshold6.2'}), (8, {'res': '$zero_pos8.3'}), (10, {'func': '$2load_global.0', 'args': ['$x4.1', '$threshold6.2', '$zero_pos8.3'], 'res': '$10call_function.4'}), (12, {'res': '$y12.5'}), (14, {'res': '$const14.6'}), (16, {'res': '$const16.7'}), (18, {'start': '$const14.6', 'stop': '$const16.7', 'step': None, 'res': '$18build_slice.9', 'slicevar': '$18build_slice.8'}), (20, {'target': '$y12.5', 'index': '$18build_slice.9', 'value': '$10call_function.4'}), (22, {'res': '$const22.10'}), (24, {'retval': '$const22.10', 'castval': '$24return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:34,659 - label 0:
    x = arg(0, name=x)                       ['x']
    threshold = arg(1, name=threshold)       ['threshold']
    zero_pos = arg(2, name=zero_pos)         ['zero_pos']
    y = arg(3, name=y)                       ['y']
    $2load_global.0 = global(_zc_stencil: <numba.stencils.stencil.StencilFunc object at 0x0000024317F9FCD0>) ['$2load_global.0']
    $10call_function.4 = call $2load_global.0(x, threshold, zero_pos, func=$2load_global.0, args=[Var(x, audio.py:1158), Var(threshold, audio.py:1158), Var(zero_pos, audio.py:1158)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', 'threshold', 'x', 'zero_pos']
    $const14.6 = const(NoneType, None)       ['$const14.6']
    $const16.7 = const(NoneType, None)       ['$const16.7']
    $18build_slice.8 = global(slice: <class 'slice'>) ['$18build_slice.8']
    $18build_slice.9 = call $18build_slice.8($const14.6, $const16.7, func=$18build_slice.8, args=(Var($const14.6, audio.py:1174), Var($const16.7, audio.py:1174)), kws=(), vararg=None, varkwarg=None, target=None) ['$18build_slice.8', '$18build_slice.9', '$const14.6', '$const16.7']
    y[$18build_slice.9] = $10call_function.4 ['$10call_function.4', '$18build_slice.9', 'y']
    $const22.10 = const(NoneType, None)      ['$const22.10']
    $24return_value.11 = cast(value=$const22.10) ['$24return_value.11', '$const22.10']
    return $24return_value.11                ['$24return_value.11']

2024-09-04 18:31:34,669 - ==== SSA block analysis pass on 0
2024-09-04 18:31:34,669 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024312E1BEB0>
2024-09-04 18:31:34,669 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:34,670 - on stmt: threshold = arg(1, name=threshold)
2024-09-04 18:31:34,670 - on stmt: zero_pos = arg(2, name=zero_pos)
2024-09-04 18:31:34,670 - on stmt: y = arg(3, name=y)
2024-09-04 18:31:34,670 - on stmt: $2load_global.0 = global(_zc_stencil: <numba.stencils.stencil.StencilFunc object at 0x0000024317F9FCD0>)
2024-09-04 18:31:34,670 - on stmt: $10call_function.4 = call $2load_global.0(x, threshold, zero_pos, func=$2load_global.0, args=[Var(x, audio.py:1158), Var(threshold, audio.py:1158), Var(zero_pos, audio.py:1158)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,670 - on stmt: $const14.6 = const(NoneType, None)
2024-09-04 18:31:34,670 - on stmt: $const16.7 = const(NoneType, None)
2024-09-04 18:31:34,670 - on stmt: $18build_slice.8 = global(slice: <class 'slice'>)
2024-09-04 18:31:34,670 - on stmt: $18build_slice.9 = call $18build_slice.8($const14.6, $const16.7, func=$18build_slice.8, args=(Var($const14.6, audio.py:1174), Var($const16.7, audio.py:1174)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,670 - on stmt: y[slice(None, None, None)] = $10call_function.4
2024-09-04 18:31:34,671 - on stmt: $const22.10 = const(NoneType, None)
2024-09-04 18:31:34,671 - on stmt: $24return_value.11 = cast(value=$const22.10)
2024-09-04 18:31:34,671 - on stmt: return $24return_value.11
2024-09-04 18:31:34,672 - defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x0000024312DA18A0>,
                                     0)],
             '$18build_slice.8': [(<numba.core.ir.Assign object at 0x0000024312DA1DE0>,
                                   0)],
             '$18build_slice.9': [(<numba.core.ir.Assign object at 0x0000024312DA1F00>,
                                   0)],
             '$24return_value.11': [(<numba.core.ir.Assign object at 0x0000024312DA22C0>,
                                     0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x0000024312DA1360>,
                                  0)],
             '$const14.6': [(<numba.core.ir.Assign object at 0x0000024312DA1AE0>,
                             0)],
             '$const16.7': [(<numba.core.ir.Assign object at 0x0000024312DA1C60>,
                             0)],
             '$const22.10': [(<numba.core.ir.Assign object at 0x0000024312DA2140>,
                              0)],
             'threshold': [(<numba.core.ir.Assign object at 0x0000024312DA0FA0>,
                            0)],
             'x': [(<numba.core.ir.Assign object at 0x0000024312DA0E80>, 0)],
             'y': [(<numba.core.ir.Assign object at 0x0000024312DA11E0>, 0)],
             'zero_pos': [(<numba.core.ir.Assign object at 0x0000024312DA10C0>,
                           0)]})
2024-09-04 18:31:34,672 - SSA violators <numba.core.utils.OrderedSet object at 0x0000024312E1BEB0>
2024-09-04 18:31:34,757 - bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=2)
           4	LOAD_ATTR(arg=0, lineno=2)
           6	STORE_FAST(arg=3, lineno=2)
           8	LOAD_GLOBAL(arg=1, lineno=3)
          10	LOAD_ATTR(arg=2, lineno=3)
          12	LOAD_FAST(arg=3, lineno=3)
          14	LOAD_GLOBAL(arg=1, lineno=3)
          16	LOAD_ATTR(arg=3, lineno=3)
          18	LOAD_CONST(arg=1, lineno=3)
          20	CALL_FUNCTION_KW(arg=2, lineno=3)
          22	STORE_FAST(arg=4, lineno=3)
          24	LOAD_CONST(arg=2, lineno=4)
          26	LOAD_FAST(arg=4, lineno=4)
          28	LOAD_CONST(arg=0, lineno=4)
          30	LOAD_CONST(arg=3, lineno=4)
          32	BUILD_SLICE(arg=2, lineno=4)
          34	STORE_SUBSCR(arg=None, lineno=4)
          36	LOAD_CONST(arg=2, lineno=5)
          38	LOAD_FAST(arg=4, lineno=5)
          40	LOAD_CONST(arg=2, lineno=5)
          42	LOAD_CONST(arg=0, lineno=5)
          44	BUILD_SLICE(arg=2, lineno=5)
          46	STORE_SUBSCR(arg=None, lineno=5)
          48	LOAD_GLOBAL(arg=4, lineno=6)
          50	LOAD_GLOBAL(arg=5, lineno=6)
          52	LOAD_CONST(arg=2, lineno=6)
          54	LOAD_CONST(arg=4, lineno=6)
          56	CALL_FUNCTION(arg=2, lineno=6)
          58	UNARY_NEGATIVE(arg=None, lineno=6)
          60	LOAD_FAST(arg=3, lineno=6)
          62	LOAD_CONST(arg=2, lineno=6)
          64	BINARY_SUBSCR(arg=None, lineno=6)
          66	LOAD_GLOBAL(arg=6, lineno=6)
          68	LOAD_CONST(arg=2, lineno=6)
          70	LOAD_CONST(arg=2, lineno=6)
          72	CALL_FUNCTION(arg=2, lineno=6)
          74	BINARY_SUBTRACT(arg=None, lineno=6)
          76	CALL_FUNCTION(arg=2, lineno=6)
          78	GET_ITER(arg=None, lineno=6)
>         80	FOR_ITER(arg=4, lineno=6)
          82	STORE_FAST(arg=5, lineno=6)
          84	LOAD_CONST(arg=2, lineno=7)
          86	STORE_FAST(arg=6, lineno=7)
          88	JUMP_ABSOLUTE(arg=41, lineno=7)
>         90	LOAD_FAST(arg=4, lineno=8)
          92	RETURN_VALUE(arg=None, lineno=8)
2024-09-04 18:31:34,757 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:34,757 - stack: []
2024-09-04 18:31:34,757 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:34,757 - dispatch pc=0, inst=NOP(arg=None, lineno=1)
2024-09-04 18:31:34,757 - stack []
2024-09-04 18:31:34,758 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2)
2024-09-04 18:31:34,758 - stack []
2024-09-04 18:31:34,758 - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2)
2024-09-04 18:31:34,758 - stack ['$x2.0']
2024-09-04 18:31:34,758 - dispatch pc=6, inst=STORE_FAST(arg=3, lineno=2)
2024-09-04 18:31:34,758 - stack ['$4load_attr.1']
2024-09-04 18:31:34,758 - dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=3)
2024-09-04 18:31:34,758 - stack []
2024-09-04 18:31:34,758 - dispatch pc=10, inst=LOAD_ATTR(arg=2, lineno=3)
2024-09-04 18:31:34,758 - stack ['$8load_global.2']
2024-09-04 18:31:34,758 - dispatch pc=12, inst=LOAD_FAST(arg=3, lineno=3)
2024-09-04 18:31:34,758 - stack ['$10load_attr.3']
2024-09-04 18:31:34,759 - dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=3)
2024-09-04 18:31:34,759 - stack ['$10load_attr.3', '$full_shape012.4']
2024-09-04 18:31:34,759 - dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=3)
2024-09-04 18:31:34,759 - stack ['$10load_attr.3', '$full_shape012.4', '$14load_global.5']
2024-09-04 18:31:34,759 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=3)
2024-09-04 18:31:34,759 - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6']
2024-09-04 18:31:34,759 - dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=3)
2024-09-04 18:31:34,759 - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6', '$const18.7']
2024-09-04 18:31:34,759 - dispatch pc=22, inst=STORE_FAST(arg=4, lineno=3)
2024-09-04 18:31:34,759 - stack ['$20call_function_kw.8']
2024-09-04 18:31:34,759 - dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=4)
2024-09-04 18:31:34,759 - stack []
2024-09-04 18:31:34,759 - dispatch pc=26, inst=LOAD_FAST(arg=4, lineno=4)
2024-09-04 18:31:34,760 - stack ['$const24.9']
2024-09-04 18:31:34,760 - dispatch pc=28, inst=LOAD_CONST(arg=0, lineno=4)
2024-09-04 18:31:34,760 - stack ['$const24.9', '$out026.10']
2024-09-04 18:31:34,760 - dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=4)
2024-09-04 18:31:34,760 - stack ['$const24.9', '$out026.10', '$const28.11']
2024-09-04 18:31:34,760 - dispatch pc=32, inst=BUILD_SLICE(arg=2, lineno=4)
2024-09-04 18:31:34,760 - stack ['$const24.9', '$out026.10', '$const28.11', '$const30.12']
2024-09-04 18:31:34,760 - dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=4)
2024-09-04 18:31:34,760 - stack ['$const24.9', '$out026.10', '$32build_slice.14']
2024-09-04 18:31:34,760 - dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=5)
2024-09-04 18:31:34,760 - stack []
2024-09-04 18:31:34,760 - dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=5)
2024-09-04 18:31:34,761 - stack ['$const36.15']
2024-09-04 18:31:34,761 - dispatch pc=40, inst=LOAD_CONST(arg=2, lineno=5)
2024-09-04 18:31:34,761 - stack ['$const36.15', '$out038.16']
2024-09-04 18:31:34,761 - dispatch pc=42, inst=LOAD_CONST(arg=0, lineno=5)
2024-09-04 18:31:34,761 - stack ['$const36.15', '$out038.16', '$const40.17']
2024-09-04 18:31:34,761 - dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=5)
2024-09-04 18:31:34,761 - stack ['$const36.15', '$out038.16', '$const40.17', '$const42.18']
2024-09-04 18:31:34,761 - dispatch pc=46, inst=STORE_SUBSCR(arg=None, lineno=5)
2024-09-04 18:31:34,761 - stack ['$const36.15', '$out038.16', '$44build_slice.20']
2024-09-04 18:31:34,761 - dispatch pc=48, inst=LOAD_GLOBAL(arg=4, lineno=6)
2024-09-04 18:31:34,761 - stack []
2024-09-04 18:31:34,761 - dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=6)
2024-09-04 18:31:34,761 - stack ['$48load_global.21']
2024-09-04 18:31:34,762 - dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:34,762 - stack ['$48load_global.21', '$50load_global.22']
2024-09-04 18:31:34,762 - dispatch pc=54, inst=LOAD_CONST(arg=4, lineno=6)
2024-09-04 18:31:34,762 - stack ['$48load_global.21', '$50load_global.22', '$const52.23']
2024-09-04 18:31:34,762 - dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:34,762 - stack ['$48load_global.21', '$50load_global.22', '$const52.23', '$const54.24']
2024-09-04 18:31:34,762 - dispatch pc=58, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2024-09-04 18:31:34,762 - stack ['$48load_global.21', '$56call_function.25']
2024-09-04 18:31:34,762 - dispatch pc=60, inst=LOAD_FAST(arg=3, lineno=6)
2024-09-04 18:31:34,762 - stack ['$48load_global.21', '$58unary_negative.26']
2024-09-04 18:31:34,762 - dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:34,762 - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27']
2024-09-04 18:31:34,762 - dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=6)
2024-09-04 18:31:34,763 - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27', '$const62.28']
2024-09-04 18:31:34,763 - dispatch pc=66, inst=LOAD_GLOBAL(arg=6, lineno=6)
2024-09-04 18:31:34,763 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29']
2024-09-04 18:31:34,763 - dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:34,763 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30']
2024-09-04 18:31:34,763 - dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:34,763 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31']
2024-09-04 18:31:34,763 - dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:34,763 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31', '$const70.32']
2024-09-04 18:31:34,763 - dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=6)
2024-09-04 18:31:34,763 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$72call_function.33']
2024-09-04 18:31:34,763 - dispatch pc=76, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:34,764 - stack ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34']
2024-09-04 18:31:34,764 - dispatch pc=78, inst=GET_ITER(arg=None, lineno=6)
2024-09-04 18:31:34,764 - stack ['$76call_function.35']
2024-09-04 18:31:34,764 - end state. edges=[Edge(pc=80, stack=('$78get_iter.36',), blockstack=(), npush=0)]
2024-09-04 18:31:34,764 - pending: deque([State(pc_initial=80 nstack_initial=1)])
2024-09-04 18:31:34,764 - stack: ['$phi80.0']
2024-09-04 18:31:34,764 - state.pc_initial: State(pc_initial=80 nstack_initial=1)
2024-09-04 18:31:34,764 - dispatch pc=80, inst=FOR_ITER(arg=4, lineno=6)
2024-09-04 18:31:34,764 - stack ['$phi80.0']
2024-09-04 18:31:34,764 - end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
2024-09-04 18:31:34,764 - pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=82 nstack_initial=2)])
2024-09-04 18:31:34,764 - stack: []
2024-09-04 18:31:34,765 - state.pc_initial: State(pc_initial=90 nstack_initial=0)
2024-09-04 18:31:34,765 - dispatch pc=90, inst=LOAD_FAST(arg=4, lineno=8)
2024-09-04 18:31:34,765 - stack []
2024-09-04 18:31:34,765 - dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=8)
2024-09-04 18:31:34,765 - stack ['$out090.0']
2024-09-04 18:31:34,765 - end state. edges=[]
2024-09-04 18:31:34,765 - pending: deque([State(pc_initial=82 nstack_initial=2)])
2024-09-04 18:31:34,765 - stack: ['$phi82.0', '$phi82.1']
2024-09-04 18:31:34,765 - state.pc_initial: State(pc_initial=82 nstack_initial=2)
2024-09-04 18:31:34,765 - dispatch pc=82, inst=STORE_FAST(arg=5, lineno=6)
2024-09-04 18:31:34,765 - stack ['$phi82.0', '$phi82.1']
2024-09-04 18:31:34,765 - dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=7)
2024-09-04 18:31:34,765 - stack ['$phi82.0']
2024-09-04 18:31:34,766 - dispatch pc=86, inst=STORE_FAST(arg=6, lineno=7)
2024-09-04 18:31:34,766 - stack ['$phi82.0', '$const84.2']
2024-09-04 18:31:34,766 - dispatch pc=88, inst=JUMP_ABSOLUTE(arg=41, lineno=7)
2024-09-04 18:31:34,766 - stack ['$phi82.0']
2024-09-04 18:31:34,766 - end state. edges=[Edge(pc=80, stack=('$phi82.0',), blockstack=(), npush=0)]
2024-09-04 18:31:34,766 - pending: deque([State(pc_initial=80 nstack_initial=1)])
2024-09-04 18:31:34,766 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:34,766 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=82 nstack_initial=2): {'$phi82.1'},
             State(pc_initial=90 nstack_initial=0): set()})
2024-09-04 18:31:34,766 - defmap: {'$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi82.1': State(pc_initial=80 nstack_initial=1)}
2024-09-04 18:31:34,766 - phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=2))},
             '$phi82.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:34,767 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:34,767 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:34,767 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:34,767 - keep phismap: {'$phi80.0': {('$78get_iter.36', State(pc_initial=0 nstack_initial=0))},
 '$phi82.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
2024-09-04 18:31:34,768 - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.36'},
             State(pc_initial=80 nstack_initial=1): {'$phi82.1': '$80for_iter.2'}})
2024-09-04 18:31:34,768 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:34,768 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_global.2'}), (10, {'item': '$8load_global.2', 'res': '$10load_attr.3'}), (12, {'res': '$full_shape012.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$10load_attr.3', 'args': ['$full_shape012.4', '$16load_attr.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$out026.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$const30.12'}), (32, {'start': '$const28.11', 'stop': '$const30.12', 'step': None, 'res': '$32build_slice.14', 'slicevar': '$32build_slice.13'}), (34, {'target': '$out026.10', 'index': '$32build_slice.14', 'value': '$const24.9'}), (36, {'res': '$const36.15'}), (38, {'res': '$out038.16'}), (40, {'res': '$const40.17'}), (42, {'res': '$const42.18'}), (44, {'start': '$const40.17', 'stop': '$const42.18', 'step': None, 'res': '$44build_slice.20', 'slicevar': '$44build_slice.19'}), (46, {'target': '$out038.16', 'index': '$44build_slice.20', 'value': '$const36.15'}), (48, {'res': '$48load_global.21'}), (50, {'res': '$50load_global.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$50load_global.22', 'args': ['$const52.23', '$const54.24'], 'res': '$56call_function.25'}), (58, {'value': '$56call_function.25', 'res': '$58unary_negative.26'}), (60, {'res': '$full_shape060.27'}), (62, {'res': '$const62.28'}), (64, {'index': '$const62.28', 'target': '$full_shape060.27', 'res': '$64binary_subscr.29'}), (66, {'res': '$66load_global.30'}), (68, {'res': '$const68.31'}), (70, {'res': '$const70.32'}), (72, {'func': '$66load_global.30', 'args': ['$const68.31', '$const70.32'], 'res': '$72call_function.33'}), (74, {'lhs': '$64binary_subscr.29', 'rhs': '$72call_function.33', 'res': '$74binary_subtract.34'}), (76, {'func': '$48load_global.21', 'args': ['$58unary_negative.26', '$74binary_subtract.34'], 'res': '$76call_function.35'}), (78, {'value': '$76call_function.35', 'res': '$78get_iter.36'})), outgoing_phis={'$phi80.0': '$78get_iter.36'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.36',)})
2024-09-04 18:31:34,768 - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi82.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 82: ('$phi80.0', '$80for_iter.2')})
2024-09-04 18:31:34,768 - block_infos State(pc_initial=82 nstack_initial=2):
AdaptBlockInfo(insts=((82, {'value': '$phi82.1'}), (84, {'res': '$const84.2'}), (86, {'value': '$const84.2'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi82.0',)})
2024-09-04 18:31:34,768 - block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$out090.0'}), (92, {'retval': '$out090.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:34,771 - label 0:
    x = arg(0, name=x)                       ['x']
    threshold = arg(1, name=threshold)       ['threshold']
    zero_pos = arg(2, name=zero_pos)         ['zero_pos']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $8load_global.2 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$8load_global.2']
    $10load_attr.3 = getattr(value=$8load_global.2, attr=empty) ['$10load_attr.3', '$8load_global.2']
    $14load_global.5 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=bool_) ['$14load_global.5', '$16load_attr.6']
    out0 = call $10load_attr.3(full_shape0, func=$10load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6, <string>:3))], vararg=None, varkwarg=None, target=None) ['$10load_attr.3', '$16load_attr.6', 'full_shape0', 'out0']
    $const24.9 = const(int, 0)               ['$const24.9']
    $const28.11 = const(NoneType, None)      ['$const28.11']
    $const30.12 = const(int, 1)              ['$const30.12']
    $32build_slice.13 = global(slice: <class 'slice'>) ['$32build_slice.13']
    $32build_slice.14 = call $32build_slice.13($const28.11, $const30.12, func=$32build_slice.13, args=(Var($const28.11, <string>:4), Var($const30.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$32build_slice.13', '$32build_slice.14', '$const28.11', '$const30.12']
    out0[$32build_slice.14] = $const24.9     ['$32build_slice.14', '$const24.9', 'out0']
    $const36.15 = const(int, 0)              ['$const36.15']
    $const40.17 = const(int, 0)              ['$const40.17']
    $const42.18 = const(NoneType, None)      ['$const42.18']
    $44build_slice.19 = global(slice: <class 'slice'>) ['$44build_slice.19']
    $44build_slice.20 = call $44build_slice.19($const40.17, $const42.18, func=$44build_slice.19, args=(Var($const40.17, <string>:5), Var($const42.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$44build_slice.19', '$44build_slice.20', '$const40.17', '$const42.18']
    out0[$44build_slice.20] = $const36.15    ['$44build_slice.20', '$const36.15', 'out0']
    $48load_global.21 = global(range: <class 'range'>) ['$48load_global.21']
    $50load_global.22 = global(min: <built-in function min>) ['$50load_global.22']
    $const52.23 = const(int, 0)              ['$const52.23']
    $const54.24 = const(int, -1)             ['$const54.24']
    $56call_function.25 = call $50load_global.22($const52.23, $const54.24, func=$50load_global.22, args=[Var($const52.23, <string>:6), Var($const54.24, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.22', '$56call_function.25', '$const52.23', '$const54.24']
    $58unary_negative.26 = unary(fn=<built-in function neg>, value=$56call_function.25) ['$56call_function.25', '$58unary_negative.26']
    $const62.28 = const(int, 0)              ['$const62.28']
    $64binary_subscr.29 = getitem(value=full_shape0, index=$const62.28, fn=<built-in function getitem>) ['$64binary_subscr.29', '$const62.28', 'full_shape0']
    $66load_global.30 = global(max: <built-in function max>) ['$66load_global.30']
    $const68.31 = const(int, 0)              ['$const68.31']
    $const70.32 = const(int, 0)              ['$const70.32']
    $72call_function.33 = call $66load_global.30($const68.31, $const70.32, func=$66load_global.30, args=[Var($const68.31, <string>:6), Var($const70.32, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.30', '$72call_function.33', '$const68.31', '$const70.32']
    $74binary_subtract.34 = $64binary_subscr.29 - $72call_function.33 ['$64binary_subscr.29', '$72call_function.33', '$74binary_subtract.34']
    $76call_function.35 = call $48load_global.21($58unary_negative.26, $74binary_subtract.34, func=$48load_global.21, args=[Var($58unary_negative.26, <string>:6), Var($74binary_subtract.34, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34', '$76call_function.35']
    $78get_iter.36 = getiter(value=$76call_function.35) ['$76call_function.35', '$78get_iter.36']
    $phi80.0 = $78get_iter.36                ['$78get_iter.36', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi82.1 = $80for_iter.2                 ['$80for_iter.2', '$phi82.1']
    branch $80for_iter.3, 82, 90             ['$80for_iter.3']
label 82:
    index00 = $phi82.1                       ['$phi82.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 80                                  []
label 90:
    $92return_value.1 = cast(value=out0)     ['$92return_value.1', 'out0']
    return $92return_value.1                 ['$92return_value.1']

2024-09-04 18:31:34,804 - ==== SSA block analysis pass on 0
2024-09-04 18:31:34,804 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024318F87A30>
2024-09-04 18:31:34,805 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:34,805 - on stmt: threshold = arg(1, name=threshold)
2024-09-04 18:31:34,805 - on stmt: zero_pos = arg(2, name=zero_pos)
2024-09-04 18:31:34,805 - on stmt: full_shape0 = getattr(value=x, attr=shape)
2024-09-04 18:31:34,805 - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,805 - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2024-09-04 18:31:34,805 - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,805 - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2024-09-04 18:31:34,805 - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,805 - on stmt: $const24.9.1 = const(int, 0)
2024-09-04 18:31:34,805 - on stmt: $const28.11.1 = const(NoneType, None)
2024-09-04 18:31:34,806 - on stmt: $const30.12.1 = const(int, 1)
2024-09-04 18:31:34,806 - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:34,806 - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,806 - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2024-09-04 18:31:34,806 - on stmt: $const36.15.1 = const(int, 0)
2024-09-04 18:31:34,806 - on stmt: $const40.17.1 = const(int, 0)
2024-09-04 18:31:34,806 - on stmt: $const42.18.1 = const(NoneType, None)
2024-09-04 18:31:34,806 - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:34,806 - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,806 - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2024-09-04 18:31:34,806 - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2024-09-04 18:31:34,807 - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2024-09-04 18:31:34,807 - on stmt: $const52.23.1 = const(int, 0)
2024-09-04 18:31:34,807 - on stmt: $const54.24.1 = const(int, -1)
2024-09-04 18:31:34,807 - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,807 - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2024-09-04 18:31:34,807 - on stmt: $const62.28.1 = const(int, 0)
2024-09-04 18:31:34,807 - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2024-09-04 18:31:34,807 - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2024-09-04 18:31:34,807 - on stmt: $const68.31.1 = const(int, 0)
2024-09-04 18:31:34,807 - on stmt: $const70.32.1 = const(int, 0)
2024-09-04 18:31:34,807 - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,808 - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2024-09-04 18:31:34,808 - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,808 - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2024-09-04 18:31:34,808 - on stmt: $phi80.0.1 = $78get_iter.36.1
2024-09-04 18:31:34,808 - on stmt: jump 80
2024-09-04 18:31:34,808 - ==== SSA block analysis pass on 80
2024-09-04 18:31:34,808 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024318F87A30>
2024-09-04 18:31:34,808 - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2024-09-04 18:31:34,808 - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2024-09-04 18:31:34,808 - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2024-09-04 18:31:34,808 - on stmt: $phi82.1.1 = $80for_iter.2.1
2024-09-04 18:31:34,808 - on stmt: branch $80for_iter.3.1, 82, 194
2024-09-04 18:31:34,809 - ==== SSA block analysis pass on 82
2024-09-04 18:31:34,809 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024318F87A30>
2024-09-04 18:31:34,809 - on stmt: index00 = $phi82.1.1
2024-09-04 18:31:34,809 - on stmt: jump 90
2024-09-04 18:31:34,809 - ==== SSA block analysis pass on 194
2024-09-04 18:31:34,809 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024318F87A30>
2024-09-04 18:31:34,809 - on stmt: $92return_value.1.1 = cast(value=out0)
2024-09-04 18:31:34,809 - on stmt: return $92return_value.1.1
2024-09-04 18:31:34,809 - ==== SSA block analysis pass on 90
2024-09-04 18:31:34,809 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024318F87A30>
2024-09-04 18:31:34,809 - on stmt: $const4.1 = const(int, 0)
2024-09-04 18:31:34,809 - on stmt: stencil_index = $const4.1 + index00
2024-09-04 18:31:34,810 - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:34,810 - on stmt: $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2024-09-04 18:31:34,810 - on stmt: $20compare_op.7 = $12unary_negative.4 <= x0
2024-09-04 18:31:34,810 - on stmt: bool22 = global(bool: <class 'bool'>)
2024-09-04 18:31:34,810 - on stmt: $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,810 - on stmt: $phi24.0 = x0
2024-09-04 18:31:34,810 - on stmt: branch $22pred, 91, 123
2024-09-04 18:31:34,810 - ==== SSA block analysis pass on 91
2024-09-04 18:31:34,810 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024318F87A30>
2024-09-04 18:31:34,810 - on stmt: $26compare_op.2 = x0 <= threshold
2024-09-04 18:31:34,810 - on stmt: bool28 = global(bool: <class 'bool'>)
2024-09-04 18:31:34,810 - on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,811 - on stmt: branch $28pred, 115, 127
2024-09-04 18:31:34,811 - ==== SSA block analysis pass on 115
2024-09-04 18:31:34,811 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024318F87A30>
2024-09-04 18:31:34,811 - on stmt: jump 121
2024-09-04 18:31:34,811 - ==== SSA block analysis pass on 123
2024-09-04 18:31:34,811 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024318F87A30>
2024-09-04 18:31:34,811 - on stmt: jump 127
2024-09-04 18:31:34,811 - ==== SSA block analysis pass on 121
2024-09-04 18:31:34,811 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024318F87A30>
2024-09-04 18:31:34,811 - on stmt: x0 = const(int, 0)
2024-09-04 18:31:34,811 - on stmt: jump 127
2024-09-04 18:31:34,811 - ==== SSA block analysis pass on 127
2024-09-04 18:31:34,811 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024318F87A30>
2024-09-04 18:31:34,811 - on stmt: $const42.1 = const(int, -1)
2024-09-04 18:31:34,812 - on stmt: stencil_index = $const42.1 + index00
2024-09-04 18:31:34,812 - on stmt: x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:34,812 - on stmt: $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2024-09-04 18:31:34,812 - on stmt: $58compare_op.7 = $50unary_negative.4 <= x1
2024-09-04 18:31:34,812 - on stmt: bool60 = global(bool: <class 'bool'>)
2024-09-04 18:31:34,812 - on stmt: $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,812 - on stmt: $phi62.0 = x1
2024-09-04 18:31:34,812 - on stmt: branch $60pred, 131, 161
2024-09-04 18:31:34,812 - ==== SSA block analysis pass on 131
2024-09-04 18:31:34,812 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024318F87A30>
2024-09-04 18:31:34,812 - on stmt: $64compare_op.2 = x1 <= threshold
2024-09-04 18:31:34,813 - on stmt: bool66 = global(bool: <class 'bool'>)
2024-09-04 18:31:34,813 - on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,813 - on stmt: branch $66pred, 153, 165
2024-09-04 18:31:34,813 - ==== SSA block analysis pass on 153
2024-09-04 18:31:34,813 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024318F87A30>
2024-09-04 18:31:34,813 - on stmt: jump 159
2024-09-04 18:31:34,813 - ==== SSA block analysis pass on 161
2024-09-04 18:31:34,813 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024318F87A30>
2024-09-04 18:31:34,813 - on stmt: jump 165
2024-09-04 18:31:34,813 - ==== SSA block analysis pass on 159
2024-09-04 18:31:34,814 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024318F87A30>
2024-09-04 18:31:34,814 - on stmt: x1 = const(int, 0)
2024-09-04 18:31:34,814 - on stmt: jump 165
2024-09-04 18:31:34,814 - ==== SSA block analysis pass on 165
2024-09-04 18:31:34,814 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024318F87A30>
2024-09-04 18:31:34,814 - on stmt: bool80 = global(bool: <class 'bool'>)
2024-09-04 18:31:34,814 - on stmt: $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,814 - on stmt: branch $80pred, 169, 173
2024-09-04 18:31:34,814 - ==== SSA block analysis pass on 169
2024-09-04 18:31:34,814 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024318F87A30>
2024-09-04 18:31:34,814 - on stmt: $82load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,814 - on stmt: $84load_method.1 = getattr(value=$82load_global.0, attr=signbit)
2024-09-04 18:31:34,814 - on stmt: $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,815 - on stmt: $90load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,815 - on stmt: $92load_method.5 = getattr(value=$90load_global.4, attr=signbit)
2024-09-04 18:31:34,815 - on stmt: $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,815 - on stmt: $98compare_op.8 = $88call_method.3 != $96call_method.7
2024-09-04 18:31:34,815 - on stmt: $100return_value.9 = cast(value=$98compare_op.8)
2024-09-04 18:31:34,815 - on stmt: out0[index00] = $100return_value.9
2024-09-04 18:31:34,815 - on stmt: jump 193
2024-09-04 18:31:34,815 - ==== SSA block analysis pass on 173
2024-09-04 18:31:34,816 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024318F87A30>
2024-09-04 18:31:34,816 - on stmt: $102load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,816 - on stmt: $104load_method.1 = getattr(value=$102load_global.0, attr=sign)
2024-09-04 18:31:34,816 - on stmt: $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,816 - on stmt: $110load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,816 - on stmt: $112load_method.5 = getattr(value=$110load_global.4, attr=sign)
2024-09-04 18:31:34,816 - on stmt: $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,816 - on stmt: $118compare_op.8 = $108call_method.3 != $116call_method.7
2024-09-04 18:31:34,816 - on stmt: $120return_value.9 = cast(value=$118compare_op.8)
2024-09-04 18:31:34,816 - on stmt: out0[index00] = $120return_value.9
2024-09-04 18:31:34,816 - on stmt: jump 193
2024-09-04 18:31:34,817 - ==== SSA block analysis pass on 193
2024-09-04 18:31:34,817 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024318F87A30>
2024-09-04 18:31:34,817 - on stmt: jump 80
2024-09-04 18:31:34,820 - defs defaultdict(<class 'list'>,
            {'$100return_value.9': [(<numba.core.ir.Assign object at 0x0000024318FD5F90>,
                                     169)],
             '$102load_global.0': [(<numba.core.ir.Assign object at 0x0000024318FCA380>,
                                    173)],
             '$104load_method.1': [(<numba.core.ir.Assign object at 0x0000024318FCA560>,
                                    173)],
             '$108call_method.3': [(<numba.core.ir.Assign object at 0x0000024318FBC250>,
                                    173)],
             '$10load_attr.3.1': [(<numba.core.ir.Assign object at 0x0000024318FAAF20>,
                                   0)],
             '$110load_global.4': [(<numba.core.ir.Assign object at 0x0000024318FBC430>,
                                    173)],
             '$112load_method.5': [(<numba.core.ir.Assign object at 0x0000024318FBF910>,
                                    173)],
             '$116call_method.7': [(<numba.core.ir.Assign object at 0x0000024318FB52D0>,
                                    173)],
             '$118compare_op.8': [(<numba.core.ir.Assign object at 0x0000024318FB54B0>,
                                   173)],
             '$120return_value.9': [(<numba.core.ir.Assign object at 0x0000024318FB6F80>,
                                     173)],
             '$12unary_negative.4': [(<numba.core.ir.Assign object at 0x000002431D20F7C0>,
                                      90)],
             '$14load_global.5.1': [(<numba.core.ir.Assign object at 0x0000024318FAAC80>,
                                     0)],
             '$16load_attr.6.1': [(<numba.core.ir.Assign object at 0x0000024318FAAB00>,
                                   0)],
             '$20compare_op.7': [(<numba.core.ir.Assign object at 0x000002431D20F9A0>,
                                  90)],
             '$22pred': [(<numba.core.ir.Assign object at 0x000002431D1F89D0>,
                          90)],
             '$26compare_op.2': [(<numba.core.ir.Assign object at 0x000002431D1E8CA0>,
                                  91)],
             '$28pred': [(<numba.core.ir.Assign object at 0x000002431D1EAB00>,
                          91)],
             '$32build_slice.13.1': [(<numba.core.ir.Assign object at 0x0000024318F98280>,
                                      0)],
             '$32build_slice.14.1': [(<numba.core.ir.Assign object at 0x0000024318F983A0>,
                                      0)],
             '$44build_slice.19.1': [(<numba.core.ir.Assign object at 0x0000024318F98B80>,
                                      0)],
             '$44build_slice.20.1': [(<numba.core.ir.Assign object at 0x0000024318F98CA0>,
                                      0)],
             '$48load_global.21.1': [(<numba.core.ir.Assign object at 0x0000024318F98EE0>,
                                      0)],
             '$50load_global.22.1': [(<numba.core.ir.Assign object at 0x0000024318F99060>,
                                      0)],
             '$50unary_negative.4': [(<numba.core.ir.Assign object at 0x000002431D1C9EA0>,
                                      127)],
             '$56call_function.25.1': [(<numba.core.ir.Assign object at 0x0000024318F99540>,
                                        0)],
             '$58compare_op.7': [(<numba.core.ir.Assign object at 0x000002431D1CA080>,
                                  127)],
             '$58unary_negative.26.1': [(<numba.core.ir.Assign object at 0x0000024318F99660>,
                                         0)],
             '$60pred': [(<numba.core.ir.Assign object at 0x000002431D1C7070>,
                          127)],
             '$64binary_subscr.29.1': [(<numba.core.ir.Assign object at 0x0000024318F99AB0>,
                                        0)],
             '$64compare_op.2': [(<numba.core.ir.Assign object at 0x000002431D183400>,
                                  131)],
             '$66load_global.30.1': [(<numba.core.ir.Assign object at 0x0000024318F99C00>,
                                      0)],
             '$66pred': [(<numba.core.ir.Assign object at 0x000002431D1B91E0>,
                          131)],
             '$72call_function.33.1': [(<numba.core.ir.Assign object at 0x0000024318F9A0E0>,
                                        0)],
             '$74binary_subtract.34.1': [(<numba.core.ir.Assign object at 0x0000024318F9A230>,
                                          0)],
             '$76call_function.35.1': [(<numba.core.ir.Assign object at 0x0000024318F9A3E0>,
                                        0)],
             '$78get_iter.36.1': [(<numba.core.ir.Assign object at 0x0000024318F9A500>,
                                   0)],
             '$80for_iter.1.1': [(<numba.core.ir.Assign object at 0x0000024318F9A5F0>,
                                  80)],
             '$80for_iter.2.1': [(<numba.core.ir.Assign object at 0x0000024318F9A710>,
                                  80)],
             '$80for_iter.3.1': [(<numba.core.ir.Assign object at 0x0000024318F9A830>,
                                  80)],
             '$80pred': [(<numba.core.ir.Assign object at 0x000002431D18E980>,
                          165)],
             '$82load_global.0': [(<numba.core.ir.Assign object at 0x0000024318F15210>,
                                   169)],
             '$84load_method.1': [(<numba.core.ir.Assign object at 0x0000024318F15630>,
                                   169)],
             '$88call_method.3': [(<numba.core.ir.Assign object at 0x0000024318F17220>,
                                   169)],
             '$8load_global.2.1': [(<numba.core.ir.Assign object at 0x0000024318FAB1F0>,
                                    0)],
             '$90load_global.4': [(<numba.core.ir.Assign object at 0x0000024318F17400>,
                                   169)],
             '$92load_method.5': [(<numba.core.ir.Assign object at 0x0000024318FDE920>,
                                   169)],
             '$92return_value.1.1': [(<numba.core.ir.Assign object at 0x0000024318F9B160>,
                                      194)],
             '$96call_method.7': [(<numba.core.ir.Assign object at 0x0000024318FD42E0>,
                                   169)],
             '$98compare_op.8': [(<numba.core.ir.Assign object at 0x0000024318FD44C0>,
                                  169)],
             '$const24.9.1': [(<numba.core.ir.Assign object at 0x0000024318FAA2F0>,
                               0)],
             '$const28.11.1': [(<numba.core.ir.Assign object at 0x0000024318FABF40>,
                                0)],
             '$const30.12.1': [(<numba.core.ir.Assign object at 0x0000024318F98100>,
                                0)],
             '$const36.15.1': [(<numba.core.ir.Assign object at 0x0000024318F985E0>,
                                0)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x000002431D20CC10>,
                            90)],
             '$const40.17.1': [(<numba.core.ir.Assign object at 0x0000024318F98880>,
                                0)],
             '$const42.1': [(<numba.core.ir.Assign object at 0x000002431D1C8040>,
                             127)],
             '$const42.18.1': [(<numba.core.ir.Assign object at 0x0000024318F98A00>,
                                0)],
             '$const52.23.1': [(<numba.core.ir.Assign object at 0x0000024318F991E0>,
                                0)],
             '$const54.24.1': [(<numba.core.ir.Assign object at 0x0000024318F99360>,
                                0)],
             '$const62.28.1': [(<numba.core.ir.Assign object at 0x0000024318F99900>,
                                0)],
             '$const68.31.1': [(<numba.core.ir.Assign object at 0x0000024318F99D80>,
                                0)],
             '$const70.32.1': [(<numba.core.ir.Assign object at 0x0000024318F99F00>,
                                0)],
             '$phi24.0': [(<numba.core.ir.Assign object at 0x000002431D1FA350>,
                           90)],
             '$phi62.0': [(<numba.core.ir.Assign object at 0x000002431D1A8A30>,
                           127)],
             '$phi80.0.1': [(<numba.core.ir.Assign object at 0x0000024318FAB580>,
                             0)],
             '$phi82.1.1': [(<numba.core.ir.Assign object at 0x0000024318F99780>,
                             80)],
             'bool22': [(<numba.core.ir.Assign object at 0x000002431D205480>,
                         90)],
             'bool28': [(<numba.core.ir.Assign object at 0x000002431D1E8E20>,
                         91)],
             'bool60': [(<numba.core.ir.Assign object at 0x000002431D1CBB20>,
                         127)],
             'bool66': [(<numba.core.ir.Assign object at 0x000002431D183370>,
                         131)],
             'bool80': [(<numba.core.ir.Assign object at 0x000002431D18E710>,
                         165)],
             'full_shape0': [(<numba.core.ir.Assign object at 0x0000024318FAB490>,
                              0)],
             'index00': [(<numba.core.ir.Assign object at 0x0000024318F9AB00>,
                          82)],
             'out0': [(<numba.core.ir.Assign object at 0x0000024318FAA4D0>, 0)],
             'stencil_index': [(<numba.core.ir.Assign object at 0x0000024318FA9DE0>,
                                90),
                               (<numba.core.ir.Assign object at 0x0000024318FA9F90>,
                                127)],
             'threshold': [(<numba.core.ir.Assign object at 0x0000024318FAB850>,
                            0)],
             'x': [(<numba.core.ir.Assign object at 0x0000024318FAB970>, 0)],
             'x0': [(<numba.core.ir.Assign object at 0x0000024318FA9EA0>, 90),
                    (<numba.core.ir.Assign object at 0x000002431D1D0A00>, 121)],
             'x1': [(<numba.core.ir.Assign object at 0x0000024318FAA050>, 127),
                    (<numba.core.ir.Assign object at 0x000002431D1B70A0>, 159)],
             'zero_pos': [(<numba.core.ir.Assign object at 0x0000024318FAB730>,
                           0)]})
2024-09-04 18:31:34,821 - SSA violators <numba.core.utils.OrderedSet object at 0x000002431D1A0340>
2024-09-04 18:31:34,821 - Fix SSA violator on var stencil_index
2024-09-04 18:31:34,821 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:34,821 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F87520>
2024-09-04 18:31:34,821 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:34,821 - on stmt: threshold = arg(1, name=threshold)
2024-09-04 18:31:34,822 - on stmt: zero_pos = arg(2, name=zero_pos)
2024-09-04 18:31:34,822 - on stmt: full_shape0 = getattr(value=x, attr=shape)
2024-09-04 18:31:34,822 - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,822 - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2024-09-04 18:31:34,822 - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,822 - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2024-09-04 18:31:34,822 - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,822 - on stmt: $const24.9.1 = const(int, 0)
2024-09-04 18:31:34,822 - on stmt: $const28.11.1 = const(NoneType, None)
2024-09-04 18:31:34,822 - on stmt: $const30.12.1 = const(int, 1)
2024-09-04 18:31:34,822 - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:34,822 - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,823 - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2024-09-04 18:31:34,823 - on stmt: $const36.15.1 = const(int, 0)
2024-09-04 18:31:34,823 - on stmt: $const40.17.1 = const(int, 0)
2024-09-04 18:31:34,823 - on stmt: $const42.18.1 = const(NoneType, None)
2024-09-04 18:31:34,823 - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:34,823 - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,823 - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2024-09-04 18:31:34,823 - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2024-09-04 18:31:34,823 - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2024-09-04 18:31:34,823 - on stmt: $const52.23.1 = const(int, 0)
2024-09-04 18:31:34,823 - on stmt: $const54.24.1 = const(int, -1)
2024-09-04 18:31:34,823 - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,823 - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2024-09-04 18:31:34,824 - on stmt: $const62.28.1 = const(int, 0)
2024-09-04 18:31:34,824 - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2024-09-04 18:31:34,824 - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2024-09-04 18:31:34,824 - on stmt: $const68.31.1 = const(int, 0)
2024-09-04 18:31:34,824 - on stmt: $const70.32.1 = const(int, 0)
2024-09-04 18:31:34,824 - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,824 - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2024-09-04 18:31:34,824 - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,824 - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2024-09-04 18:31:34,824 - on stmt: $phi80.0.1 = $78get_iter.36.1
2024-09-04 18:31:34,824 - on stmt: jump 80
2024-09-04 18:31:34,824 - ==== SSA block rewrite pass on 80
2024-09-04 18:31:34,824 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F87520>
2024-09-04 18:31:34,825 - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2024-09-04 18:31:34,825 - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2024-09-04 18:31:34,825 - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2024-09-04 18:31:34,825 - on stmt: $phi82.1.1 = $80for_iter.2.1
2024-09-04 18:31:34,825 - on stmt: branch $80for_iter.3.1, 82, 194
2024-09-04 18:31:34,825 - ==== SSA block rewrite pass on 82
2024-09-04 18:31:34,825 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F87520>
2024-09-04 18:31:34,825 - on stmt: index00 = $phi82.1.1
2024-09-04 18:31:34,825 - on stmt: jump 90
2024-09-04 18:31:34,825 - ==== SSA block rewrite pass on 194
2024-09-04 18:31:34,825 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F87520>
2024-09-04 18:31:34,825 - on stmt: $92return_value.1.1 = cast(value=out0)
2024-09-04 18:31:34,825 - on stmt: return $92return_value.1.1
2024-09-04 18:31:34,825 - ==== SSA block rewrite pass on 90
2024-09-04 18:31:34,825 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F87520>
2024-09-04 18:31:34,826 - on stmt: $const4.1 = const(int, 0)
2024-09-04 18:31:34,826 - on stmt: stencil_index = $const4.1 + index00
2024-09-04 18:31:34,826 - first assign: stencil_index
2024-09-04 18:31:34,826 - replaced with: stencil_index = $const4.1 + index00
2024-09-04 18:31:34,826 - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:34,826 - on stmt: $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2024-09-04 18:31:34,826 - on stmt: $20compare_op.7 = $12unary_negative.4 <= x0
2024-09-04 18:31:34,826 - on stmt: bool22 = global(bool: <class 'bool'>)
2024-09-04 18:31:34,826 - on stmt: $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,826 - on stmt: $phi24.0 = x0
2024-09-04 18:31:34,826 - on stmt: branch $22pred, 91, 123
2024-09-04 18:31:34,826 - ==== SSA block rewrite pass on 91
2024-09-04 18:31:34,827 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F87520>
2024-09-04 18:31:34,827 - on stmt: $26compare_op.2 = x0 <= threshold
2024-09-04 18:31:34,827 - on stmt: bool28 = global(bool: <class 'bool'>)
2024-09-04 18:31:34,827 - on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,827 - on stmt: branch $28pred, 115, 127
2024-09-04 18:31:34,827 - ==== SSA block rewrite pass on 115
2024-09-04 18:31:34,827 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F87520>
2024-09-04 18:31:34,827 - on stmt: jump 121
2024-09-04 18:31:34,827 - ==== SSA block rewrite pass on 123
2024-09-04 18:31:34,827 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F87520>
2024-09-04 18:31:34,827 - on stmt: jump 127
2024-09-04 18:31:34,827 - ==== SSA block rewrite pass on 121
2024-09-04 18:31:34,827 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F87520>
2024-09-04 18:31:34,827 - on stmt: x0 = const(int, 0)
2024-09-04 18:31:34,828 - on stmt: jump 127
2024-09-04 18:31:34,828 - ==== SSA block rewrite pass on 127
2024-09-04 18:31:34,828 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F87520>
2024-09-04 18:31:34,828 - on stmt: $const42.1 = const(int, -1)
2024-09-04 18:31:34,828 - on stmt: stencil_index = $const42.1 + index00
2024-09-04 18:31:34,839 - replaced with: stencil_index.1 = $const42.1 + index00
2024-09-04 18:31:34,839 - on stmt: x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:34,839 - on stmt: $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2024-09-04 18:31:34,839 - on stmt: $58compare_op.7 = $50unary_negative.4 <= x1
2024-09-04 18:31:34,839 - on stmt: bool60 = global(bool: <class 'bool'>)
2024-09-04 18:31:34,839 - on stmt: $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,839 - on stmt: $phi62.0 = x1
2024-09-04 18:31:34,839 - on stmt: branch $60pred, 131, 161
2024-09-04 18:31:34,840 - ==== SSA block rewrite pass on 131
2024-09-04 18:31:34,840 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F87520>
2024-09-04 18:31:34,840 - on stmt: $64compare_op.2 = x1 <= threshold
2024-09-04 18:31:34,840 - on stmt: bool66 = global(bool: <class 'bool'>)
2024-09-04 18:31:34,840 - on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,840 - on stmt: branch $66pred, 153, 165
2024-09-04 18:31:34,840 - ==== SSA block rewrite pass on 153
2024-09-04 18:31:34,840 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F87520>
2024-09-04 18:31:34,840 - on stmt: jump 159
2024-09-04 18:31:34,840 - ==== SSA block rewrite pass on 161
2024-09-04 18:31:34,840 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F87520>
2024-09-04 18:31:34,840 - on stmt: jump 165
2024-09-04 18:31:34,840 - ==== SSA block rewrite pass on 159
2024-09-04 18:31:34,841 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F87520>
2024-09-04 18:31:34,841 - on stmt: x1 = const(int, 0)
2024-09-04 18:31:34,841 - on stmt: jump 165
2024-09-04 18:31:34,841 - ==== SSA block rewrite pass on 165
2024-09-04 18:31:34,841 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F87520>
2024-09-04 18:31:34,841 - on stmt: bool80 = global(bool: <class 'bool'>)
2024-09-04 18:31:34,841 - on stmt: $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,841 - on stmt: branch $80pred, 169, 173
2024-09-04 18:31:34,841 - ==== SSA block rewrite pass on 169
2024-09-04 18:31:34,841 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F87520>
2024-09-04 18:31:34,841 - on stmt: $82load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,841 - on stmt: $84load_method.1 = getattr(value=$82load_global.0, attr=signbit)
2024-09-04 18:31:34,841 - on stmt: $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,842 - on stmt: $90load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,842 - on stmt: $92load_method.5 = getattr(value=$90load_global.4, attr=signbit)
2024-09-04 18:31:34,842 - on stmt: $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,842 - on stmt: $98compare_op.8 = $88call_method.3 != $96call_method.7
2024-09-04 18:31:34,842 - on stmt: $100return_value.9 = cast(value=$98compare_op.8)
2024-09-04 18:31:34,842 - on stmt: out0[index00] = $100return_value.9
2024-09-04 18:31:34,842 - on stmt: jump 193
2024-09-04 18:31:34,842 - ==== SSA block rewrite pass on 173
2024-09-04 18:31:34,842 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F87520>
2024-09-04 18:31:34,842 - on stmt: $102load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,842 - on stmt: $104load_method.1 = getattr(value=$102load_global.0, attr=sign)
2024-09-04 18:31:34,842 - on stmt: $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,843 - on stmt: $110load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,843 - on stmt: $112load_method.5 = getattr(value=$110load_global.4, attr=sign)
2024-09-04 18:31:34,843 - on stmt: $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,843 - on stmt: $118compare_op.8 = $108call_method.3 != $116call_method.7
2024-09-04 18:31:34,843 - on stmt: $120return_value.9 = cast(value=$118compare_op.8)
2024-09-04 18:31:34,843 - on stmt: out0[index00] = $120return_value.9
2024-09-04 18:31:34,843 - on stmt: jump 193
2024-09-04 18:31:34,843 - ==== SSA block rewrite pass on 193
2024-09-04 18:31:34,843 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F87520>
2024-09-04 18:31:34,843 - on stmt: jump 80
2024-09-04 18:31:34,843 - Replaced assignments: defaultdict(<class 'list'>,
            {90: [<numba.core.ir.Assign object at 0x0000024318F86410>],
             127: [<numba.core.ir.Assign object at 0x0000024318F86CE0>]})
2024-09-04 18:31:34,844 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:34,844 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F87520>
2024-09-04 18:31:34,844 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:34,844 - on stmt: threshold = arg(1, name=threshold)
2024-09-04 18:31:34,844 - on stmt: zero_pos = arg(2, name=zero_pos)
2024-09-04 18:31:34,844 - on stmt: full_shape0 = getattr(value=x, attr=shape)
2024-09-04 18:31:34,844 - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,844 - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2024-09-04 18:31:34,844 - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,844 - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2024-09-04 18:31:34,844 - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,845 - on stmt: $const24.9.1 = const(int, 0)
2024-09-04 18:31:34,845 - on stmt: $const28.11.1 = const(NoneType, None)
2024-09-04 18:31:34,845 - on stmt: $const30.12.1 = const(int, 1)
2024-09-04 18:31:34,845 - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:34,845 - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,845 - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2024-09-04 18:31:34,845 - on stmt: $const36.15.1 = const(int, 0)
2024-09-04 18:31:34,845 - on stmt: $const40.17.1 = const(int, 0)
2024-09-04 18:31:34,845 - on stmt: $const42.18.1 = const(NoneType, None)
2024-09-04 18:31:34,845 - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:34,845 - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,846 - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2024-09-04 18:31:34,846 - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2024-09-04 18:31:34,846 - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2024-09-04 18:31:34,846 - on stmt: $const52.23.1 = const(int, 0)
2024-09-04 18:31:34,846 - on stmt: $const54.24.1 = const(int, -1)
2024-09-04 18:31:34,846 - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,846 - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2024-09-04 18:31:34,846 - on stmt: $const62.28.1 = const(int, 0)
2024-09-04 18:31:34,846 - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2024-09-04 18:31:34,846 - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2024-09-04 18:31:34,846 - on stmt: $const68.31.1 = const(int, 0)
2024-09-04 18:31:34,847 - on stmt: $const70.32.1 = const(int, 0)
2024-09-04 18:31:34,847 - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,847 - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2024-09-04 18:31:34,847 - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,847 - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2024-09-04 18:31:34,847 - on stmt: $phi80.0.1 = $78get_iter.36.1
2024-09-04 18:31:34,847 - on stmt: jump 80
2024-09-04 18:31:34,848 - ==== SSA block rewrite pass on 80
2024-09-04 18:31:34,848 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F87520>
2024-09-04 18:31:34,848 - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2024-09-04 18:31:34,848 - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2024-09-04 18:31:34,848 - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2024-09-04 18:31:34,848 - on stmt: $phi82.1.1 = $80for_iter.2.1
2024-09-04 18:31:34,848 - on stmt: branch $80for_iter.3.1, 82, 194
2024-09-04 18:31:34,848 - ==== SSA block rewrite pass on 82
2024-09-04 18:31:34,848 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F87520>
2024-09-04 18:31:34,848 - on stmt: index00 = $phi82.1.1
2024-09-04 18:31:34,848 - on stmt: jump 90
2024-09-04 18:31:34,848 - ==== SSA block rewrite pass on 194
2024-09-04 18:31:34,849 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F87520>
2024-09-04 18:31:34,849 - on stmt: $92return_value.1.1 = cast(value=out0)
2024-09-04 18:31:34,849 - on stmt: return $92return_value.1.1
2024-09-04 18:31:34,849 - ==== SSA block rewrite pass on 90
2024-09-04 18:31:34,849 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F87520>
2024-09-04 18:31:34,849 - on stmt: $const4.1 = const(int, 0)
2024-09-04 18:31:34,849 - on stmt: stencil_index = $const4.1 + index00
2024-09-04 18:31:34,849 - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:34,849 - find_def var='stencil_index' stmt=x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:34,849 - on stmt: $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2024-09-04 18:31:34,849 - on stmt: $20compare_op.7 = $12unary_negative.4 <= x0
2024-09-04 18:31:34,849 - on stmt: bool22 = global(bool: <class 'bool'>)
2024-09-04 18:31:34,850 - on stmt: $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,850 - on stmt: $phi24.0 = x0
2024-09-04 18:31:34,850 - on stmt: branch $22pred, 91, 123
2024-09-04 18:31:34,850 - ==== SSA block rewrite pass on 91
2024-09-04 18:31:34,850 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F87520>
2024-09-04 18:31:34,850 - on stmt: $26compare_op.2 = x0 <= threshold
2024-09-04 18:31:34,850 - on stmt: bool28 = global(bool: <class 'bool'>)
2024-09-04 18:31:34,850 - on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,850 - on stmt: branch $28pred, 115, 127
2024-09-04 18:31:34,850 - ==== SSA block rewrite pass on 115
2024-09-04 18:31:34,850 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F87520>
2024-09-04 18:31:34,850 - on stmt: jump 121
2024-09-04 18:31:34,850 - ==== SSA block rewrite pass on 123
2024-09-04 18:31:34,850 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F87520>
2024-09-04 18:31:34,850 - on stmt: jump 127
2024-09-04 18:31:34,851 - ==== SSA block rewrite pass on 121
2024-09-04 18:31:34,851 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F87520>
2024-09-04 18:31:34,851 - on stmt: x0 = const(int, 0)
2024-09-04 18:31:34,851 - on stmt: jump 127
2024-09-04 18:31:34,851 - ==== SSA block rewrite pass on 127
2024-09-04 18:31:34,851 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F87520>
2024-09-04 18:31:34,851 - on stmt: $const42.1 = const(int, -1)
2024-09-04 18:31:34,851 - on stmt: stencil_index.1 = $const42.1 + index00
2024-09-04 18:31:34,851 - on stmt: x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:34,851 - find_def var='stencil_index' stmt=x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:34,851 - replaced with: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2024-09-04 18:31:34,851 - on stmt: $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2024-09-04 18:31:34,852 - on stmt: $58compare_op.7 = $50unary_negative.4 <= x1
2024-09-04 18:31:34,852 - on stmt: bool60 = global(bool: <class 'bool'>)
2024-09-04 18:31:34,852 - on stmt: $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,852 - on stmt: $phi62.0 = x1
2024-09-04 18:31:34,852 - on stmt: branch $60pred, 131, 161
2024-09-04 18:31:34,852 - ==== SSA block rewrite pass on 131
2024-09-04 18:31:34,852 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F87520>
2024-09-04 18:31:34,852 - on stmt: $64compare_op.2 = x1 <= threshold
2024-09-04 18:31:34,852 - on stmt: bool66 = global(bool: <class 'bool'>)
2024-09-04 18:31:34,852 - on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,852 - on stmt: branch $66pred, 153, 165
2024-09-04 18:31:34,853 - ==== SSA block rewrite pass on 153
2024-09-04 18:31:34,853 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F87520>
2024-09-04 18:31:34,853 - on stmt: jump 159
2024-09-04 18:31:34,853 - ==== SSA block rewrite pass on 161
2024-09-04 18:31:34,853 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F87520>
2024-09-04 18:31:34,853 - on stmt: jump 165
2024-09-04 18:31:34,853 - ==== SSA block rewrite pass on 159
2024-09-04 18:31:34,853 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F87520>
2024-09-04 18:31:34,853 - on stmt: x1 = const(int, 0)
2024-09-04 18:31:34,853 - on stmt: jump 165
2024-09-04 18:31:34,853 - ==== SSA block rewrite pass on 165
2024-09-04 18:31:34,853 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F87520>
2024-09-04 18:31:34,853 - on stmt: bool80 = global(bool: <class 'bool'>)
2024-09-04 18:31:34,853 - on stmt: $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,854 - on stmt: branch $80pred, 169, 173
2024-09-04 18:31:34,854 - ==== SSA block rewrite pass on 169
2024-09-04 18:31:34,854 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F87520>
2024-09-04 18:31:34,854 - on stmt: $82load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,854 - on stmt: $84load_method.1 = getattr(value=$82load_global.0, attr=signbit)
2024-09-04 18:31:34,854 - on stmt: $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,854 - on stmt: $90load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,854 - on stmt: $92load_method.5 = getattr(value=$90load_global.4, attr=signbit)
2024-09-04 18:31:34,854 - on stmt: $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,854 - on stmt: $98compare_op.8 = $88call_method.3 != $96call_method.7
2024-09-04 18:31:34,854 - on stmt: $100return_value.9 = cast(value=$98compare_op.8)
2024-09-04 18:31:34,855 - on stmt: out0[index00] = $100return_value.9
2024-09-04 18:31:34,855 - on stmt: jump 193
2024-09-04 18:31:34,855 - ==== SSA block rewrite pass on 173
2024-09-04 18:31:34,855 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F87520>
2024-09-04 18:31:34,855 - on stmt: $102load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,855 - on stmt: $104load_method.1 = getattr(value=$102load_global.0, attr=sign)
2024-09-04 18:31:34,855 - on stmt: $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,855 - on stmt: $110load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,855 - on stmt: $112load_method.5 = getattr(value=$110load_global.4, attr=sign)
2024-09-04 18:31:34,855 - on stmt: $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,855 - on stmt: $118compare_op.8 = $108call_method.3 != $116call_method.7
2024-09-04 18:31:34,856 - on stmt: $120return_value.9 = cast(value=$118compare_op.8)
2024-09-04 18:31:34,856 - on stmt: out0[index00] = $120return_value.9
2024-09-04 18:31:34,856 - on stmt: jump 193
2024-09-04 18:31:34,856 - ==== SSA block rewrite pass on 193
2024-09-04 18:31:34,856 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F87520>
2024-09-04 18:31:34,856 - on stmt: jump 80
2024-09-04 18:31:34,856 - Fix SSA violator on var x0
2024-09-04 18:31:34,856 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:34,856 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F86830>
2024-09-04 18:31:34,856 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:34,856 - on stmt: threshold = arg(1, name=threshold)
2024-09-04 18:31:34,856 - on stmt: zero_pos = arg(2, name=zero_pos)
2024-09-04 18:31:34,856 - on stmt: full_shape0 = getattr(value=x, attr=shape)
2024-09-04 18:31:34,857 - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,857 - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2024-09-04 18:31:34,857 - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,857 - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2024-09-04 18:31:34,857 - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,857 - on stmt: $const24.9.1 = const(int, 0)
2024-09-04 18:31:34,857 - on stmt: $const28.11.1 = const(NoneType, None)
2024-09-04 18:31:34,857 - on stmt: $const30.12.1 = const(int, 1)
2024-09-04 18:31:34,857 - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:34,857 - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,857 - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2024-09-04 18:31:34,857 - on stmt: $const36.15.1 = const(int, 0)
2024-09-04 18:31:34,857 - on stmt: $const40.17.1 = const(int, 0)
2024-09-04 18:31:34,858 - on stmt: $const42.18.1 = const(NoneType, None)
2024-09-04 18:31:34,858 - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:34,858 - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,858 - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2024-09-04 18:31:34,858 - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2024-09-04 18:31:34,858 - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2024-09-04 18:31:34,858 - on stmt: $const52.23.1 = const(int, 0)
2024-09-04 18:31:34,858 - on stmt: $const54.24.1 = const(int, -1)
2024-09-04 18:31:34,858 - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,858 - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2024-09-04 18:31:34,858 - on stmt: $const62.28.1 = const(int, 0)
2024-09-04 18:31:34,858 - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2024-09-04 18:31:34,858 - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2024-09-04 18:31:34,859 - on stmt: $const68.31.1 = const(int, 0)
2024-09-04 18:31:34,859 - on stmt: $const70.32.1 = const(int, 0)
2024-09-04 18:31:34,859 - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,859 - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2024-09-04 18:31:34,859 - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,859 - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2024-09-04 18:31:34,859 - on stmt: $phi80.0.1 = $78get_iter.36.1
2024-09-04 18:31:34,859 - on stmt: jump 80
2024-09-04 18:31:34,859 - ==== SSA block rewrite pass on 80
2024-09-04 18:31:34,859 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F86830>
2024-09-04 18:31:34,859 - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2024-09-04 18:31:34,859 - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2024-09-04 18:31:34,860 - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2024-09-04 18:31:34,860 - on stmt: $phi82.1.1 = $80for_iter.2.1
2024-09-04 18:31:34,860 - on stmt: branch $80for_iter.3.1, 82, 194
2024-09-04 18:31:34,860 - ==== SSA block rewrite pass on 82
2024-09-04 18:31:34,860 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F86830>
2024-09-04 18:31:34,860 - on stmt: index00 = $phi82.1.1
2024-09-04 18:31:34,860 - on stmt: jump 90
2024-09-04 18:31:34,860 - ==== SSA block rewrite pass on 194
2024-09-04 18:31:34,860 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F86830>
2024-09-04 18:31:34,860 - on stmt: $92return_value.1.1 = cast(value=out0)
2024-09-04 18:31:34,860 - on stmt: return $92return_value.1.1
2024-09-04 18:31:34,860 - ==== SSA block rewrite pass on 90
2024-09-04 18:31:34,860 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F86830>
2024-09-04 18:31:34,861 - on stmt: $const4.1 = const(int, 0)
2024-09-04 18:31:34,861 - on stmt: stencil_index = $const4.1 + index00
2024-09-04 18:31:34,861 - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:34,861 - first assign: x0
2024-09-04 18:31:34,861 - replaced with: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:34,861 - on stmt: $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2024-09-04 18:31:34,861 - on stmt: $20compare_op.7 = $12unary_negative.4 <= x0
2024-09-04 18:31:34,861 - on stmt: bool22 = global(bool: <class 'bool'>)
2024-09-04 18:31:34,861 - on stmt: $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,861 - on stmt: $phi24.0 = x0
2024-09-04 18:31:34,861 - on stmt: branch $22pred, 91, 123
2024-09-04 18:31:34,861 - ==== SSA block rewrite pass on 91
2024-09-04 18:31:34,861 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F86830>
2024-09-04 18:31:34,862 - on stmt: $26compare_op.2 = x0 <= threshold
2024-09-04 18:31:34,862 - on stmt: bool28 = global(bool: <class 'bool'>)
2024-09-04 18:31:34,862 - on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,862 - on stmt: branch $28pred, 115, 127
2024-09-04 18:31:34,862 - ==== SSA block rewrite pass on 115
2024-09-04 18:31:34,862 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F86830>
2024-09-04 18:31:34,862 - on stmt: jump 121
2024-09-04 18:31:34,862 - ==== SSA block rewrite pass on 123
2024-09-04 18:31:34,862 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F86830>
2024-09-04 18:31:34,862 - on stmt: jump 127
2024-09-04 18:31:34,862 - ==== SSA block rewrite pass on 121
2024-09-04 18:31:34,862 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F86830>
2024-09-04 18:31:34,862 - on stmt: x0 = const(int, 0)
2024-09-04 18:31:34,863 - replaced with: x0.1 = const(int, 0)
2024-09-04 18:31:34,863 - on stmt: jump 127
2024-09-04 18:31:34,863 - ==== SSA block rewrite pass on 127
2024-09-04 18:31:34,863 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F86830>
2024-09-04 18:31:34,863 - on stmt: $const42.1 = const(int, -1)
2024-09-04 18:31:34,863 - on stmt: stencil_index.1 = $const42.1 + index00
2024-09-04 18:31:34,863 - on stmt: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2024-09-04 18:31:34,863 - on stmt: $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2024-09-04 18:31:34,863 - on stmt: $58compare_op.7 = $50unary_negative.4 <= x1
2024-09-04 18:31:34,863 - on stmt: bool60 = global(bool: <class 'bool'>)
2024-09-04 18:31:34,863 - on stmt: $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,863 - on stmt: $phi62.0 = x1
2024-09-04 18:31:34,863 - on stmt: branch $60pred, 131, 161
2024-09-04 18:31:34,864 - ==== SSA block rewrite pass on 131
2024-09-04 18:31:34,864 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F86830>
2024-09-04 18:31:34,864 - on stmt: $64compare_op.2 = x1 <= threshold
2024-09-04 18:31:34,864 - on stmt: bool66 = global(bool: <class 'bool'>)
2024-09-04 18:31:34,864 - on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,864 - on stmt: branch $66pred, 153, 165
2024-09-04 18:31:34,864 - ==== SSA block rewrite pass on 153
2024-09-04 18:31:34,864 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F86830>
2024-09-04 18:31:34,864 - on stmt: jump 159
2024-09-04 18:31:34,864 - ==== SSA block rewrite pass on 161
2024-09-04 18:31:34,864 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F86830>
2024-09-04 18:31:34,864 - on stmt: jump 165
2024-09-04 18:31:34,864 - ==== SSA block rewrite pass on 159
2024-09-04 18:31:34,865 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F86830>
2024-09-04 18:31:34,865 - on stmt: x1 = const(int, 0)
2024-09-04 18:31:34,865 - on stmt: jump 165
2024-09-04 18:31:34,865 - ==== SSA block rewrite pass on 165
2024-09-04 18:31:34,865 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F86830>
2024-09-04 18:31:34,865 - on stmt: bool80 = global(bool: <class 'bool'>)
2024-09-04 18:31:34,865 - on stmt: $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,865 - on stmt: branch $80pred, 169, 173
2024-09-04 18:31:34,865 - ==== SSA block rewrite pass on 169
2024-09-04 18:31:34,865 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F86830>
2024-09-04 18:31:34,865 - on stmt: $82load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,865 - on stmt: $84load_method.1 = getattr(value=$82load_global.0, attr=signbit)
2024-09-04 18:31:34,865 - on stmt: $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,866 - on stmt: $90load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,866 - on stmt: $92load_method.5 = getattr(value=$90load_global.4, attr=signbit)
2024-09-04 18:31:34,866 - on stmt: $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,866 - on stmt: $98compare_op.8 = $88call_method.3 != $96call_method.7
2024-09-04 18:31:34,866 - on stmt: $100return_value.9 = cast(value=$98compare_op.8)
2024-09-04 18:31:34,866 - on stmt: out0[index00] = $100return_value.9
2024-09-04 18:31:34,866 - on stmt: jump 193
2024-09-04 18:31:34,866 - ==== SSA block rewrite pass on 173
2024-09-04 18:31:34,866 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F86830>
2024-09-04 18:31:34,866 - on stmt: $102load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,866 - on stmt: $104load_method.1 = getattr(value=$102load_global.0, attr=sign)
2024-09-04 18:31:34,866 - on stmt: $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,867 - on stmt: $110load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,867 - on stmt: $112load_method.5 = getattr(value=$110load_global.4, attr=sign)
2024-09-04 18:31:34,867 - on stmt: $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,867 - on stmt: $118compare_op.8 = $108call_method.3 != $116call_method.7
2024-09-04 18:31:34,867 - on stmt: $120return_value.9 = cast(value=$118compare_op.8)
2024-09-04 18:31:34,867 - on stmt: out0[index00] = $120return_value.9
2024-09-04 18:31:34,867 - on stmt: jump 193
2024-09-04 18:31:34,867 - ==== SSA block rewrite pass on 193
2024-09-04 18:31:34,867 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F86830>
2024-09-04 18:31:34,867 - on stmt: jump 80
2024-09-04 18:31:34,867 - Replaced assignments: defaultdict(<class 'list'>,
            {90: [<numba.core.ir.Assign object at 0x0000024318F87160>],
             121: [<numba.core.ir.Assign object at 0x0000024318F87760>]})
2024-09-04 18:31:34,868 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:34,868 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F871C0>
2024-09-04 18:31:34,868 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:34,868 - on stmt: threshold = arg(1, name=threshold)
2024-09-04 18:31:34,868 - on stmt: zero_pos = arg(2, name=zero_pos)
2024-09-04 18:31:34,868 - on stmt: full_shape0 = getattr(value=x, attr=shape)
2024-09-04 18:31:34,868 - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,868 - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2024-09-04 18:31:34,868 - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,868 - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2024-09-04 18:31:34,868 - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,868 - on stmt: $const24.9.1 = const(int, 0)
2024-09-04 18:31:34,868 - on stmt: $const28.11.1 = const(NoneType, None)
2024-09-04 18:31:34,869 - on stmt: $const30.12.1 = const(int, 1)
2024-09-04 18:31:34,869 - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:34,869 - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,869 - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2024-09-04 18:31:34,869 - on stmt: $const36.15.1 = const(int, 0)
2024-09-04 18:31:34,869 - on stmt: $const40.17.1 = const(int, 0)
2024-09-04 18:31:34,869 - on stmt: $const42.18.1 = const(NoneType, None)
2024-09-04 18:31:34,869 - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:34,869 - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,869 - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2024-09-04 18:31:34,869 - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2024-09-04 18:31:34,869 - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2024-09-04 18:31:34,870 - on stmt: $const52.23.1 = const(int, 0)
2024-09-04 18:31:34,870 - on stmt: $const54.24.1 = const(int, -1)
2024-09-04 18:31:34,870 - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,870 - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2024-09-04 18:31:34,870 - on stmt: $const62.28.1 = const(int, 0)
2024-09-04 18:31:34,870 - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2024-09-04 18:31:34,870 - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2024-09-04 18:31:34,870 - on stmt: $const68.31.1 = const(int, 0)
2024-09-04 18:31:34,870 - on stmt: $const70.32.1 = const(int, 0)
2024-09-04 18:31:34,870 - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,870 - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2024-09-04 18:31:34,870 - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,871 - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2024-09-04 18:31:34,871 - on stmt: $phi80.0.1 = $78get_iter.36.1
2024-09-04 18:31:34,871 - on stmt: jump 80
2024-09-04 18:31:34,871 - ==== SSA block rewrite pass on 80
2024-09-04 18:31:34,871 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F871C0>
2024-09-04 18:31:34,871 - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2024-09-04 18:31:34,871 - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2024-09-04 18:31:34,871 - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2024-09-04 18:31:34,871 - on stmt: $phi82.1.1 = $80for_iter.2.1
2024-09-04 18:31:34,871 - on stmt: branch $80for_iter.3.1, 82, 194
2024-09-04 18:31:34,871 - ==== SSA block rewrite pass on 82
2024-09-04 18:31:34,871 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F871C0>
2024-09-04 18:31:34,871 - on stmt: index00 = $phi82.1.1
2024-09-04 18:31:34,871 - on stmt: jump 90
2024-09-04 18:31:34,872 - ==== SSA block rewrite pass on 194
2024-09-04 18:31:34,872 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F871C0>
2024-09-04 18:31:34,872 - on stmt: $92return_value.1.1 = cast(value=out0)
2024-09-04 18:31:34,872 - on stmt: return $92return_value.1.1
2024-09-04 18:31:34,872 - ==== SSA block rewrite pass on 90
2024-09-04 18:31:34,872 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F871C0>
2024-09-04 18:31:34,872 - on stmt: $const4.1 = const(int, 0)
2024-09-04 18:31:34,872 - on stmt: stencil_index = $const4.1 + index00
2024-09-04 18:31:34,872 - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:34,872 - on stmt: $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2024-09-04 18:31:34,872 - on stmt: $20compare_op.7 = $12unary_negative.4 <= x0
2024-09-04 18:31:34,872 - find_def var='x0' stmt=$20compare_op.7 = $12unary_negative.4 <= x0
2024-09-04 18:31:34,872 - on stmt: bool22 = global(bool: <class 'bool'>)
2024-09-04 18:31:34,872 - on stmt: $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,873 - on stmt: $phi24.0 = x0
2024-09-04 18:31:34,873 - find_def var='x0' stmt=$phi24.0 = x0
2024-09-04 18:31:34,873 - on stmt: branch $22pred, 91, 123
2024-09-04 18:31:34,873 - ==== SSA block rewrite pass on 91
2024-09-04 18:31:34,873 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F871C0>
2024-09-04 18:31:34,873 - on stmt: $26compare_op.2 = x0 <= threshold
2024-09-04 18:31:34,873 - find_def var='x0' stmt=$26compare_op.2 = x0 <= threshold
2024-09-04 18:31:34,873 - find_def_from_top label 91
2024-09-04 18:31:34,873 - idom 90 from label 91
2024-09-04 18:31:34,873 - find_def_from_bottom label 90
2024-09-04 18:31:34,873 - on stmt: bool28 = global(bool: <class 'bool'>)
2024-09-04 18:31:34,873 - on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,874 - on stmt: branch $28pred, 115, 127
2024-09-04 18:31:34,874 - ==== SSA block rewrite pass on 115
2024-09-04 18:31:34,874 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F871C0>
2024-09-04 18:31:34,874 - on stmt: jump 121
2024-09-04 18:31:34,874 - ==== SSA block rewrite pass on 123
2024-09-04 18:31:34,874 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F871C0>
2024-09-04 18:31:34,874 - on stmt: jump 127
2024-09-04 18:31:34,874 - ==== SSA block rewrite pass on 121
2024-09-04 18:31:34,874 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F871C0>
2024-09-04 18:31:34,874 - on stmt: x0.1 = const(int, 0)
2024-09-04 18:31:34,874 - on stmt: jump 127
2024-09-04 18:31:34,874 - ==== SSA block rewrite pass on 127
2024-09-04 18:31:34,874 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F871C0>
2024-09-04 18:31:34,874 - on stmt: $const42.1 = const(int, -1)
2024-09-04 18:31:34,875 - on stmt: stencil_index.1 = $const42.1 + index00
2024-09-04 18:31:34,875 - on stmt: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2024-09-04 18:31:34,875 - on stmt: $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2024-09-04 18:31:34,875 - on stmt: $58compare_op.7 = $50unary_negative.4 <= x1
2024-09-04 18:31:34,875 - on stmt: bool60 = global(bool: <class 'bool'>)
2024-09-04 18:31:34,875 - on stmt: $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,875 - on stmt: $phi62.0 = x1
2024-09-04 18:31:34,875 - on stmt: branch $60pred, 131, 161
2024-09-04 18:31:34,875 - ==== SSA block rewrite pass on 131
2024-09-04 18:31:34,875 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F871C0>
2024-09-04 18:31:34,875 - on stmt: $64compare_op.2 = x1 <= threshold
2024-09-04 18:31:34,875 - on stmt: bool66 = global(bool: <class 'bool'>)
2024-09-04 18:31:34,875 - on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,876 - on stmt: branch $66pred, 153, 165
2024-09-04 18:31:34,876 - ==== SSA block rewrite pass on 153
2024-09-04 18:31:34,876 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F871C0>
2024-09-04 18:31:34,876 - on stmt: jump 159
2024-09-04 18:31:34,876 - ==== SSA block rewrite pass on 161
2024-09-04 18:31:34,876 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F871C0>
2024-09-04 18:31:34,876 - on stmt: jump 165
2024-09-04 18:31:34,876 - ==== SSA block rewrite pass on 159
2024-09-04 18:31:34,876 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F871C0>
2024-09-04 18:31:34,876 - on stmt: x1 = const(int, 0)
2024-09-04 18:31:34,876 - on stmt: jump 165
2024-09-04 18:31:34,876 - ==== SSA block rewrite pass on 165
2024-09-04 18:31:34,876 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F871C0>
2024-09-04 18:31:34,876 - on stmt: bool80 = global(bool: <class 'bool'>)
2024-09-04 18:31:34,876 - on stmt: $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,877 - on stmt: branch $80pred, 169, 173
2024-09-04 18:31:34,877 - ==== SSA block rewrite pass on 169
2024-09-04 18:31:34,877 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F871C0>
2024-09-04 18:31:34,877 - on stmt: $82load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,877 - on stmt: $84load_method.1 = getattr(value=$82load_global.0, attr=signbit)
2024-09-04 18:31:34,877 - on stmt: $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,877 - find_def var='x0' stmt=$88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,877 - find_def_from_top label 169
2024-09-04 18:31:34,877 - idom 165 from label 169
2024-09-04 18:31:34,877 - find_def_from_bottom label 165
2024-09-04 18:31:34,877 - find_def_from_top label 165
2024-09-04 18:31:34,877 - idom 127 from label 165
2024-09-04 18:31:34,877 - find_def_from_bottom label 127
2024-09-04 18:31:34,878 - find_def_from_top label 127
2024-09-04 18:31:34,878 - insert phi node x0.2 = phi(incoming_values=[], incoming_blocks=[]) at 127
2024-09-04 18:31:34,878 - find_def_from_bottom label 123
2024-09-04 18:31:34,878 - find_def_from_top label 123
2024-09-04 18:31:34,878 - idom 90 from label 123
2024-09-04 18:31:34,878 - find_def_from_bottom label 90
2024-09-04 18:31:34,878 - incoming_def x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:34,878 - find_def_from_bottom label 121
2024-09-04 18:31:34,878 - incoming_def x0.1 = const(int, 0)
2024-09-04 18:31:34,878 - find_def_from_bottom label 91
2024-09-04 18:31:34,878 - find_def_from_top label 91
2024-09-04 18:31:34,879 - idom 90 from label 91
2024-09-04 18:31:34,879 - find_def_from_bottom label 90
2024-09-04 18:31:34,879 - incoming_def x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:34,879 - replaced with: $88call_method.3 = call $84load_method.1(x0.2, func=$84load_method.1, args=[Var(x0.2, audio.py:1153)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,879 - on stmt: $90load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,879 - on stmt: $92load_method.5 = getattr(value=$90load_global.4, attr=signbit)
2024-09-04 18:31:34,879 - on stmt: $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,879 - on stmt: $98compare_op.8 = $88call_method.3 != $96call_method.7
2024-09-04 18:31:34,879 - on stmt: $100return_value.9 = cast(value=$98compare_op.8)
2024-09-04 18:31:34,879 - on stmt: out0[index00] = $100return_value.9
2024-09-04 18:31:34,879 - on stmt: jump 193
2024-09-04 18:31:34,880 - ==== SSA block rewrite pass on 173
2024-09-04 18:31:34,880 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F871C0>
2024-09-04 18:31:34,880 - on stmt: $102load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,880 - on stmt: $104load_method.1 = getattr(value=$102load_global.0, attr=sign)
2024-09-04 18:31:34,880 - on stmt: $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,880 - find_def var='x0' stmt=$108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,880 - find_def_from_top label 173
2024-09-04 18:31:34,880 - idom 165 from label 173
2024-09-04 18:31:34,880 - find_def_from_bottom label 165
2024-09-04 18:31:34,880 - find_def_from_top label 165
2024-09-04 18:31:34,880 - idom 127 from label 165
2024-09-04 18:31:34,880 - find_def_from_bottom label 127
2024-09-04 18:31:34,881 - replaced with: $108call_method.3 = call $104load_method.1(x0.2, func=$104load_method.1, args=[Var(x0.2, audio.py:1153)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,881 - on stmt: $110load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,881 - on stmt: $112load_method.5 = getattr(value=$110load_global.4, attr=sign)
2024-09-04 18:31:34,881 - on stmt: $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,881 - on stmt: $118compare_op.8 = $108call_method.3 != $116call_method.7
2024-09-04 18:31:34,881 - on stmt: $120return_value.9 = cast(value=$118compare_op.8)
2024-09-04 18:31:34,881 - on stmt: out0[index00] = $120return_value.9
2024-09-04 18:31:34,881 - on stmt: jump 193
2024-09-04 18:31:34,881 - ==== SSA block rewrite pass on 193
2024-09-04 18:31:34,881 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F871C0>
2024-09-04 18:31:34,881 - on stmt: jump 80
2024-09-04 18:31:34,881 - Fix SSA violator on var x1
2024-09-04 18:31:34,882 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:34,882 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F870D0>
2024-09-04 18:31:34,882 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:34,882 - on stmt: threshold = arg(1, name=threshold)
2024-09-04 18:31:34,882 - on stmt: zero_pos = arg(2, name=zero_pos)
2024-09-04 18:31:34,882 - on stmt: full_shape0 = getattr(value=x, attr=shape)
2024-09-04 18:31:34,882 - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,882 - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2024-09-04 18:31:34,882 - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,882 - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2024-09-04 18:31:34,882 - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,882 - on stmt: $const24.9.1 = const(int, 0)
2024-09-04 18:31:34,882 - on stmt: $const28.11.1 = const(NoneType, None)
2024-09-04 18:31:34,882 - on stmt: $const30.12.1 = const(int, 1)
2024-09-04 18:31:34,883 - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:34,883 - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,883 - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2024-09-04 18:31:34,883 - on stmt: $const36.15.1 = const(int, 0)
2024-09-04 18:31:34,883 - on stmt: $const40.17.1 = const(int, 0)
2024-09-04 18:31:34,883 - on stmt: $const42.18.1 = const(NoneType, None)
2024-09-04 18:31:34,883 - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:34,883 - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,883 - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2024-09-04 18:31:34,883 - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2024-09-04 18:31:34,883 - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2024-09-04 18:31:34,883 - on stmt: $const52.23.1 = const(int, 0)
2024-09-04 18:31:34,883 - on stmt: $const54.24.1 = const(int, -1)
2024-09-04 18:31:34,883 - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,884 - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2024-09-04 18:31:34,884 - on stmt: $const62.28.1 = const(int, 0)
2024-09-04 18:31:34,884 - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2024-09-04 18:31:34,884 - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2024-09-04 18:31:34,884 - on stmt: $const68.31.1 = const(int, 0)
2024-09-04 18:31:34,884 - on stmt: $const70.32.1 = const(int, 0)
2024-09-04 18:31:34,884 - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,884 - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2024-09-04 18:31:34,884 - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,884 - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2024-09-04 18:31:34,884 - on stmt: $phi80.0.1 = $78get_iter.36.1
2024-09-04 18:31:34,884 - on stmt: jump 80
2024-09-04 18:31:34,884 - ==== SSA block rewrite pass on 80
2024-09-04 18:31:34,885 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F870D0>
2024-09-04 18:31:34,885 - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2024-09-04 18:31:34,885 - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2024-09-04 18:31:34,885 - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2024-09-04 18:31:34,885 - on stmt: $phi82.1.1 = $80for_iter.2.1
2024-09-04 18:31:34,885 - on stmt: branch $80for_iter.3.1, 82, 194
2024-09-04 18:31:34,885 - ==== SSA block rewrite pass on 82
2024-09-04 18:31:34,885 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F870D0>
2024-09-04 18:31:34,885 - on stmt: index00 = $phi82.1.1
2024-09-04 18:31:34,885 - on stmt: jump 90
2024-09-04 18:31:34,885 - ==== SSA block rewrite pass on 194
2024-09-04 18:31:34,885 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F870D0>
2024-09-04 18:31:34,885 - on stmt: $92return_value.1.1 = cast(value=out0)
2024-09-04 18:31:34,885 - on stmt: return $92return_value.1.1
2024-09-04 18:31:34,885 - ==== SSA block rewrite pass on 90
2024-09-04 18:31:34,885 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F870D0>
2024-09-04 18:31:34,886 - on stmt: $const4.1 = const(int, 0)
2024-09-04 18:31:34,886 - on stmt: stencil_index = $const4.1 + index00
2024-09-04 18:31:34,886 - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:34,886 - on stmt: $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2024-09-04 18:31:34,886 - on stmt: $20compare_op.7 = $12unary_negative.4 <= x0
2024-09-04 18:31:34,886 - on stmt: bool22 = global(bool: <class 'bool'>)
2024-09-04 18:31:34,886 - on stmt: $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,886 - on stmt: $phi24.0 = x0
2024-09-04 18:31:34,886 - on stmt: branch $22pred, 91, 123
2024-09-04 18:31:34,886 - ==== SSA block rewrite pass on 91
2024-09-04 18:31:34,886 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F870D0>
2024-09-04 18:31:34,886 - on stmt: $26compare_op.2 = x0 <= threshold
2024-09-04 18:31:34,886 - on stmt: bool28 = global(bool: <class 'bool'>)
2024-09-04 18:31:34,886 - on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,887 - on stmt: branch $28pred, 115, 127
2024-09-04 18:31:34,887 - ==== SSA block rewrite pass on 115
2024-09-04 18:31:34,887 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F870D0>
2024-09-04 18:31:34,887 - on stmt: jump 121
2024-09-04 18:31:34,887 - ==== SSA block rewrite pass on 123
2024-09-04 18:31:34,887 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F870D0>
2024-09-04 18:31:34,887 - on stmt: jump 127
2024-09-04 18:31:34,887 - ==== SSA block rewrite pass on 121
2024-09-04 18:31:34,887 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F870D0>
2024-09-04 18:31:34,887 - on stmt: x0.1 = const(int, 0)
2024-09-04 18:31:34,887 - on stmt: jump 127
2024-09-04 18:31:34,887 - ==== SSA block rewrite pass on 127
2024-09-04 18:31:34,887 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F870D0>
2024-09-04 18:31:34,887 - on stmt: x0.2 = phi(incoming_values=[Var(x0, audio.py:1144), Var(x0.1, audio.py:1146), Var(x0, audio.py:1144)], incoming_blocks=[123, 121, 91])
2024-09-04 18:31:34,888 - on stmt: $const42.1 = const(int, -1)
2024-09-04 18:31:34,888 - on stmt: stencil_index.1 = $const42.1 + index00
2024-09-04 18:31:34,888 - on stmt: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2024-09-04 18:31:34,888 - first assign: x1
2024-09-04 18:31:34,888 - replaced with: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2024-09-04 18:31:34,888 - on stmt: $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2024-09-04 18:31:34,888 - on stmt: $58compare_op.7 = $50unary_negative.4 <= x1
2024-09-04 18:31:34,888 - on stmt: bool60 = global(bool: <class 'bool'>)
2024-09-04 18:31:34,888 - on stmt: $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,888 - on stmt: $phi62.0 = x1
2024-09-04 18:31:34,888 - on stmt: branch $60pred, 131, 161
2024-09-04 18:31:34,888 - ==== SSA block rewrite pass on 131
2024-09-04 18:31:34,888 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F870D0>
2024-09-04 18:31:34,888 - on stmt: $64compare_op.2 = x1 <= threshold
2024-09-04 18:31:34,889 - on stmt: bool66 = global(bool: <class 'bool'>)
2024-09-04 18:31:34,889 - on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,889 - on stmt: branch $66pred, 153, 165
2024-09-04 18:31:34,889 - ==== SSA block rewrite pass on 153
2024-09-04 18:31:34,889 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F870D0>
2024-09-04 18:31:34,889 - on stmt: jump 159
2024-09-04 18:31:34,889 - ==== SSA block rewrite pass on 161
2024-09-04 18:31:34,889 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F870D0>
2024-09-04 18:31:34,889 - on stmt: jump 165
2024-09-04 18:31:34,889 - ==== SSA block rewrite pass on 159
2024-09-04 18:31:34,889 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F870D0>
2024-09-04 18:31:34,889 - on stmt: x1 = const(int, 0)
2024-09-04 18:31:34,889 - replaced with: x1.1 = const(int, 0)
2024-09-04 18:31:34,889 - on stmt: jump 165
2024-09-04 18:31:34,890 - ==== SSA block rewrite pass on 165
2024-09-04 18:31:34,890 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F870D0>
2024-09-04 18:31:34,890 - on stmt: bool80 = global(bool: <class 'bool'>)
2024-09-04 18:31:34,890 - on stmt: $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,890 - on stmt: branch $80pred, 169, 173
2024-09-04 18:31:34,890 - ==== SSA block rewrite pass on 169
2024-09-04 18:31:34,890 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F870D0>
2024-09-04 18:31:34,890 - on stmt: $82load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,890 - on stmt: $84load_method.1 = getattr(value=$82load_global.0, attr=signbit)
2024-09-04 18:31:34,890 - on stmt: $88call_method.3 = call $84load_method.1(x0.2, func=$84load_method.1, args=[Var(x0.2, audio.py:1153)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,890 - on stmt: $90load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,890 - on stmt: $92load_method.5 = getattr(value=$90load_global.4, attr=signbit)
2024-09-04 18:31:34,890 - on stmt: $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,890 - on stmt: $98compare_op.8 = $88call_method.3 != $96call_method.7
2024-09-04 18:31:34,891 - on stmt: $100return_value.9 = cast(value=$98compare_op.8)
2024-09-04 18:31:34,891 - on stmt: out0[index00] = $100return_value.9
2024-09-04 18:31:34,891 - on stmt: jump 193
2024-09-04 18:31:34,891 - ==== SSA block rewrite pass on 173
2024-09-04 18:31:34,891 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F870D0>
2024-09-04 18:31:34,891 - on stmt: $102load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,891 - on stmt: $104load_method.1 = getattr(value=$102load_global.0, attr=sign)
2024-09-04 18:31:34,891 - on stmt: $108call_method.3 = call $104load_method.1(x0.2, func=$104load_method.1, args=[Var(x0.2, audio.py:1153)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,891 - on stmt: $110load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,891 - on stmt: $112load_method.5 = getattr(value=$110load_global.4, attr=sign)
2024-09-04 18:31:34,891 - on stmt: $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,891 - on stmt: $118compare_op.8 = $108call_method.3 != $116call_method.7
2024-09-04 18:31:34,891 - on stmt: $120return_value.9 = cast(value=$118compare_op.8)
2024-09-04 18:31:34,892 - on stmt: out0[index00] = $120return_value.9
2024-09-04 18:31:34,892 - on stmt: jump 193
2024-09-04 18:31:34,892 - ==== SSA block rewrite pass on 193
2024-09-04 18:31:34,892 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318F870D0>
2024-09-04 18:31:34,892 - on stmt: jump 80
2024-09-04 18:31:34,892 - Replaced assignments: defaultdict(<class 'list'>,
            {127: [<numba.core.ir.Assign object at 0x0000024318F872E0>],
             159: [<numba.core.ir.Assign object at 0x0000024318F86F20>]})
2024-09-04 18:31:34,892 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:34,892 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F87EE0>
2024-09-04 18:31:34,892 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:34,892 - on stmt: threshold = arg(1, name=threshold)
2024-09-04 18:31:34,892 - on stmt: zero_pos = arg(2, name=zero_pos)
2024-09-04 18:31:34,892 - on stmt: full_shape0 = getattr(value=x, attr=shape)
2024-09-04 18:31:34,892 - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,893 - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2024-09-04 18:31:34,893 - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,893 - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2024-09-04 18:31:34,893 - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,893 - on stmt: $const24.9.1 = const(int, 0)
2024-09-04 18:31:34,893 - on stmt: $const28.11.1 = const(NoneType, None)
2024-09-04 18:31:34,893 - on stmt: $const30.12.1 = const(int, 1)
2024-09-04 18:31:34,893 - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:34,893 - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,893 - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2024-09-04 18:31:34,893 - on stmt: $const36.15.1 = const(int, 0)
2024-09-04 18:31:34,893 - on stmt: $const40.17.1 = const(int, 0)
2024-09-04 18:31:34,893 - on stmt: $const42.18.1 = const(NoneType, None)
2024-09-04 18:31:34,893 - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:34,894 - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,894 - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2024-09-04 18:31:34,894 - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2024-09-04 18:31:34,894 - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2024-09-04 18:31:34,894 - on stmt: $const52.23.1 = const(int, 0)
2024-09-04 18:31:34,894 - on stmt: $const54.24.1 = const(int, -1)
2024-09-04 18:31:34,894 - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,894 - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2024-09-04 18:31:34,894 - on stmt: $const62.28.1 = const(int, 0)
2024-09-04 18:31:34,894 - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2024-09-04 18:31:34,894 - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2024-09-04 18:31:34,894 - on stmt: $const68.31.1 = const(int, 0)
2024-09-04 18:31:34,894 - on stmt: $const70.32.1 = const(int, 0)
2024-09-04 18:31:34,894 - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,895 - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2024-09-04 18:31:34,895 - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,895 - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2024-09-04 18:31:34,895 - on stmt: $phi80.0.1 = $78get_iter.36.1
2024-09-04 18:31:34,895 - on stmt: jump 80
2024-09-04 18:31:34,895 - ==== SSA block rewrite pass on 80
2024-09-04 18:31:34,895 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F87EE0>
2024-09-04 18:31:34,895 - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2024-09-04 18:31:34,895 - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2024-09-04 18:31:34,895 - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2024-09-04 18:31:34,895 - on stmt: $phi82.1.1 = $80for_iter.2.1
2024-09-04 18:31:34,895 - on stmt: branch $80for_iter.3.1, 82, 194
2024-09-04 18:31:34,895 - ==== SSA block rewrite pass on 82
2024-09-04 18:31:34,896 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F87EE0>
2024-09-04 18:31:34,896 - on stmt: index00 = $phi82.1.1
2024-09-04 18:31:34,896 - on stmt: jump 90
2024-09-04 18:31:34,896 - ==== SSA block rewrite pass on 194
2024-09-04 18:31:34,896 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F87EE0>
2024-09-04 18:31:34,896 - on stmt: $92return_value.1.1 = cast(value=out0)
2024-09-04 18:31:34,896 - on stmt: return $92return_value.1.1
2024-09-04 18:31:34,896 - ==== SSA block rewrite pass on 90
2024-09-04 18:31:34,896 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F87EE0>
2024-09-04 18:31:34,896 - on stmt: $const4.1 = const(int, 0)
2024-09-04 18:31:34,896 - on stmt: stencil_index = $const4.1 + index00
2024-09-04 18:31:34,896 - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:34,896 - on stmt: $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2024-09-04 18:31:34,896 - on stmt: $20compare_op.7 = $12unary_negative.4 <= x0
2024-09-04 18:31:34,897 - on stmt: bool22 = global(bool: <class 'bool'>)
2024-09-04 18:31:34,897 - on stmt: $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,897 - on stmt: $phi24.0 = x0
2024-09-04 18:31:34,897 - on stmt: branch $22pred, 91, 123
2024-09-04 18:31:34,897 - ==== SSA block rewrite pass on 91
2024-09-04 18:31:34,897 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F87EE0>
2024-09-04 18:31:34,897 - on stmt: $26compare_op.2 = x0 <= threshold
2024-09-04 18:31:34,897 - on stmt: bool28 = global(bool: <class 'bool'>)
2024-09-04 18:31:34,897 - on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,897 - on stmt: branch $28pred, 115, 127
2024-09-04 18:31:34,897 - ==== SSA block rewrite pass on 115
2024-09-04 18:31:34,897 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F87EE0>
2024-09-04 18:31:34,897 - on stmt: jump 121
2024-09-04 18:31:34,898 - ==== SSA block rewrite pass on 123
2024-09-04 18:31:34,898 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F87EE0>
2024-09-04 18:31:34,898 - on stmt: jump 127
2024-09-04 18:31:34,898 - ==== SSA block rewrite pass on 121
2024-09-04 18:31:34,898 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F87EE0>
2024-09-04 18:31:34,898 - on stmt: x0.1 = const(int, 0)
2024-09-04 18:31:34,898 - on stmt: jump 127
2024-09-04 18:31:34,898 - ==== SSA block rewrite pass on 127
2024-09-04 18:31:34,898 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F87EE0>
2024-09-04 18:31:34,898 - on stmt: x0.2 = phi(incoming_values=[Var(x0, audio.py:1144), Var(x0.1, audio.py:1146), Var(x0, audio.py:1144)], incoming_blocks=[123, 121, 91])
2024-09-04 18:31:34,898 - on stmt: $const42.1 = const(int, -1)
2024-09-04 18:31:34,898 - on stmt: stencil_index.1 = $const42.1 + index00
2024-09-04 18:31:34,898 - on stmt: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2024-09-04 18:31:34,898 - on stmt: $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2024-09-04 18:31:34,899 - on stmt: $58compare_op.7 = $50unary_negative.4 <= x1
2024-09-04 18:31:34,899 - find_def var='x1' stmt=$58compare_op.7 = $50unary_negative.4 <= x1
2024-09-04 18:31:34,899 - on stmt: bool60 = global(bool: <class 'bool'>)
2024-09-04 18:31:34,899 - on stmt: $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,899 - on stmt: $phi62.0 = x1
2024-09-04 18:31:34,899 - find_def var='x1' stmt=$phi62.0 = x1
2024-09-04 18:31:34,899 - on stmt: branch $60pred, 131, 161
2024-09-04 18:31:34,899 - ==== SSA block rewrite pass on 131
2024-09-04 18:31:34,899 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F87EE0>
2024-09-04 18:31:34,899 - on stmt: $64compare_op.2 = x1 <= threshold
2024-09-04 18:31:34,899 - find_def var='x1' stmt=$64compare_op.2 = x1 <= threshold
2024-09-04 18:31:34,899 - find_def_from_top label 131
2024-09-04 18:31:34,899 - idom 127 from label 131
2024-09-04 18:31:34,900 - find_def_from_bottom label 127
2024-09-04 18:31:34,900 - on stmt: bool66 = global(bool: <class 'bool'>)
2024-09-04 18:31:34,900 - on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,900 - on stmt: branch $66pred, 153, 165
2024-09-04 18:31:34,900 - ==== SSA block rewrite pass on 153
2024-09-04 18:31:34,900 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F87EE0>
2024-09-04 18:31:34,900 - on stmt: jump 159
2024-09-04 18:31:34,900 - ==== SSA block rewrite pass on 161
2024-09-04 18:31:34,900 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F87EE0>
2024-09-04 18:31:34,900 - on stmt: jump 165
2024-09-04 18:31:34,900 - ==== SSA block rewrite pass on 159
2024-09-04 18:31:34,900 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F87EE0>
2024-09-04 18:31:34,900 - on stmt: x1.1 = const(int, 0)
2024-09-04 18:31:34,900 - on stmt: jump 165
2024-09-04 18:31:34,900 - ==== SSA block rewrite pass on 165
2024-09-04 18:31:34,901 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F87EE0>
2024-09-04 18:31:34,901 - on stmt: bool80 = global(bool: <class 'bool'>)
2024-09-04 18:31:34,901 - on stmt: $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,901 - on stmt: branch $80pred, 169, 173
2024-09-04 18:31:34,901 - ==== SSA block rewrite pass on 169
2024-09-04 18:31:34,901 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F87EE0>
2024-09-04 18:31:34,901 - on stmt: $82load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,901 - on stmt: $84load_method.1 = getattr(value=$82load_global.0, attr=signbit)
2024-09-04 18:31:34,901 - on stmt: $88call_method.3 = call $84load_method.1(x0.2, func=$84load_method.1, args=[Var(x0.2, audio.py:1153)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,901 - on stmt: $90load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,901 - on stmt: $92load_method.5 = getattr(value=$90load_global.4, attr=signbit)
2024-09-04 18:31:34,901 - on stmt: $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,901 - find_def var='x1' stmt=$96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,902 - find_def_from_top label 169
2024-09-04 18:31:34,902 - idom 165 from label 169
2024-09-04 18:31:34,902 - find_def_from_bottom label 165
2024-09-04 18:31:34,902 - find_def_from_top label 165
2024-09-04 18:31:34,902 - insert phi node x1.2 = phi(incoming_values=[], incoming_blocks=[]) at 165
2024-09-04 18:31:34,902 - find_def_from_bottom label 161
2024-09-04 18:31:34,902 - find_def_from_top label 161
2024-09-04 18:31:34,902 - idom 127 from label 161
2024-09-04 18:31:34,902 - find_def_from_bottom label 127
2024-09-04 18:31:34,902 - incoming_def x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2024-09-04 18:31:34,902 - find_def_from_bottom label 131
2024-09-04 18:31:34,902 - find_def_from_top label 131
2024-09-04 18:31:34,902 - idom 127 from label 131
2024-09-04 18:31:34,902 - find_def_from_bottom label 127
2024-09-04 18:31:34,902 - incoming_def x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2024-09-04 18:31:34,903 - find_def_from_bottom label 159
2024-09-04 18:31:34,903 - incoming_def x1.1 = const(int, 0)
2024-09-04 18:31:34,903 - replaced with: $96call_method.7 = call $92load_method.5(x1.2, func=$92load_method.5, args=[Var(x1.2, audio.py:1153)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,903 - on stmt: $98compare_op.8 = $88call_method.3 != $96call_method.7
2024-09-04 18:31:34,903 - on stmt: $100return_value.9 = cast(value=$98compare_op.8)
2024-09-04 18:31:34,903 - on stmt: out0[index00] = $100return_value.9
2024-09-04 18:31:34,903 - on stmt: jump 193
2024-09-04 18:31:34,903 - ==== SSA block rewrite pass on 173
2024-09-04 18:31:34,903 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F87EE0>
2024-09-04 18:31:34,903 - on stmt: $102load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,903 - on stmt: $104load_method.1 = getattr(value=$102load_global.0, attr=sign)
2024-09-04 18:31:34,903 - on stmt: $108call_method.3 = call $104load_method.1(x0.2, func=$104load_method.1, args=[Var(x0.2, audio.py:1153)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,903 - on stmt: $110load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:34,904 - on stmt: $112load_method.5 = getattr(value=$110load_global.4, attr=sign)
2024-09-04 18:31:34,904 - on stmt: $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,904 - find_def var='x1' stmt=$116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,904 - find_def_from_top label 173
2024-09-04 18:31:34,904 - idom 165 from label 173
2024-09-04 18:31:34,904 - find_def_from_bottom label 165
2024-09-04 18:31:34,904 - replaced with: $116call_method.7 = call $112load_method.5(x1.2, func=$112load_method.5, args=[Var(x1.2, audio.py:1153)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,904 - on stmt: $118compare_op.8 = $108call_method.3 != $116call_method.7
2024-09-04 18:31:34,904 - on stmt: $120return_value.9 = cast(value=$118compare_op.8)
2024-09-04 18:31:34,904 - on stmt: out0[index00] = $120return_value.9
2024-09-04 18:31:34,904 - on stmt: jump 193
2024-09-04 18:31:34,904 - ==== SSA block rewrite pass on 193
2024-09-04 18:31:34,904 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318F87EE0>
2024-09-04 18:31:34,905 - on stmt: jump 80
2024-09-04 18:31:34,919 - bytecode dump:
>          0	NOP(arg=None, lineno=4388)
           2	LOAD_GLOBAL(arg=0, lineno=4389)
           4	LOAD_FAST(arg=0, lineno=4389)
           6	LOAD_FAST(arg=1, lineno=4389)
           8	LOAD_DEREF(arg=0, lineno=4389)
          10	CALL_FUNCTION(arg=3, lineno=4389)
          12	RETURN_VALUE(arg=None, lineno=4389)
2024-09-04 18:31:34,919 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:34,919 - stack: []
2024-09-04 18:31:34,919 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:34,919 - dispatch pc=0, inst=NOP(arg=None, lineno=4388)
2024-09-04 18:31:34,919 - stack []
2024-09-04 18:31:34,919 - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4389)
2024-09-04 18:31:34,919 - stack []
2024-09-04 18:31:34,919 - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4389)
2024-09-04 18:31:34,920 - stack ['$2load_global.0']
2024-09-04 18:31:34,920 - dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4389)
2024-09-04 18:31:34,920 - stack ['$2load_global.0', '$shape4.1']
2024-09-04 18:31:34,920 - dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4389)
2024-09-04 18:31:34,920 - stack ['$2load_global.0', '$shape4.1', '$dtype6.2']
2024-09-04 18:31:34,920 - dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4389)
2024-09-04 18:31:34,920 - stack ['$2load_global.0', '$shape4.1', '$dtype6.2', '$8load_deref.3']
2024-09-04 18:31:34,920 - dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4389)
2024-09-04 18:31:34,920 - stack ['$10call_function.4']
2024-09-04 18:31:34,920 - end state. edges=[]
2024-09-04 18:31:34,920 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:34,920 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 18:31:34,920 - defmap: {}
2024-09-04 18:31:34,921 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:34,921 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:34,921 - keep phismap: {}
2024-09-04 18:31:34,921 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:34,921 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:34,921 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:34,922 - label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$2load_global.0']
    $8load_deref.3 = freevar(retty: array(bool, 1d, C)) ['$8load_deref.3']
    $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4388), Var(dtype, arrayobj.py:4388), Var($8load_deref.3, arrayobj.py:4389)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'dtype', 'shape']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2024-09-04 18:31:34,929 - ==== SSA block analysis pass on 0
2024-09-04 18:31:34,929 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024318F64B80>
2024-09-04 18:31:34,929 - on stmt: shape = arg(0, name=shape)
2024-09-04 18:31:34,929 - on stmt: dtype = arg(1, name=dtype)
2024-09-04 18:31:34,929 - on stmt: $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2024-09-04 18:31:34,929 - on stmt: $8load_deref.3 = freevar(retty: array(bool, 1d, C))
2024-09-04 18:31:34,929 - on stmt: $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4388), Var(dtype, arrayobj.py:4388), Var($8load_deref.3, arrayobj.py:4389)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,930 - on stmt: $12return_value.5 = cast(value=$10call_function.4)
2024-09-04 18:31:34,930 - on stmt: return $12return_value.5
2024-09-04 18:31:34,930 - defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x0000024318F641F0>,
                                     0)],
             '$12return_value.5': [(<numba.core.ir.Assign object at 0x0000024318F65180>,
                                    0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x0000024318F65930>,
                                  0)],
             '$8load_deref.3': [(<numba.core.ir.Assign object at 0x0000024318F64A00>,
                                 0)],
             'dtype': [(<numba.core.ir.Assign object at 0x0000024318F67AF0>,
                        0)],
             'shape': [(<numba.core.ir.Assign object at 0x0000024318F67EE0>,
                        0)]})
2024-09-04 18:31:34,930 - SSA violators <numba.core.utils.OrderedSet object at 0x0000024318F64B80>
2024-09-04 18:31:34,948 - bytecode dump:
>          0	NOP(arg=None, lineno=4264)
           2	LOAD_FAST(arg=0, lineno=4267)
           4	LOAD_METHOD(arg=0, lineno=4267)
           6	LOAD_FAST(arg=1, lineno=4267)
           8	LOAD_FAST(arg=2, lineno=4267)
          10	CALL_METHOD(arg=2, lineno=4267)
          12	RETURN_VALUE(arg=None, lineno=4267)
2024-09-04 18:31:34,948 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:34,948 - stack: []
2024-09-04 18:31:34,948 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:34,948 - dispatch pc=0, inst=NOP(arg=None, lineno=4264)
2024-09-04 18:31:34,948 - stack []
2024-09-04 18:31:34,949 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=4267)
2024-09-04 18:31:34,949 - stack []
2024-09-04 18:31:34,949 - dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=4267)
2024-09-04 18:31:34,949 - stack ['$arrtype2.0']
2024-09-04 18:31:34,949 - dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4267)
2024-09-04 18:31:34,949 - stack ['$4load_method.1']
2024-09-04 18:31:34,949 - dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=4267)
2024-09-04 18:31:34,949 - stack ['$4load_method.1', '$size6.2']
2024-09-04 18:31:34,949 - dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=4267)
2024-09-04 18:31:34,949 - stack ['$4load_method.1', '$size6.2', '$align8.3']
2024-09-04 18:31:34,949 - dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4267)
2024-09-04 18:31:34,949 - stack ['$10call_method.4']
2024-09-04 18:31:34,949 - end state. edges=[]
2024-09-04 18:31:34,950 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:34,950 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 18:31:34,950 - defmap: {}
2024-09-04 18:31:34,950 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:34,950 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:34,950 - keep phismap: {}
2024-09-04 18:31:34,950 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:34,950 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:34,950 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:34,951 - label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:4264), Var(align, arrayobj.py:4264)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2024-09-04 18:31:34,962 - ==== SSA block analysis pass on 0
2024-09-04 18:31:34,962 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024318F1E980>
2024-09-04 18:31:34,962 - on stmt: arrtype = arg(0, name=arrtype)
2024-09-04 18:31:34,962 - on stmt: size = arg(1, name=size)
2024-09-04 18:31:34,962 - on stmt: align = arg(2, name=align)
2024-09-04 18:31:34,962 - on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
2024-09-04 18:31:34,962 - on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:4264), Var(align, arrayobj.py:4264)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,963 - on stmt: $12return_value.5 = cast(value=$10call_method.4)
2024-09-04 18:31:34,963 - on stmt: return $12return_value.5
2024-09-04 18:31:34,963 - defs defaultdict(<class 'list'>,
            {'$10call_method.4': [(<numba.core.ir.Assign object at 0x0000024318F1E230>,
                                   0)],
             '$12return_value.5': [(<numba.core.ir.Assign object at 0x0000024318F1E320>,
                                    0)],
             '$4load_method.1': [(<numba.core.ir.Assign object at 0x0000024318F1DDE0>,
                                  0)],
             'align': [(<numba.core.ir.Assign object at 0x0000024318F1DB40>,
                        0)],
             'arrtype': [(<numba.core.ir.Assign object at 0x0000024318F1D060>,
                          0)],
             'size': [(<numba.core.ir.Assign object at 0x0000024318F1CA30>,
                       0)]})
2024-09-04 18:31:34,963 - SSA violators <numba.core.utils.OrderedSet object at 0x0000024318F1E980>
2024-09-04 18:31:34,968 - bytecode dump:
>          0	NOP(arg=None, lineno=4259)
           2	LOAD_GLOBAL(arg=0, lineno=4260)
           4	LOAD_FAST(arg=1, lineno=4260)
           6	LOAD_FAST(arg=2, lineno=4260)
           8	CALL_FUNCTION(arg=2, lineno=4260)
          10	RETURN_VALUE(arg=None, lineno=4260)
2024-09-04 18:31:34,968 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:34,968 - stack: []
2024-09-04 18:31:34,968 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:34,969 - dispatch pc=0, inst=NOP(arg=None, lineno=4259)
2024-09-04 18:31:34,969 - stack []
2024-09-04 18:31:34,969 - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4260)
2024-09-04 18:31:34,969 - stack []
2024-09-04 18:31:34,969 - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=4260)
2024-09-04 18:31:34,969 - stack ['$2load_global.0']
2024-09-04 18:31:34,969 - dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=4260)
2024-09-04 18:31:34,969 - stack ['$2load_global.0', '$allocsize4.1']
2024-09-04 18:31:34,969 - dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=4260)
2024-09-04 18:31:34,969 - stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
2024-09-04 18:31:34,969 - dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=4260)
2024-09-04 18:31:34,969 - stack ['$8call_function.3']
2024-09-04 18:31:34,969 - end state. edges=[]
2024-09-04 18:31:34,970 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:34,970 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 18:31:34,970 - defmap: {}
2024-09-04 18:31:34,970 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:34,970 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:34,970 - keep phismap: {}
2024-09-04 18:31:34,970 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:34,970 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:34,970 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:34,971 - label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:4259), Var(align, arrayobj.py:4259)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2024-09-04 18:31:34,977 - ==== SSA block analysis pass on 0
2024-09-04 18:31:34,977 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024318F1E500>
2024-09-04 18:31:34,978 - on stmt: cls = arg(0, name=cls)
2024-09-04 18:31:34,978 - on stmt: allocsize = arg(1, name=allocsize)
2024-09-04 18:31:34,978 - on stmt: align = arg(2, name=align)
2024-09-04 18:31:34,978 - on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
2024-09-04 18:31:34,978 - on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:4259), Var(align, arrayobj.py:4259)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:34,978 - on stmt: $10return_value.4 = cast(value=$8call_function.3)
2024-09-04 18:31:34,978 - on stmt: return $10return_value.4
2024-09-04 18:31:34,979 - defs defaultdict(<class 'list'>,
            {'$10return_value.4': [(<numba.core.ir.Assign object at 0x0000024318370E20>,
                                    0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x00000243183708E0>,
                                  0)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x0000024318370D00>,
                                    0)],
             'align': [(<numba.core.ir.Assign object at 0x0000024318370760>,
                        0)],
             'allocsize': [(<numba.core.ir.Assign object at 0x00000243183700A0>,
                            0)],
             'cls': [(<numba.core.ir.Assign object at 0x0000024318F1D5D0>, 0)]})
2024-09-04 18:31:34,979 - SSA violators <numba.core.utils.OrderedSet object at 0x0000024318F1E500>
2024-09-04 18:31:35,103 - bytecode dump:
>          0	NOP(arg=None, lineno=200)
           2	LOAD_FAST(arg=0, lineno=201)
           4	LOAD_DEREF(arg=0, lineno=201)
           6	BINARY_SUBSCR(arg=None, lineno=201)
           8	RETURN_VALUE(arg=None, lineno=201)
2024-09-04 18:31:35,103 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:35,103 - stack: []
2024-09-04 18:31:35,103 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:35,104 - dispatch pc=0, inst=NOP(arg=None, lineno=200)
2024-09-04 18:31:35,104 - stack []
2024-09-04 18:31:35,104 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=201)
2024-09-04 18:31:35,104 - stack []
2024-09-04 18:31:35,104 - dispatch pc=4, inst=LOAD_DEREF(arg=0, lineno=201)
2024-09-04 18:31:35,104 - stack ['$tup2.0']
2024-09-04 18:31:35,104 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=201)
2024-09-04 18:31:35,104 - stack ['$tup2.0', '$4load_deref.1']
2024-09-04 18:31:35,104 - dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=201)
2024-09-04 18:31:35,104 - stack ['$6binary_subscr.2']
2024-09-04 18:31:35,104 - end state. edges=[]
2024-09-04 18:31:35,104 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:35,104 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 18:31:35,105 - defmap: {}
2024-09-04 18:31:35,105 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:35,105 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:35,105 - keep phismap: {}
2024-09-04 18:31:35,105 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:35,105 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:35,105 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$tup2.0'}), (4, {'res': '$4load_deref.1'}), (6, {'index': '$4load_deref.1', 'target': '$tup2.0', 'res': '$6binary_subscr.2'}), (8, {'retval': '$6binary_subscr.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:35,105 - label 0:
    tup = arg(0, name=tup)                   ['tup']
    idx = arg(1, name=idx)                   ['idx']
    $4load_deref.1 = freevar(idx_val: 0)     ['$4load_deref.1']
    $6binary_subscr.2 = getitem(value=tup, index=$4load_deref.1, fn=<built-in function getitem>) ['$4load_deref.1', '$6binary_subscr.2', 'tup']
    $8return_value.3 = cast(value=$6binary_subscr.2) ['$6binary_subscr.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2024-09-04 18:31:35,113 - ==== SSA block analysis pass on 0
2024-09-04 18:31:35,113 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243182E7190>
2024-09-04 18:31:35,113 - on stmt: tup = arg(0, name=tup)
2024-09-04 18:31:35,113 - on stmt: idx = arg(1, name=idx)
2024-09-04 18:31:35,113 - on stmt: $4load_deref.1 = freevar(idx_val: 0)
2024-09-04 18:31:35,113 - on stmt: $6binary_subscr.2 = static_getitem(value=tup, index=0, index_var=$4load_deref.1, fn=<built-in function getitem>)
2024-09-04 18:31:35,113 - on stmt: $8return_value.3 = cast(value=$6binary_subscr.2)
2024-09-04 18:31:35,113 - on stmt: return $8return_value.3
2024-09-04 18:31:35,114 - defs defaultdict(<class 'list'>,
            {'$4load_deref.1': [(<numba.core.ir.Assign object at 0x00000243182E6740>,
                                 0)],
             '$6binary_subscr.2': [(<numba.core.ir.Assign object at 0x00000243182E6F80>,
                                    0)],
             '$8return_value.3': [(<numba.core.ir.Assign object at 0x00000243182E6A40>,
                                   0)],
             'idx': [(<numba.core.ir.Assign object at 0x00000243182E54B0>, 0)],
             'tup': [(<numba.core.ir.Assign object at 0x00000243182E5AE0>, 0)]})
2024-09-04 18:31:35,114 - SSA violators <numba.core.utils.OrderedSet object at 0x00000243182E7190>
2024-09-04 18:31:35,590 - bytecode dump:
>          0	NOP(arg=None, lineno=1158)
           2	LOAD_GLOBAL(arg=0, lineno=1174)
           4	LOAD_FAST(arg=0, lineno=1174)
           6	LOAD_FAST(arg=1, lineno=1174)
           8	LOAD_FAST(arg=2, lineno=1174)
          10	CALL_FUNCTION(arg=3, lineno=1174)
          12	LOAD_FAST(arg=3, lineno=1174)
          14	LOAD_CONST(arg=1, lineno=1174)
          16	LOAD_CONST(arg=1, lineno=1174)
          18	BUILD_SLICE(arg=2, lineno=1174)
          20	STORE_SUBSCR(arg=None, lineno=1174)
          22	LOAD_CONST(arg=1, lineno=1174)
          24	RETURN_VALUE(arg=None, lineno=1174)
2024-09-04 18:31:35,595 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:35,595 - stack: []
2024-09-04 18:31:35,595 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:35,595 - dispatch pc=0, inst=NOP(arg=None, lineno=1158)
2024-09-04 18:31:35,595 - stack []
2024-09-04 18:31:35,595 - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1174)
2024-09-04 18:31:35,595 - stack []
2024-09-04 18:31:35,595 - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1174)
2024-09-04 18:31:35,595 - stack ['$2load_global.0']
2024-09-04 18:31:35,595 - dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=1174)
2024-09-04 18:31:35,595 - stack ['$2load_global.0', '$x4.1']
2024-09-04 18:31:35,595 - dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=1174)
2024-09-04 18:31:35,595 - stack ['$2load_global.0', '$x4.1', '$threshold6.2']
2024-09-04 18:31:35,595 - dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=1174)
2024-09-04 18:31:35,595 - stack ['$2load_global.0', '$x4.1', '$threshold6.2', '$zero_pos8.3']
2024-09-04 18:31:35,596 - dispatch pc=12, inst=LOAD_FAST(arg=3, lineno=1174)
2024-09-04 18:31:35,596 - stack ['$10call_function.4']
2024-09-04 18:31:35,596 - dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=1174)
2024-09-04 18:31:35,596 - stack ['$10call_function.4', '$y12.5']
2024-09-04 18:31:35,596 - dispatch pc=16, inst=LOAD_CONST(arg=1, lineno=1174)
2024-09-04 18:31:35,596 - stack ['$10call_function.4', '$y12.5', '$const14.6']
2024-09-04 18:31:35,596 - dispatch pc=18, inst=BUILD_SLICE(arg=2, lineno=1174)
2024-09-04 18:31:35,596 - stack ['$10call_function.4', '$y12.5', '$const14.6', '$const16.7']
2024-09-04 18:31:35,596 - dispatch pc=20, inst=STORE_SUBSCR(arg=None, lineno=1174)
2024-09-04 18:31:35,596 - stack ['$10call_function.4', '$y12.5', '$18build_slice.9']
2024-09-04 18:31:35,596 - dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=1174)
2024-09-04 18:31:35,596 - stack []
2024-09-04 18:31:35,596 - dispatch pc=24, inst=RETURN_VALUE(arg=None, lineno=1174)
2024-09-04 18:31:35,596 - stack ['$const22.10']
2024-09-04 18:31:35,597 - end state. edges=[]
2024-09-04 18:31:35,597 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:35,597 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 18:31:35,597 - defmap: {}
2024-09-04 18:31:35,597 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:35,597 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:35,597 - keep phismap: {}
2024-09-04 18:31:35,597 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:35,597 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:35,597 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'res': '$threshold6.2'}), (8, {'res': '$zero_pos8.3'}), (10, {'func': '$2load_global.0', 'args': ['$x4.1', '$threshold6.2', '$zero_pos8.3'], 'res': '$10call_function.4'}), (12, {'res': '$y12.5'}), (14, {'res': '$const14.6'}), (16, {'res': '$const16.7'}), (18, {'start': '$const14.6', 'stop': '$const16.7', 'step': None, 'res': '$18build_slice.9', 'slicevar': '$18build_slice.8'}), (20, {'target': '$y12.5', 'index': '$18build_slice.9', 'value': '$10call_function.4'}), (22, {'res': '$const22.10'}), (24, {'retval': '$const22.10', 'castval': '$24return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:35,598 - label 0:
    x = arg(0, name=x)                       ['x']
    threshold = arg(1, name=threshold)       ['threshold']
    zero_pos = arg(2, name=zero_pos)         ['zero_pos']
    y = arg(3, name=y)                       ['y']
    $2load_global.0 = global(_zc_stencil: <numba.stencils.stencil.StencilFunc object at 0x0000024317F9FCD0>) ['$2load_global.0']
    $10call_function.4 = call $2load_global.0(x, threshold, zero_pos, func=$2load_global.0, args=[Var(x, audio.py:1158), Var(threshold, audio.py:1158), Var(zero_pos, audio.py:1158)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', 'threshold', 'x', 'zero_pos']
    $const14.6 = const(NoneType, None)       ['$const14.6']
    $const16.7 = const(NoneType, None)       ['$const16.7']
    $18build_slice.8 = global(slice: <class 'slice'>) ['$18build_slice.8']
    $18build_slice.9 = call $18build_slice.8($const14.6, $const16.7, func=$18build_slice.8, args=(Var($const14.6, audio.py:1174), Var($const16.7, audio.py:1174)), kws=(), vararg=None, varkwarg=None, target=None) ['$18build_slice.8', '$18build_slice.9', '$const14.6', '$const16.7']
    y[$18build_slice.9] = $10call_function.4 ['$10call_function.4', '$18build_slice.9', 'y']
    $const22.10 = const(NoneType, None)      ['$const22.10']
    $24return_value.11 = cast(value=$const22.10) ['$24return_value.11', '$const22.10']
    return $24return_value.11                ['$24return_value.11']

2024-09-04 18:31:35,609 - ==== SSA block analysis pass on 0
2024-09-04 18:31:35,609 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024312DA3790>
2024-09-04 18:31:35,609 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:35,609 - on stmt: threshold = arg(1, name=threshold)
2024-09-04 18:31:35,609 - on stmt: zero_pos = arg(2, name=zero_pos)
2024-09-04 18:31:35,609 - on stmt: y = arg(3, name=y)
2024-09-04 18:31:35,609 - on stmt: $2load_global.0 = global(_zc_stencil: <numba.stencils.stencil.StencilFunc object at 0x0000024317F9FCD0>)
2024-09-04 18:31:35,609 - on stmt: $10call_function.4 = call $2load_global.0(x, threshold, zero_pos, func=$2load_global.0, args=[Var(x, audio.py:1158), Var(threshold, audio.py:1158), Var(zero_pos, audio.py:1158)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,609 - on stmt: $const14.6 = const(NoneType, None)
2024-09-04 18:31:35,609 - on stmt: $const16.7 = const(NoneType, None)
2024-09-04 18:31:35,610 - on stmt: $18build_slice.8 = global(slice: <class 'slice'>)
2024-09-04 18:31:35,610 - on stmt: $18build_slice.9 = call $18build_slice.8($const14.6, $const16.7, func=$18build_slice.8, args=(Var($const14.6, audio.py:1174), Var($const16.7, audio.py:1174)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,610 - on stmt: y[slice(None, None, None)] = $10call_function.4
2024-09-04 18:31:35,610 - on stmt: $const22.10 = const(NoneType, None)
2024-09-04 18:31:35,610 - on stmt: $24return_value.11 = cast(value=$const22.10)
2024-09-04 18:31:35,610 - on stmt: return $24return_value.11
2024-09-04 18:31:35,611 - defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x000002431776A110>,
                                     0)],
             '$18build_slice.8': [(<numba.core.ir.Assign object at 0x0000024317769FC0>,
                                   0)],
             '$18build_slice.9': [(<numba.core.ir.Assign object at 0x0000024317769BD0>,
                                   0)],
             '$24return_value.11': [(<numba.core.ir.Assign object at 0x00000243177696F0>,
                                     0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x000002431776B2B0>,
                                  0)],
             '$const14.6': [(<numba.core.ir.Assign object at 0x0000024317769DB0>,
                             0)],
             '$const16.7': [(<numba.core.ir.Assign object at 0x0000024317769C60>,
                             0)],
             '$const22.10': [(<numba.core.ir.Assign object at 0x00000243177698D0>,
                              0)],
             'threshold': [(<numba.core.ir.Assign object at 0x000002431776BAC0>,
                            0)],
             'x': [(<numba.core.ir.Assign object at 0x000002431776B8B0>, 0)],
             'y': [(<numba.core.ir.Assign object at 0x000002431776B130>, 0)],
             'zero_pos': [(<numba.core.ir.Assign object at 0x000002431776AE00>,
                           0)]})
2024-09-04 18:31:35,611 - SSA violators <numba.core.utils.OrderedSet object at 0x0000024312DA3790>
2024-09-04 18:31:35,781 - bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=2)
           4	LOAD_ATTR(arg=0, lineno=2)
           6	STORE_FAST(arg=3, lineno=2)
           8	LOAD_GLOBAL(arg=1, lineno=3)
          10	LOAD_ATTR(arg=2, lineno=3)
          12	LOAD_FAST(arg=3, lineno=3)
          14	LOAD_GLOBAL(arg=1, lineno=3)
          16	LOAD_ATTR(arg=3, lineno=3)
          18	LOAD_CONST(arg=1, lineno=3)
          20	CALL_FUNCTION_KW(arg=2, lineno=3)
          22	STORE_FAST(arg=4, lineno=3)
          24	LOAD_CONST(arg=2, lineno=4)
          26	LOAD_FAST(arg=4, lineno=4)
          28	LOAD_CONST(arg=0, lineno=4)
          30	LOAD_CONST(arg=3, lineno=4)
          32	BUILD_SLICE(arg=2, lineno=4)
          34	STORE_SUBSCR(arg=None, lineno=4)
          36	LOAD_CONST(arg=2, lineno=5)
          38	LOAD_FAST(arg=4, lineno=5)
          40	LOAD_CONST(arg=2, lineno=5)
          42	LOAD_CONST(arg=0, lineno=5)
          44	BUILD_SLICE(arg=2, lineno=5)
          46	STORE_SUBSCR(arg=None, lineno=5)
          48	LOAD_GLOBAL(arg=4, lineno=6)
          50	LOAD_GLOBAL(arg=5, lineno=6)
          52	LOAD_CONST(arg=2, lineno=6)
          54	LOAD_CONST(arg=4, lineno=6)
          56	CALL_FUNCTION(arg=2, lineno=6)
          58	UNARY_NEGATIVE(arg=None, lineno=6)
          60	LOAD_FAST(arg=3, lineno=6)
          62	LOAD_CONST(arg=2, lineno=6)
          64	BINARY_SUBSCR(arg=None, lineno=6)
          66	LOAD_GLOBAL(arg=6, lineno=6)
          68	LOAD_CONST(arg=2, lineno=6)
          70	LOAD_CONST(arg=2, lineno=6)
          72	CALL_FUNCTION(arg=2, lineno=6)
          74	BINARY_SUBTRACT(arg=None, lineno=6)
          76	CALL_FUNCTION(arg=2, lineno=6)
          78	GET_ITER(arg=None, lineno=6)
>         80	FOR_ITER(arg=4, lineno=6)
          82	STORE_FAST(arg=5, lineno=6)
          84	LOAD_CONST(arg=2, lineno=7)
          86	STORE_FAST(arg=6, lineno=7)
          88	JUMP_ABSOLUTE(arg=41, lineno=7)
>         90	LOAD_FAST(arg=4, lineno=8)
          92	RETURN_VALUE(arg=None, lineno=8)
2024-09-04 18:31:35,781 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:35,781 - stack: []
2024-09-04 18:31:35,781 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:35,781 - dispatch pc=0, inst=NOP(arg=None, lineno=1)
2024-09-04 18:31:35,782 - stack []
2024-09-04 18:31:35,782 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2)
2024-09-04 18:31:35,782 - stack []
2024-09-04 18:31:35,782 - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2)
2024-09-04 18:31:35,782 - stack ['$x2.0']
2024-09-04 18:31:35,782 - dispatch pc=6, inst=STORE_FAST(arg=3, lineno=2)
2024-09-04 18:31:35,782 - stack ['$4load_attr.1']
2024-09-04 18:31:35,782 - dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=3)
2024-09-04 18:31:35,782 - stack []
2024-09-04 18:31:35,782 - dispatch pc=10, inst=LOAD_ATTR(arg=2, lineno=3)
2024-09-04 18:31:35,782 - stack ['$8load_global.2']
2024-09-04 18:31:35,782 - dispatch pc=12, inst=LOAD_FAST(arg=3, lineno=3)
2024-09-04 18:31:35,782 - stack ['$10load_attr.3']
2024-09-04 18:31:35,783 - dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=3)
2024-09-04 18:31:35,783 - stack ['$10load_attr.3', '$full_shape012.4']
2024-09-04 18:31:35,783 - dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=3)
2024-09-04 18:31:35,783 - stack ['$10load_attr.3', '$full_shape012.4', '$14load_global.5']
2024-09-04 18:31:35,783 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=3)
2024-09-04 18:31:35,783 - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6']
2024-09-04 18:31:35,783 - dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=3)
2024-09-04 18:31:35,783 - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6', '$const18.7']
2024-09-04 18:31:35,783 - dispatch pc=22, inst=STORE_FAST(arg=4, lineno=3)
2024-09-04 18:31:35,783 - stack ['$20call_function_kw.8']
2024-09-04 18:31:35,783 - dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=4)
2024-09-04 18:31:35,783 - stack []
2024-09-04 18:31:35,783 - dispatch pc=26, inst=LOAD_FAST(arg=4, lineno=4)
2024-09-04 18:31:35,783 - stack ['$const24.9']
2024-09-04 18:31:35,784 - dispatch pc=28, inst=LOAD_CONST(arg=0, lineno=4)
2024-09-04 18:31:35,784 - stack ['$const24.9', '$out026.10']
2024-09-04 18:31:35,784 - dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=4)
2024-09-04 18:31:35,784 - stack ['$const24.9', '$out026.10', '$const28.11']
2024-09-04 18:31:35,784 - dispatch pc=32, inst=BUILD_SLICE(arg=2, lineno=4)
2024-09-04 18:31:35,784 - stack ['$const24.9', '$out026.10', '$const28.11', '$const30.12']
2024-09-04 18:31:35,784 - dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=4)
2024-09-04 18:31:35,784 - stack ['$const24.9', '$out026.10', '$32build_slice.14']
2024-09-04 18:31:35,784 - dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=5)
2024-09-04 18:31:35,784 - stack []
2024-09-04 18:31:35,784 - dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=5)
2024-09-04 18:31:35,784 - stack ['$const36.15']
2024-09-04 18:31:35,784 - dispatch pc=40, inst=LOAD_CONST(arg=2, lineno=5)
2024-09-04 18:31:35,784 - stack ['$const36.15', '$out038.16']
2024-09-04 18:31:35,785 - dispatch pc=42, inst=LOAD_CONST(arg=0, lineno=5)
2024-09-04 18:31:35,785 - stack ['$const36.15', '$out038.16', '$const40.17']
2024-09-04 18:31:35,785 - dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=5)
2024-09-04 18:31:35,785 - stack ['$const36.15', '$out038.16', '$const40.17', '$const42.18']
2024-09-04 18:31:35,785 - dispatch pc=46, inst=STORE_SUBSCR(arg=None, lineno=5)
2024-09-04 18:31:35,785 - stack ['$const36.15', '$out038.16', '$44build_slice.20']
2024-09-04 18:31:35,785 - dispatch pc=48, inst=LOAD_GLOBAL(arg=4, lineno=6)
2024-09-04 18:31:35,785 - stack []
2024-09-04 18:31:35,785 - dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=6)
2024-09-04 18:31:35,785 - stack ['$48load_global.21']
2024-09-04 18:31:35,785 - dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:35,785 - stack ['$48load_global.21', '$50load_global.22']
2024-09-04 18:31:35,785 - dispatch pc=54, inst=LOAD_CONST(arg=4, lineno=6)
2024-09-04 18:31:35,785 - stack ['$48load_global.21', '$50load_global.22', '$const52.23']
2024-09-04 18:31:35,786 - dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:35,786 - stack ['$48load_global.21', '$50load_global.22', '$const52.23', '$const54.24']
2024-09-04 18:31:35,786 - dispatch pc=58, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2024-09-04 18:31:35,786 - stack ['$48load_global.21', '$56call_function.25']
2024-09-04 18:31:35,786 - dispatch pc=60, inst=LOAD_FAST(arg=3, lineno=6)
2024-09-04 18:31:35,786 - stack ['$48load_global.21', '$58unary_negative.26']
2024-09-04 18:31:35,786 - dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:35,786 - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27']
2024-09-04 18:31:35,786 - dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=6)
2024-09-04 18:31:35,786 - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27', '$const62.28']
2024-09-04 18:31:35,786 - dispatch pc=66, inst=LOAD_GLOBAL(arg=6, lineno=6)
2024-09-04 18:31:35,786 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29']
2024-09-04 18:31:35,786 - dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:35,786 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30']
2024-09-04 18:31:35,787 - dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:35,787 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31']
2024-09-04 18:31:35,787 - dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:35,787 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31', '$const70.32']
2024-09-04 18:31:35,787 - dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=6)
2024-09-04 18:31:35,787 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$72call_function.33']
2024-09-04 18:31:35,787 - dispatch pc=76, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:35,787 - stack ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34']
2024-09-04 18:31:35,787 - dispatch pc=78, inst=GET_ITER(arg=None, lineno=6)
2024-09-04 18:31:35,787 - stack ['$76call_function.35']
2024-09-04 18:31:35,787 - end state. edges=[Edge(pc=80, stack=('$78get_iter.36',), blockstack=(), npush=0)]
2024-09-04 18:31:35,787 - pending: deque([State(pc_initial=80 nstack_initial=1)])
2024-09-04 18:31:35,787 - stack: ['$phi80.0']
2024-09-04 18:31:35,788 - state.pc_initial: State(pc_initial=80 nstack_initial=1)
2024-09-04 18:31:35,788 - dispatch pc=80, inst=FOR_ITER(arg=4, lineno=6)
2024-09-04 18:31:35,788 - stack ['$phi80.0']
2024-09-04 18:31:35,788 - end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
2024-09-04 18:31:35,788 - pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=82 nstack_initial=2)])
2024-09-04 18:31:35,788 - stack: []
2024-09-04 18:31:35,788 - state.pc_initial: State(pc_initial=90 nstack_initial=0)
2024-09-04 18:31:35,788 - dispatch pc=90, inst=LOAD_FAST(arg=4, lineno=8)
2024-09-04 18:31:35,788 - stack []
2024-09-04 18:31:35,788 - dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=8)
2024-09-04 18:31:35,788 - stack ['$out090.0']
2024-09-04 18:31:35,788 - end state. edges=[]
2024-09-04 18:31:35,788 - pending: deque([State(pc_initial=82 nstack_initial=2)])
2024-09-04 18:31:35,788 - stack: ['$phi82.0', '$phi82.1']
2024-09-04 18:31:35,789 - state.pc_initial: State(pc_initial=82 nstack_initial=2)
2024-09-04 18:31:35,789 - dispatch pc=82, inst=STORE_FAST(arg=5, lineno=6)
2024-09-04 18:31:35,789 - stack ['$phi82.0', '$phi82.1']
2024-09-04 18:31:35,789 - dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=7)
2024-09-04 18:31:35,789 - stack ['$phi82.0']
2024-09-04 18:31:35,789 - dispatch pc=86, inst=STORE_FAST(arg=6, lineno=7)
2024-09-04 18:31:35,789 - stack ['$phi82.0', '$const84.2']
2024-09-04 18:31:35,789 - dispatch pc=88, inst=JUMP_ABSOLUTE(arg=41, lineno=7)
2024-09-04 18:31:35,789 - stack ['$phi82.0']
2024-09-04 18:31:35,789 - end state. edges=[Edge(pc=80, stack=('$phi82.0',), blockstack=(), npush=0)]
2024-09-04 18:31:35,789 - pending: deque([State(pc_initial=80 nstack_initial=1)])
2024-09-04 18:31:35,789 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:35,790 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=82 nstack_initial=2): {'$phi82.1'},
             State(pc_initial=90 nstack_initial=0): set()})
2024-09-04 18:31:35,790 - defmap: {'$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi82.1': State(pc_initial=80 nstack_initial=1)}
2024-09-04 18:31:35,790 - phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=2))},
             '$phi82.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:35,790 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:35,790 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:35,791 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:35,791 - keep phismap: {'$phi80.0': {('$78get_iter.36', State(pc_initial=0 nstack_initial=0))},
 '$phi82.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
2024-09-04 18:31:35,791 - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.36'},
             State(pc_initial=80 nstack_initial=1): {'$phi82.1': '$80for_iter.2'}})
2024-09-04 18:31:35,791 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:35,791 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_global.2'}), (10, {'item': '$8load_global.2', 'res': '$10load_attr.3'}), (12, {'res': '$full_shape012.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$10load_attr.3', 'args': ['$full_shape012.4', '$16load_attr.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$out026.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$const30.12'}), (32, {'start': '$const28.11', 'stop': '$const30.12', 'step': None, 'res': '$32build_slice.14', 'slicevar': '$32build_slice.13'}), (34, {'target': '$out026.10', 'index': '$32build_slice.14', 'value': '$const24.9'}), (36, {'res': '$const36.15'}), (38, {'res': '$out038.16'}), (40, {'res': '$const40.17'}), (42, {'res': '$const42.18'}), (44, {'start': '$const40.17', 'stop': '$const42.18', 'step': None, 'res': '$44build_slice.20', 'slicevar': '$44build_slice.19'}), (46, {'target': '$out038.16', 'index': '$44build_slice.20', 'value': '$const36.15'}), (48, {'res': '$48load_global.21'}), (50, {'res': '$50load_global.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$50load_global.22', 'args': ['$const52.23', '$const54.24'], 'res': '$56call_function.25'}), (58, {'value': '$56call_function.25', 'res': '$58unary_negative.26'}), (60, {'res': '$full_shape060.27'}), (62, {'res': '$const62.28'}), (64, {'index': '$const62.28', 'target': '$full_shape060.27', 'res': '$64binary_subscr.29'}), (66, {'res': '$66load_global.30'}), (68, {'res': '$const68.31'}), (70, {'res': '$const70.32'}), (72, {'func': '$66load_global.30', 'args': ['$const68.31', '$const70.32'], 'res': '$72call_function.33'}), (74, {'lhs': '$64binary_subscr.29', 'rhs': '$72call_function.33', 'res': '$74binary_subtract.34'}), (76, {'func': '$48load_global.21', 'args': ['$58unary_negative.26', '$74binary_subtract.34'], 'res': '$76call_function.35'}), (78, {'value': '$76call_function.35', 'res': '$78get_iter.36'})), outgoing_phis={'$phi80.0': '$78get_iter.36'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.36',)})
2024-09-04 18:31:35,791 - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi82.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 82: ('$phi80.0', '$80for_iter.2')})
2024-09-04 18:31:35,791 - block_infos State(pc_initial=82 nstack_initial=2):
AdaptBlockInfo(insts=((82, {'value': '$phi82.1'}), (84, {'res': '$const84.2'}), (86, {'value': '$const84.2'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi82.0',)})
2024-09-04 18:31:35,792 - block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$out090.0'}), (92, {'retval': '$out090.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:35,794 - label 0:
    x = arg(0, name=x)                       ['x']
    threshold = arg(1, name=threshold)       ['threshold']
    zero_pos = arg(2, name=zero_pos)         ['zero_pos']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $8load_global.2 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$8load_global.2']
    $10load_attr.3 = getattr(value=$8load_global.2, attr=empty) ['$10load_attr.3', '$8load_global.2']
    $14load_global.5 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=bool_) ['$14load_global.5', '$16load_attr.6']
    out0 = call $10load_attr.3(full_shape0, func=$10load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6, <string>:3))], vararg=None, varkwarg=None, target=None) ['$10load_attr.3', '$16load_attr.6', 'full_shape0', 'out0']
    $const24.9 = const(int, 0)               ['$const24.9']
    $const28.11 = const(NoneType, None)      ['$const28.11']
    $const30.12 = const(int, 1)              ['$const30.12']
    $32build_slice.13 = global(slice: <class 'slice'>) ['$32build_slice.13']
    $32build_slice.14 = call $32build_slice.13($const28.11, $const30.12, func=$32build_slice.13, args=(Var($const28.11, <string>:4), Var($const30.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$32build_slice.13', '$32build_slice.14', '$const28.11', '$const30.12']
    out0[$32build_slice.14] = $const24.9     ['$32build_slice.14', '$const24.9', 'out0']
    $const36.15 = const(int, 0)              ['$const36.15']
    $const40.17 = const(int, 0)              ['$const40.17']
    $const42.18 = const(NoneType, None)      ['$const42.18']
    $44build_slice.19 = global(slice: <class 'slice'>) ['$44build_slice.19']
    $44build_slice.20 = call $44build_slice.19($const40.17, $const42.18, func=$44build_slice.19, args=(Var($const40.17, <string>:5), Var($const42.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$44build_slice.19', '$44build_slice.20', '$const40.17', '$const42.18']
    out0[$44build_slice.20] = $const36.15    ['$44build_slice.20', '$const36.15', 'out0']
    $48load_global.21 = global(range: <class 'range'>) ['$48load_global.21']
    $50load_global.22 = global(min: <built-in function min>) ['$50load_global.22']
    $const52.23 = const(int, 0)              ['$const52.23']
    $const54.24 = const(int, -1)             ['$const54.24']
    $56call_function.25 = call $50load_global.22($const52.23, $const54.24, func=$50load_global.22, args=[Var($const52.23, <string>:6), Var($const54.24, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.22', '$56call_function.25', '$const52.23', '$const54.24']
    $58unary_negative.26 = unary(fn=<built-in function neg>, value=$56call_function.25) ['$56call_function.25', '$58unary_negative.26']
    $const62.28 = const(int, 0)              ['$const62.28']
    $64binary_subscr.29 = getitem(value=full_shape0, index=$const62.28, fn=<built-in function getitem>) ['$64binary_subscr.29', '$const62.28', 'full_shape0']
    $66load_global.30 = global(max: <built-in function max>) ['$66load_global.30']
    $const68.31 = const(int, 0)              ['$const68.31']
    $const70.32 = const(int, 0)              ['$const70.32']
    $72call_function.33 = call $66load_global.30($const68.31, $const70.32, func=$66load_global.30, args=[Var($const68.31, <string>:6), Var($const70.32, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.30', '$72call_function.33', '$const68.31', '$const70.32']
    $74binary_subtract.34 = $64binary_subscr.29 - $72call_function.33 ['$64binary_subscr.29', '$72call_function.33', '$74binary_subtract.34']
    $76call_function.35 = call $48load_global.21($58unary_negative.26, $74binary_subtract.34, func=$48load_global.21, args=[Var($58unary_negative.26, <string>:6), Var($74binary_subtract.34, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34', '$76call_function.35']
    $78get_iter.36 = getiter(value=$76call_function.35) ['$76call_function.35', '$78get_iter.36']
    $phi80.0 = $78get_iter.36                ['$78get_iter.36', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi82.1 = $80for_iter.2                 ['$80for_iter.2', '$phi82.1']
    branch $80for_iter.3, 82, 90             ['$80for_iter.3']
label 82:
    index00 = $phi82.1                       ['$phi82.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 80                                  []
label 90:
    $92return_value.1 = cast(value=out0)     ['$92return_value.1', 'out0']
    return $92return_value.1                 ['$92return_value.1']

2024-09-04 18:31:35,826 - ==== SSA block analysis pass on 0
2024-09-04 18:31:35,827 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D18C610>
2024-09-04 18:31:35,827 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:35,827 - on stmt: threshold = arg(1, name=threshold)
2024-09-04 18:31:35,827 - on stmt: zero_pos = arg(2, name=zero_pos)
2024-09-04 18:31:35,827 - on stmt: full_shape0 = getattr(value=x, attr=shape)
2024-09-04 18:31:35,827 - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,827 - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2024-09-04 18:31:35,827 - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,827 - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2024-09-04 18:31:35,827 - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,827 - on stmt: $const24.9.1 = const(int, 0)
2024-09-04 18:31:35,828 - on stmt: $const28.11.1 = const(NoneType, None)
2024-09-04 18:31:35,828 - on stmt: $const30.12.1 = const(int, 1)
2024-09-04 18:31:35,828 - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:35,828 - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,828 - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2024-09-04 18:31:35,828 - on stmt: $const36.15.1 = const(int, 0)
2024-09-04 18:31:35,828 - on stmt: $const40.17.1 = const(int, 0)
2024-09-04 18:31:35,828 - on stmt: $const42.18.1 = const(NoneType, None)
2024-09-04 18:31:35,829 - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:35,829 - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,829 - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2024-09-04 18:31:35,829 - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2024-09-04 18:31:35,829 - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2024-09-04 18:31:35,829 - on stmt: $const52.23.1 = const(int, 0)
2024-09-04 18:31:35,829 - on stmt: $const54.24.1 = const(int, -1)
2024-09-04 18:31:35,829 - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,829 - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2024-09-04 18:31:35,829 - on stmt: $const62.28.1 = const(int, 0)
2024-09-04 18:31:35,830 - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2024-09-04 18:31:35,830 - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2024-09-04 18:31:35,830 - on stmt: $const68.31.1 = const(int, 0)
2024-09-04 18:31:35,830 - on stmt: $const70.32.1 = const(int, 0)
2024-09-04 18:31:35,830 - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,830 - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2024-09-04 18:31:35,830 - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,831 - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2024-09-04 18:31:35,831 - on stmt: $phi80.0.1 = $78get_iter.36.1
2024-09-04 18:31:35,831 - on stmt: jump 80
2024-09-04 18:31:35,831 - ==== SSA block analysis pass on 80
2024-09-04 18:31:35,831 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D18C610>
2024-09-04 18:31:35,831 - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2024-09-04 18:31:35,831 - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2024-09-04 18:31:35,831 - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2024-09-04 18:31:35,831 - on stmt: $phi82.1.1 = $80for_iter.2.1
2024-09-04 18:31:35,831 - on stmt: branch $80for_iter.3.1, 82, 194
2024-09-04 18:31:35,831 - ==== SSA block analysis pass on 82
2024-09-04 18:31:35,831 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D18C610>
2024-09-04 18:31:35,831 - on stmt: index00 = $phi82.1.1
2024-09-04 18:31:35,832 - on stmt: jump 90
2024-09-04 18:31:35,832 - ==== SSA block analysis pass on 194
2024-09-04 18:31:35,832 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D18C610>
2024-09-04 18:31:35,832 - on stmt: $92return_value.1.1 = cast(value=out0)
2024-09-04 18:31:35,832 - on stmt: return $92return_value.1.1
2024-09-04 18:31:35,832 - ==== SSA block analysis pass on 90
2024-09-04 18:31:35,832 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D18C610>
2024-09-04 18:31:35,832 - on stmt: $const4.1 = const(int, 0)
2024-09-04 18:31:35,832 - on stmt: stencil_index = $const4.1 + index00
2024-09-04 18:31:35,832 - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:35,832 - on stmt: $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2024-09-04 18:31:35,832 - on stmt: $20compare_op.7 = $12unary_negative.4 <= x0
2024-09-04 18:31:35,833 - on stmt: bool22 = global(bool: <class 'bool'>)
2024-09-04 18:31:35,833 - on stmt: $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,833 - on stmt: $phi24.0 = x0
2024-09-04 18:31:35,833 - on stmt: branch $22pred, 91, 123
2024-09-04 18:31:35,833 - ==== SSA block analysis pass on 91
2024-09-04 18:31:35,833 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D18C610>
2024-09-04 18:31:35,833 - on stmt: $26compare_op.2 = x0 <= threshold
2024-09-04 18:31:35,833 - on stmt: bool28 = global(bool: <class 'bool'>)
2024-09-04 18:31:35,833 - on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,833 - on stmt: branch $28pred, 115, 127
2024-09-04 18:31:35,833 - ==== SSA block analysis pass on 115
2024-09-04 18:31:35,833 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D18C610>
2024-09-04 18:31:35,833 - on stmt: jump 121
2024-09-04 18:31:35,834 - ==== SSA block analysis pass on 123
2024-09-04 18:31:35,834 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D18C610>
2024-09-04 18:31:35,834 - on stmt: jump 127
2024-09-04 18:31:35,834 - ==== SSA block analysis pass on 121
2024-09-04 18:31:35,834 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D18C610>
2024-09-04 18:31:35,834 - on stmt: x0 = const(int, 0)
2024-09-04 18:31:35,834 - on stmt: jump 127
2024-09-04 18:31:35,834 - ==== SSA block analysis pass on 127
2024-09-04 18:31:35,834 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D18C610>
2024-09-04 18:31:35,834 - on stmt: $const42.1 = const(int, -1)
2024-09-04 18:31:35,834 - on stmt: stencil_index = $const42.1 + index00
2024-09-04 18:31:35,834 - on stmt: x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:35,834 - on stmt: $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2024-09-04 18:31:35,834 - on stmt: $58compare_op.7 = $50unary_negative.4 <= x1
2024-09-04 18:31:35,835 - on stmt: bool60 = global(bool: <class 'bool'>)
2024-09-04 18:31:35,835 - on stmt: $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,835 - on stmt: $phi62.0 = x1
2024-09-04 18:31:35,835 - on stmt: branch $60pred, 131, 161
2024-09-04 18:31:35,835 - ==== SSA block analysis pass on 131
2024-09-04 18:31:35,835 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D18C610>
2024-09-04 18:31:35,835 - on stmt: $64compare_op.2 = x1 <= threshold
2024-09-04 18:31:35,835 - on stmt: bool66 = global(bool: <class 'bool'>)
2024-09-04 18:31:35,835 - on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,835 - on stmt: branch $66pred, 153, 165
2024-09-04 18:31:35,835 - ==== SSA block analysis pass on 153
2024-09-04 18:31:35,835 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D18C610>
2024-09-04 18:31:35,835 - on stmt: jump 159
2024-09-04 18:31:35,836 - ==== SSA block analysis pass on 161
2024-09-04 18:31:35,836 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D18C610>
2024-09-04 18:31:35,836 - on stmt: jump 165
2024-09-04 18:31:35,836 - ==== SSA block analysis pass on 159
2024-09-04 18:31:35,836 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D18C610>
2024-09-04 18:31:35,836 - on stmt: x1 = const(int, 0)
2024-09-04 18:31:35,836 - on stmt: jump 165
2024-09-04 18:31:35,836 - ==== SSA block analysis pass on 165
2024-09-04 18:31:35,836 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D18C610>
2024-09-04 18:31:35,836 - on stmt: bool80 = global(bool: <class 'bool'>)
2024-09-04 18:31:35,836 - on stmt: $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,836 - on stmt: branch $80pred, 169, 173
2024-09-04 18:31:35,836 - ==== SSA block analysis pass on 169
2024-09-04 18:31:35,836 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D18C610>
2024-09-04 18:31:35,837 - on stmt: $82load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,837 - on stmt: $84load_method.1 = getattr(value=$82load_global.0, attr=signbit)
2024-09-04 18:31:35,837 - on stmt: $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,837 - on stmt: $90load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,837 - on stmt: $92load_method.5 = getattr(value=$90load_global.4, attr=signbit)
2024-09-04 18:31:35,837 - on stmt: $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,837 - on stmt: $98compare_op.8 = $88call_method.3 != $96call_method.7
2024-09-04 18:31:35,837 - on stmt: $100return_value.9 = cast(value=$98compare_op.8)
2024-09-04 18:31:35,837 - on stmt: out0[index00] = $100return_value.9
2024-09-04 18:31:35,837 - on stmt: jump 193
2024-09-04 18:31:35,837 - ==== SSA block analysis pass on 173
2024-09-04 18:31:35,837 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D18C610>
2024-09-04 18:31:35,838 - on stmt: $102load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,838 - on stmt: $104load_method.1 = getattr(value=$102load_global.0, attr=sign)
2024-09-04 18:31:35,838 - on stmt: $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,838 - on stmt: $110load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,838 - on stmt: $112load_method.5 = getattr(value=$110load_global.4, attr=sign)
2024-09-04 18:31:35,838 - on stmt: $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,839 - on stmt: $118compare_op.8 = $108call_method.3 != $116call_method.7
2024-09-04 18:31:35,839 - on stmt: $120return_value.9 = cast(value=$118compare_op.8)
2024-09-04 18:31:35,839 - on stmt: out0[index00] = $120return_value.9
2024-09-04 18:31:35,839 - on stmt: jump 193
2024-09-04 18:31:35,839 - ==== SSA block analysis pass on 193
2024-09-04 18:31:35,839 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D18C610>
2024-09-04 18:31:35,839 - on stmt: jump 80
2024-09-04 18:31:35,843 - defs defaultdict(<class 'list'>,
            {'$100return_value.9': [(<numba.core.ir.Assign object at 0x0000024318F151E0>,
                                     169)],
             '$102load_global.0': [(<numba.core.ir.Assign object at 0x0000024317869690>,
                                    173)],
             '$104load_method.1': [(<numba.core.ir.Assign object at 0x000002431786B040>,
                                    173)],
             '$108call_method.3': [(<numba.core.ir.Assign object at 0x00000243178690C0>,
                                    173)],
             '$10load_attr.3.1': [(<numba.core.ir.Assign object at 0x0000024318373D90>,
                                   0)],
             '$110load_global.4': [(<numba.core.ir.Assign object at 0x00000243178692A0>,
                                    173)],
             '$112load_method.5': [(<numba.core.ir.Assign object at 0x0000024317815690>,
                                    173)],
             '$116call_method.7': [(<numba.core.ir.Assign object at 0x0000024317815450>,
                                    173)],
             '$118compare_op.8': [(<numba.core.ir.Assign object at 0x0000024317815120>,
                                   173)],
             '$120return_value.9': [(<numba.core.ir.Assign object at 0x0000024317850BB0>,
                                     173)],
             '$12unary_negative.4': [(<numba.core.ir.Assign object at 0x00000243176FAD70>,
                                      90)],
             '$14load_global.5.1': [(<numba.core.ir.Assign object at 0x0000024318373D30>,
                                     0)],
             '$16load_attr.6.1': [(<numba.core.ir.Assign object at 0x00000243183738E0>,
                                   0)],
             '$20compare_op.7': [(<numba.core.ir.Assign object at 0x00000243176FAF50>,
                                  90)],
             '$22pred': [(<numba.core.ir.Assign object at 0x0000024318F7FF40>,
                          90)],
             '$26compare_op.2': [(<numba.core.ir.Assign object at 0x000002431B584250>,
                                  91)],
             '$28pred': [(<numba.core.ir.Assign object at 0x000002431B5860B0>,
                          91)],
             '$32build_slice.13.1': [(<numba.core.ir.Assign object at 0x0000024318372D10>,
                                      0)],
             '$32build_slice.14.1': [(<numba.core.ir.Assign object at 0x0000024318372860>,
                                      0)],
             '$44build_slice.19.1': [(<numba.core.ir.Assign object at 0x0000024318F1CA60>,
                                      0)],
             '$44build_slice.20.1': [(<numba.core.ir.Assign object at 0x0000024318F1D120>,
                                      0)],
             '$48load_global.21.1': [(<numba.core.ir.Assign object at 0x0000024318F1FC10>,
                                      0)],
             '$50load_global.22.1': [(<numba.core.ir.Assign object at 0x0000024318F1FFD0>,
                                      0)],
             '$50unary_negative.4': [(<numba.core.ir.Assign object at 0x000002431B571420>,
                                      127)],
             '$56call_function.25.1': [(<numba.core.ir.Assign object at 0x0000024318F1FF10>,
                                        0)],
             '$58compare_op.7': [(<numba.core.ir.Assign object at 0x000002431B571600>,
                                  127)],
             '$58unary_negative.26.1': [(<numba.core.ir.Assign object at 0x0000024318F1F5B0>,
                                         0)],
             '$60pred': [(<numba.core.ir.Assign object at 0x000002431B56A5F0>,
                          127)],
             '$64binary_subscr.29.1': [(<numba.core.ir.Assign object at 0x0000024318F1C310>,
                                        0)],
             '$64compare_op.2': [(<numba.core.ir.Assign object at 0x000002431B55AA40>,
                                  131)],
             '$66load_global.30.1': [(<numba.core.ir.Assign object at 0x0000024318F1FDF0>,
                                      0)],
             '$66pred': [(<numba.core.ir.Assign object at 0x000002431B550760>,
                          131)],
             '$72call_function.33.1': [(<numba.core.ir.Assign object at 0x0000024318F1D2A0>,
                                        0)],
             '$74binary_subtract.34.1': [(<numba.core.ir.Assign object at 0x0000024318F1F610>,
                                          0)],
             '$76call_function.35.1': [(<numba.core.ir.Assign object at 0x0000024318F1D930>,
                                        0)],
             '$78get_iter.36.1': [(<numba.core.ir.Assign object at 0x0000024318F1C160>,
                                   0)],
             '$80for_iter.1.1': [(<numba.core.ir.Assign object at 0x0000024318F1C100>,
                                  80)],
             '$80for_iter.2.1': [(<numba.core.ir.Assign object at 0x0000024318F67A60>,
                                  80)],
             '$80for_iter.3.1': [(<numba.core.ir.Assign object at 0x0000024318F67AC0>,
                                  80)],
             '$80pred': [(<numba.core.ir.Assign object at 0x000002431B5933D0>,
                          165)],
             '$82load_global.0': [(<numba.core.ir.Assign object at 0x000002431D1C5420>,
                                   169)],
             '$84load_method.1': [(<numba.core.ir.Assign object at 0x000002431D1C71F0>,
                                   169)],
             '$88call_method.3': [(<numba.core.ir.Assign object at 0x0000024317750D00>,
                                   169)],
             '$8load_global.2.1': [(<numba.core.ir.Assign object at 0x0000024318372620>,
                                    0)],
             '$90load_global.4': [(<numba.core.ir.Assign object at 0x0000024317751240>,
                                   169)],
             '$92load_method.5': [(<numba.core.ir.Assign object at 0x0000024318FB2440>,
                                   169)],
             '$92return_value.1.1': [(<numba.core.ir.Assign object at 0x0000024318F65810>,
                                      194)],
             '$96call_method.7': [(<numba.core.ir.Assign object at 0x000002431D1F8A00>,
                                   169)],
             '$98compare_op.8': [(<numba.core.ir.Assign object at 0x000002431D1FA320>,
                                  169)],
             '$const24.9.1': [(<numba.core.ir.Assign object at 0x0000024318373C40>,
                               0)],
             '$const28.11.1': [(<numba.core.ir.Assign object at 0x0000024318372AA0>,
                                0)],
             '$const30.12.1': [(<numba.core.ir.Assign object at 0x0000024318373100>,
                                0)],
             '$const36.15.1': [(<numba.core.ir.Assign object at 0x0000024318371B40>,
                                0)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x0000024317795AB0>,
                            90)],
             '$const40.17.1': [(<numba.core.ir.Assign object at 0x0000024318F1E020>,
                                0)],
             '$const42.1': [(<numba.core.ir.Assign object at 0x000002431B5775B0>,
                             127)],
             '$const42.18.1': [(<numba.core.ir.Assign object at 0x0000024318F1EA10>,
                                0)],
             '$const52.23.1': [(<numba.core.ir.Assign object at 0x0000024318F1F070>,
                                0)],
             '$const54.24.1': [(<numba.core.ir.Assign object at 0x0000024318F1E9B0>,
                                0)],
             '$const62.28.1': [(<numba.core.ir.Assign object at 0x0000024318F1F940>,
                                0)],
             '$const68.31.1': [(<numba.core.ir.Assign object at 0x0000024318F1CBB0>,
                                0)],
             '$const70.32.1': [(<numba.core.ir.Assign object at 0x0000024318F1C880>,
                                0)],
             '$phi24.0': [(<numba.core.ir.Assign object at 0x000002431B591900>,
                           90)],
             '$phi62.0': [(<numba.core.ir.Assign object at 0x000002431B56BF70>,
                           127)],
             '$phi80.0.1': [(<numba.core.ir.Assign object at 0x00000243183718D0>,
                             0)],
             '$phi82.1.1': [(<numba.core.ir.Assign object at 0x0000024318F1EA70>,
                             80)],
             'bool22': [(<numba.core.ir.Assign object at 0x0000024318F7CA30>,
                         90)],
             'bool28': [(<numba.core.ir.Assign object at 0x000002431B5843D0>,
                         91)],
             'bool60': [(<numba.core.ir.Assign object at 0x000002431B5730A0>,
                         127)],
             'bool66': [(<numba.core.ir.Assign object at 0x000002431B55A980>,
                         131)],
             'bool80': [(<numba.core.ir.Assign object at 0x000002431B53D960>,
                         165)],
             'full_shape0': [(<numba.core.ir.Assign object at 0x0000024318373730>,
                              0)],
             'index00': [(<numba.core.ir.Assign object at 0x0000024318F679A0>,
                          82)],
             'out0': [(<numba.core.ir.Assign object at 0x0000024318371180>, 0)],
             'stencil_index': [(<numba.core.ir.Assign object at 0x0000024318371CF0>,
                                90),
                               (<numba.core.ir.Assign object at 0x0000024318370370>,
                                127)],
             'threshold': [(<numba.core.ir.Assign object at 0x00000243183719F0>,
                            0)],
             'x': [(<numba.core.ir.Assign object at 0x00000243183711E0>, 0)],
             'x0': [(<numba.core.ir.Assign object at 0x00000243183719C0>, 90),
                    (<numba.core.ir.Assign object at 0x000002431B57BFD0>, 121)],
             'x1': [(<numba.core.ir.Assign object at 0x00000243183703D0>, 127),
                    (<numba.core.ir.Assign object at 0x000002431B546350>, 159)],
             'zero_pos': [(<numba.core.ir.Assign object at 0x0000024318372710>,
                           0)]})
2024-09-04 18:31:35,843 - SSA violators <numba.core.utils.OrderedSet object at 0x000002431D1A2440>
2024-09-04 18:31:35,843 - Fix SSA violator on var stencil_index
2024-09-04 18:31:35,843 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:35,843 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2BC0>
2024-09-04 18:31:35,844 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:35,844 - on stmt: threshold = arg(1, name=threshold)
2024-09-04 18:31:35,844 - on stmt: zero_pos = arg(2, name=zero_pos)
2024-09-04 18:31:35,844 - on stmt: full_shape0 = getattr(value=x, attr=shape)
2024-09-04 18:31:35,844 - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,844 - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2024-09-04 18:31:35,844 - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,844 - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2024-09-04 18:31:35,844 - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,844 - on stmt: $const24.9.1 = const(int, 0)
2024-09-04 18:31:35,844 - on stmt: $const28.11.1 = const(NoneType, None)
2024-09-04 18:31:35,844 - on stmt: $const30.12.1 = const(int, 1)
2024-09-04 18:31:35,844 - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:35,844 - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,845 - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2024-09-04 18:31:35,845 - on stmt: $const36.15.1 = const(int, 0)
2024-09-04 18:31:35,845 - on stmt: $const40.17.1 = const(int, 0)
2024-09-04 18:31:35,845 - on stmt: $const42.18.1 = const(NoneType, None)
2024-09-04 18:31:35,845 - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:35,845 - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,845 - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2024-09-04 18:31:35,845 - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2024-09-04 18:31:35,845 - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2024-09-04 18:31:35,845 - on stmt: $const52.23.1 = const(int, 0)
2024-09-04 18:31:35,845 - on stmt: $const54.24.1 = const(int, -1)
2024-09-04 18:31:35,845 - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,845 - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2024-09-04 18:31:35,846 - on stmt: $const62.28.1 = const(int, 0)
2024-09-04 18:31:35,846 - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2024-09-04 18:31:35,846 - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2024-09-04 18:31:35,846 - on stmt: $const68.31.1 = const(int, 0)
2024-09-04 18:31:35,846 - on stmt: $const70.32.1 = const(int, 0)
2024-09-04 18:31:35,846 - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,846 - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2024-09-04 18:31:35,846 - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,846 - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2024-09-04 18:31:35,846 - on stmt: $phi80.0.1 = $78get_iter.36.1
2024-09-04 18:31:35,846 - on stmt: jump 80
2024-09-04 18:31:35,846 - ==== SSA block rewrite pass on 80
2024-09-04 18:31:35,847 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2BC0>
2024-09-04 18:31:35,847 - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2024-09-04 18:31:35,847 - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2024-09-04 18:31:35,847 - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2024-09-04 18:31:35,847 - on stmt: $phi82.1.1 = $80for_iter.2.1
2024-09-04 18:31:35,847 - on stmt: branch $80for_iter.3.1, 82, 194
2024-09-04 18:31:35,847 - ==== SSA block rewrite pass on 82
2024-09-04 18:31:35,847 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2BC0>
2024-09-04 18:31:35,847 - on stmt: index00 = $phi82.1.1
2024-09-04 18:31:35,847 - on stmt: jump 90
2024-09-04 18:31:35,847 - ==== SSA block rewrite pass on 194
2024-09-04 18:31:35,847 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2BC0>
2024-09-04 18:31:35,847 - on stmt: $92return_value.1.1 = cast(value=out0)
2024-09-04 18:31:35,847 - on stmt: return $92return_value.1.1
2024-09-04 18:31:35,848 - ==== SSA block rewrite pass on 90
2024-09-04 18:31:35,848 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2BC0>
2024-09-04 18:31:35,848 - on stmt: $const4.1 = const(int, 0)
2024-09-04 18:31:35,848 - on stmt: stencil_index = $const4.1 + index00
2024-09-04 18:31:35,848 - first assign: stencil_index
2024-09-04 18:31:35,848 - replaced with: stencil_index = $const4.1 + index00
2024-09-04 18:31:35,848 - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:35,848 - on stmt: $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2024-09-04 18:31:35,848 - on stmt: $20compare_op.7 = $12unary_negative.4 <= x0
2024-09-04 18:31:35,848 - on stmt: bool22 = global(bool: <class 'bool'>)
2024-09-04 18:31:35,848 - on stmt: $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,849 - on stmt: $phi24.0 = x0
2024-09-04 18:31:35,849 - on stmt: branch $22pred, 91, 123
2024-09-04 18:31:35,849 - ==== SSA block rewrite pass on 91
2024-09-04 18:31:35,849 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2BC0>
2024-09-04 18:31:35,849 - on stmt: $26compare_op.2 = x0 <= threshold
2024-09-04 18:31:35,849 - on stmt: bool28 = global(bool: <class 'bool'>)
2024-09-04 18:31:35,849 - on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,849 - on stmt: branch $28pred, 115, 127
2024-09-04 18:31:35,849 - ==== SSA block rewrite pass on 115
2024-09-04 18:31:35,849 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2BC0>
2024-09-04 18:31:35,850 - on stmt: jump 121
2024-09-04 18:31:35,850 - ==== SSA block rewrite pass on 123
2024-09-04 18:31:35,850 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2BC0>
2024-09-04 18:31:35,850 - on stmt: jump 127
2024-09-04 18:31:35,850 - ==== SSA block rewrite pass on 121
2024-09-04 18:31:35,850 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2BC0>
2024-09-04 18:31:35,850 - on stmt: x0 = const(int, 0)
2024-09-04 18:31:35,850 - on stmt: jump 127
2024-09-04 18:31:35,850 - ==== SSA block rewrite pass on 127
2024-09-04 18:31:35,850 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2BC0>
2024-09-04 18:31:35,850 - on stmt: $const42.1 = const(int, -1)
2024-09-04 18:31:35,850 - on stmt: stencil_index = $const42.1 + index00
2024-09-04 18:31:35,850 - replaced with: stencil_index.1 = $const42.1 + index00
2024-09-04 18:31:35,850 - on stmt: x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:35,850 - on stmt: $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2024-09-04 18:31:35,850 - on stmt: $58compare_op.7 = $50unary_negative.4 <= x1
2024-09-04 18:31:35,850 - on stmt: bool60 = global(bool: <class 'bool'>)
2024-09-04 18:31:35,850 - on stmt: $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,850 - on stmt: $phi62.0 = x1
2024-09-04 18:31:35,850 - on stmt: branch $60pred, 131, 161
2024-09-04 18:31:35,850 - ==== SSA block rewrite pass on 131
2024-09-04 18:31:35,850 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2BC0>
2024-09-04 18:31:35,850 - on stmt: $64compare_op.2 = x1 <= threshold
2024-09-04 18:31:35,850 - on stmt: bool66 = global(bool: <class 'bool'>)
2024-09-04 18:31:35,850 - on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,850 - on stmt: branch $66pred, 153, 165
2024-09-04 18:31:35,850 - ==== SSA block rewrite pass on 153
2024-09-04 18:31:35,850 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2BC0>
2024-09-04 18:31:35,850 - on stmt: jump 159
2024-09-04 18:31:35,850 - ==== SSA block rewrite pass on 161
2024-09-04 18:31:35,850 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2BC0>
2024-09-04 18:31:35,850 - on stmt: jump 165
2024-09-04 18:31:35,850 - ==== SSA block rewrite pass on 159
2024-09-04 18:31:35,850 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2BC0>
2024-09-04 18:31:35,850 - on stmt: x1 = const(int, 0)
2024-09-04 18:31:35,850 - on stmt: jump 165
2024-09-04 18:31:35,850 - ==== SSA block rewrite pass on 165
2024-09-04 18:31:35,850 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2BC0>
2024-09-04 18:31:35,850 - on stmt: bool80 = global(bool: <class 'bool'>)
2024-09-04 18:31:35,850 - on stmt: $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,850 - on stmt: branch $80pred, 169, 173
2024-09-04 18:31:35,850 - ==== SSA block rewrite pass on 169
2024-09-04 18:31:35,850 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2BC0>
2024-09-04 18:31:35,850 - on stmt: $82load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,850 - on stmt: $84load_method.1 = getattr(value=$82load_global.0, attr=signbit)
2024-09-04 18:31:35,850 - on stmt: $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,850 - on stmt: $90load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,850 - on stmt: $92load_method.5 = getattr(value=$90load_global.4, attr=signbit)
2024-09-04 18:31:35,850 - on stmt: $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,850 - on stmt: $98compare_op.8 = $88call_method.3 != $96call_method.7
2024-09-04 18:31:35,850 - on stmt: $100return_value.9 = cast(value=$98compare_op.8)
2024-09-04 18:31:35,850 - on stmt: out0[index00] = $100return_value.9
2024-09-04 18:31:35,850 - on stmt: jump 193
2024-09-04 18:31:35,850 - ==== SSA block rewrite pass on 173
2024-09-04 18:31:35,850 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2BC0>
2024-09-04 18:31:35,850 - on stmt: $102load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,850 - on stmt: $104load_method.1 = getattr(value=$102load_global.0, attr=sign)
2024-09-04 18:31:35,850 - on stmt: $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,850 - on stmt: $110load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,850 - on stmt: $112load_method.5 = getattr(value=$110load_global.4, attr=sign)
2024-09-04 18:31:35,850 - on stmt: $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,850 - on stmt: $118compare_op.8 = $108call_method.3 != $116call_method.7
2024-09-04 18:31:35,850 - on stmt: $120return_value.9 = cast(value=$118compare_op.8)
2024-09-04 18:31:35,850 - on stmt: out0[index00] = $120return_value.9
2024-09-04 18:31:35,850 - on stmt: jump 193
2024-09-04 18:31:35,850 - ==== SSA block rewrite pass on 193
2024-09-04 18:31:35,850 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2BC0>
2024-09-04 18:31:35,850 - on stmt: jump 80
2024-09-04 18:31:35,850 - Replaced assignments: defaultdict(<class 'list'>,
            {90: [<numba.core.ir.Assign object at 0x000002431D1A27D0>],
             127: [<numba.core.ir.Assign object at 0x000002431D1A2AA0>]})
2024-09-04 18:31:35,850 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:35,850 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A2BC0>
2024-09-04 18:31:35,850 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:35,850 - on stmt: threshold = arg(1, name=threshold)
2024-09-04 18:31:35,850 - on stmt: zero_pos = arg(2, name=zero_pos)
2024-09-04 18:31:35,850 - on stmt: full_shape0 = getattr(value=x, attr=shape)
2024-09-04 18:31:35,850 - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,850 - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2024-09-04 18:31:35,850 - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,850 - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2024-09-04 18:31:35,850 - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,850 - on stmt: $const24.9.1 = const(int, 0)
2024-09-04 18:31:35,850 - on stmt: $const28.11.1 = const(NoneType, None)
2024-09-04 18:31:35,850 - on stmt: $const30.12.1 = const(int, 1)
2024-09-04 18:31:35,850 - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:35,857 - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,857 - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2024-09-04 18:31:35,857 - on stmt: $const36.15.1 = const(int, 0)
2024-09-04 18:31:35,857 - on stmt: $const40.17.1 = const(int, 0)
2024-09-04 18:31:35,857 - on stmt: $const42.18.1 = const(NoneType, None)
2024-09-04 18:31:35,857 - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:35,857 - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,857 - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2024-09-04 18:31:35,857 - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2024-09-04 18:31:35,857 - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2024-09-04 18:31:35,857 - on stmt: $const52.23.1 = const(int, 0)
2024-09-04 18:31:35,857 - on stmt: $const54.24.1 = const(int, -1)
2024-09-04 18:31:35,857 - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,857 - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2024-09-04 18:31:35,857 - on stmt: $const62.28.1 = const(int, 0)
2024-09-04 18:31:35,857 - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2024-09-04 18:31:35,858 - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2024-09-04 18:31:35,858 - on stmt: $const68.31.1 = const(int, 0)
2024-09-04 18:31:35,858 - on stmt: $const70.32.1 = const(int, 0)
2024-09-04 18:31:35,858 - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,858 - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2024-09-04 18:31:35,858 - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,858 - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2024-09-04 18:31:35,858 - on stmt: $phi80.0.1 = $78get_iter.36.1
2024-09-04 18:31:35,858 - on stmt: jump 80
2024-09-04 18:31:35,858 - ==== SSA block rewrite pass on 80
2024-09-04 18:31:35,858 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A2BC0>
2024-09-04 18:31:35,858 - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2024-09-04 18:31:35,859 - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2024-09-04 18:31:35,859 - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2024-09-04 18:31:35,859 - on stmt: $phi82.1.1 = $80for_iter.2.1
2024-09-04 18:31:35,859 - on stmt: branch $80for_iter.3.1, 82, 194
2024-09-04 18:31:35,859 - ==== SSA block rewrite pass on 82
2024-09-04 18:31:35,859 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A2BC0>
2024-09-04 18:31:35,859 - on stmt: index00 = $phi82.1.1
2024-09-04 18:31:35,859 - on stmt: jump 90
2024-09-04 18:31:35,859 - ==== SSA block rewrite pass on 194
2024-09-04 18:31:35,859 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A2BC0>
2024-09-04 18:31:35,859 - on stmt: $92return_value.1.1 = cast(value=out0)
2024-09-04 18:31:35,859 - on stmt: return $92return_value.1.1
2024-09-04 18:31:35,859 - ==== SSA block rewrite pass on 90
2024-09-04 18:31:35,859 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A2BC0>
2024-09-04 18:31:35,859 - on stmt: $const4.1 = const(int, 0)
2024-09-04 18:31:35,860 - on stmt: stencil_index = $const4.1 + index00
2024-09-04 18:31:35,860 - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:35,860 - find_def var='stencil_index' stmt=x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:35,860 - on stmt: $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2024-09-04 18:31:35,860 - on stmt: $20compare_op.7 = $12unary_negative.4 <= x0
2024-09-04 18:31:35,860 - on stmt: bool22 = global(bool: <class 'bool'>)
2024-09-04 18:31:35,860 - on stmt: $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,860 - on stmt: $phi24.0 = x0
2024-09-04 18:31:35,860 - on stmt: branch $22pred, 91, 123
2024-09-04 18:31:35,860 - ==== SSA block rewrite pass on 91
2024-09-04 18:31:35,860 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A2BC0>
2024-09-04 18:31:35,860 - on stmt: $26compare_op.2 = x0 <= threshold
2024-09-04 18:31:35,860 - on stmt: bool28 = global(bool: <class 'bool'>)
2024-09-04 18:31:35,861 - on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,861 - on stmt: branch $28pred, 115, 127
2024-09-04 18:31:35,861 - ==== SSA block rewrite pass on 115
2024-09-04 18:31:35,861 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A2BC0>
2024-09-04 18:31:35,861 - on stmt: jump 121
2024-09-04 18:31:35,861 - ==== SSA block rewrite pass on 123
2024-09-04 18:31:35,861 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A2BC0>
2024-09-04 18:31:35,861 - on stmt: jump 127
2024-09-04 18:31:35,861 - ==== SSA block rewrite pass on 121
2024-09-04 18:31:35,861 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A2BC0>
2024-09-04 18:31:35,861 - on stmt: x0 = const(int, 0)
2024-09-04 18:31:35,861 - on stmt: jump 127
2024-09-04 18:31:35,861 - ==== SSA block rewrite pass on 127
2024-09-04 18:31:35,861 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A2BC0>
2024-09-04 18:31:35,862 - on stmt: $const42.1 = const(int, -1)
2024-09-04 18:31:35,862 - on stmt: stencil_index.1 = $const42.1 + index00
2024-09-04 18:31:35,862 - on stmt: x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:35,862 - find_def var='stencil_index' stmt=x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:35,862 - replaced with: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2024-09-04 18:31:35,862 - on stmt: $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2024-09-04 18:31:35,862 - on stmt: $58compare_op.7 = $50unary_negative.4 <= x1
2024-09-04 18:31:35,862 - on stmt: bool60 = global(bool: <class 'bool'>)
2024-09-04 18:31:35,862 - on stmt: $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,862 - on stmt: $phi62.0 = x1
2024-09-04 18:31:35,862 - on stmt: branch $60pred, 131, 161
2024-09-04 18:31:35,862 - ==== SSA block rewrite pass on 131
2024-09-04 18:31:35,863 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A2BC0>
2024-09-04 18:31:35,863 - on stmt: $64compare_op.2 = x1 <= threshold
2024-09-04 18:31:35,863 - on stmt: bool66 = global(bool: <class 'bool'>)
2024-09-04 18:31:35,863 - on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,863 - on stmt: branch $66pred, 153, 165
2024-09-04 18:31:35,863 - ==== SSA block rewrite pass on 153
2024-09-04 18:31:35,863 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A2BC0>
2024-09-04 18:31:35,863 - on stmt: jump 159
2024-09-04 18:31:35,863 - ==== SSA block rewrite pass on 161
2024-09-04 18:31:35,863 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A2BC0>
2024-09-04 18:31:35,863 - on stmt: jump 165
2024-09-04 18:31:35,863 - ==== SSA block rewrite pass on 159
2024-09-04 18:31:35,863 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A2BC0>
2024-09-04 18:31:35,864 - on stmt: x1 = const(int, 0)
2024-09-04 18:31:35,864 - on stmt: jump 165
2024-09-04 18:31:35,864 - ==== SSA block rewrite pass on 165
2024-09-04 18:31:35,864 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A2BC0>
2024-09-04 18:31:35,864 - on stmt: bool80 = global(bool: <class 'bool'>)
2024-09-04 18:31:35,864 - on stmt: $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,864 - on stmt: branch $80pred, 169, 173
2024-09-04 18:31:35,864 - ==== SSA block rewrite pass on 169
2024-09-04 18:31:35,864 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A2BC0>
2024-09-04 18:31:35,864 - on stmt: $82load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,864 - on stmt: $84load_method.1 = getattr(value=$82load_global.0, attr=signbit)
2024-09-04 18:31:35,864 - on stmt: $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,864 - on stmt: $90load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,865 - on stmt: $92load_method.5 = getattr(value=$90load_global.4, attr=signbit)
2024-09-04 18:31:35,865 - on stmt: $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,865 - on stmt: $98compare_op.8 = $88call_method.3 != $96call_method.7
2024-09-04 18:31:35,865 - on stmt: $100return_value.9 = cast(value=$98compare_op.8)
2024-09-04 18:31:35,865 - on stmt: out0[index00] = $100return_value.9
2024-09-04 18:31:35,865 - on stmt: jump 193
2024-09-04 18:31:35,865 - ==== SSA block rewrite pass on 173
2024-09-04 18:31:35,865 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A2BC0>
2024-09-04 18:31:35,865 - on stmt: $102load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,865 - on stmt: $104load_method.1 = getattr(value=$102load_global.0, attr=sign)
2024-09-04 18:31:35,865 - on stmt: $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,865 - on stmt: $110load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,866 - on stmt: $112load_method.5 = getattr(value=$110load_global.4, attr=sign)
2024-09-04 18:31:35,866 - on stmt: $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,866 - on stmt: $118compare_op.8 = $108call_method.3 != $116call_method.7
2024-09-04 18:31:35,866 - on stmt: $120return_value.9 = cast(value=$118compare_op.8)
2024-09-04 18:31:35,866 - on stmt: out0[index00] = $120return_value.9
2024-09-04 18:31:35,866 - on stmt: jump 193
2024-09-04 18:31:35,866 - ==== SSA block rewrite pass on 193
2024-09-04 18:31:35,866 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A2BC0>
2024-09-04 18:31:35,866 - on stmt: jump 80
2024-09-04 18:31:35,866 - Fix SSA violator on var x0
2024-09-04 18:31:35,866 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:35,866 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2380>
2024-09-04 18:31:35,866 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:35,867 - on stmt: threshold = arg(1, name=threshold)
2024-09-04 18:31:35,867 - on stmt: zero_pos = arg(2, name=zero_pos)
2024-09-04 18:31:35,867 - on stmt: full_shape0 = getattr(value=x, attr=shape)
2024-09-04 18:31:35,867 - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,867 - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2024-09-04 18:31:35,867 - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,867 - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2024-09-04 18:31:35,867 - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,867 - on stmt: $const24.9.1 = const(int, 0)
2024-09-04 18:31:35,867 - on stmt: $const28.11.1 = const(NoneType, None)
2024-09-04 18:31:35,867 - on stmt: $const30.12.1 = const(int, 1)
2024-09-04 18:31:35,867 - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:35,867 - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,867 - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2024-09-04 18:31:35,868 - on stmt: $const36.15.1 = const(int, 0)
2024-09-04 18:31:35,868 - on stmt: $const40.17.1 = const(int, 0)
2024-09-04 18:31:35,868 - on stmt: $const42.18.1 = const(NoneType, None)
2024-09-04 18:31:35,868 - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:35,868 - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,868 - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2024-09-04 18:31:35,868 - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2024-09-04 18:31:35,869 - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2024-09-04 18:31:35,869 - on stmt: $const52.23.1 = const(int, 0)
2024-09-04 18:31:35,869 - on stmt: $const54.24.1 = const(int, -1)
2024-09-04 18:31:35,869 - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,869 - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2024-09-04 18:31:35,869 - on stmt: $const62.28.1 = const(int, 0)
2024-09-04 18:31:35,869 - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2024-09-04 18:31:35,869 - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2024-09-04 18:31:35,869 - on stmt: $const68.31.1 = const(int, 0)
2024-09-04 18:31:35,869 - on stmt: $const70.32.1 = const(int, 0)
2024-09-04 18:31:35,869 - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,869 - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2024-09-04 18:31:35,869 - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,870 - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2024-09-04 18:31:35,870 - on stmt: $phi80.0.1 = $78get_iter.36.1
2024-09-04 18:31:35,870 - on stmt: jump 80
2024-09-04 18:31:35,870 - ==== SSA block rewrite pass on 80
2024-09-04 18:31:35,870 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2380>
2024-09-04 18:31:35,870 - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2024-09-04 18:31:35,870 - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2024-09-04 18:31:35,870 - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2024-09-04 18:31:35,870 - on stmt: $phi82.1.1 = $80for_iter.2.1
2024-09-04 18:31:35,870 - on stmt: branch $80for_iter.3.1, 82, 194
2024-09-04 18:31:35,870 - ==== SSA block rewrite pass on 82
2024-09-04 18:31:35,870 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2380>
2024-09-04 18:31:35,870 - on stmt: index00 = $phi82.1.1
2024-09-04 18:31:35,870 - on stmt: jump 90
2024-09-04 18:31:35,870 - ==== SSA block rewrite pass on 194
2024-09-04 18:31:35,871 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2380>
2024-09-04 18:31:35,871 - on stmt: $92return_value.1.1 = cast(value=out0)
2024-09-04 18:31:35,871 - on stmt: return $92return_value.1.1
2024-09-04 18:31:35,871 - ==== SSA block rewrite pass on 90
2024-09-04 18:31:35,871 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2380>
2024-09-04 18:31:35,871 - on stmt: $const4.1 = const(int, 0)
2024-09-04 18:31:35,871 - on stmt: stencil_index = $const4.1 + index00
2024-09-04 18:31:35,871 - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:35,871 - first assign: x0
2024-09-04 18:31:35,871 - replaced with: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:35,871 - on stmt: $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2024-09-04 18:31:35,871 - on stmt: $20compare_op.7 = $12unary_negative.4 <= x0
2024-09-04 18:31:35,871 - on stmt: bool22 = global(bool: <class 'bool'>)
2024-09-04 18:31:35,871 - on stmt: $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,872 - on stmt: $phi24.0 = x0
2024-09-04 18:31:35,872 - on stmt: branch $22pred, 91, 123
2024-09-04 18:31:35,872 - ==== SSA block rewrite pass on 91
2024-09-04 18:31:35,872 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2380>
2024-09-04 18:31:35,872 - on stmt: $26compare_op.2 = x0 <= threshold
2024-09-04 18:31:35,872 - on stmt: bool28 = global(bool: <class 'bool'>)
2024-09-04 18:31:35,872 - on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,872 - on stmt: branch $28pred, 115, 127
2024-09-04 18:31:35,872 - ==== SSA block rewrite pass on 115
2024-09-04 18:31:35,872 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2380>
2024-09-04 18:31:35,872 - on stmt: jump 121
2024-09-04 18:31:35,872 - ==== SSA block rewrite pass on 123
2024-09-04 18:31:35,872 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2380>
2024-09-04 18:31:35,872 - on stmt: jump 127
2024-09-04 18:31:35,872 - ==== SSA block rewrite pass on 121
2024-09-04 18:31:35,872 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2380>
2024-09-04 18:31:35,873 - on stmt: x0 = const(int, 0)
2024-09-04 18:31:35,873 - replaced with: x0.1 = const(int, 0)
2024-09-04 18:31:35,873 - on stmt: jump 127
2024-09-04 18:31:35,873 - ==== SSA block rewrite pass on 127
2024-09-04 18:31:35,873 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2380>
2024-09-04 18:31:35,873 - on stmt: $const42.1 = const(int, -1)
2024-09-04 18:31:35,873 - on stmt: stencil_index.1 = $const42.1 + index00
2024-09-04 18:31:35,873 - on stmt: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2024-09-04 18:31:35,873 - on stmt: $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2024-09-04 18:31:35,873 - on stmt: $58compare_op.7 = $50unary_negative.4 <= x1
2024-09-04 18:31:35,873 - on stmt: bool60 = global(bool: <class 'bool'>)
2024-09-04 18:31:35,873 - on stmt: $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,873 - on stmt: $phi62.0 = x1
2024-09-04 18:31:35,873 - on stmt: branch $60pred, 131, 161
2024-09-04 18:31:35,874 - ==== SSA block rewrite pass on 131
2024-09-04 18:31:35,874 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2380>
2024-09-04 18:31:35,874 - on stmt: $64compare_op.2 = x1 <= threshold
2024-09-04 18:31:35,874 - on stmt: bool66 = global(bool: <class 'bool'>)
2024-09-04 18:31:35,874 - on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,874 - on stmt: branch $66pred, 153, 165
2024-09-04 18:31:35,874 - ==== SSA block rewrite pass on 153
2024-09-04 18:31:35,874 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2380>
2024-09-04 18:31:35,874 - on stmt: jump 159
2024-09-04 18:31:35,874 - ==== SSA block rewrite pass on 161
2024-09-04 18:31:35,874 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2380>
2024-09-04 18:31:35,874 - on stmt: jump 165
2024-09-04 18:31:35,874 - ==== SSA block rewrite pass on 159
2024-09-04 18:31:35,874 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2380>
2024-09-04 18:31:35,875 - on stmt: x1 = const(int, 0)
2024-09-04 18:31:35,875 - on stmt: jump 165
2024-09-04 18:31:35,875 - ==== SSA block rewrite pass on 165
2024-09-04 18:31:35,875 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2380>
2024-09-04 18:31:35,875 - on stmt: bool80 = global(bool: <class 'bool'>)
2024-09-04 18:31:35,875 - on stmt: $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,875 - on stmt: branch $80pred, 169, 173
2024-09-04 18:31:35,875 - ==== SSA block rewrite pass on 169
2024-09-04 18:31:35,875 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2380>
2024-09-04 18:31:35,875 - on stmt: $82load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,875 - on stmt: $84load_method.1 = getattr(value=$82load_global.0, attr=signbit)
2024-09-04 18:31:35,875 - on stmt: $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,875 - on stmt: $90load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,875 - on stmt: $92load_method.5 = getattr(value=$90load_global.4, attr=signbit)
2024-09-04 18:31:35,875 - on stmt: $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,876 - on stmt: $98compare_op.8 = $88call_method.3 != $96call_method.7
2024-09-04 18:31:35,876 - on stmt: $100return_value.9 = cast(value=$98compare_op.8)
2024-09-04 18:31:35,876 - on stmt: out0[index00] = $100return_value.9
2024-09-04 18:31:35,876 - on stmt: jump 193
2024-09-04 18:31:35,876 - ==== SSA block rewrite pass on 173
2024-09-04 18:31:35,876 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2380>
2024-09-04 18:31:35,876 - on stmt: $102load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,876 - on stmt: $104load_method.1 = getattr(value=$102load_global.0, attr=sign)
2024-09-04 18:31:35,876 - on stmt: $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,876 - on stmt: $110load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,876 - on stmt: $112load_method.5 = getattr(value=$110load_global.4, attr=sign)
2024-09-04 18:31:35,876 - on stmt: $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,876 - on stmt: $118compare_op.8 = $108call_method.3 != $116call_method.7
2024-09-04 18:31:35,876 - on stmt: $120return_value.9 = cast(value=$118compare_op.8)
2024-09-04 18:31:35,877 - on stmt: out0[index00] = $120return_value.9
2024-09-04 18:31:35,877 - on stmt: jump 193
2024-09-04 18:31:35,877 - ==== SSA block rewrite pass on 193
2024-09-04 18:31:35,877 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2380>
2024-09-04 18:31:35,877 - on stmt: jump 80
2024-09-04 18:31:35,877 - Replaced assignments: defaultdict(<class 'list'>,
            {90: [<numba.core.ir.Assign object at 0x000002431D1A26E0>],
             121: [<numba.core.ir.Assign object at 0x000002431D1A2260>]})
2024-09-04 18:31:35,877 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:35,877 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A3370>
2024-09-04 18:31:35,877 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:35,877 - on stmt: threshold = arg(1, name=threshold)
2024-09-04 18:31:35,877 - on stmt: zero_pos = arg(2, name=zero_pos)
2024-09-04 18:31:35,877 - on stmt: full_shape0 = getattr(value=x, attr=shape)
2024-09-04 18:31:35,877 - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,878 - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2024-09-04 18:31:35,878 - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,878 - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2024-09-04 18:31:35,878 - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,878 - on stmt: $const24.9.1 = const(int, 0)
2024-09-04 18:31:35,878 - on stmt: $const28.11.1 = const(NoneType, None)
2024-09-04 18:31:35,878 - on stmt: $const30.12.1 = const(int, 1)
2024-09-04 18:31:35,878 - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:35,878 - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,878 - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2024-09-04 18:31:35,878 - on stmt: $const36.15.1 = const(int, 0)
2024-09-04 18:31:35,878 - on stmt: $const40.17.1 = const(int, 0)
2024-09-04 18:31:35,878 - on stmt: $const42.18.1 = const(NoneType, None)
2024-09-04 18:31:35,878 - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:35,878 - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,878 - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2024-09-04 18:31:35,878 - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2024-09-04 18:31:35,878 - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2024-09-04 18:31:35,878 - on stmt: $const52.23.1 = const(int, 0)
2024-09-04 18:31:35,880 - on stmt: $const54.24.1 = const(int, -1)
2024-09-04 18:31:35,880 - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,880 - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2024-09-04 18:31:35,880 - on stmt: $const62.28.1 = const(int, 0)
2024-09-04 18:31:35,880 - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2024-09-04 18:31:35,880 - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2024-09-04 18:31:35,880 - on stmt: $const68.31.1 = const(int, 0)
2024-09-04 18:31:35,880 - on stmt: $const70.32.1 = const(int, 0)
2024-09-04 18:31:35,880 - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,880 - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2024-09-04 18:31:35,880 - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,880 - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2024-09-04 18:31:35,880 - on stmt: $phi80.0.1 = $78get_iter.36.1
2024-09-04 18:31:35,880 - on stmt: jump 80
2024-09-04 18:31:35,880 - ==== SSA block rewrite pass on 80
2024-09-04 18:31:35,880 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A3370>
2024-09-04 18:31:35,880 - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2024-09-04 18:31:35,880 - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2024-09-04 18:31:35,880 - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2024-09-04 18:31:35,881 - on stmt: $phi82.1.1 = $80for_iter.2.1
2024-09-04 18:31:35,881 - on stmt: branch $80for_iter.3.1, 82, 194
2024-09-04 18:31:35,881 - ==== SSA block rewrite pass on 82
2024-09-04 18:31:35,881 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A3370>
2024-09-04 18:31:35,881 - on stmt: index00 = $phi82.1.1
2024-09-04 18:31:35,881 - on stmt: jump 90
2024-09-04 18:31:35,881 - ==== SSA block rewrite pass on 194
2024-09-04 18:31:35,881 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A3370>
2024-09-04 18:31:35,881 - on stmt: $92return_value.1.1 = cast(value=out0)
2024-09-04 18:31:35,881 - on stmt: return $92return_value.1.1
2024-09-04 18:31:35,881 - ==== SSA block rewrite pass on 90
2024-09-04 18:31:35,881 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A3370>
2024-09-04 18:31:35,881 - on stmt: $const4.1 = const(int, 0)
2024-09-04 18:31:35,881 - on stmt: stencil_index = $const4.1 + index00
2024-09-04 18:31:35,881 - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:35,882 - on stmt: $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2024-09-04 18:31:35,882 - on stmt: $20compare_op.7 = $12unary_negative.4 <= x0
2024-09-04 18:31:35,882 - find_def var='x0' stmt=$20compare_op.7 = $12unary_negative.4 <= x0
2024-09-04 18:31:35,882 - on stmt: bool22 = global(bool: <class 'bool'>)
2024-09-04 18:31:35,882 - on stmt: $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,882 - on stmt: $phi24.0 = x0
2024-09-04 18:31:35,882 - find_def var='x0' stmt=$phi24.0 = x0
2024-09-04 18:31:35,882 - on stmt: branch $22pred, 91, 123
2024-09-04 18:31:35,882 - ==== SSA block rewrite pass on 91
2024-09-04 18:31:35,882 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A3370>
2024-09-04 18:31:35,882 - on stmt: $26compare_op.2 = x0 <= threshold
2024-09-04 18:31:35,882 - find_def var='x0' stmt=$26compare_op.2 = x0 <= threshold
2024-09-04 18:31:35,883 - find_def_from_top label 91
2024-09-04 18:31:35,883 - idom 90 from label 91
2024-09-04 18:31:35,883 - find_def_from_bottom label 90
2024-09-04 18:31:35,883 - on stmt: bool28 = global(bool: <class 'bool'>)
2024-09-04 18:31:35,883 - on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,883 - on stmt: branch $28pred, 115, 127
2024-09-04 18:31:35,883 - ==== SSA block rewrite pass on 115
2024-09-04 18:31:35,883 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A3370>
2024-09-04 18:31:35,883 - on stmt: jump 121
2024-09-04 18:31:35,883 - ==== SSA block rewrite pass on 123
2024-09-04 18:31:35,883 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A3370>
2024-09-04 18:31:35,883 - on stmt: jump 127
2024-09-04 18:31:35,883 - ==== SSA block rewrite pass on 121
2024-09-04 18:31:35,883 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A3370>
2024-09-04 18:31:35,883 - on stmt: x0.1 = const(int, 0)
2024-09-04 18:31:35,884 - on stmt: jump 127
2024-09-04 18:31:35,884 - ==== SSA block rewrite pass on 127
2024-09-04 18:31:35,884 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A3370>
2024-09-04 18:31:35,884 - on stmt: $const42.1 = const(int, -1)
2024-09-04 18:31:35,884 - on stmt: stencil_index.1 = $const42.1 + index00
2024-09-04 18:31:35,884 - on stmt: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2024-09-04 18:31:35,884 - on stmt: $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2024-09-04 18:31:35,884 - on stmt: $58compare_op.7 = $50unary_negative.4 <= x1
2024-09-04 18:31:35,884 - on stmt: bool60 = global(bool: <class 'bool'>)
2024-09-04 18:31:35,884 - on stmt: $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,884 - on stmt: $phi62.0 = x1
2024-09-04 18:31:35,884 - on stmt: branch $60pred, 131, 161
2024-09-04 18:31:35,884 - ==== SSA block rewrite pass on 131
2024-09-04 18:31:35,885 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A3370>
2024-09-04 18:31:35,885 - on stmt: $64compare_op.2 = x1 <= threshold
2024-09-04 18:31:35,885 - on stmt: bool66 = global(bool: <class 'bool'>)
2024-09-04 18:31:35,885 - on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,885 - on stmt: branch $66pred, 153, 165
2024-09-04 18:31:35,885 - ==== SSA block rewrite pass on 153
2024-09-04 18:31:35,885 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A3370>
2024-09-04 18:31:35,885 - on stmt: jump 159
2024-09-04 18:31:35,885 - ==== SSA block rewrite pass on 161
2024-09-04 18:31:35,885 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A3370>
2024-09-04 18:31:35,885 - on stmt: jump 165
2024-09-04 18:31:35,885 - ==== SSA block rewrite pass on 159
2024-09-04 18:31:35,885 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A3370>
2024-09-04 18:31:35,885 - on stmt: x1 = const(int, 0)
2024-09-04 18:31:35,886 - on stmt: jump 165
2024-09-04 18:31:35,886 - ==== SSA block rewrite pass on 165
2024-09-04 18:31:35,886 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A3370>
2024-09-04 18:31:35,886 - on stmt: bool80 = global(bool: <class 'bool'>)
2024-09-04 18:31:35,886 - on stmt: $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,886 - on stmt: branch $80pred, 169, 173
2024-09-04 18:31:35,886 - ==== SSA block rewrite pass on 169
2024-09-04 18:31:35,886 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A3370>
2024-09-04 18:31:35,886 - on stmt: $82load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,886 - on stmt: $84load_method.1 = getattr(value=$82load_global.0, attr=signbit)
2024-09-04 18:31:35,886 - on stmt: $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,886 - find_def var='x0' stmt=$88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,886 - find_def_from_top label 169
2024-09-04 18:31:35,887 - idom 165 from label 169
2024-09-04 18:31:35,887 - find_def_from_bottom label 165
2024-09-04 18:31:35,887 - find_def_from_top label 165
2024-09-04 18:31:35,887 - idom 127 from label 165
2024-09-04 18:31:35,887 - find_def_from_bottom label 127
2024-09-04 18:31:35,887 - find_def_from_top label 127
2024-09-04 18:31:35,887 - insert phi node x0.2 = phi(incoming_values=[], incoming_blocks=[]) at 127
2024-09-04 18:31:35,887 - find_def_from_bottom label 123
2024-09-04 18:31:35,887 - find_def_from_top label 123
2024-09-04 18:31:35,887 - idom 90 from label 123
2024-09-04 18:31:35,887 - find_def_from_bottom label 90
2024-09-04 18:31:35,887 - incoming_def x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:35,887 - find_def_from_bottom label 121
2024-09-04 18:31:35,887 - incoming_def x0.1 = const(int, 0)
2024-09-04 18:31:35,887 - find_def_from_bottom label 91
2024-09-04 18:31:35,888 - find_def_from_top label 91
2024-09-04 18:31:35,888 - idom 90 from label 91
2024-09-04 18:31:35,888 - find_def_from_bottom label 90
2024-09-04 18:31:35,888 - incoming_def x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:35,888 - replaced with: $88call_method.3 = call $84load_method.1(x0.2, func=$84load_method.1, args=[Var(x0.2, audio.py:1153)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,888 - on stmt: $90load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,888 - on stmt: $92load_method.5 = getattr(value=$90load_global.4, attr=signbit)
2024-09-04 18:31:35,888 - on stmt: $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,888 - on stmt: $98compare_op.8 = $88call_method.3 != $96call_method.7
2024-09-04 18:31:35,888 - on stmt: $100return_value.9 = cast(value=$98compare_op.8)
2024-09-04 18:31:35,888 - on stmt: out0[index00] = $100return_value.9
2024-09-04 18:31:35,888 - on stmt: jump 193
2024-09-04 18:31:35,888 - ==== SSA block rewrite pass on 173
2024-09-04 18:31:35,889 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A3370>
2024-09-04 18:31:35,889 - on stmt: $102load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,889 - on stmt: $104load_method.1 = getattr(value=$102load_global.0, attr=sign)
2024-09-04 18:31:35,889 - on stmt: $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,889 - find_def var='x0' stmt=$108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,889 - find_def_from_top label 173
2024-09-04 18:31:35,889 - idom 165 from label 173
2024-09-04 18:31:35,889 - find_def_from_bottom label 165
2024-09-04 18:31:35,889 - find_def_from_top label 165
2024-09-04 18:31:35,889 - idom 127 from label 165
2024-09-04 18:31:35,889 - find_def_from_bottom label 127
2024-09-04 18:31:35,889 - replaced with: $108call_method.3 = call $104load_method.1(x0.2, func=$104load_method.1, args=[Var(x0.2, audio.py:1153)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,889 - on stmt: $110load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,890 - on stmt: $112load_method.5 = getattr(value=$110load_global.4, attr=sign)
2024-09-04 18:31:35,890 - on stmt: $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,890 - on stmt: $118compare_op.8 = $108call_method.3 != $116call_method.7
2024-09-04 18:31:35,890 - on stmt: $120return_value.9 = cast(value=$118compare_op.8)
2024-09-04 18:31:35,890 - on stmt: out0[index00] = $120return_value.9
2024-09-04 18:31:35,890 - on stmt: jump 193
2024-09-04 18:31:35,890 - ==== SSA block rewrite pass on 193
2024-09-04 18:31:35,890 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A3370>
2024-09-04 18:31:35,890 - on stmt: jump 80
2024-09-04 18:31:35,890 - Fix SSA violator on var x1
2024-09-04 18:31:35,890 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:35,890 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2140>
2024-09-04 18:31:35,890 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:35,891 - on stmt: threshold = arg(1, name=threshold)
2024-09-04 18:31:35,891 - on stmt: zero_pos = arg(2, name=zero_pos)
2024-09-04 18:31:35,891 - on stmt: full_shape0 = getattr(value=x, attr=shape)
2024-09-04 18:31:35,891 - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,891 - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2024-09-04 18:31:35,891 - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,891 - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2024-09-04 18:31:35,891 - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,891 - on stmt: $const24.9.1 = const(int, 0)
2024-09-04 18:31:35,891 - on stmt: $const28.11.1 = const(NoneType, None)
2024-09-04 18:31:35,891 - on stmt: $const30.12.1 = const(int, 1)
2024-09-04 18:31:35,891 - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:35,891 - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,892 - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2024-09-04 18:31:35,892 - on stmt: $const36.15.1 = const(int, 0)
2024-09-04 18:31:35,892 - on stmt: $const40.17.1 = const(int, 0)
2024-09-04 18:31:35,892 - on stmt: $const42.18.1 = const(NoneType, None)
2024-09-04 18:31:35,892 - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:35,892 - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,892 - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2024-09-04 18:31:35,892 - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2024-09-04 18:31:35,892 - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2024-09-04 18:31:35,892 - on stmt: $const52.23.1 = const(int, 0)
2024-09-04 18:31:35,892 - on stmt: $const54.24.1 = const(int, -1)
2024-09-04 18:31:35,892 - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,892 - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2024-09-04 18:31:35,892 - on stmt: $const62.28.1 = const(int, 0)
2024-09-04 18:31:35,893 - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2024-09-04 18:31:35,893 - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2024-09-04 18:31:35,893 - on stmt: $const68.31.1 = const(int, 0)
2024-09-04 18:31:35,893 - on stmt: $const70.32.1 = const(int, 0)
2024-09-04 18:31:35,893 - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,893 - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2024-09-04 18:31:35,893 - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,893 - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2024-09-04 18:31:35,893 - on stmt: $phi80.0.1 = $78get_iter.36.1
2024-09-04 18:31:35,893 - on stmt: jump 80
2024-09-04 18:31:35,893 - ==== SSA block rewrite pass on 80
2024-09-04 18:31:35,893 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2140>
2024-09-04 18:31:35,893 - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2024-09-04 18:31:35,893 - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2024-09-04 18:31:35,894 - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2024-09-04 18:31:35,894 - on stmt: $phi82.1.1 = $80for_iter.2.1
2024-09-04 18:31:35,894 - on stmt: branch $80for_iter.3.1, 82, 194
2024-09-04 18:31:35,894 - ==== SSA block rewrite pass on 82
2024-09-04 18:31:35,894 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2140>
2024-09-04 18:31:35,894 - on stmt: index00 = $phi82.1.1
2024-09-04 18:31:35,894 - on stmt: jump 90
2024-09-04 18:31:35,894 - ==== SSA block rewrite pass on 194
2024-09-04 18:31:35,894 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2140>
2024-09-04 18:31:35,894 - on stmt: $92return_value.1.1 = cast(value=out0)
2024-09-04 18:31:35,894 - on stmt: return $92return_value.1.1
2024-09-04 18:31:35,894 - ==== SSA block rewrite pass on 90
2024-09-04 18:31:35,894 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2140>
2024-09-04 18:31:35,894 - on stmt: $const4.1 = const(int, 0)
2024-09-04 18:31:35,894 - on stmt: stencil_index = $const4.1 + index00
2024-09-04 18:31:35,895 - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:35,895 - on stmt: $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2024-09-04 18:31:35,895 - on stmt: $20compare_op.7 = $12unary_negative.4 <= x0
2024-09-04 18:31:35,895 - on stmt: bool22 = global(bool: <class 'bool'>)
2024-09-04 18:31:35,895 - on stmt: $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,895 - on stmt: $phi24.0 = x0
2024-09-04 18:31:35,895 - on stmt: branch $22pred, 91, 123
2024-09-04 18:31:35,895 - ==== SSA block rewrite pass on 91
2024-09-04 18:31:35,895 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2140>
2024-09-04 18:31:35,895 - on stmt: $26compare_op.2 = x0 <= threshold
2024-09-04 18:31:35,895 - on stmt: bool28 = global(bool: <class 'bool'>)
2024-09-04 18:31:35,895 - on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,895 - on stmt: branch $28pred, 115, 127
2024-09-04 18:31:35,896 - ==== SSA block rewrite pass on 115
2024-09-04 18:31:35,896 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2140>
2024-09-04 18:31:35,896 - on stmt: jump 121
2024-09-04 18:31:35,896 - ==== SSA block rewrite pass on 123
2024-09-04 18:31:35,896 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2140>
2024-09-04 18:31:35,896 - on stmt: jump 127
2024-09-04 18:31:35,896 - ==== SSA block rewrite pass on 121
2024-09-04 18:31:35,896 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2140>
2024-09-04 18:31:35,896 - on stmt: x0.1 = const(int, 0)
2024-09-04 18:31:35,896 - on stmt: jump 127
2024-09-04 18:31:35,896 - ==== SSA block rewrite pass on 127
2024-09-04 18:31:35,896 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2140>
2024-09-04 18:31:35,896 - on stmt: x0.2 = phi(incoming_values=[Var(x0, audio.py:1144), Var(x0.1, audio.py:1146), Var(x0, audio.py:1144)], incoming_blocks=[123, 121, 91])
2024-09-04 18:31:35,896 - on stmt: $const42.1 = const(int, -1)
2024-09-04 18:31:35,897 - on stmt: stencil_index.1 = $const42.1 + index00
2024-09-04 18:31:35,897 - on stmt: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2024-09-04 18:31:35,897 - first assign: x1
2024-09-04 18:31:35,897 - replaced with: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2024-09-04 18:31:35,897 - on stmt: $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2024-09-04 18:31:35,897 - on stmt: $58compare_op.7 = $50unary_negative.4 <= x1
2024-09-04 18:31:35,897 - on stmt: bool60 = global(bool: <class 'bool'>)
2024-09-04 18:31:35,897 - on stmt: $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,897 - on stmt: $phi62.0 = x1
2024-09-04 18:31:35,897 - on stmt: branch $60pred, 131, 161
2024-09-04 18:31:35,897 - ==== SSA block rewrite pass on 131
2024-09-04 18:31:35,897 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2140>
2024-09-04 18:31:35,898 - on stmt: $64compare_op.2 = x1 <= threshold
2024-09-04 18:31:35,898 - on stmt: bool66 = global(bool: <class 'bool'>)
2024-09-04 18:31:35,898 - on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,898 - on stmt: branch $66pred, 153, 165
2024-09-04 18:31:35,898 - ==== SSA block rewrite pass on 153
2024-09-04 18:31:35,898 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2140>
2024-09-04 18:31:35,898 - on stmt: jump 159
2024-09-04 18:31:35,898 - ==== SSA block rewrite pass on 161
2024-09-04 18:31:35,898 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2140>
2024-09-04 18:31:35,898 - on stmt: jump 165
2024-09-04 18:31:35,898 - ==== SSA block rewrite pass on 159
2024-09-04 18:31:35,898 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2140>
2024-09-04 18:31:35,898 - on stmt: x1 = const(int, 0)
2024-09-04 18:31:35,898 - replaced with: x1.1 = const(int, 0)
2024-09-04 18:31:35,899 - on stmt: jump 165
2024-09-04 18:31:35,899 - ==== SSA block rewrite pass on 165
2024-09-04 18:31:35,899 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2140>
2024-09-04 18:31:35,899 - on stmt: bool80 = global(bool: <class 'bool'>)
2024-09-04 18:31:35,899 - on stmt: $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,899 - on stmt: branch $80pred, 169, 173
2024-09-04 18:31:35,899 - ==== SSA block rewrite pass on 169
2024-09-04 18:31:35,899 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2140>
2024-09-04 18:31:35,899 - on stmt: $82load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,899 - on stmt: $84load_method.1 = getattr(value=$82load_global.0, attr=signbit)
2024-09-04 18:31:35,899 - on stmt: $88call_method.3 = call $84load_method.1(x0.2, func=$84load_method.1, args=[Var(x0.2, audio.py:1153)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,899 - on stmt: $90load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,899 - on stmt: $92load_method.5 = getattr(value=$90load_global.4, attr=signbit)
2024-09-04 18:31:35,900 - on stmt: $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,900 - on stmt: $98compare_op.8 = $88call_method.3 != $96call_method.7
2024-09-04 18:31:35,900 - on stmt: $100return_value.9 = cast(value=$98compare_op.8)
2024-09-04 18:31:35,900 - on stmt: out0[index00] = $100return_value.9
2024-09-04 18:31:35,900 - on stmt: jump 193
2024-09-04 18:31:35,900 - ==== SSA block rewrite pass on 173
2024-09-04 18:31:35,900 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2140>
2024-09-04 18:31:35,900 - on stmt: $102load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,900 - on stmt: $104load_method.1 = getattr(value=$102load_global.0, attr=sign)
2024-09-04 18:31:35,900 - on stmt: $108call_method.3 = call $104load_method.1(x0.2, func=$104load_method.1, args=[Var(x0.2, audio.py:1153)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,900 - on stmt: $110load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,900 - on stmt: $112load_method.5 = getattr(value=$110load_global.4, attr=sign)
2024-09-04 18:31:35,900 - on stmt: $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,900 - on stmt: $118compare_op.8 = $108call_method.3 != $116call_method.7
2024-09-04 18:31:35,900 - on stmt: $120return_value.9 = cast(value=$118compare_op.8)
2024-09-04 18:31:35,901 - on stmt: out0[index00] = $120return_value.9
2024-09-04 18:31:35,901 - on stmt: jump 193
2024-09-04 18:31:35,901 - ==== SSA block rewrite pass on 193
2024-09-04 18:31:35,901 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1A2140>
2024-09-04 18:31:35,901 - on stmt: jump 80
2024-09-04 18:31:35,901 - Replaced assignments: defaultdict(<class 'list'>,
            {127: [<numba.core.ir.Assign object at 0x000002431D1A28C0>],
             159: [<numba.core.ir.Assign object at 0x000002431D18C850>]})
2024-09-04 18:31:35,901 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:35,901 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A29B0>
2024-09-04 18:31:35,901 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:35,901 - on stmt: threshold = arg(1, name=threshold)
2024-09-04 18:31:35,901 - on stmt: zero_pos = arg(2, name=zero_pos)
2024-09-04 18:31:35,901 - on stmt: full_shape0 = getattr(value=x, attr=shape)
2024-09-04 18:31:35,901 - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,902 - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2024-09-04 18:31:35,902 - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,902 - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2024-09-04 18:31:35,902 - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,902 - on stmt: $const24.9.1 = const(int, 0)
2024-09-04 18:31:35,902 - on stmt: $const28.11.1 = const(NoneType, None)
2024-09-04 18:31:35,902 - on stmt: $const30.12.1 = const(int, 1)
2024-09-04 18:31:35,902 - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:35,902 - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,902 - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2024-09-04 18:31:35,902 - on stmt: $const36.15.1 = const(int, 0)
2024-09-04 18:31:35,902 - on stmt: $const40.17.1 = const(int, 0)
2024-09-04 18:31:35,902 - on stmt: $const42.18.1 = const(NoneType, None)
2024-09-04 18:31:35,903 - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:35,903 - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,903 - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2024-09-04 18:31:35,903 - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2024-09-04 18:31:35,903 - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2024-09-04 18:31:35,903 - on stmt: $const52.23.1 = const(int, 0)
2024-09-04 18:31:35,903 - on stmt: $const54.24.1 = const(int, -1)
2024-09-04 18:31:35,903 - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,903 - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2024-09-04 18:31:35,903 - on stmt: $const62.28.1 = const(int, 0)
2024-09-04 18:31:35,903 - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2024-09-04 18:31:35,903 - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2024-09-04 18:31:35,903 - on stmt: $const68.31.1 = const(int, 0)
2024-09-04 18:31:35,904 - on stmt: $const70.32.1 = const(int, 0)
2024-09-04 18:31:35,904 - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,904 - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2024-09-04 18:31:35,904 - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,904 - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2024-09-04 18:31:35,904 - on stmt: $phi80.0.1 = $78get_iter.36.1
2024-09-04 18:31:35,904 - on stmt: jump 80
2024-09-04 18:31:35,904 - ==== SSA block rewrite pass on 80
2024-09-04 18:31:35,904 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A29B0>
2024-09-04 18:31:35,904 - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2024-09-04 18:31:35,904 - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2024-09-04 18:31:35,904 - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2024-09-04 18:31:35,905 - on stmt: $phi82.1.1 = $80for_iter.2.1
2024-09-04 18:31:35,905 - on stmt: branch $80for_iter.3.1, 82, 194
2024-09-04 18:31:35,905 - ==== SSA block rewrite pass on 82
2024-09-04 18:31:35,905 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A29B0>
2024-09-04 18:31:35,905 - on stmt: index00 = $phi82.1.1
2024-09-04 18:31:35,905 - on stmt: jump 90
2024-09-04 18:31:35,905 - ==== SSA block rewrite pass on 194
2024-09-04 18:31:35,905 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A29B0>
2024-09-04 18:31:35,905 - on stmt: $92return_value.1.1 = cast(value=out0)
2024-09-04 18:31:35,905 - on stmt: return $92return_value.1.1
2024-09-04 18:31:35,905 - ==== SSA block rewrite pass on 90
2024-09-04 18:31:35,905 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A29B0>
2024-09-04 18:31:35,905 - on stmt: $const4.1 = const(int, 0)
2024-09-04 18:31:35,905 - on stmt: stencil_index = $const4.1 + index00
2024-09-04 18:31:35,906 - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:35,906 - on stmt: $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2024-09-04 18:31:35,906 - on stmt: $20compare_op.7 = $12unary_negative.4 <= x0
2024-09-04 18:31:35,906 - on stmt: bool22 = global(bool: <class 'bool'>)
2024-09-04 18:31:35,906 - on stmt: $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,906 - on stmt: $phi24.0 = x0
2024-09-04 18:31:35,906 - on stmt: branch $22pred, 91, 123
2024-09-04 18:31:35,906 - ==== SSA block rewrite pass on 91
2024-09-04 18:31:35,906 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A29B0>
2024-09-04 18:31:35,906 - on stmt: $26compare_op.2 = x0 <= threshold
2024-09-04 18:31:35,906 - on stmt: bool28 = global(bool: <class 'bool'>)
2024-09-04 18:31:35,906 - on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,906 - on stmt: branch $28pred, 115, 127
2024-09-04 18:31:35,907 - ==== SSA block rewrite pass on 115
2024-09-04 18:31:35,907 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A29B0>
2024-09-04 18:31:35,907 - on stmt: jump 121
2024-09-04 18:31:35,907 - ==== SSA block rewrite pass on 123
2024-09-04 18:31:35,907 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A29B0>
2024-09-04 18:31:35,907 - on stmt: jump 127
2024-09-04 18:31:35,907 - ==== SSA block rewrite pass on 121
2024-09-04 18:31:35,907 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A29B0>
2024-09-04 18:31:35,907 - on stmt: x0.1 = const(int, 0)
2024-09-04 18:31:35,907 - on stmt: jump 127
2024-09-04 18:31:35,907 - ==== SSA block rewrite pass on 127
2024-09-04 18:31:35,907 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A29B0>
2024-09-04 18:31:35,907 - on stmt: x0.2 = phi(incoming_values=[Var(x0, audio.py:1144), Var(x0.1, audio.py:1146), Var(x0, audio.py:1144)], incoming_blocks=[123, 121, 91])
2024-09-04 18:31:35,907 - on stmt: $const42.1 = const(int, -1)
2024-09-04 18:31:35,908 - on stmt: stencil_index.1 = $const42.1 + index00
2024-09-04 18:31:35,908 - on stmt: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2024-09-04 18:31:35,908 - on stmt: $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2024-09-04 18:31:35,908 - on stmt: $58compare_op.7 = $50unary_negative.4 <= x1
2024-09-04 18:31:35,908 - find_def var='x1' stmt=$58compare_op.7 = $50unary_negative.4 <= x1
2024-09-04 18:31:35,908 - on stmt: bool60 = global(bool: <class 'bool'>)
2024-09-04 18:31:35,908 - on stmt: $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,908 - on stmt: $phi62.0 = x1
2024-09-04 18:31:35,908 - find_def var='x1' stmt=$phi62.0 = x1
2024-09-04 18:31:35,908 - on stmt: branch $60pred, 131, 161
2024-09-04 18:31:35,908 - ==== SSA block rewrite pass on 131
2024-09-04 18:31:35,908 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A29B0>
2024-09-04 18:31:35,908 - on stmt: $64compare_op.2 = x1 <= threshold
2024-09-04 18:31:35,909 - find_def var='x1' stmt=$64compare_op.2 = x1 <= threshold
2024-09-04 18:31:35,909 - find_def_from_top label 131
2024-09-04 18:31:35,909 - idom 127 from label 131
2024-09-04 18:31:35,909 - find_def_from_bottom label 127
2024-09-04 18:31:35,909 - on stmt: bool66 = global(bool: <class 'bool'>)
2024-09-04 18:31:35,909 - on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,909 - on stmt: branch $66pred, 153, 165
2024-09-04 18:31:35,909 - ==== SSA block rewrite pass on 153
2024-09-04 18:31:35,909 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A29B0>
2024-09-04 18:31:35,909 - on stmt: jump 159
2024-09-04 18:31:35,909 - ==== SSA block rewrite pass on 161
2024-09-04 18:31:35,909 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A29B0>
2024-09-04 18:31:35,909 - on stmt: jump 165
2024-09-04 18:31:35,909 - ==== SSA block rewrite pass on 159
2024-09-04 18:31:35,910 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A29B0>
2024-09-04 18:31:35,910 - on stmt: x1.1 = const(int, 0)
2024-09-04 18:31:35,910 - on stmt: jump 165
2024-09-04 18:31:35,910 - ==== SSA block rewrite pass on 165
2024-09-04 18:31:35,910 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A29B0>
2024-09-04 18:31:35,910 - on stmt: bool80 = global(bool: <class 'bool'>)
2024-09-04 18:31:35,910 - on stmt: $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,910 - on stmt: branch $80pred, 169, 173
2024-09-04 18:31:35,910 - ==== SSA block rewrite pass on 169
2024-09-04 18:31:35,910 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A29B0>
2024-09-04 18:31:35,910 - on stmt: $82load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,910 - on stmt: $84load_method.1 = getattr(value=$82load_global.0, attr=signbit)
2024-09-04 18:31:35,910 - on stmt: $88call_method.3 = call $84load_method.1(x0.2, func=$84load_method.1, args=[Var(x0.2, audio.py:1153)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,911 - on stmt: $90load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,911 - on stmt: $92load_method.5 = getattr(value=$90load_global.4, attr=signbit)
2024-09-04 18:31:35,911 - on stmt: $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,911 - find_def var='x1' stmt=$96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,911 - find_def_from_top label 169
2024-09-04 18:31:35,911 - idom 165 from label 169
2024-09-04 18:31:35,911 - find_def_from_bottom label 165
2024-09-04 18:31:35,911 - find_def_from_top label 165
2024-09-04 18:31:35,911 - insert phi node x1.2 = phi(incoming_values=[], incoming_blocks=[]) at 165
2024-09-04 18:31:35,911 - find_def_from_bottom label 161
2024-09-04 18:31:35,911 - find_def_from_top label 161
2024-09-04 18:31:35,911 - idom 127 from label 161
2024-09-04 18:31:35,911 - find_def_from_bottom label 127
2024-09-04 18:31:35,911 - incoming_def x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2024-09-04 18:31:35,912 - find_def_from_bottom label 131
2024-09-04 18:31:35,912 - find_def_from_top label 131
2024-09-04 18:31:35,912 - idom 127 from label 131
2024-09-04 18:31:35,912 - find_def_from_bottom label 127
2024-09-04 18:31:35,912 - incoming_def x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2024-09-04 18:31:35,912 - find_def_from_bottom label 159
2024-09-04 18:31:35,912 - incoming_def x1.1 = const(int, 0)
2024-09-04 18:31:35,912 - replaced with: $96call_method.7 = call $92load_method.5(x1.2, func=$92load_method.5, args=[Var(x1.2, audio.py:1153)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,912 - on stmt: $98compare_op.8 = $88call_method.3 != $96call_method.7
2024-09-04 18:31:35,912 - on stmt: $100return_value.9 = cast(value=$98compare_op.8)
2024-09-04 18:31:35,912 - on stmt: out0[index00] = $100return_value.9
2024-09-04 18:31:35,912 - on stmt: jump 193
2024-09-04 18:31:35,912 - ==== SSA block rewrite pass on 173
2024-09-04 18:31:35,913 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A29B0>
2024-09-04 18:31:35,913 - on stmt: $102load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,913 - on stmt: $104load_method.1 = getattr(value=$102load_global.0, attr=sign)
2024-09-04 18:31:35,913 - on stmt: $108call_method.3 = call $104load_method.1(x0.2, func=$104load_method.1, args=[Var(x0.2, audio.py:1153)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,913 - on stmt: $110load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:35,913 - on stmt: $112load_method.5 = getattr(value=$110load_global.4, attr=sign)
2024-09-04 18:31:35,913 - on stmt: $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,913 - find_def var='x1' stmt=$116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,913 - find_def_from_top label 173
2024-09-04 18:31:35,913 - idom 165 from label 173
2024-09-04 18:31:35,913 - find_def_from_bottom label 165
2024-09-04 18:31:35,913 - replaced with: $116call_method.7 = call $112load_method.5(x1.2, func=$112load_method.5, args=[Var(x1.2, audio.py:1153)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:35,914 - on stmt: $118compare_op.8 = $108call_method.3 != $116call_method.7
2024-09-04 18:31:35,914 - on stmt: $120return_value.9 = cast(value=$118compare_op.8)
2024-09-04 18:31:35,914 - on stmt: out0[index00] = $120return_value.9
2024-09-04 18:31:35,914 - on stmt: jump 193
2024-09-04 18:31:35,914 - ==== SSA block rewrite pass on 193
2024-09-04 18:31:35,914 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1A29B0>
2024-09-04 18:31:35,914 - on stmt: jump 80
2024-09-04 18:31:36,761 - bytecode dump:
>          0	NOP(arg=None, lineno=1039)
           2	LOAD_FAST(arg=0, lineno=1042)
           4	LOAD_CONST(arg=1, lineno=1042)
           6	BINARY_SUBSCR(arg=None, lineno=1042)
           8	LOAD_FAST(arg=0, lineno=1042)
          10	LOAD_CONST(arg=2, lineno=1042)
          12	BINARY_SUBSCR(arg=None, lineno=1042)
          14	COMPARE_OP(arg=4, lineno=1042)
          16	LOAD_FAST(arg=0, lineno=1042)
          18	LOAD_CONST(arg=1, lineno=1042)
          20	BINARY_SUBSCR(arg=None, lineno=1042)
          22	LOAD_FAST(arg=0, lineno=1042)
          24	LOAD_CONST(arg=3, lineno=1042)
          26	BINARY_SUBSCR(arg=None, lineno=1042)
          28	COMPARE_OP(arg=5, lineno=1042)
          30	BINARY_AND(arg=None, lineno=1042)
          32	RETURN_VALUE(arg=None, lineno=1042)
2024-09-04 18:31:36,761 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:36,761 - stack: []
2024-09-04 18:31:36,761 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:36,762 - dispatch pc=0, inst=NOP(arg=None, lineno=1039)
2024-09-04 18:31:36,762 - stack []
2024-09-04 18:31:36,762 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-04 18:31:36,762 - stack []
2024-09-04 18:31:36,762 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1042)
2024-09-04 18:31:36,762 - stack ['$x2.0']
2024-09-04 18:31:36,762 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-04 18:31:36,762 - stack ['$x2.0', '$const4.1']
2024-09-04 18:31:36,762 - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-04 18:31:36,763 - stack ['$6binary_subscr.2']
2024-09-04 18:31:36,763 - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1042)
2024-09-04 18:31:36,763 - stack ['$6binary_subscr.2', '$x8.3']
2024-09-04 18:31:36,763 - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-04 18:31:36,763 - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2024-09-04 18:31:36,763 - dispatch pc=14, inst=COMPARE_OP(arg=4, lineno=1042)
2024-09-04 18:31:36,763 - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2024-09-04 18:31:36,763 - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-04 18:31:36,763 - stack ['$14compare_op.6']
2024-09-04 18:31:36,764 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1042)
2024-09-04 18:31:36,764 - stack ['$14compare_op.6', '$x16.7']
2024-09-04 18:31:36,764 - dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-04 18:31:36,764 - stack ['$14compare_op.6', '$x16.7', '$const18.8']
2024-09-04 18:31:36,764 - dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-04 18:31:36,764 - stack ['$14compare_op.6', '$20binary_subscr.9']
2024-09-04 18:31:36,764 - dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=1042)
2024-09-04 18:31:36,764 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10']
2024-09-04 18:31:36,764 - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-04 18:31:36,765 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10', '$const24.11']
2024-09-04 18:31:36,765 - dispatch pc=28, inst=COMPARE_OP(arg=5, lineno=1042)
2024-09-04 18:31:36,765 - stack ['$14compare_op.6', '$20binary_subscr.9', '$26binary_subscr.12']
2024-09-04 18:31:36,765 - dispatch pc=30, inst=BINARY_AND(arg=None, lineno=1042)
2024-09-04 18:31:36,765 - stack ['$14compare_op.6', '$28compare_op.13']
2024-09-04 18:31:36,765 - dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1042)
2024-09-04 18:31:36,765 - stack ['$30binary_and.14']
2024-09-04 18:31:36,765 - end state. edges=[]
2024-09-04 18:31:36,765 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:36,766 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 18:31:36,766 - defmap: {}
2024-09-04 18:31:36,766 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:36,766 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:36,766 - keep phismap: {}
2024-09-04 18:31:36,766 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:36,766 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:36,766 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14compare_op.6'}), (16, {'res': '$x16.7'}), (18, {'res': '$const18.8'}), (20, {'index': '$const18.8', 'target': '$x16.7', 'res': '$20binary_subscr.9'}), (22, {'res': '$x22.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$x22.10', 'res': '$26binary_subscr.12'}), (28, {'lhs': '$20binary_subscr.9', 'rhs': '$26binary_subscr.12', 'res': '$28compare_op.13'}), (30, {'lhs': '$14compare_op.6', 'rhs': '$28compare_op.13', 'res': '$30binary_and.14'}), (32, {'retval': '$30binary_and.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:36,768 - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14compare_op.6 = $6binary_subscr.2 > $12binary_subscr.5 ['$12binary_subscr.5', '$14compare_op.6', '$6binary_subscr.2']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20binary_subscr.9 = getitem(value=x, index=$const18.8, fn=<built-in function getitem>) ['$20binary_subscr.9', '$const18.8', 'x']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=x, index=$const24.11, fn=<built-in function getitem>) ['$26binary_subscr.12', '$const24.11', 'x']
    $28compare_op.13 = $20binary_subscr.9 >= $26binary_subscr.12 ['$20binary_subscr.9', '$26binary_subscr.12', '$28compare_op.13']
    $30binary_and.14 = $14compare_op.6 & $28compare_op.13 ['$14compare_op.6', '$28compare_op.13', '$30binary_and.14']
    $32return_value.15 = cast(value=$30binary_and.14) ['$30binary_and.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

2024-09-04 18:31:36,769 - bytecode dump:
>          0	NOP(arg=None, lineno=1045)
           2	LOAD_FAST(arg=0, lineno=1048)
           4	LOAD_CONST(arg=1, lineno=1048)
           6	BINARY_SUBSCR(arg=None, lineno=1048)
           8	LOAD_FAST(arg=0, lineno=1048)
          10	LOAD_CONST(arg=2, lineno=1048)
          12	BINARY_SUBSCR(arg=None, lineno=1048)
          14	COMPARE_OP(arg=0, lineno=1048)
          16	LOAD_FAST(arg=0, lineno=1048)
          18	LOAD_CONST(arg=1, lineno=1048)
          20	BINARY_SUBSCR(arg=None, lineno=1048)
          22	LOAD_FAST(arg=0, lineno=1048)
          24	LOAD_CONST(arg=3, lineno=1048)
          26	BINARY_SUBSCR(arg=None, lineno=1048)
          28	COMPARE_OP(arg=1, lineno=1048)
          30	BINARY_AND(arg=None, lineno=1048)
          32	RETURN_VALUE(arg=None, lineno=1048)
2024-09-04 18:31:36,769 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:36,769 - stack: []
2024-09-04 18:31:36,769 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:36,769 - dispatch pc=0, inst=NOP(arg=None, lineno=1045)
2024-09-04 18:31:36,769 - stack []
2024-09-04 18:31:36,769 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-04 18:31:36,769 - stack []
2024-09-04 18:31:36,770 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1048)
2024-09-04 18:31:36,770 - stack ['$x2.0']
2024-09-04 18:31:36,770 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-04 18:31:36,770 - stack ['$x2.0', '$const4.1']
2024-09-04 18:31:36,770 - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-04 18:31:36,770 - stack ['$6binary_subscr.2']
2024-09-04 18:31:36,770 - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1048)
2024-09-04 18:31:36,770 - stack ['$6binary_subscr.2', '$x8.3']
2024-09-04 18:31:36,770 - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-04 18:31:36,770 - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2024-09-04 18:31:36,770 - dispatch pc=14, inst=COMPARE_OP(arg=0, lineno=1048)
2024-09-04 18:31:36,770 - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2024-09-04 18:31:36,770 - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-04 18:31:36,770 - stack ['$14compare_op.6']
2024-09-04 18:31:36,771 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1048)
2024-09-04 18:31:36,771 - stack ['$14compare_op.6', '$x16.7']
2024-09-04 18:31:36,771 - dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-04 18:31:36,771 - stack ['$14compare_op.6', '$x16.7', '$const18.8']
2024-09-04 18:31:36,771 - dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-04 18:31:36,771 - stack ['$14compare_op.6', '$20binary_subscr.9']
2024-09-04 18:31:36,771 - dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=1048)
2024-09-04 18:31:36,771 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10']
2024-09-04 18:31:36,771 - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-04 18:31:36,771 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10', '$const24.11']
2024-09-04 18:31:36,771 - dispatch pc=28, inst=COMPARE_OP(arg=1, lineno=1048)
2024-09-04 18:31:36,771 - stack ['$14compare_op.6', '$20binary_subscr.9', '$26binary_subscr.12']
2024-09-04 18:31:36,771 - dispatch pc=30, inst=BINARY_AND(arg=None, lineno=1048)
2024-09-04 18:31:36,771 - stack ['$14compare_op.6', '$28compare_op.13']
2024-09-04 18:31:36,772 - dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1048)
2024-09-04 18:31:36,772 - stack ['$30binary_and.14']
2024-09-04 18:31:36,772 - end state. edges=[]
2024-09-04 18:31:36,772 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:36,772 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 18:31:36,772 - defmap: {}
2024-09-04 18:31:36,772 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:36,772 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:36,773 - keep phismap: {}
2024-09-04 18:31:36,773 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:36,773 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:36,773 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14compare_op.6'}), (16, {'res': '$x16.7'}), (18, {'res': '$const18.8'}), (20, {'index': '$const18.8', 'target': '$x16.7', 'res': '$20binary_subscr.9'}), (22, {'res': '$x22.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$x22.10', 'res': '$26binary_subscr.12'}), (28, {'lhs': '$20binary_subscr.9', 'rhs': '$26binary_subscr.12', 'res': '$28compare_op.13'}), (30, {'lhs': '$14compare_op.6', 'rhs': '$28compare_op.13', 'res': '$30binary_and.14'}), (32, {'retval': '$30binary_and.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:36,774 - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14compare_op.6 = $6binary_subscr.2 < $12binary_subscr.5 ['$12binary_subscr.5', '$14compare_op.6', '$6binary_subscr.2']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20binary_subscr.9 = getitem(value=x, index=$const18.8, fn=<built-in function getitem>) ['$20binary_subscr.9', '$const18.8', 'x']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=x, index=$const24.11, fn=<built-in function getitem>) ['$26binary_subscr.12', '$const24.11', 'x']
    $28compare_op.13 = $20binary_subscr.9 <= $26binary_subscr.12 ['$20binary_subscr.9', '$26binary_subscr.12', '$28compare_op.13']
    $30binary_and.14 = $14compare_op.6 & $28compare_op.13 ['$14compare_op.6', '$28compare_op.13', '$30binary_and.14']
    $32return_value.15 = cast(value=$30binary_and.14) ['$30binary_and.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

2024-09-04 18:31:36,781 - bytecode dump:
>          0	NOP(arg=None, lineno=1051)
           2	LOAD_GLOBAL(arg=0, lineno=1065)
           4	LOAD_FAST(arg=0, lineno=1065)
           6	CALL_FUNCTION(arg=1, lineno=1065)
           8	LOAD_FAST(arg=1, lineno=1065)
          10	LOAD_CONST(arg=1, lineno=1065)
          12	LOAD_CONST(arg=1, lineno=1065)
          14	BUILD_SLICE(arg=2, lineno=1065)
          16	STORE_SUBSCR(arg=None, lineno=1065)
          18	LOAD_CONST(arg=1, lineno=1065)
          20	RETURN_VALUE(arg=None, lineno=1065)
2024-09-04 18:31:36,781 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:36,781 - stack: []
2024-09-04 18:31:36,781 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:36,781 - dispatch pc=0, inst=NOP(arg=None, lineno=1051)
2024-09-04 18:31:36,781 - stack []
2024-09-04 18:31:36,781 - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1065)
2024-09-04 18:31:36,781 - stack []
2024-09-04 18:31:36,782 - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1065)
2024-09-04 18:31:36,782 - stack ['$2load_global.0']
2024-09-04 18:31:36,782 - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=1065)
2024-09-04 18:31:36,782 - stack ['$2load_global.0', '$x4.1']
2024-09-04 18:31:36,782 - dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=1065)
2024-09-04 18:31:36,782 - stack ['$6call_function.2']
2024-09-04 18:31:36,782 - dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=1065)
2024-09-04 18:31:36,782 - stack ['$6call_function.2', '$y8.3']
2024-09-04 18:31:36,782 - dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=1065)
2024-09-04 18:31:36,782 - stack ['$6call_function.2', '$y8.3', '$const10.4']
2024-09-04 18:31:36,782 - dispatch pc=14, inst=BUILD_SLICE(arg=2, lineno=1065)
2024-09-04 18:31:36,782 - stack ['$6call_function.2', '$y8.3', '$const10.4', '$const12.5']
2024-09-04 18:31:36,782 - dispatch pc=16, inst=STORE_SUBSCR(arg=None, lineno=1065)
2024-09-04 18:31:36,783 - stack ['$6call_function.2', '$y8.3', '$14build_slice.7']
2024-09-04 18:31:36,783 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1065)
2024-09-04 18:31:36,783 - stack []
2024-09-04 18:31:36,783 - dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=1065)
2024-09-04 18:31:36,783 - stack ['$const18.8']
2024-09-04 18:31:36,783 - end state. edges=[]
2024-09-04 18:31:36,783 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:36,783 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 18:31:36,783 - defmap: {}
2024-09-04 18:31:36,783 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:36,783 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:36,783 - keep phismap: {}
2024-09-04 18:31:36,783 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:36,784 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:36,784 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'res': '$y8.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$const12.5'}), (14, {'start': '$const10.4', 'stop': '$const12.5', 'step': None, 'res': '$14build_slice.7', 'slicevar': '$14build_slice.6'}), (16, {'target': '$y8.3', 'index': '$14build_slice.7', 'value': '$6call_function.2'}), (18, {'res': '$const18.8'}), (20, {'retval': '$const18.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:36,784 - label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $2load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x000002431B51D660>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1051)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'x']
    $const10.4 = const(NoneType, None)       ['$const10.4']
    $const12.5 = const(NoneType, None)       ['$const12.5']
    $14build_slice.6 = global(slice: <class 'slice'>) ['$14build_slice.6']
    $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1065), Var($const12.5, utils.py:1065)), kws=(), vararg=None, varkwarg=None, target=None) ['$14build_slice.6', '$14build_slice.7', '$const10.4', '$const12.5']
    y[$14build_slice.7] = $6call_function.2  ['$14build_slice.7', '$6call_function.2', 'y']
    $const18.8 = const(NoneType, None)       ['$const18.8']
    $20return_value.9 = cast(value=$const18.8) ['$20return_value.9', '$const18.8']
    return $20return_value.9                 ['$20return_value.9']

2024-09-04 18:31:36,795 - ==== SSA block analysis pass on 0
2024-09-04 18:31:36,795 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431B4DFF10>
2024-09-04 18:31:36,795 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:36,795 - on stmt: y = arg(1, name=y)
2024-09-04 18:31:36,796 - on stmt: $2load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x000002431B51D660>)
2024-09-04 18:31:36,796 - on stmt: $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1051)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:36,796 - on stmt: $const10.4 = const(NoneType, None)
2024-09-04 18:31:36,796 - on stmt: $const12.5 = const(NoneType, None)
2024-09-04 18:31:36,796 - on stmt: $14build_slice.6 = global(slice: <class 'slice'>)
2024-09-04 18:31:36,796 - on stmt: $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1065), Var($const12.5, utils.py:1065)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:36,796 - on stmt: y[slice(None, None, None)] = $6call_function.2
2024-09-04 18:31:36,796 - on stmt: $const18.8 = const(NoneType, None)
2024-09-04 18:31:36,796 - on stmt: $20return_value.9 = cast(value=$const18.8)
2024-09-04 18:31:36,796 - on stmt: return $20return_value.9
2024-09-04 18:31:36,797 - defs defaultdict(<class 'list'>,
            {'$14build_slice.6': [(<numba.core.ir.Assign object at 0x000002431B4C82B0>,
                                   0)],
             '$14build_slice.7': [(<numba.core.ir.Assign object at 0x000002431B4C8850>,
                                   0)],
             '$20return_value.9': [(<numba.core.ir.Assign object at 0x000002431B4C8C10>,
                                    0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x000002431B4DF7C0>,
                                  0)],
             '$6call_function.2': [(<numba.core.ir.Assign object at 0x000002431B4DF9D0>,
                                    0)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x000002431B4C85B0>,
                             0)],
             '$const12.5': [(<numba.core.ir.Assign object at 0x000002431B4C8430>,
                             0)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x000002431B4C8A90>,
                             0)],
             'x': [(<numba.core.ir.Assign object at 0x000002431B4C8190>, 0)],
             'y': [(<numba.core.ir.Assign object at 0x000002431B4C8070>, 0)]})
2024-09-04 18:31:36,797 - SSA violators <numba.core.utils.OrderedSet object at 0x000002431B4DFF10>
2024-09-04 18:31:36,832 - bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=2)
           4	LOAD_ATTR(arg=0, lineno=2)
           6	STORE_FAST(arg=1, lineno=2)
           8	LOAD_GLOBAL(arg=1, lineno=3)
          10	LOAD_ATTR(arg=2, lineno=3)
          12	LOAD_FAST(arg=1, lineno=3)
          14	LOAD_GLOBAL(arg=1, lineno=3)
          16	LOAD_ATTR(arg=3, lineno=3)
          18	LOAD_CONST(arg=1, lineno=3)
          20	CALL_FUNCTION_KW(arg=2, lineno=3)
          22	STORE_FAST(arg=2, lineno=3)
          24	LOAD_CONST(arg=2, lineno=4)
          26	LOAD_FAST(arg=2, lineno=4)
          28	LOAD_CONST(arg=0, lineno=4)
          30	LOAD_CONST(arg=3, lineno=4)
          32	BUILD_SLICE(arg=2, lineno=4)
          34	STORE_SUBSCR(arg=None, lineno=4)
          36	LOAD_CONST(arg=2, lineno=5)
          38	LOAD_FAST(arg=2, lineno=5)
          40	LOAD_CONST(arg=4, lineno=5)
          42	LOAD_CONST(arg=0, lineno=5)
          44	BUILD_SLICE(arg=2, lineno=5)
          46	STORE_SUBSCR(arg=None, lineno=5)
          48	LOAD_GLOBAL(arg=4, lineno=6)
          50	LOAD_GLOBAL(arg=5, lineno=6)
          52	LOAD_CONST(arg=2, lineno=6)
          54	LOAD_CONST(arg=4, lineno=6)
          56	CALL_FUNCTION(arg=2, lineno=6)
          58	UNARY_NEGATIVE(arg=None, lineno=6)
          60	LOAD_FAST(arg=1, lineno=6)
          62	LOAD_CONST(arg=2, lineno=6)
          64	BINARY_SUBSCR(arg=None, lineno=6)
          66	LOAD_GLOBAL(arg=6, lineno=6)
          68	LOAD_CONST(arg=2, lineno=6)
          70	LOAD_CONST(arg=3, lineno=6)
          72	CALL_FUNCTION(arg=2, lineno=6)
          74	BINARY_SUBTRACT(arg=None, lineno=6)
          76	CALL_FUNCTION(arg=2, lineno=6)
          78	GET_ITER(arg=None, lineno=6)
>         80	FOR_ITER(arg=4, lineno=6)
          82	STORE_FAST(arg=3, lineno=6)
          84	LOAD_CONST(arg=2, lineno=7)
          86	STORE_FAST(arg=4, lineno=7)
          88	JUMP_ABSOLUTE(arg=41, lineno=7)
>         90	LOAD_FAST(arg=2, lineno=8)
          92	RETURN_VALUE(arg=None, lineno=8)
2024-09-04 18:31:36,832 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:36,832 - stack: []
2024-09-04 18:31:36,832 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:36,832 - dispatch pc=0, inst=NOP(arg=None, lineno=1)
2024-09-04 18:31:36,832 - stack []
2024-09-04 18:31:36,832 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2)
2024-09-04 18:31:36,832 - stack []
2024-09-04 18:31:36,833 - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2)
2024-09-04 18:31:36,833 - stack ['$x2.0']
2024-09-04 18:31:36,833 - dispatch pc=6, inst=STORE_FAST(arg=1, lineno=2)
2024-09-04 18:31:36,833 - stack ['$4load_attr.1']
2024-09-04 18:31:36,833 - dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=3)
2024-09-04 18:31:36,833 - stack []
2024-09-04 18:31:36,833 - dispatch pc=10, inst=LOAD_ATTR(arg=2, lineno=3)
2024-09-04 18:31:36,833 - stack ['$8load_global.2']
2024-09-04 18:31:36,833 - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=3)
2024-09-04 18:31:36,833 - stack ['$10load_attr.3']
2024-09-04 18:31:36,833 - dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=3)
2024-09-04 18:31:36,833 - stack ['$10load_attr.3', '$full_shape012.4']
2024-09-04 18:31:36,833 - dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=3)
2024-09-04 18:31:36,833 - stack ['$10load_attr.3', '$full_shape012.4', '$14load_global.5']
2024-09-04 18:31:36,834 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=3)
2024-09-04 18:31:36,834 - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6']
2024-09-04 18:31:36,834 - dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=3)
2024-09-04 18:31:36,834 - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6', '$const18.7']
2024-09-04 18:31:36,834 - dispatch pc=22, inst=STORE_FAST(arg=2, lineno=3)
2024-09-04 18:31:36,834 - stack ['$20call_function_kw.8']
2024-09-04 18:31:36,834 - dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=4)
2024-09-04 18:31:36,834 - stack []
2024-09-04 18:31:36,834 - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=4)
2024-09-04 18:31:36,834 - stack ['$const24.9']
2024-09-04 18:31:36,834 - dispatch pc=28, inst=LOAD_CONST(arg=0, lineno=4)
2024-09-04 18:31:36,834 - stack ['$const24.9', '$out026.10']
2024-09-04 18:31:36,834 - dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=4)
2024-09-04 18:31:36,834 - stack ['$const24.9', '$out026.10', '$const28.11']
2024-09-04 18:31:36,835 - dispatch pc=32, inst=BUILD_SLICE(arg=2, lineno=4)
2024-09-04 18:31:36,835 - stack ['$const24.9', '$out026.10', '$const28.11', '$const30.12']
2024-09-04 18:31:36,835 - dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=4)
2024-09-04 18:31:36,835 - stack ['$const24.9', '$out026.10', '$32build_slice.14']
2024-09-04 18:31:36,835 - dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=5)
2024-09-04 18:31:36,835 - stack []
2024-09-04 18:31:36,835 - dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=5)
2024-09-04 18:31:36,835 - stack ['$const36.15']
2024-09-04 18:31:36,835 - dispatch pc=40, inst=LOAD_CONST(arg=4, lineno=5)
2024-09-04 18:31:36,835 - stack ['$const36.15', '$out038.16']
2024-09-04 18:31:36,835 - dispatch pc=42, inst=LOAD_CONST(arg=0, lineno=5)
2024-09-04 18:31:36,835 - stack ['$const36.15', '$out038.16', '$const40.17']
2024-09-04 18:31:36,835 - dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=5)
2024-09-04 18:31:36,836 - stack ['$const36.15', '$out038.16', '$const40.17', '$const42.18']
2024-09-04 18:31:36,836 - dispatch pc=46, inst=STORE_SUBSCR(arg=None, lineno=5)
2024-09-04 18:31:36,836 - stack ['$const36.15', '$out038.16', '$44build_slice.20']
2024-09-04 18:31:36,836 - dispatch pc=48, inst=LOAD_GLOBAL(arg=4, lineno=6)
2024-09-04 18:31:36,836 - stack []
2024-09-04 18:31:36,836 - dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=6)
2024-09-04 18:31:36,836 - stack ['$48load_global.21']
2024-09-04 18:31:36,836 - dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:36,836 - stack ['$48load_global.21', '$50load_global.22']
2024-09-04 18:31:36,836 - dispatch pc=54, inst=LOAD_CONST(arg=4, lineno=6)
2024-09-04 18:31:36,836 - stack ['$48load_global.21', '$50load_global.22', '$const52.23']
2024-09-04 18:31:36,836 - dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:36,836 - stack ['$48load_global.21', '$50load_global.22', '$const52.23', '$const54.24']
2024-09-04 18:31:36,836 - dispatch pc=58, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2024-09-04 18:31:36,837 - stack ['$48load_global.21', '$56call_function.25']
2024-09-04 18:31:36,837 - dispatch pc=60, inst=LOAD_FAST(arg=1, lineno=6)
2024-09-04 18:31:36,837 - stack ['$48load_global.21', '$58unary_negative.26']
2024-09-04 18:31:36,837 - dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:36,837 - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27']
2024-09-04 18:31:36,837 - dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=6)
2024-09-04 18:31:36,837 - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27', '$const62.28']
2024-09-04 18:31:36,837 - dispatch pc=66, inst=LOAD_GLOBAL(arg=6, lineno=6)
2024-09-04 18:31:36,837 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29']
2024-09-04 18:31:36,837 - dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:36,837 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30']
2024-09-04 18:31:36,837 - dispatch pc=70, inst=LOAD_CONST(arg=3, lineno=6)
2024-09-04 18:31:36,837 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31']
2024-09-04 18:31:36,837 - dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:36,838 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31', '$const70.32']
2024-09-04 18:31:36,838 - dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=6)
2024-09-04 18:31:36,838 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$72call_function.33']
2024-09-04 18:31:36,838 - dispatch pc=76, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:36,838 - stack ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34']
2024-09-04 18:31:36,838 - dispatch pc=78, inst=GET_ITER(arg=None, lineno=6)
2024-09-04 18:31:36,838 - stack ['$76call_function.35']
2024-09-04 18:31:36,838 - end state. edges=[Edge(pc=80, stack=('$78get_iter.36',), blockstack=(), npush=0)]
2024-09-04 18:31:36,838 - pending: deque([State(pc_initial=80 nstack_initial=1)])
2024-09-04 18:31:36,838 - stack: ['$phi80.0']
2024-09-04 18:31:36,838 - state.pc_initial: State(pc_initial=80 nstack_initial=1)
2024-09-04 18:31:36,838 - dispatch pc=80, inst=FOR_ITER(arg=4, lineno=6)
2024-09-04 18:31:36,838 - stack ['$phi80.0']
2024-09-04 18:31:36,839 - end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
2024-09-04 18:31:36,839 - pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=82 nstack_initial=2)])
2024-09-04 18:31:36,839 - stack: []
2024-09-04 18:31:36,839 - state.pc_initial: State(pc_initial=90 nstack_initial=0)
2024-09-04 18:31:36,839 - dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=8)
2024-09-04 18:31:36,839 - stack []
2024-09-04 18:31:36,839 - dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=8)
2024-09-04 18:31:36,839 - stack ['$out090.0']
2024-09-04 18:31:36,839 - end state. edges=[]
2024-09-04 18:31:36,839 - pending: deque([State(pc_initial=82 nstack_initial=2)])
2024-09-04 18:31:36,839 - stack: ['$phi82.0', '$phi82.1']
2024-09-04 18:31:36,839 - state.pc_initial: State(pc_initial=82 nstack_initial=2)
2024-09-04 18:31:36,839 - dispatch pc=82, inst=STORE_FAST(arg=3, lineno=6)
2024-09-04 18:31:36,840 - stack ['$phi82.0', '$phi82.1']
2024-09-04 18:31:36,840 - dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=7)
2024-09-04 18:31:36,840 - stack ['$phi82.0']
2024-09-04 18:31:36,840 - dispatch pc=86, inst=STORE_FAST(arg=4, lineno=7)
2024-09-04 18:31:36,840 - stack ['$phi82.0', '$const84.2']
2024-09-04 18:31:36,840 - dispatch pc=88, inst=JUMP_ABSOLUTE(arg=41, lineno=7)
2024-09-04 18:31:36,840 - stack ['$phi82.0']
2024-09-04 18:31:36,840 - end state. edges=[Edge(pc=80, stack=('$phi82.0',), blockstack=(), npush=0)]
2024-09-04 18:31:36,840 - pending: deque([State(pc_initial=80 nstack_initial=1)])
2024-09-04 18:31:36,840 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:36,840 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=82 nstack_initial=2): {'$phi82.1'},
             State(pc_initial=90 nstack_initial=0): set()})
2024-09-04 18:31:36,841 - defmap: {'$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi82.1': State(pc_initial=80 nstack_initial=1)}
2024-09-04 18:31:36,841 - phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=2))},
             '$phi82.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:36,841 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:36,841 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:36,841 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:36,842 - keep phismap: {'$phi80.0': {('$78get_iter.36', State(pc_initial=0 nstack_initial=0))},
 '$phi82.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
2024-09-04 18:31:36,842 - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.36'},
             State(pc_initial=80 nstack_initial=1): {'$phi82.1': '$80for_iter.2'}})
2024-09-04 18:31:36,842 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:36,842 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_global.2'}), (10, {'item': '$8load_global.2', 'res': '$10load_attr.3'}), (12, {'res': '$full_shape012.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$10load_attr.3', 'args': ['$full_shape012.4', '$16load_attr.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$out026.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$const30.12'}), (32, {'start': '$const28.11', 'stop': '$const30.12', 'step': None, 'res': '$32build_slice.14', 'slicevar': '$32build_slice.13'}), (34, {'target': '$out026.10', 'index': '$32build_slice.14', 'value': '$const24.9'}), (36, {'res': '$const36.15'}), (38, {'res': '$out038.16'}), (40, {'res': '$const40.17'}), (42, {'res': '$const42.18'}), (44, {'start': '$const40.17', 'stop': '$const42.18', 'step': None, 'res': '$44build_slice.20', 'slicevar': '$44build_slice.19'}), (46, {'target': '$out038.16', 'index': '$44build_slice.20', 'value': '$const36.15'}), (48, {'res': '$48load_global.21'}), (50, {'res': '$50load_global.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$50load_global.22', 'args': ['$const52.23', '$const54.24'], 'res': '$56call_function.25'}), (58, {'value': '$56call_function.25', 'res': '$58unary_negative.26'}), (60, {'res': '$full_shape060.27'}), (62, {'res': '$const62.28'}), (64, {'index': '$const62.28', 'target': '$full_shape060.27', 'res': '$64binary_subscr.29'}), (66, {'res': '$66load_global.30'}), (68, {'res': '$const68.31'}), (70, {'res': '$const70.32'}), (72, {'func': '$66load_global.30', 'args': ['$const68.31', '$const70.32'], 'res': '$72call_function.33'}), (74, {'lhs': '$64binary_subscr.29', 'rhs': '$72call_function.33', 'res': '$74binary_subtract.34'}), (76, {'func': '$48load_global.21', 'args': ['$58unary_negative.26', '$74binary_subtract.34'], 'res': '$76call_function.35'}), (78, {'value': '$76call_function.35', 'res': '$78get_iter.36'})), outgoing_phis={'$phi80.0': '$78get_iter.36'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.36',)})
2024-09-04 18:31:36,842 - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi82.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 82: ('$phi80.0', '$80for_iter.2')})
2024-09-04 18:31:36,842 - block_infos State(pc_initial=82 nstack_initial=2):
AdaptBlockInfo(insts=((82, {'value': '$phi82.1'}), (84, {'res': '$const84.2'}), (86, {'value': '$const84.2'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi82.0',)})
2024-09-04 18:31:36,842 - block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$out090.0'}), (92, {'retval': '$out090.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:36,845 - label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $8load_global.2 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$8load_global.2']
    $10load_attr.3 = getattr(value=$8load_global.2, attr=empty) ['$10load_attr.3', '$8load_global.2']
    $14load_global.5 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=bool_) ['$14load_global.5', '$16load_attr.6']
    out0 = call $10load_attr.3(full_shape0, func=$10load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6, <string>:3))], vararg=None, varkwarg=None, target=None) ['$10load_attr.3', '$16load_attr.6', 'full_shape0', 'out0']
    $const24.9 = const(int, 0)               ['$const24.9']
    $const28.11 = const(NoneType, None)      ['$const28.11']
    $const30.12 = const(int, 1)              ['$const30.12']
    $32build_slice.13 = global(slice: <class 'slice'>) ['$32build_slice.13']
    $32build_slice.14 = call $32build_slice.13($const28.11, $const30.12, func=$32build_slice.13, args=(Var($const28.11, <string>:4), Var($const30.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$32build_slice.13', '$32build_slice.14', '$const28.11', '$const30.12']
    out0[$32build_slice.14] = $const24.9     ['$32build_slice.14', '$const24.9', 'out0']
    $const36.15 = const(int, 0)              ['$const36.15']
    $const40.17 = const(int, -1)             ['$const40.17']
    $const42.18 = const(NoneType, None)      ['$const42.18']
    $44build_slice.19 = global(slice: <class 'slice'>) ['$44build_slice.19']
    $44build_slice.20 = call $44build_slice.19($const40.17, $const42.18, func=$44build_slice.19, args=(Var($const40.17, <string>:5), Var($const42.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$44build_slice.19', '$44build_slice.20', '$const40.17', '$const42.18']
    out0[$44build_slice.20] = $const36.15    ['$44build_slice.20', '$const36.15', 'out0']
    $48load_global.21 = global(range: <class 'range'>) ['$48load_global.21']
    $50load_global.22 = global(min: <built-in function min>) ['$50load_global.22']
    $const52.23 = const(int, 0)              ['$const52.23']
    $const54.24 = const(int, -1)             ['$const54.24']
    $56call_function.25 = call $50load_global.22($const52.23, $const54.24, func=$50load_global.22, args=[Var($const52.23, <string>:6), Var($const54.24, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.22', '$56call_function.25', '$const52.23', '$const54.24']
    $58unary_negative.26 = unary(fn=<built-in function neg>, value=$56call_function.25) ['$56call_function.25', '$58unary_negative.26']
    $const62.28 = const(int, 0)              ['$const62.28']
    $64binary_subscr.29 = getitem(value=full_shape0, index=$const62.28, fn=<built-in function getitem>) ['$64binary_subscr.29', '$const62.28', 'full_shape0']
    $66load_global.30 = global(max: <built-in function max>) ['$66load_global.30']
    $const68.31 = const(int, 0)              ['$const68.31']
    $const70.32 = const(int, 1)              ['$const70.32']
    $72call_function.33 = call $66load_global.30($const68.31, $const70.32, func=$66load_global.30, args=[Var($const68.31, <string>:6), Var($const70.32, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.30', '$72call_function.33', '$const68.31', '$const70.32']
    $74binary_subtract.34 = $64binary_subscr.29 - $72call_function.33 ['$64binary_subscr.29', '$72call_function.33', '$74binary_subtract.34']
    $76call_function.35 = call $48load_global.21($58unary_negative.26, $74binary_subtract.34, func=$48load_global.21, args=[Var($58unary_negative.26, <string>:6), Var($74binary_subtract.34, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34', '$76call_function.35']
    $78get_iter.36 = getiter(value=$76call_function.35) ['$76call_function.35', '$78get_iter.36']
    $phi80.0 = $78get_iter.36                ['$78get_iter.36', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi82.1 = $80for_iter.2                 ['$80for_iter.2', '$phi82.1']
    branch $80for_iter.3, 82, 90             ['$80for_iter.3']
label 82:
    index00 = $phi82.1                       ['$phi82.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 80                                  []
label 90:
    $92return_value.1 = cast(value=out0)     ['$92return_value.1', 'out0']
    return $92return_value.1                 ['$92return_value.1']

2024-09-04 18:31:36,865 - ==== SSA block analysis pass on 0
2024-09-04 18:31:36,866 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D271BA0>
2024-09-04 18:31:36,866 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:36,866 - on stmt: full_shape0 = getattr(value=x, attr=shape)
2024-09-04 18:31:36,866 - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:36,866 - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2024-09-04 18:31:36,866 - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:36,866 - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2024-09-04 18:31:36,866 - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:36,866 - on stmt: $const24.9.1 = const(int, 0)
2024-09-04 18:31:36,866 - on stmt: $const28.11.1 = const(NoneType, None)
2024-09-04 18:31:36,866 - on stmt: $const30.12.1 = const(int, 1)
2024-09-04 18:31:36,867 - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:36,867 - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:36,867 - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2024-09-04 18:31:36,867 - on stmt: $const36.15.1 = const(int, 0)
2024-09-04 18:31:36,867 - on stmt: $const40.17.1 = const(int, -1)
2024-09-04 18:31:36,867 - on stmt: $const42.18.1 = const(NoneType, None)
2024-09-04 18:31:36,867 - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:36,867 - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:36,867 - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2024-09-04 18:31:36,867 - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2024-09-04 18:31:36,867 - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2024-09-04 18:31:36,867 - on stmt: $const52.23.1 = const(int, 0)
2024-09-04 18:31:36,868 - on stmt: $const54.24.1 = const(int, -1)
2024-09-04 18:31:36,868 - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:36,868 - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2024-09-04 18:31:36,868 - on stmt: $const62.28.1 = const(int, 0)
2024-09-04 18:31:36,868 - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2024-09-04 18:31:36,868 - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2024-09-04 18:31:36,868 - on stmt: $const68.31.1 = const(int, 0)
2024-09-04 18:31:36,868 - on stmt: $const70.32.1 = const(int, 1)
2024-09-04 18:31:36,868 - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:36,868 - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2024-09-04 18:31:36,868 - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:36,869 - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2024-09-04 18:31:36,869 - on stmt: $phi80.0.1 = $78get_iter.36.1
2024-09-04 18:31:36,869 - on stmt: jump 80
2024-09-04 18:31:36,869 - ==== SSA block analysis pass on 80
2024-09-04 18:31:36,869 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D271BA0>
2024-09-04 18:31:36,869 - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2024-09-04 18:31:36,869 - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2024-09-04 18:31:36,869 - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2024-09-04 18:31:36,869 - on stmt: $phi82.1.1 = $80for_iter.2.1
2024-09-04 18:31:36,869 - on stmt: branch $80for_iter.3.1, 82, 92
2024-09-04 18:31:36,869 - ==== SSA block analysis pass on 82
2024-09-04 18:31:36,869 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D271BA0>
2024-09-04 18:31:36,869 - on stmt: index00 = $phi82.1.1
2024-09-04 18:31:36,869 - on stmt: jump 90
2024-09-04 18:31:36,870 - ==== SSA block analysis pass on 92
2024-09-04 18:31:36,870 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D271BA0>
2024-09-04 18:31:36,870 - on stmt: $92return_value.1.1 = cast(value=out0)
2024-09-04 18:31:36,870 - on stmt: return $92return_value.1.1
2024-09-04 18:31:36,870 - ==== SSA block analysis pass on 90
2024-09-04 18:31:36,870 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D271BA0>
2024-09-04 18:31:36,870 - on stmt: $const4.1 = const(int, 0)
2024-09-04 18:31:36,870 - on stmt: stencil_index = $const4.1 + index00
2024-09-04 18:31:36,870 - on stmt: $6binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:36,870 - on stmt: $const10.4 = const(int, -1)
2024-09-04 18:31:36,870 - on stmt: stencil_index.1 = $const10.4 + index00
2024-09-04 18:31:36,870 - on stmt: $12binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2024-09-04 18:31:36,870 - on stmt: $14compare_op.6 = $6binary_subscr.2 > $12binary_subscr.5
2024-09-04 18:31:36,871 - on stmt: $const18.8 = const(int, 0)
2024-09-04 18:31:36,871 - on stmt: stencil_index.2 = $const18.8 + index00
2024-09-04 18:31:36,871 - on stmt: $20binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
2024-09-04 18:31:36,871 - on stmt: $const24.11 = const(int, 1)
2024-09-04 18:31:36,871 - on stmt: stencil_index.3 = $const24.11 + index00
2024-09-04 18:31:36,871 - on stmt: $26binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
2024-09-04 18:31:36,871 - on stmt: $28compare_op.13 = $20binary_subscr.9 >= $26binary_subscr.12
2024-09-04 18:31:36,871 - on stmt: $30binary_and.14 = $14compare_op.6 & $28compare_op.13
2024-09-04 18:31:36,871 - on stmt: $32return_value.15 = cast(value=$30binary_and.14)
2024-09-04 18:31:36,871 - on stmt: out0[index00] = $32return_value.15
2024-09-04 18:31:36,871 - on stmt: jump 91
2024-09-04 18:31:36,871 - ==== SSA block analysis pass on 91
2024-09-04 18:31:36,872 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D271BA0>
2024-09-04 18:31:36,872 - on stmt: jump 80
2024-09-04 18:31:36,874 - defs defaultdict(<class 'list'>,
            {'$10load_attr.3.1': [(<numba.core.ir.Assign object at 0x0000024317712410>,
                                   0)],
             '$12binary_subscr.5': [(<numba.core.ir.Assign object at 0x0000024312E1B610>,
                                     90)],
             '$14compare_op.6': [(<numba.core.ir.Assign object at 0x000002431B52C070>,
                                  90)],
             '$14load_global.5.1': [(<numba.core.ir.Assign object at 0x0000024317713820>,
                                     0)],
             '$16load_attr.6.1': [(<numba.core.ir.Assign object at 0x0000024317713550>,
                                   0)],
             '$20binary_subscr.9': [(<numba.core.ir.Assign object at 0x0000024317713D60>,
                                     90)],
             '$26binary_subscr.12': [(<numba.core.ir.Assign object at 0x0000024317713DF0>,
                                      90)],
             '$28compare_op.13': [(<numba.core.ir.Assign object at 0x000002431D1E8700>,
                                   90)],
             '$30binary_and.14': [(<numba.core.ir.Assign object at 0x000002431D1E8BE0>,
                                   90)],
             '$32build_slice.13.1': [(<numba.core.ir.Assign object at 0x00000243177117E0>,
                                      0)],
             '$32build_slice.14.1': [(<numba.core.ir.Assign object at 0x0000024317711600>,
                                      0)],
             '$32return_value.15': [(<numba.core.ir.Assign object at 0x00000243182E6410>,
                                     90)],
             '$44build_slice.19.1': [(<numba.core.ir.Assign object at 0x0000024317710A00>,
                                      0)],
             '$44build_slice.20.1': [(<numba.core.ir.Assign object at 0x0000024317710B80>,
                                      0)],
             '$48load_global.21.1': [(<numba.core.ir.Assign object at 0x0000024317710880>,
                                      0)],
             '$50load_global.22.1': [(<numba.core.ir.Assign object at 0x0000024317710700>,
                                      0)],
             '$56call_function.25.1': [(<numba.core.ir.Assign object at 0x0000024317711240>,
                                        0)],
             '$58unary_negative.26.1': [(<numba.core.ir.Assign object at 0x00000243177129E0>,
                                         0)],
             '$64binary_subscr.29.1': [(<numba.core.ir.Assign object at 0x00000243177120E0>,
                                        0)],
             '$66load_global.30.1': [(<numba.core.ir.Assign object at 0x0000024317710340>,
                                      0)],
             '$6binary_subscr.2': [(<numba.core.ir.Assign object at 0x00000243182E5F90>,
                                    90)],
             '$72call_function.33.1': [(<numba.core.ir.Assign object at 0x0000024318F85C30>,
                                        0)],
             '$74binary_subtract.34.1': [(<numba.core.ir.Assign object at 0x0000024318F85C00>,
                                          0)],
             '$76call_function.35.1': [(<numba.core.ir.Assign object at 0x0000024318F86F20>,
                                        0)],
             '$78get_iter.36.1': [(<numba.core.ir.Assign object at 0x0000024318F87A90>,
                                   0)],
             '$80for_iter.1.1': [(<numba.core.ir.Assign object at 0x0000024318F875E0>,
                                  80)],
             '$80for_iter.2.1': [(<numba.core.ir.Assign object at 0x0000024318F87DC0>,
                                  80)],
             '$80for_iter.3.1': [(<numba.core.ir.Assign object at 0x0000024318F87430>,
                                  80)],
             '$8load_global.2.1': [(<numba.core.ir.Assign object at 0x00000243177123E0>,
                                    0)],
             '$92return_value.1.1': [(<numba.core.ir.Assign object at 0x0000024318F86BF0>,
                                      92)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x000002431B5AA830>,
                             90)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x000002431B52DAB0>,
                             90)],
             '$const24.11': [(<numba.core.ir.Assign object at 0x000002431B52E170>,
                              90)],
             '$const24.9.1': [(<numba.core.ir.Assign object at 0x0000024317712EC0>,
                               0)],
             '$const28.11.1': [(<numba.core.ir.Assign object at 0x0000024317713B20>,
                                0)],
             '$const30.12.1': [(<numba.core.ir.Assign object at 0x0000024317712AA0>,
                                0)],
             '$const36.15.1': [(<numba.core.ir.Assign object at 0x00000243177112D0>,
                                0)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x000002431B5ABEB0>,
                            90)],
             '$const40.17.1': [(<numba.core.ir.Assign object at 0x0000024317710EB0>,
                                0)],
             '$const42.18.1': [(<numba.core.ir.Assign object at 0x0000024317711030>,
                                0)],
             '$const52.23.1': [(<numba.core.ir.Assign object at 0x0000024317710A30>,
                                0)],
             '$const54.24.1': [(<numba.core.ir.Assign object at 0x0000024317711360>,
                                0)],
             '$const62.28.1': [(<numba.core.ir.Assign object at 0x00000243177127D0>,
                                0)],
             '$const68.31.1': [(<numba.core.ir.Assign object at 0x000002431776B460>,
                                0)],
             '$const70.32.1': [(<numba.core.ir.Assign object at 0x000002431776AB60>,
                                0)],
             '$phi80.0.1': [(<numba.core.ir.Assign object at 0x0000024317711F30>,
                             0)],
             '$phi82.1.1': [(<numba.core.ir.Assign object at 0x0000024317712BF0>,
                             80)],
             'full_shape0': [(<numba.core.ir.Assign object at 0x0000024317712200>,
                              0)],
             'index00': [(<numba.core.ir.Assign object at 0x0000024318F85F90>,
                          82)],
             'out0': [(<numba.core.ir.Assign object at 0x00000243177130D0>, 0)],
             'stencil_index': [(<numba.core.ir.Assign object at 0x00000243182E7D90>,
                                90)],
             'stencil_index.1': [(<numba.core.ir.Assign object at 0x0000024312E1BF70>,
                                  90)],
             'stencil_index.2': [(<numba.core.ir.Assign object at 0x0000024312E1B970>,
                                  90)],
             'stencil_index.3': [(<numba.core.ir.Assign object at 0x0000024317713EE0>,
                                  90)],
             'x': [(<numba.core.ir.Assign object at 0x0000024317712CE0>, 0)]})
2024-09-04 18:31:36,875 - SSA violators <numba.core.utils.OrderedSet object at 0x0000024317895EA0>
2024-09-04 18:31:37,376 - bytecode dump:
>          0	NOP(arg=None, lineno=1051)
           2	LOAD_GLOBAL(arg=0, lineno=1065)
           4	LOAD_FAST(arg=0, lineno=1065)
           6	CALL_FUNCTION(arg=1, lineno=1065)
           8	LOAD_FAST(arg=1, lineno=1065)
          10	LOAD_CONST(arg=1, lineno=1065)
          12	LOAD_CONST(arg=1, lineno=1065)
          14	BUILD_SLICE(arg=2, lineno=1065)
          16	STORE_SUBSCR(arg=None, lineno=1065)
          18	LOAD_CONST(arg=1, lineno=1065)
          20	RETURN_VALUE(arg=None, lineno=1065)
2024-09-04 18:31:37,376 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:37,376 - stack: []
2024-09-04 18:31:37,376 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:37,376 - dispatch pc=0, inst=NOP(arg=None, lineno=1051)
2024-09-04 18:31:37,376 - stack []
2024-09-04 18:31:37,376 - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1065)
2024-09-04 18:31:37,377 - stack []
2024-09-04 18:31:37,377 - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1065)
2024-09-04 18:31:37,377 - stack ['$2load_global.0']
2024-09-04 18:31:37,377 - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=1065)
2024-09-04 18:31:37,377 - stack ['$2load_global.0', '$x4.1']
2024-09-04 18:31:37,377 - dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=1065)
2024-09-04 18:31:37,377 - stack ['$6call_function.2']
2024-09-04 18:31:37,377 - dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=1065)
2024-09-04 18:31:37,377 - stack ['$6call_function.2', '$y8.3']
2024-09-04 18:31:37,377 - dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=1065)
2024-09-04 18:31:37,377 - stack ['$6call_function.2', '$y8.3', '$const10.4']
2024-09-04 18:31:37,377 - dispatch pc=14, inst=BUILD_SLICE(arg=2, lineno=1065)
2024-09-04 18:31:37,377 - stack ['$6call_function.2', '$y8.3', '$const10.4', '$const12.5']
2024-09-04 18:31:37,378 - dispatch pc=16, inst=STORE_SUBSCR(arg=None, lineno=1065)
2024-09-04 18:31:37,378 - stack ['$6call_function.2', '$y8.3', '$14build_slice.7']
2024-09-04 18:31:37,378 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1065)
2024-09-04 18:31:37,378 - stack []
2024-09-04 18:31:37,378 - dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=1065)
2024-09-04 18:31:37,378 - stack ['$const18.8']
2024-09-04 18:31:37,378 - end state. edges=[]
2024-09-04 18:31:37,378 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:37,378 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 18:31:37,378 - defmap: {}
2024-09-04 18:31:37,378 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:37,379 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:37,379 - keep phismap: {}
2024-09-04 18:31:37,379 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:37,379 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:37,379 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'res': '$y8.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$const12.5'}), (14, {'start': '$const10.4', 'stop': '$const12.5', 'step': None, 'res': '$14build_slice.7', 'slicevar': '$14build_slice.6'}), (16, {'target': '$y8.3', 'index': '$14build_slice.7', 'value': '$6call_function.2'}), (18, {'res': '$const18.8'}), (20, {'retval': '$const18.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:37,380 - label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $2load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x000002431B51D660>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1051)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'x']
    $const10.4 = const(NoneType, None)       ['$const10.4']
    $const12.5 = const(NoneType, None)       ['$const12.5']
    $14build_slice.6 = global(slice: <class 'slice'>) ['$14build_slice.6']
    $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1065), Var($const12.5, utils.py:1065)), kws=(), vararg=None, varkwarg=None, target=None) ['$14build_slice.6', '$14build_slice.7', '$const10.4', '$const12.5']
    y[$14build_slice.7] = $6call_function.2  ['$14build_slice.7', '$6call_function.2', 'y']
    $const18.8 = const(NoneType, None)       ['$const18.8']
    $20return_value.9 = cast(value=$const18.8) ['$20return_value.9', '$const18.8']
    return $20return_value.9                 ['$20return_value.9']

2024-09-04 18:31:37,393 - ==== SSA block analysis pass on 0
2024-09-04 18:31:37,393 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431322AD70>
2024-09-04 18:31:37,393 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:37,393 - on stmt: y = arg(1, name=y)
2024-09-04 18:31:37,393 - on stmt: $2load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x000002431B51D660>)
2024-09-04 18:31:37,393 - on stmt: $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1051)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:37,393 - on stmt: $const10.4 = const(NoneType, None)
2024-09-04 18:31:37,393 - on stmt: $const12.5 = const(NoneType, None)
2024-09-04 18:31:37,394 - on stmt: $14build_slice.6 = global(slice: <class 'slice'>)
2024-09-04 18:31:37,394 - on stmt: $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1065), Var($const12.5, utils.py:1065)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:37,394 - on stmt: y[slice(None, None, None)] = $6call_function.2
2024-09-04 18:31:37,394 - on stmt: $const18.8 = const(NoneType, None)
2024-09-04 18:31:37,394 - on stmt: $20return_value.9 = cast(value=$const18.8)
2024-09-04 18:31:37,394 - on stmt: return $20return_value.9
2024-09-04 18:31:37,395 - defs defaultdict(<class 'list'>,
            {'$14build_slice.6': [(<numba.core.ir.Assign object at 0x000002431322BA90>,
                                   0)],
             '$14build_slice.7': [(<numba.core.ir.Assign object at 0x000002431322BBB0>,
                                   0)],
             '$20return_value.9': [(<numba.core.ir.Assign object at 0x000002431322BF70>,
                                    0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x000002431322B250>,
                                  0)],
             '$6call_function.2': [(<numba.core.ir.Assign object at 0x000002431322B550>,
                                    0)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x000002431322B790>,
                             0)],
             '$const12.5': [(<numba.core.ir.Assign object at 0x000002431322B910>,
                             0)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x000002431322BDF0>,
                             0)],
             'x': [(<numba.core.ir.Assign object at 0x000002431322A9E0>, 0)],
             'y': [(<numba.core.ir.Assign object at 0x000002431322A770>, 0)]})
2024-09-04 18:31:37,395 - SSA violators <numba.core.utils.OrderedSet object at 0x000002431322AD70>
2024-09-04 18:31:37,451 - bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=2)
           4	LOAD_ATTR(arg=0, lineno=2)
           6	STORE_FAST(arg=1, lineno=2)
           8	LOAD_GLOBAL(arg=1, lineno=3)
          10	LOAD_ATTR(arg=2, lineno=3)
          12	LOAD_FAST(arg=1, lineno=3)
          14	LOAD_GLOBAL(arg=1, lineno=3)
          16	LOAD_ATTR(arg=3, lineno=3)
          18	LOAD_CONST(arg=1, lineno=3)
          20	CALL_FUNCTION_KW(arg=2, lineno=3)
          22	STORE_FAST(arg=2, lineno=3)
          24	LOAD_CONST(arg=2, lineno=4)
          26	LOAD_FAST(arg=2, lineno=4)
          28	LOAD_CONST(arg=0, lineno=4)
          30	LOAD_CONST(arg=3, lineno=4)
          32	BUILD_SLICE(arg=2, lineno=4)
          34	STORE_SUBSCR(arg=None, lineno=4)
          36	LOAD_CONST(arg=2, lineno=5)
          38	LOAD_FAST(arg=2, lineno=5)
          40	LOAD_CONST(arg=4, lineno=5)
          42	LOAD_CONST(arg=0, lineno=5)
          44	BUILD_SLICE(arg=2, lineno=5)
          46	STORE_SUBSCR(arg=None, lineno=5)
          48	LOAD_GLOBAL(arg=4, lineno=6)
          50	LOAD_GLOBAL(arg=5, lineno=6)
          52	LOAD_CONST(arg=2, lineno=6)
          54	LOAD_CONST(arg=4, lineno=6)
          56	CALL_FUNCTION(arg=2, lineno=6)
          58	UNARY_NEGATIVE(arg=None, lineno=6)
          60	LOAD_FAST(arg=1, lineno=6)
          62	LOAD_CONST(arg=2, lineno=6)
          64	BINARY_SUBSCR(arg=None, lineno=6)
          66	LOAD_GLOBAL(arg=6, lineno=6)
          68	LOAD_CONST(arg=2, lineno=6)
          70	LOAD_CONST(arg=3, lineno=6)
          72	CALL_FUNCTION(arg=2, lineno=6)
          74	BINARY_SUBTRACT(arg=None, lineno=6)
          76	CALL_FUNCTION(arg=2, lineno=6)
          78	GET_ITER(arg=None, lineno=6)
>         80	FOR_ITER(arg=4, lineno=6)
          82	STORE_FAST(arg=3, lineno=6)
          84	LOAD_CONST(arg=2, lineno=7)
          86	STORE_FAST(arg=4, lineno=7)
          88	JUMP_ABSOLUTE(arg=41, lineno=7)
>         90	LOAD_FAST(arg=2, lineno=8)
          92	RETURN_VALUE(arg=None, lineno=8)
2024-09-04 18:31:37,451 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:37,451 - stack: []
2024-09-04 18:31:37,451 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:37,451 - dispatch pc=0, inst=NOP(arg=None, lineno=1)
2024-09-04 18:31:37,451 - stack []
2024-09-04 18:31:37,452 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2)
2024-09-04 18:31:37,452 - stack []
2024-09-04 18:31:37,452 - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2)
2024-09-04 18:31:37,452 - stack ['$x2.0']
2024-09-04 18:31:37,452 - dispatch pc=6, inst=STORE_FAST(arg=1, lineno=2)
2024-09-04 18:31:37,452 - stack ['$4load_attr.1']
2024-09-04 18:31:37,452 - dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=3)
2024-09-04 18:31:37,452 - stack []
2024-09-04 18:31:37,452 - dispatch pc=10, inst=LOAD_ATTR(arg=2, lineno=3)
2024-09-04 18:31:37,452 - stack ['$8load_global.2']
2024-09-04 18:31:37,452 - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=3)
2024-09-04 18:31:37,453 - stack ['$10load_attr.3']
2024-09-04 18:31:37,453 - dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=3)
2024-09-04 18:31:37,453 - stack ['$10load_attr.3', '$full_shape012.4']
2024-09-04 18:31:37,453 - dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=3)
2024-09-04 18:31:37,453 - stack ['$10load_attr.3', '$full_shape012.4', '$14load_global.5']
2024-09-04 18:31:37,453 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=3)
2024-09-04 18:31:37,453 - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6']
2024-09-04 18:31:37,453 - dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=3)
2024-09-04 18:31:37,453 - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6', '$const18.7']
2024-09-04 18:31:37,454 - dispatch pc=22, inst=STORE_FAST(arg=2, lineno=3)
2024-09-04 18:31:37,454 - stack ['$20call_function_kw.8']
2024-09-04 18:31:37,454 - dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=4)
2024-09-04 18:31:37,454 - stack []
2024-09-04 18:31:37,454 - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=4)
2024-09-04 18:31:37,454 - stack ['$const24.9']
2024-09-04 18:31:37,454 - dispatch pc=28, inst=LOAD_CONST(arg=0, lineno=4)
2024-09-04 18:31:37,454 - stack ['$const24.9', '$out026.10']
2024-09-04 18:31:37,454 - dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=4)
2024-09-04 18:31:37,454 - stack ['$const24.9', '$out026.10', '$const28.11']
2024-09-04 18:31:37,455 - dispatch pc=32, inst=BUILD_SLICE(arg=2, lineno=4)
2024-09-04 18:31:37,455 - stack ['$const24.9', '$out026.10', '$const28.11', '$const30.12']
2024-09-04 18:31:37,455 - dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=4)
2024-09-04 18:31:37,455 - stack ['$const24.9', '$out026.10', '$32build_slice.14']
2024-09-04 18:31:37,455 - dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=5)
2024-09-04 18:31:37,455 - stack []
2024-09-04 18:31:37,455 - dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=5)
2024-09-04 18:31:37,455 - stack ['$const36.15']
2024-09-04 18:31:37,455 - dispatch pc=40, inst=LOAD_CONST(arg=4, lineno=5)
2024-09-04 18:31:37,455 - stack ['$const36.15', '$out038.16']
2024-09-04 18:31:37,455 - dispatch pc=42, inst=LOAD_CONST(arg=0, lineno=5)
2024-09-04 18:31:37,456 - stack ['$const36.15', '$out038.16', '$const40.17']
2024-09-04 18:31:37,456 - dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=5)
2024-09-04 18:31:37,456 - stack ['$const36.15', '$out038.16', '$const40.17', '$const42.18']
2024-09-04 18:31:37,456 - dispatch pc=46, inst=STORE_SUBSCR(arg=None, lineno=5)
2024-09-04 18:31:37,456 - stack ['$const36.15', '$out038.16', '$44build_slice.20']
2024-09-04 18:31:37,456 - dispatch pc=48, inst=LOAD_GLOBAL(arg=4, lineno=6)
2024-09-04 18:31:37,456 - stack []
2024-09-04 18:31:37,456 - dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=6)
2024-09-04 18:31:37,456 - stack ['$48load_global.21']
2024-09-04 18:31:37,456 - dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:37,457 - stack ['$48load_global.21', '$50load_global.22']
2024-09-04 18:31:37,457 - dispatch pc=54, inst=LOAD_CONST(arg=4, lineno=6)
2024-09-04 18:31:37,457 - stack ['$48load_global.21', '$50load_global.22', '$const52.23']
2024-09-04 18:31:37,457 - dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:37,457 - stack ['$48load_global.21', '$50load_global.22', '$const52.23', '$const54.24']
2024-09-04 18:31:37,457 - dispatch pc=58, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2024-09-04 18:31:37,457 - stack ['$48load_global.21', '$56call_function.25']
2024-09-04 18:31:37,457 - dispatch pc=60, inst=LOAD_FAST(arg=1, lineno=6)
2024-09-04 18:31:37,457 - stack ['$48load_global.21', '$58unary_negative.26']
2024-09-04 18:31:37,457 - dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:37,458 - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27']
2024-09-04 18:31:37,458 - dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=6)
2024-09-04 18:31:37,458 - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27', '$const62.28']
2024-09-04 18:31:37,458 - dispatch pc=66, inst=LOAD_GLOBAL(arg=6, lineno=6)
2024-09-04 18:31:37,458 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29']
2024-09-04 18:31:37,458 - dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:37,458 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30']
2024-09-04 18:31:37,458 - dispatch pc=70, inst=LOAD_CONST(arg=3, lineno=6)
2024-09-04 18:31:37,458 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31']
2024-09-04 18:31:37,458 - dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:37,458 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31', '$const70.32']
2024-09-04 18:31:37,459 - dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=6)
2024-09-04 18:31:37,459 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$72call_function.33']
2024-09-04 18:31:37,459 - dispatch pc=76, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:37,459 - stack ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34']
2024-09-04 18:31:37,459 - dispatch pc=78, inst=GET_ITER(arg=None, lineno=6)
2024-09-04 18:31:37,459 - stack ['$76call_function.35']
2024-09-04 18:31:37,459 - end state. edges=[Edge(pc=80, stack=('$78get_iter.36',), blockstack=(), npush=0)]
2024-09-04 18:31:37,459 - pending: deque([State(pc_initial=80 nstack_initial=1)])
2024-09-04 18:31:37,460 - stack: ['$phi80.0']
2024-09-04 18:31:37,460 - state.pc_initial: State(pc_initial=80 nstack_initial=1)
2024-09-04 18:31:37,460 - dispatch pc=80, inst=FOR_ITER(arg=4, lineno=6)
2024-09-04 18:31:37,460 - stack ['$phi80.0']
2024-09-04 18:31:37,460 - end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
2024-09-04 18:31:37,460 - pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=82 nstack_initial=2)])
2024-09-04 18:31:37,460 - stack: []
2024-09-04 18:31:37,460 - state.pc_initial: State(pc_initial=90 nstack_initial=0)
2024-09-04 18:31:37,460 - dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=8)
2024-09-04 18:31:37,460 - stack []
2024-09-04 18:31:37,461 - dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=8)
2024-09-04 18:31:37,461 - stack ['$out090.0']
2024-09-04 18:31:37,461 - end state. edges=[]
2024-09-04 18:31:37,461 - pending: deque([State(pc_initial=82 nstack_initial=2)])
2024-09-04 18:31:37,461 - stack: ['$phi82.0', '$phi82.1']
2024-09-04 18:31:37,461 - state.pc_initial: State(pc_initial=82 nstack_initial=2)
2024-09-04 18:31:37,461 - dispatch pc=82, inst=STORE_FAST(arg=3, lineno=6)
2024-09-04 18:31:37,461 - stack ['$phi82.0', '$phi82.1']
2024-09-04 18:31:37,461 - dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=7)
2024-09-04 18:31:37,461 - stack ['$phi82.0']
2024-09-04 18:31:37,461 - dispatch pc=86, inst=STORE_FAST(arg=4, lineno=7)
2024-09-04 18:31:37,462 - stack ['$phi82.0', '$const84.2']
2024-09-04 18:31:37,462 - dispatch pc=88, inst=JUMP_ABSOLUTE(arg=41, lineno=7)
2024-09-04 18:31:37,462 - stack ['$phi82.0']
2024-09-04 18:31:37,462 - end state. edges=[Edge(pc=80, stack=('$phi82.0',), blockstack=(), npush=0)]
2024-09-04 18:31:37,462 - pending: deque([State(pc_initial=80 nstack_initial=1)])
2024-09-04 18:31:37,462 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:37,462 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=82 nstack_initial=2): {'$phi82.1'},
             State(pc_initial=90 nstack_initial=0): set()})
2024-09-04 18:31:37,463 - defmap: {'$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi82.1': State(pc_initial=80 nstack_initial=1)}
2024-09-04 18:31:37,463 - phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=2))},
             '$phi82.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:37,463 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:37,463 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:37,464 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:37,464 - keep phismap: {'$phi80.0': {('$78get_iter.36', State(pc_initial=0 nstack_initial=0))},
 '$phi82.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
2024-09-04 18:31:37,464 - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.36'},
             State(pc_initial=80 nstack_initial=1): {'$phi82.1': '$80for_iter.2'}})
2024-09-04 18:31:37,465 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:37,465 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_global.2'}), (10, {'item': '$8load_global.2', 'res': '$10load_attr.3'}), (12, {'res': '$full_shape012.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$10load_attr.3', 'args': ['$full_shape012.4', '$16load_attr.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$out026.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$const30.12'}), (32, {'start': '$const28.11', 'stop': '$const30.12', 'step': None, 'res': '$32build_slice.14', 'slicevar': '$32build_slice.13'}), (34, {'target': '$out026.10', 'index': '$32build_slice.14', 'value': '$const24.9'}), (36, {'res': '$const36.15'}), (38, {'res': '$out038.16'}), (40, {'res': '$const40.17'}), (42, {'res': '$const42.18'}), (44, {'start': '$const40.17', 'stop': '$const42.18', 'step': None, 'res': '$44build_slice.20', 'slicevar': '$44build_slice.19'}), (46, {'target': '$out038.16', 'index': '$44build_slice.20', 'value': '$const36.15'}), (48, {'res': '$48load_global.21'}), (50, {'res': '$50load_global.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$50load_global.22', 'args': ['$const52.23', '$const54.24'], 'res': '$56call_function.25'}), (58, {'value': '$56call_function.25', 'res': '$58unary_negative.26'}), (60, {'res': '$full_shape060.27'}), (62, {'res': '$const62.28'}), (64, {'index': '$const62.28', 'target': '$full_shape060.27', 'res': '$64binary_subscr.29'}), (66, {'res': '$66load_global.30'}), (68, {'res': '$const68.31'}), (70, {'res': '$const70.32'}), (72, {'func': '$66load_global.30', 'args': ['$const68.31', '$const70.32'], 'res': '$72call_function.33'}), (74, {'lhs': '$64binary_subscr.29', 'rhs': '$72call_function.33', 'res': '$74binary_subtract.34'}), (76, {'func': '$48load_global.21', 'args': ['$58unary_negative.26', '$74binary_subtract.34'], 'res': '$76call_function.35'}), (78, {'value': '$76call_function.35', 'res': '$78get_iter.36'})), outgoing_phis={'$phi80.0': '$78get_iter.36'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.36',)})
2024-09-04 18:31:37,466 - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi82.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 82: ('$phi80.0', '$80for_iter.2')})
2024-09-04 18:31:37,466 - block_infos State(pc_initial=82 nstack_initial=2):
AdaptBlockInfo(insts=((82, {'value': '$phi82.1'}), (84, {'res': '$const84.2'}), (86, {'value': '$const84.2'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi82.0',)})
2024-09-04 18:31:37,466 - block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$out090.0'}), (92, {'retval': '$out090.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:37,470 - label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $8load_global.2 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$8load_global.2']
    $10load_attr.3 = getattr(value=$8load_global.2, attr=empty) ['$10load_attr.3', '$8load_global.2']
    $14load_global.5 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=bool_) ['$14load_global.5', '$16load_attr.6']
    out0 = call $10load_attr.3(full_shape0, func=$10load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6, <string>:3))], vararg=None, varkwarg=None, target=None) ['$10load_attr.3', '$16load_attr.6', 'full_shape0', 'out0']
    $const24.9 = const(int, 0)               ['$const24.9']
    $const28.11 = const(NoneType, None)      ['$const28.11']
    $const30.12 = const(int, 1)              ['$const30.12']
    $32build_slice.13 = global(slice: <class 'slice'>) ['$32build_slice.13']
    $32build_slice.14 = call $32build_slice.13($const28.11, $const30.12, func=$32build_slice.13, args=(Var($const28.11, <string>:4), Var($const30.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$32build_slice.13', '$32build_slice.14', '$const28.11', '$const30.12']
    out0[$32build_slice.14] = $const24.9     ['$32build_slice.14', '$const24.9', 'out0']
    $const36.15 = const(int, 0)              ['$const36.15']
    $const40.17 = const(int, -1)             ['$const40.17']
    $const42.18 = const(NoneType, None)      ['$const42.18']
    $44build_slice.19 = global(slice: <class 'slice'>) ['$44build_slice.19']
    $44build_slice.20 = call $44build_slice.19($const40.17, $const42.18, func=$44build_slice.19, args=(Var($const40.17, <string>:5), Var($const42.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$44build_slice.19', '$44build_slice.20', '$const40.17', '$const42.18']
    out0[$44build_slice.20] = $const36.15    ['$44build_slice.20', '$const36.15', 'out0']
    $48load_global.21 = global(range: <class 'range'>) ['$48load_global.21']
    $50load_global.22 = global(min: <built-in function min>) ['$50load_global.22']
    $const52.23 = const(int, 0)              ['$const52.23']
    $const54.24 = const(int, -1)             ['$const54.24']
    $56call_function.25 = call $50load_global.22($const52.23, $const54.24, func=$50load_global.22, args=[Var($const52.23, <string>:6), Var($const54.24, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.22', '$56call_function.25', '$const52.23', '$const54.24']
    $58unary_negative.26 = unary(fn=<built-in function neg>, value=$56call_function.25) ['$56call_function.25', '$58unary_negative.26']
    $const62.28 = const(int, 0)              ['$const62.28']
    $64binary_subscr.29 = getitem(value=full_shape0, index=$const62.28, fn=<built-in function getitem>) ['$64binary_subscr.29', '$const62.28', 'full_shape0']
    $66load_global.30 = global(max: <built-in function max>) ['$66load_global.30']
    $const68.31 = const(int, 0)              ['$const68.31']
    $const70.32 = const(int, 1)              ['$const70.32']
    $72call_function.33 = call $66load_global.30($const68.31, $const70.32, func=$66load_global.30, args=[Var($const68.31, <string>:6), Var($const70.32, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.30', '$72call_function.33', '$const68.31', '$const70.32']
    $74binary_subtract.34 = $64binary_subscr.29 - $72call_function.33 ['$64binary_subscr.29', '$72call_function.33', '$74binary_subtract.34']
    $76call_function.35 = call $48load_global.21($58unary_negative.26, $74binary_subtract.34, func=$48load_global.21, args=[Var($58unary_negative.26, <string>:6), Var($74binary_subtract.34, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34', '$76call_function.35']
    $78get_iter.36 = getiter(value=$76call_function.35) ['$76call_function.35', '$78get_iter.36']
    $phi80.0 = $78get_iter.36                ['$78get_iter.36', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi82.1 = $80for_iter.2                 ['$80for_iter.2', '$phi82.1']
    branch $80for_iter.3, 82, 90             ['$80for_iter.3']
label 82:
    index00 = $phi82.1                       ['$phi82.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 80                                  []
label 90:
    $92return_value.1 = cast(value=out0)     ['$92return_value.1', 'out0']
    return $92return_value.1                 ['$92return_value.1']

2024-09-04 18:31:37,497 - ==== SSA block analysis pass on 0
2024-09-04 18:31:37,498 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313228640>
2024-09-04 18:31:37,498 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:37,498 - on stmt: full_shape0 = getattr(value=x, attr=shape)
2024-09-04 18:31:37,498 - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:37,498 - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2024-09-04 18:31:37,498 - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:37,498 - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2024-09-04 18:31:37,498 - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:37,499 - on stmt: $const24.9.1 = const(int, 0)
2024-09-04 18:31:37,499 - on stmt: $const28.11.1 = const(NoneType, None)
2024-09-04 18:31:37,499 - on stmt: $const30.12.1 = const(int, 1)
2024-09-04 18:31:37,499 - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:37,499 - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:37,499 - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2024-09-04 18:31:37,499 - on stmt: $const36.15.1 = const(int, 0)
2024-09-04 18:31:37,500 - on stmt: $const40.17.1 = const(int, -1)
2024-09-04 18:31:37,500 - on stmt: $const42.18.1 = const(NoneType, None)
2024-09-04 18:31:37,500 - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:37,500 - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:37,500 - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2024-09-04 18:31:37,500 - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2024-09-04 18:31:37,500 - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2024-09-04 18:31:37,501 - on stmt: $const52.23.1 = const(int, 0)
2024-09-04 18:31:37,501 - on stmt: $const54.24.1 = const(int, -1)
2024-09-04 18:31:37,501 - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:37,501 - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2024-09-04 18:31:37,501 - on stmt: $const62.28.1 = const(int, 0)
2024-09-04 18:31:37,501 - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2024-09-04 18:31:37,501 - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2024-09-04 18:31:37,501 - on stmt: $const68.31.1 = const(int, 0)
2024-09-04 18:31:37,502 - on stmt: $const70.32.1 = const(int, 1)
2024-09-04 18:31:37,502 - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:37,502 - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2024-09-04 18:31:37,502 - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:37,502 - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2024-09-04 18:31:37,502 - on stmt: $phi80.0.1 = $78get_iter.36.1
2024-09-04 18:31:37,502 - on stmt: jump 80
2024-09-04 18:31:37,503 - ==== SSA block analysis pass on 80
2024-09-04 18:31:37,503 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313228640>
2024-09-04 18:31:37,503 - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2024-09-04 18:31:37,503 - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2024-09-04 18:31:37,503 - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2024-09-04 18:31:37,503 - on stmt: $phi82.1.1 = $80for_iter.2.1
2024-09-04 18:31:37,503 - on stmt: branch $80for_iter.3.1, 82, 92
2024-09-04 18:31:37,503 - ==== SSA block analysis pass on 82
2024-09-04 18:31:37,503 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313228640>
2024-09-04 18:31:37,503 - on stmt: index00 = $phi82.1.1
2024-09-04 18:31:37,504 - on stmt: jump 90
2024-09-04 18:31:37,504 - ==== SSA block analysis pass on 92
2024-09-04 18:31:37,504 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313228640>
2024-09-04 18:31:37,504 - on stmt: $92return_value.1.1 = cast(value=out0)
2024-09-04 18:31:37,504 - on stmt: return $92return_value.1.1
2024-09-04 18:31:37,504 - ==== SSA block analysis pass on 90
2024-09-04 18:31:37,504 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313228640>
2024-09-04 18:31:37,504 - on stmt: $const4.1 = const(int, 0)
2024-09-04 18:31:37,504 - on stmt: stencil_index = $const4.1 + index00
2024-09-04 18:31:37,504 - on stmt: $6binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:37,505 - on stmt: $const10.4 = const(int, -1)
2024-09-04 18:31:37,505 - on stmt: stencil_index.1 = $const10.4 + index00
2024-09-04 18:31:37,505 - on stmt: $12binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2024-09-04 18:31:37,505 - on stmt: $14compare_op.6 = $6binary_subscr.2 > $12binary_subscr.5
2024-09-04 18:31:37,505 - on stmt: $const18.8 = const(int, 0)
2024-09-04 18:31:37,505 - on stmt: stencil_index.2 = $const18.8 + index00
2024-09-04 18:31:37,505 - on stmt: $20binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
2024-09-04 18:31:37,505 - on stmt: $const24.11 = const(int, 1)
2024-09-04 18:31:37,505 - on stmt: stencil_index.3 = $const24.11 + index00
2024-09-04 18:31:37,506 - on stmt: $26binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
2024-09-04 18:31:37,506 - on stmt: $28compare_op.13 = $20binary_subscr.9 >= $26binary_subscr.12
2024-09-04 18:31:37,506 - on stmt: $30binary_and.14 = $14compare_op.6 & $28compare_op.13
2024-09-04 18:31:37,506 - on stmt: $32return_value.15 = cast(value=$30binary_and.14)
2024-09-04 18:31:37,506 - on stmt: out0[index00] = $32return_value.15
2024-09-04 18:31:37,506 - on stmt: jump 91
2024-09-04 18:31:37,506 - ==== SSA block analysis pass on 91
2024-09-04 18:31:37,506 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313228640>
2024-09-04 18:31:37,506 - on stmt: jump 80
2024-09-04 18:31:37,509 - defs defaultdict(<class 'list'>,
            {'$10load_attr.3.1': [(<numba.core.ir.Assign object at 0x0000024313256590>,
                                   0)],
             '$12binary_subscr.5': [(<numba.core.ir.Assign object at 0x00000243132550C0>,
                                     90)],
             '$14compare_op.6': [(<numba.core.ir.Assign object at 0x000002431324A440>,
                                  90)],
             '$14load_global.5.1': [(<numba.core.ir.Assign object at 0x00000243132561A0>,
                                     0)],
             '$16load_attr.6.1': [(<numba.core.ir.Assign object at 0x0000024313256020>,
                                   0)],
             '$20binary_subscr.9': [(<numba.core.ir.Assign object at 0x0000024313255300>,
                                     90)],
             '$26binary_subscr.12': [(<numba.core.ir.Assign object at 0x0000024313255540>,
                                      90)],
             '$28compare_op.13': [(<numba.core.ir.Assign object at 0x0000024313251930>,
                                   90)],
             '$30binary_and.14': [(<numba.core.ir.Assign object at 0x0000024313251B10>,
                                   90)],
             '$32build_slice.13.1': [(<numba.core.ir.Assign object at 0x00000243132572B0>,
                                      0)],
             '$32build_slice.14.1': [(<numba.core.ir.Assign object at 0x00000243132573D0>,
                                      0)],
             '$32return_value.15': [(<numba.core.ir.Assign object at 0x00000243132525C0>,
                                     90)],
             '$44build_slice.19.1': [(<numba.core.ir.Assign object at 0x0000024313257BB0>,
                                      0)],
             '$44build_slice.20.1': [(<numba.core.ir.Assign object at 0x0000024313257CD0>,
                                      0)],
             '$48load_global.21.1': [(<numba.core.ir.Assign object at 0x0000024313257F10>,
                                      0)],
             '$50load_global.22.1': [(<numba.core.ir.Assign object at 0x00000243132640D0>,
                                      0)],
             '$56call_function.25.1': [(<numba.core.ir.Assign object at 0x00000243132645B0>,
                                        0)],
             '$58unary_negative.26.1': [(<numba.core.ir.Assign object at 0x00000243132646D0>,
                                         0)],
             '$64binary_subscr.29.1': [(<numba.core.ir.Assign object at 0x0000024313264B20>,
                                        0)],
             '$66load_global.30.1': [(<numba.core.ir.Assign object at 0x0000024313264C70>,
                                      0)],
             '$6binary_subscr.2': [(<numba.core.ir.Assign object at 0x0000024313254E80>,
                                    90)],
             '$72call_function.33.1': [(<numba.core.ir.Assign object at 0x0000024313265150>,
                                        0)],
             '$74binary_subtract.34.1': [(<numba.core.ir.Assign object at 0x00000243132652A0>,
                                          0)],
             '$76call_function.35.1': [(<numba.core.ir.Assign object at 0x0000024313265450>,
                                        0)],
             '$78get_iter.36.1': [(<numba.core.ir.Assign object at 0x0000024313265570>,
                                   0)],
             '$80for_iter.1.1': [(<numba.core.ir.Assign object at 0x0000024313265660>,
                                  80)],
             '$80for_iter.2.1': [(<numba.core.ir.Assign object at 0x0000024313265780>,
                                  80)],
             '$80for_iter.3.1': [(<numba.core.ir.Assign object at 0x00000243132658A0>,
                                  80)],
             '$8load_global.2.1': [(<numba.core.ir.Assign object at 0x0000024313256710>,
                                    0)],
             '$92return_value.1.1': [(<numba.core.ir.Assign object at 0x00000243132661D0>,
                                      92)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x0000024313248F40>,
                             90)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x000002431324A620>,
                             90)],
             '$const24.11': [(<numba.core.ir.Assign object at 0x0000024313250430>,
                              90)],
             '$const24.9.1': [(<numba.core.ir.Assign object at 0x00000243132558D0>,
                               0)],
             '$const28.11.1': [(<numba.core.ir.Assign object at 0x00000243132555A0>,
                                0)],
             '$const30.12.1': [(<numba.core.ir.Assign object at 0x0000024313257130>,
                                0)],
             '$const36.15.1': [(<numba.core.ir.Assign object at 0x0000024313257610>,
                                0)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x0000024313238130>,
                            90)],
             '$const40.17.1': [(<numba.core.ir.Assign object at 0x00000243132578B0>,
                                0)],
             '$const42.18.1': [(<numba.core.ir.Assign object at 0x0000024313257A30>,
                                0)],
             '$const52.23.1': [(<numba.core.ir.Assign object at 0x0000024313264250>,
                                0)],
             '$const54.24.1': [(<numba.core.ir.Assign object at 0x00000243132643D0>,
                                0)],
             '$const62.28.1': [(<numba.core.ir.Assign object at 0x0000024313264970>,
                                0)],
             '$const68.31.1': [(<numba.core.ir.Assign object at 0x0000024313264DF0>,
                                0)],
             '$const70.32.1': [(<numba.core.ir.Assign object at 0x0000024313264F70>,
                                0)],
             '$phi80.0.1': [(<numba.core.ir.Assign object at 0x0000024313256AA0>,
                             0)],
             '$phi82.1.1': [(<numba.core.ir.Assign object at 0x00000243132647F0>,
                             80)],
             'full_shape0': [(<numba.core.ir.Assign object at 0x00000243132569B0>,
                              0)],
             'index00': [(<numba.core.ir.Assign object at 0x0000024313265B70>,
                          82)],
             'out0': [(<numba.core.ir.Assign object at 0x0000024313255A50>, 0)],
             'stencil_index': [(<numba.core.ir.Assign object at 0x0000024313254490>,
                                90)],
             'stencil_index.1': [(<numba.core.ir.Assign object at 0x0000024313255000>,
                                  90)],
             'stencil_index.2': [(<numba.core.ir.Assign object at 0x0000024313255240>,
                                  90)],
             'stencil_index.3': [(<numba.core.ir.Assign object at 0x0000024313255480>,
                                  90)],
             'x': [(<numba.core.ir.Assign object at 0x0000024313256C50>, 0)]})
2024-09-04 18:31:37,509 - SSA violators <numba.core.utils.OrderedSet object at 0x0000024313228640>
2024-09-04 18:31:37,897 - bytecode dump:
>          0	NOP(arg=None, lineno=1051)
           2	LOAD_GLOBAL(arg=0, lineno=1065)
           4	LOAD_FAST(arg=0, lineno=1065)
           6	CALL_FUNCTION(arg=1, lineno=1065)
           8	LOAD_FAST(arg=1, lineno=1065)
          10	LOAD_CONST(arg=1, lineno=1065)
          12	LOAD_CONST(arg=1, lineno=1065)
          14	BUILD_SLICE(arg=2, lineno=1065)
          16	STORE_SUBSCR(arg=None, lineno=1065)
          18	LOAD_CONST(arg=1, lineno=1065)
          20	RETURN_VALUE(arg=None, lineno=1065)
2024-09-04 18:31:37,897 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:37,897 - stack: []
2024-09-04 18:31:37,897 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:37,898 - dispatch pc=0, inst=NOP(arg=None, lineno=1051)
2024-09-04 18:31:37,898 - stack []
2024-09-04 18:31:37,898 - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1065)
2024-09-04 18:31:37,898 - stack []
2024-09-04 18:31:37,898 - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1065)
2024-09-04 18:31:37,898 - stack ['$2load_global.0']
2024-09-04 18:31:37,898 - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=1065)
2024-09-04 18:31:37,898 - stack ['$2load_global.0', '$x4.1']
2024-09-04 18:31:37,898 - dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=1065)
2024-09-04 18:31:37,898 - stack ['$6call_function.2']
2024-09-04 18:31:37,898 - dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=1065)
2024-09-04 18:31:37,898 - stack ['$6call_function.2', '$y8.3']
2024-09-04 18:31:37,898 - dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=1065)
2024-09-04 18:31:37,899 - stack ['$6call_function.2', '$y8.3', '$const10.4']
2024-09-04 18:31:37,899 - dispatch pc=14, inst=BUILD_SLICE(arg=2, lineno=1065)
2024-09-04 18:31:37,899 - stack ['$6call_function.2', '$y8.3', '$const10.4', '$const12.5']
2024-09-04 18:31:37,899 - dispatch pc=16, inst=STORE_SUBSCR(arg=None, lineno=1065)
2024-09-04 18:31:37,899 - stack ['$6call_function.2', '$y8.3', '$14build_slice.7']
2024-09-04 18:31:37,899 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1065)
2024-09-04 18:31:37,899 - stack []
2024-09-04 18:31:37,899 - dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=1065)
2024-09-04 18:31:37,899 - stack ['$const18.8']
2024-09-04 18:31:37,899 - end state. edges=[]
2024-09-04 18:31:37,899 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:37,899 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 18:31:37,899 - defmap: {}
2024-09-04 18:31:37,900 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:37,900 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:37,900 - keep phismap: {}
2024-09-04 18:31:37,900 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:37,900 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:37,900 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'res': '$y8.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$const12.5'}), (14, {'start': '$const10.4', 'stop': '$const12.5', 'step': None, 'res': '$14build_slice.7', 'slicevar': '$14build_slice.6'}), (16, {'target': '$y8.3', 'index': '$14build_slice.7', 'value': '$6call_function.2'}), (18, {'res': '$const18.8'}), (20, {'retval': '$const18.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:37,901 - label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $2load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x000002431B51D660>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1051)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'x']
    $const10.4 = const(NoneType, None)       ['$const10.4']
    $const12.5 = const(NoneType, None)       ['$const12.5']
    $14build_slice.6 = global(slice: <class 'slice'>) ['$14build_slice.6']
    $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1065), Var($const12.5, utils.py:1065)), kws=(), vararg=None, varkwarg=None, target=None) ['$14build_slice.6', '$14build_slice.7', '$const10.4', '$const12.5']
    y[$14build_slice.7] = $6call_function.2  ['$14build_slice.7', '$6call_function.2', 'y']
    $const18.8 = const(NoneType, None)       ['$const18.8']
    $20return_value.9 = cast(value=$const18.8) ['$20return_value.9', '$const18.8']
    return $20return_value.9                 ['$20return_value.9']

2024-09-04 18:31:37,909 - ==== SSA block analysis pass on 0
2024-09-04 18:31:37,909 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431323AE60>
2024-09-04 18:31:37,910 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:37,910 - on stmt: y = arg(1, name=y)
2024-09-04 18:31:37,910 - on stmt: $2load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x000002431B51D660>)
2024-09-04 18:31:37,910 - on stmt: $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1051)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:37,910 - on stmt: $const10.4 = const(NoneType, None)
2024-09-04 18:31:37,910 - on stmt: $const12.5 = const(NoneType, None)
2024-09-04 18:31:37,910 - on stmt: $14build_slice.6 = global(slice: <class 'slice'>)
2024-09-04 18:31:37,910 - on stmt: $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1065), Var($const12.5, utils.py:1065)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:37,910 - on stmt: y[slice(None, None, None)] = $6call_function.2
2024-09-04 18:31:37,910 - on stmt: $const18.8 = const(NoneType, None)
2024-09-04 18:31:37,910 - on stmt: $20return_value.9 = cast(value=$const18.8)
2024-09-04 18:31:37,910 - on stmt: return $20return_value.9
2024-09-04 18:31:37,911 - defs defaultdict(<class 'list'>,
            {'$14build_slice.6': [(<numba.core.ir.Assign object at 0x0000024313386E00>,
                                   0)],
             '$14build_slice.7': [(<numba.core.ir.Assign object at 0x0000024313386F20>,
                                   0)],
             '$20return_value.9': [(<numba.core.ir.Assign object at 0x00000243133872E0>,
                                    0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x00000243133865C0>,
                                  0)],
             '$6call_function.2': [(<numba.core.ir.Assign object at 0x00000243133868C0>,
                                    0)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x0000024313386B00>,
                             0)],
             '$const12.5': [(<numba.core.ir.Assign object at 0x0000024313386C80>,
                             0)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x0000024313387160>,
                             0)],
             'x': [(<numba.core.ir.Assign object at 0x0000024313385D50>, 0)],
             'y': [(<numba.core.ir.Assign object at 0x0000024313385AE0>, 0)]})
2024-09-04 18:31:37,911 - SSA violators <numba.core.utils.OrderedSet object at 0x000002431331B640>
2024-09-04 18:31:37,943 - bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=2)
           4	LOAD_ATTR(arg=0, lineno=2)
           6	STORE_FAST(arg=1, lineno=2)
           8	LOAD_GLOBAL(arg=1, lineno=3)
          10	LOAD_ATTR(arg=2, lineno=3)
          12	LOAD_FAST(arg=1, lineno=3)
          14	LOAD_GLOBAL(arg=1, lineno=3)
          16	LOAD_ATTR(arg=3, lineno=3)
          18	LOAD_CONST(arg=1, lineno=3)
          20	CALL_FUNCTION_KW(arg=2, lineno=3)
          22	STORE_FAST(arg=2, lineno=3)
          24	LOAD_CONST(arg=2, lineno=4)
          26	LOAD_FAST(arg=2, lineno=4)
          28	LOAD_CONST(arg=0, lineno=4)
          30	LOAD_CONST(arg=3, lineno=4)
          32	BUILD_SLICE(arg=2, lineno=4)
          34	STORE_SUBSCR(arg=None, lineno=4)
          36	LOAD_CONST(arg=2, lineno=5)
          38	LOAD_FAST(arg=2, lineno=5)
          40	LOAD_CONST(arg=4, lineno=5)
          42	LOAD_CONST(arg=0, lineno=5)
          44	BUILD_SLICE(arg=2, lineno=5)
          46	STORE_SUBSCR(arg=None, lineno=5)
          48	LOAD_GLOBAL(arg=4, lineno=6)
          50	LOAD_GLOBAL(arg=5, lineno=6)
          52	LOAD_CONST(arg=2, lineno=6)
          54	LOAD_CONST(arg=4, lineno=6)
          56	CALL_FUNCTION(arg=2, lineno=6)
          58	UNARY_NEGATIVE(arg=None, lineno=6)
          60	LOAD_FAST(arg=1, lineno=6)
          62	LOAD_CONST(arg=2, lineno=6)
          64	BINARY_SUBSCR(arg=None, lineno=6)
          66	LOAD_GLOBAL(arg=6, lineno=6)
          68	LOAD_CONST(arg=2, lineno=6)
          70	LOAD_CONST(arg=3, lineno=6)
          72	CALL_FUNCTION(arg=2, lineno=6)
          74	BINARY_SUBTRACT(arg=None, lineno=6)
          76	CALL_FUNCTION(arg=2, lineno=6)
          78	GET_ITER(arg=None, lineno=6)
>         80	FOR_ITER(arg=4, lineno=6)
          82	STORE_FAST(arg=3, lineno=6)
          84	LOAD_CONST(arg=2, lineno=7)
          86	STORE_FAST(arg=4, lineno=7)
          88	JUMP_ABSOLUTE(arg=41, lineno=7)
>         90	LOAD_FAST(arg=2, lineno=8)
          92	RETURN_VALUE(arg=None, lineno=8)
2024-09-04 18:31:37,943 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:37,943 - stack: []
2024-09-04 18:31:37,943 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:37,943 - dispatch pc=0, inst=NOP(arg=None, lineno=1)
2024-09-04 18:31:37,943 - stack []
2024-09-04 18:31:37,943 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2)
2024-09-04 18:31:37,943 - stack []
2024-09-04 18:31:37,944 - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2)
2024-09-04 18:31:37,944 - stack ['$x2.0']
2024-09-04 18:31:37,944 - dispatch pc=6, inst=STORE_FAST(arg=1, lineno=2)
2024-09-04 18:31:37,944 - stack ['$4load_attr.1']
2024-09-04 18:31:37,944 - dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=3)
2024-09-04 18:31:37,944 - stack []
2024-09-04 18:31:37,944 - dispatch pc=10, inst=LOAD_ATTR(arg=2, lineno=3)
2024-09-04 18:31:37,944 - stack ['$8load_global.2']
2024-09-04 18:31:37,944 - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=3)
2024-09-04 18:31:37,944 - stack ['$10load_attr.3']
2024-09-04 18:31:37,944 - dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=3)
2024-09-04 18:31:37,944 - stack ['$10load_attr.3', '$full_shape012.4']
2024-09-04 18:31:37,944 - dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=3)
2024-09-04 18:31:37,944 - stack ['$10load_attr.3', '$full_shape012.4', '$14load_global.5']
2024-09-04 18:31:37,945 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=3)
2024-09-04 18:31:37,945 - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6']
2024-09-04 18:31:37,945 - dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=3)
2024-09-04 18:31:37,945 - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6', '$const18.7']
2024-09-04 18:31:37,945 - dispatch pc=22, inst=STORE_FAST(arg=2, lineno=3)
2024-09-04 18:31:37,945 - stack ['$20call_function_kw.8']
2024-09-04 18:31:37,945 - dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=4)
2024-09-04 18:31:37,945 - stack []
2024-09-04 18:31:37,945 - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=4)
2024-09-04 18:31:37,945 - stack ['$const24.9']
2024-09-04 18:31:37,945 - dispatch pc=28, inst=LOAD_CONST(arg=0, lineno=4)
2024-09-04 18:31:37,945 - stack ['$const24.9', '$out026.10']
2024-09-04 18:31:37,945 - dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=4)
2024-09-04 18:31:37,945 - stack ['$const24.9', '$out026.10', '$const28.11']
2024-09-04 18:31:37,946 - dispatch pc=32, inst=BUILD_SLICE(arg=2, lineno=4)
2024-09-04 18:31:37,946 - stack ['$const24.9', '$out026.10', '$const28.11', '$const30.12']
2024-09-04 18:31:37,946 - dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=4)
2024-09-04 18:31:37,946 - stack ['$const24.9', '$out026.10', '$32build_slice.14']
2024-09-04 18:31:37,946 - dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=5)
2024-09-04 18:31:37,946 - stack []
2024-09-04 18:31:37,946 - dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=5)
2024-09-04 18:31:37,946 - stack ['$const36.15']
2024-09-04 18:31:37,946 - dispatch pc=40, inst=LOAD_CONST(arg=4, lineno=5)
2024-09-04 18:31:37,946 - stack ['$const36.15', '$out038.16']
2024-09-04 18:31:37,946 - dispatch pc=42, inst=LOAD_CONST(arg=0, lineno=5)
2024-09-04 18:31:37,946 - stack ['$const36.15', '$out038.16', '$const40.17']
2024-09-04 18:31:37,946 - dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=5)
2024-09-04 18:31:37,946 - stack ['$const36.15', '$out038.16', '$const40.17', '$const42.18']
2024-09-04 18:31:37,947 - dispatch pc=46, inst=STORE_SUBSCR(arg=None, lineno=5)
2024-09-04 18:31:37,947 - stack ['$const36.15', '$out038.16', '$44build_slice.20']
2024-09-04 18:31:37,947 - dispatch pc=48, inst=LOAD_GLOBAL(arg=4, lineno=6)
2024-09-04 18:31:37,947 - stack []
2024-09-04 18:31:37,947 - dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=6)
2024-09-04 18:31:37,947 - stack ['$48load_global.21']
2024-09-04 18:31:37,947 - dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:37,947 - stack ['$48load_global.21', '$50load_global.22']
2024-09-04 18:31:37,947 - dispatch pc=54, inst=LOAD_CONST(arg=4, lineno=6)
2024-09-04 18:31:37,947 - stack ['$48load_global.21', '$50load_global.22', '$const52.23']
2024-09-04 18:31:37,947 - dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:37,947 - stack ['$48load_global.21', '$50load_global.22', '$const52.23', '$const54.24']
2024-09-04 18:31:37,947 - dispatch pc=58, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2024-09-04 18:31:37,947 - stack ['$48load_global.21', '$56call_function.25']
2024-09-04 18:31:37,948 - dispatch pc=60, inst=LOAD_FAST(arg=1, lineno=6)
2024-09-04 18:31:37,948 - stack ['$48load_global.21', '$58unary_negative.26']
2024-09-04 18:31:37,948 - dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:37,948 - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27']
2024-09-04 18:31:37,948 - dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=6)
2024-09-04 18:31:37,948 - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27', '$const62.28']
2024-09-04 18:31:37,948 - dispatch pc=66, inst=LOAD_GLOBAL(arg=6, lineno=6)
2024-09-04 18:31:37,948 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29']
2024-09-04 18:31:37,948 - dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:37,948 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30']
2024-09-04 18:31:37,948 - dispatch pc=70, inst=LOAD_CONST(arg=3, lineno=6)
2024-09-04 18:31:37,948 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31']
2024-09-04 18:31:37,948 - dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:37,948 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31', '$const70.32']
2024-09-04 18:31:37,948 - dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=6)
2024-09-04 18:31:37,949 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$72call_function.33']
2024-09-04 18:31:37,949 - dispatch pc=76, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:37,949 - stack ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34']
2024-09-04 18:31:37,949 - dispatch pc=78, inst=GET_ITER(arg=None, lineno=6)
2024-09-04 18:31:37,949 - stack ['$76call_function.35']
2024-09-04 18:31:37,949 - end state. edges=[Edge(pc=80, stack=('$78get_iter.36',), blockstack=(), npush=0)]
2024-09-04 18:31:37,949 - pending: deque([State(pc_initial=80 nstack_initial=1)])
2024-09-04 18:31:37,949 - stack: ['$phi80.0']
2024-09-04 18:31:37,949 - state.pc_initial: State(pc_initial=80 nstack_initial=1)
2024-09-04 18:31:37,949 - dispatch pc=80, inst=FOR_ITER(arg=4, lineno=6)
2024-09-04 18:31:37,949 - stack ['$phi80.0']
2024-09-04 18:31:37,949 - end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
2024-09-04 18:31:37,949 - pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=82 nstack_initial=2)])
2024-09-04 18:31:37,949 - stack: []
2024-09-04 18:31:37,950 - state.pc_initial: State(pc_initial=90 nstack_initial=0)
2024-09-04 18:31:37,950 - dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=8)
2024-09-04 18:31:37,950 - stack []
2024-09-04 18:31:37,950 - dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=8)
2024-09-04 18:31:37,950 - stack ['$out090.0']
2024-09-04 18:31:37,950 - end state. edges=[]
2024-09-04 18:31:37,950 - pending: deque([State(pc_initial=82 nstack_initial=2)])
2024-09-04 18:31:37,950 - stack: ['$phi82.0', '$phi82.1']
2024-09-04 18:31:37,950 - state.pc_initial: State(pc_initial=82 nstack_initial=2)
2024-09-04 18:31:37,950 - dispatch pc=82, inst=STORE_FAST(arg=3, lineno=6)
2024-09-04 18:31:37,950 - stack ['$phi82.0', '$phi82.1']
2024-09-04 18:31:37,950 - dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=7)
2024-09-04 18:31:37,950 - stack ['$phi82.0']
2024-09-04 18:31:37,950 - dispatch pc=86, inst=STORE_FAST(arg=4, lineno=7)
2024-09-04 18:31:37,950 - stack ['$phi82.0', '$const84.2']
2024-09-04 18:31:37,951 - dispatch pc=88, inst=JUMP_ABSOLUTE(arg=41, lineno=7)
2024-09-04 18:31:37,951 - stack ['$phi82.0']
2024-09-04 18:31:37,951 - end state. edges=[Edge(pc=80, stack=('$phi82.0',), blockstack=(), npush=0)]
2024-09-04 18:31:37,951 - pending: deque([State(pc_initial=80 nstack_initial=1)])
2024-09-04 18:31:37,951 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:37,951 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=82 nstack_initial=2): {'$phi82.1'},
             State(pc_initial=90 nstack_initial=0): set()})
2024-09-04 18:31:37,951 - defmap: {'$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi82.1': State(pc_initial=80 nstack_initial=1)}
2024-09-04 18:31:37,951 - phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=2))},
             '$phi82.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:37,952 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:37,952 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:37,952 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:37,952 - keep phismap: {'$phi80.0': {('$78get_iter.36', State(pc_initial=0 nstack_initial=0))},
 '$phi82.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
2024-09-04 18:31:37,952 - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.36'},
             State(pc_initial=80 nstack_initial=1): {'$phi82.1': '$80for_iter.2'}})
2024-09-04 18:31:37,953 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:37,953 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_global.2'}), (10, {'item': '$8load_global.2', 'res': '$10load_attr.3'}), (12, {'res': '$full_shape012.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$10load_attr.3', 'args': ['$full_shape012.4', '$16load_attr.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$out026.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$const30.12'}), (32, {'start': '$const28.11', 'stop': '$const30.12', 'step': None, 'res': '$32build_slice.14', 'slicevar': '$32build_slice.13'}), (34, {'target': '$out026.10', 'index': '$32build_slice.14', 'value': '$const24.9'}), (36, {'res': '$const36.15'}), (38, {'res': '$out038.16'}), (40, {'res': '$const40.17'}), (42, {'res': '$const42.18'}), (44, {'start': '$const40.17', 'stop': '$const42.18', 'step': None, 'res': '$44build_slice.20', 'slicevar': '$44build_slice.19'}), (46, {'target': '$out038.16', 'index': '$44build_slice.20', 'value': '$const36.15'}), (48, {'res': '$48load_global.21'}), (50, {'res': '$50load_global.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$50load_global.22', 'args': ['$const52.23', '$const54.24'], 'res': '$56call_function.25'}), (58, {'value': '$56call_function.25', 'res': '$58unary_negative.26'}), (60, {'res': '$full_shape060.27'}), (62, {'res': '$const62.28'}), (64, {'index': '$const62.28', 'target': '$full_shape060.27', 'res': '$64binary_subscr.29'}), (66, {'res': '$66load_global.30'}), (68, {'res': '$const68.31'}), (70, {'res': '$const70.32'}), (72, {'func': '$66load_global.30', 'args': ['$const68.31', '$const70.32'], 'res': '$72call_function.33'}), (74, {'lhs': '$64binary_subscr.29', 'rhs': '$72call_function.33', 'res': '$74binary_subtract.34'}), (76, {'func': '$48load_global.21', 'args': ['$58unary_negative.26', '$74binary_subtract.34'], 'res': '$76call_function.35'}), (78, {'value': '$76call_function.35', 'res': '$78get_iter.36'})), outgoing_phis={'$phi80.0': '$78get_iter.36'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.36',)})
2024-09-04 18:31:37,953 - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi82.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 82: ('$phi80.0', '$80for_iter.2')})
2024-09-04 18:31:37,953 - block_infos State(pc_initial=82 nstack_initial=2):
AdaptBlockInfo(insts=((82, {'value': '$phi82.1'}), (84, {'res': '$const84.2'}), (86, {'value': '$const84.2'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi82.0',)})
2024-09-04 18:31:37,953 - block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$out090.0'}), (92, {'retval': '$out090.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:37,955 - label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $8load_global.2 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$8load_global.2']
    $10load_attr.3 = getattr(value=$8load_global.2, attr=empty) ['$10load_attr.3', '$8load_global.2']
    $14load_global.5 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=bool_) ['$14load_global.5', '$16load_attr.6']
    out0 = call $10load_attr.3(full_shape0, func=$10load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6, <string>:3))], vararg=None, varkwarg=None, target=None) ['$10load_attr.3', '$16load_attr.6', 'full_shape0', 'out0']
    $const24.9 = const(int, 0)               ['$const24.9']
    $const28.11 = const(NoneType, None)      ['$const28.11']
    $const30.12 = const(int, 1)              ['$const30.12']
    $32build_slice.13 = global(slice: <class 'slice'>) ['$32build_slice.13']
    $32build_slice.14 = call $32build_slice.13($const28.11, $const30.12, func=$32build_slice.13, args=(Var($const28.11, <string>:4), Var($const30.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$32build_slice.13', '$32build_slice.14', '$const28.11', '$const30.12']
    out0[$32build_slice.14] = $const24.9     ['$32build_slice.14', '$const24.9', 'out0']
    $const36.15 = const(int, 0)              ['$const36.15']
    $const40.17 = const(int, -1)             ['$const40.17']
    $const42.18 = const(NoneType, None)      ['$const42.18']
    $44build_slice.19 = global(slice: <class 'slice'>) ['$44build_slice.19']
    $44build_slice.20 = call $44build_slice.19($const40.17, $const42.18, func=$44build_slice.19, args=(Var($const40.17, <string>:5), Var($const42.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$44build_slice.19', '$44build_slice.20', '$const40.17', '$const42.18']
    out0[$44build_slice.20] = $const36.15    ['$44build_slice.20', '$const36.15', 'out0']
    $48load_global.21 = global(range: <class 'range'>) ['$48load_global.21']
    $50load_global.22 = global(min: <built-in function min>) ['$50load_global.22']
    $const52.23 = const(int, 0)              ['$const52.23']
    $const54.24 = const(int, -1)             ['$const54.24']
    $56call_function.25 = call $50load_global.22($const52.23, $const54.24, func=$50load_global.22, args=[Var($const52.23, <string>:6), Var($const54.24, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.22', '$56call_function.25', '$const52.23', '$const54.24']
    $58unary_negative.26 = unary(fn=<built-in function neg>, value=$56call_function.25) ['$56call_function.25', '$58unary_negative.26']
    $const62.28 = const(int, 0)              ['$const62.28']
    $64binary_subscr.29 = getitem(value=full_shape0, index=$const62.28, fn=<built-in function getitem>) ['$64binary_subscr.29', '$const62.28', 'full_shape0']
    $66load_global.30 = global(max: <built-in function max>) ['$66load_global.30']
    $const68.31 = const(int, 0)              ['$const68.31']
    $const70.32 = const(int, 1)              ['$const70.32']
    $72call_function.33 = call $66load_global.30($const68.31, $const70.32, func=$66load_global.30, args=[Var($const68.31, <string>:6), Var($const70.32, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.30', '$72call_function.33', '$const68.31', '$const70.32']
    $74binary_subtract.34 = $64binary_subscr.29 - $72call_function.33 ['$64binary_subscr.29', '$72call_function.33', '$74binary_subtract.34']
    $76call_function.35 = call $48load_global.21($58unary_negative.26, $74binary_subtract.34, func=$48load_global.21, args=[Var($58unary_negative.26, <string>:6), Var($74binary_subtract.34, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34', '$76call_function.35']
    $78get_iter.36 = getiter(value=$76call_function.35) ['$76call_function.35', '$78get_iter.36']
    $phi80.0 = $78get_iter.36                ['$78get_iter.36', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi82.1 = $80for_iter.2                 ['$80for_iter.2', '$phi82.1']
    branch $80for_iter.3, 82, 90             ['$80for_iter.3']
label 82:
    index00 = $phi82.1                       ['$phi82.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 80                                  []
label 90:
    $92return_value.1 = cast(value=out0)     ['$92return_value.1', 'out0']
    return $92return_value.1                 ['$92return_value.1']

2024-09-04 18:31:37,975 - ==== SSA block analysis pass on 0
2024-09-04 18:31:37,975 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431344B790>
2024-09-04 18:31:37,975 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:37,975 - on stmt: full_shape0 = getattr(value=x, attr=shape)
2024-09-04 18:31:37,975 - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:37,975 - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2024-09-04 18:31:37,975 - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:37,976 - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2024-09-04 18:31:37,976 - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:37,976 - on stmt: $const24.9.1 = const(int, 0)
2024-09-04 18:31:37,976 - on stmt: $const28.11.1 = const(NoneType, None)
2024-09-04 18:31:37,976 - on stmt: $const30.12.1 = const(int, 1)
2024-09-04 18:31:37,976 - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:37,976 - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:37,976 - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2024-09-04 18:31:37,976 - on stmt: $const36.15.1 = const(int, 0)
2024-09-04 18:31:37,976 - on stmt: $const40.17.1 = const(int, -1)
2024-09-04 18:31:37,976 - on stmt: $const42.18.1 = const(NoneType, None)
2024-09-04 18:31:37,977 - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:37,977 - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:37,977 - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2024-09-04 18:31:37,977 - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2024-09-04 18:31:37,977 - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2024-09-04 18:31:37,977 - on stmt: $const52.23.1 = const(int, 0)
2024-09-04 18:31:37,977 - on stmt: $const54.24.1 = const(int, -1)
2024-09-04 18:31:37,977 - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:37,977 - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2024-09-04 18:31:37,977 - on stmt: $const62.28.1 = const(int, 0)
2024-09-04 18:31:37,977 - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2024-09-04 18:31:37,978 - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2024-09-04 18:31:37,978 - on stmt: $const68.31.1 = const(int, 0)
2024-09-04 18:31:37,978 - on stmt: $const70.32.1 = const(int, 1)
2024-09-04 18:31:37,978 - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:37,978 - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2024-09-04 18:31:37,978 - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:37,978 - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2024-09-04 18:31:37,978 - on stmt: $phi80.0.1 = $78get_iter.36.1
2024-09-04 18:31:37,978 - on stmt: jump 80
2024-09-04 18:31:37,978 - ==== SSA block analysis pass on 80
2024-09-04 18:31:37,978 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431344B790>
2024-09-04 18:31:37,978 - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2024-09-04 18:31:37,979 - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2024-09-04 18:31:37,979 - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2024-09-04 18:31:37,979 - on stmt: $phi82.1.1 = $80for_iter.2.1
2024-09-04 18:31:37,979 - on stmt: branch $80for_iter.3.1, 82, 92
2024-09-04 18:31:37,979 - ==== SSA block analysis pass on 82
2024-09-04 18:31:37,979 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431344B790>
2024-09-04 18:31:37,979 - on stmt: index00 = $phi82.1.1
2024-09-04 18:31:37,979 - on stmt: jump 90
2024-09-04 18:31:37,979 - ==== SSA block analysis pass on 92
2024-09-04 18:31:37,979 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431344B790>
2024-09-04 18:31:37,979 - on stmt: $92return_value.1.1 = cast(value=out0)
2024-09-04 18:31:37,979 - on stmt: return $92return_value.1.1
2024-09-04 18:31:37,979 - ==== SSA block analysis pass on 90
2024-09-04 18:31:37,979 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431344B790>
2024-09-04 18:31:37,980 - on stmt: $const4.1 = const(int, 0)
2024-09-04 18:31:37,980 - on stmt: stencil_index = $const4.1 + index00
2024-09-04 18:31:37,980 - on stmt: $6binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:37,980 - on stmt: $const10.4 = const(int, -1)
2024-09-04 18:31:37,980 - on stmt: stencil_index.1 = $const10.4 + index00
2024-09-04 18:31:37,980 - on stmt: $12binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2024-09-04 18:31:37,980 - on stmt: $14compare_op.6 = $6binary_subscr.2 > $12binary_subscr.5
2024-09-04 18:31:37,980 - on stmt: $const18.8 = const(int, 0)
2024-09-04 18:31:37,980 - on stmt: stencil_index.2 = $const18.8 + index00
2024-09-04 18:31:37,980 - on stmt: $20binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
2024-09-04 18:31:37,980 - on stmt: $const24.11 = const(int, 1)
2024-09-04 18:31:37,980 - on stmt: stencil_index.3 = $const24.11 + index00
2024-09-04 18:31:37,981 - on stmt: $26binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
2024-09-04 18:31:37,981 - on stmt: $28compare_op.13 = $20binary_subscr.9 >= $26binary_subscr.12
2024-09-04 18:31:37,981 - on stmt: $30binary_and.14 = $14compare_op.6 & $28compare_op.13
2024-09-04 18:31:37,981 - on stmt: $32return_value.15 = cast(value=$30binary_and.14)
2024-09-04 18:31:37,981 - on stmt: out0[index00] = $32return_value.15
2024-09-04 18:31:37,981 - on stmt: jump 91
2024-09-04 18:31:37,981 - ==== SSA block analysis pass on 91
2024-09-04 18:31:37,981 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431344B790>
2024-09-04 18:31:37,981 - on stmt: jump 80
2024-09-04 18:31:37,984 - defs defaultdict(<class 'list'>,
            {'$10load_attr.3.1': [(<numba.core.ir.Assign object at 0x00000243134319C0>,
                                   0)],
             '$12binary_subscr.5': [(<numba.core.ir.Assign object at 0x00000243134304C0>,
                                     90)],
             '$14compare_op.6': [(<numba.core.ir.Assign object at 0x0000024313425840>,
                                  90)],
             '$14load_global.5.1': [(<numba.core.ir.Assign object at 0x00000243134315A0>,
                                     0)],
             '$16load_attr.6.1': [(<numba.core.ir.Assign object at 0x0000024313431450>,
                                   0)],
             '$20binary_subscr.9': [(<numba.core.ir.Assign object at 0x0000024313430700>,
                                     90)],
             '$26binary_subscr.12': [(<numba.core.ir.Assign object at 0x0000024313430940>,
                                      90)],
             '$28compare_op.13': [(<numba.core.ir.Assign object at 0x0000024313428D30>,
                                   90)],
             '$30binary_and.14': [(<numba.core.ir.Assign object at 0x0000024313428F10>,
                                   90)],
             '$32build_slice.13.1': [(<numba.core.ir.Assign object at 0x0000024313432680>,
                                      0)],
             '$32build_slice.14.1': [(<numba.core.ir.Assign object at 0x00000243134327A0>,
                                      0)],
             '$32return_value.15': [(<numba.core.ir.Assign object at 0x00000243134299C0>,
                                     90)],
             '$44build_slice.19.1': [(<numba.core.ir.Assign object at 0x0000024313432F80>,
                                      0)],
             '$44build_slice.20.1': [(<numba.core.ir.Assign object at 0x00000243134330A0>,
                                      0)],
             '$48load_global.21.1': [(<numba.core.ir.Assign object at 0x00000243134332E0>,
                                      0)],
             '$50load_global.22.1': [(<numba.core.ir.Assign object at 0x0000024313433460>,
                                      0)],
             '$56call_function.25.1': [(<numba.core.ir.Assign object at 0x0000024313433940>,
                                        0)],
             '$58unary_negative.26.1': [(<numba.core.ir.Assign object at 0x0000024313433A60>,
                                         0)],
             '$64binary_subscr.29.1': [(<numba.core.ir.Assign object at 0x0000024313433EB0>,
                                        0)],
             '$66load_global.30.1': [(<numba.core.ir.Assign object at 0x0000024313444040>,
                                      0)],
             '$6binary_subscr.2': [(<numba.core.ir.Assign object at 0x0000024313430280>,
                                    90)],
             '$72call_function.33.1': [(<numba.core.ir.Assign object at 0x0000024313444520>,
                                        0)],
             '$74binary_subtract.34.1': [(<numba.core.ir.Assign object at 0x0000024313444670>,
                                          0)],
             '$76call_function.35.1': [(<numba.core.ir.Assign object at 0x0000024313444820>,
                                        0)],
             '$78get_iter.36.1': [(<numba.core.ir.Assign object at 0x0000024313444940>,
                                   0)],
             '$80for_iter.1.1': [(<numba.core.ir.Assign object at 0x0000024313444A30>,
                                  80)],
             '$80for_iter.2.1': [(<numba.core.ir.Assign object at 0x0000024313444B50>,
                                  80)],
             '$80for_iter.3.1': [(<numba.core.ir.Assign object at 0x0000024313444C70>,
                                  80)],
             '$8load_global.2.1': [(<numba.core.ir.Assign object at 0x0000024313431B40>,
                                    0)],
             '$92return_value.1.1': [(<numba.core.ir.Assign object at 0x00000243134455A0>,
                                      92)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x0000024313424340>,
                             90)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x0000024313425A20>,
                             90)],
             '$const24.11': [(<numba.core.ir.Assign object at 0x00000243134277F0>,
                              90)],
             '$const24.9.1': [(<numba.core.ir.Assign object at 0x0000024313430D00>,
                               0)],
             '$const28.11.1': [(<numba.core.ir.Assign object at 0x00000243134309D0>,
                                0)],
             '$const30.12.1': [(<numba.core.ir.Assign object at 0x0000024313432500>,
                                0)],
             '$const36.15.1': [(<numba.core.ir.Assign object at 0x00000243134329E0>,
                                0)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x0000024313418FD0>,
                            90)],
             '$const40.17.1': [(<numba.core.ir.Assign object at 0x0000024313432C80>,
                                0)],
             '$const42.18.1': [(<numba.core.ir.Assign object at 0x0000024313432E00>,
                                0)],
             '$const52.23.1': [(<numba.core.ir.Assign object at 0x00000243134335E0>,
                                0)],
             '$const54.24.1': [(<numba.core.ir.Assign object at 0x0000024313433760>,
                                0)],
             '$const62.28.1': [(<numba.core.ir.Assign object at 0x0000024313433D00>,
                                0)],
             '$const68.31.1': [(<numba.core.ir.Assign object at 0x00000243134441C0>,
                                0)],
             '$const70.32.1': [(<numba.core.ir.Assign object at 0x0000024313444340>,
                                0)],
             '$phi80.0.1': [(<numba.core.ir.Assign object at 0x0000024313431ED0>,
                             0)],
             '$phi82.1.1': [(<numba.core.ir.Assign object at 0x0000024313433C10>,
                             80)],
             'full_shape0': [(<numba.core.ir.Assign object at 0x0000024313431DE0>,
                              0)],
             'index00': [(<numba.core.ir.Assign object at 0x0000024313444F40>,
                          82)],
             'out0': [(<numba.core.ir.Assign object at 0x0000024313430E80>, 0)],
             'stencil_index': [(<numba.core.ir.Assign object at 0x000002431342B850>,
                                90)],
             'stencil_index.1': [(<numba.core.ir.Assign object at 0x0000024313430400>,
                                  90)],
             'stencil_index.2': [(<numba.core.ir.Assign object at 0x0000024313430640>,
                                  90)],
             'stencil_index.3': [(<numba.core.ir.Assign object at 0x0000024313430880>,
                                  90)],
             'x': [(<numba.core.ir.Assign object at 0x0000024313432080>, 0)]})
2024-09-04 18:31:37,984 - SSA violators <numba.core.utils.OrderedSet object at 0x0000024313447D30>
2024-09-04 18:31:38,730 - bytecode dump:
>          0	NOP(arg=None, lineno=1051)
           2	LOAD_GLOBAL(arg=0, lineno=1065)
           4	LOAD_FAST(arg=0, lineno=1065)
           6	CALL_FUNCTION(arg=1, lineno=1065)
           8	LOAD_FAST(arg=1, lineno=1065)
          10	LOAD_CONST(arg=1, lineno=1065)
          12	LOAD_CONST(arg=1, lineno=1065)
          14	BUILD_SLICE(arg=2, lineno=1065)
          16	STORE_SUBSCR(arg=None, lineno=1065)
          18	LOAD_CONST(arg=1, lineno=1065)
          20	RETURN_VALUE(arg=None, lineno=1065)
2024-09-04 18:31:38,731 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:38,731 - stack: []
2024-09-04 18:31:38,731 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:38,732 - dispatch pc=0, inst=NOP(arg=None, lineno=1051)
2024-09-04 18:31:38,732 - stack []
2024-09-04 18:31:38,732 - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1065)
2024-09-04 18:31:38,732 - stack []
2024-09-04 18:31:38,733 - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1065)
2024-09-04 18:31:38,733 - stack ['$2load_global.0']
2024-09-04 18:31:38,733 - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=1065)
2024-09-04 18:31:38,733 - stack ['$2load_global.0', '$x4.1']
2024-09-04 18:31:38,734 - dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=1065)
2024-09-04 18:31:38,734 - stack ['$6call_function.2']
2024-09-04 18:31:38,734 - dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=1065)
2024-09-04 18:31:38,734 - stack ['$6call_function.2', '$y8.3']
2024-09-04 18:31:38,735 - dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=1065)
2024-09-04 18:31:38,735 - stack ['$6call_function.2', '$y8.3', '$const10.4']
2024-09-04 18:31:38,735 - dispatch pc=14, inst=BUILD_SLICE(arg=2, lineno=1065)
2024-09-04 18:31:38,735 - stack ['$6call_function.2', '$y8.3', '$const10.4', '$const12.5']
2024-09-04 18:31:38,736 - dispatch pc=16, inst=STORE_SUBSCR(arg=None, lineno=1065)
2024-09-04 18:31:38,736 - stack ['$6call_function.2', '$y8.3', '$14build_slice.7']
2024-09-04 18:31:38,736 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1065)
2024-09-04 18:31:38,736 - stack []
2024-09-04 18:31:38,737 - dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=1065)
2024-09-04 18:31:38,737 - stack ['$const18.8']
2024-09-04 18:31:38,737 - end state. edges=[]
2024-09-04 18:31:38,737 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:38,738 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 18:31:38,738 - defmap: {}
2024-09-04 18:31:38,738 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:38,738 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:38,739 - keep phismap: {}
2024-09-04 18:31:38,739 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:38,739 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:38,739 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'res': '$y8.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$const12.5'}), (14, {'start': '$const10.4', 'stop': '$const12.5', 'step': None, 'res': '$14build_slice.7', 'slicevar': '$14build_slice.6'}), (16, {'target': '$y8.3', 'index': '$14build_slice.7', 'value': '$6call_function.2'}), (18, {'res': '$const18.8'}), (20, {'retval': '$const18.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:38,742 - label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $2load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x000002431B51D660>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1051)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'x']
    $const10.4 = const(NoneType, None)       ['$const10.4']
    $const12.5 = const(NoneType, None)       ['$const12.5']
    $14build_slice.6 = global(slice: <class 'slice'>) ['$14build_slice.6']
    $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1065), Var($const12.5, utils.py:1065)), kws=(), vararg=None, varkwarg=None, target=None) ['$14build_slice.6', '$14build_slice.7', '$const10.4', '$const12.5']
    y[$14build_slice.7] = $6call_function.2  ['$14build_slice.7', '$6call_function.2', 'y']
    $const18.8 = const(NoneType, None)       ['$const18.8']
    $20return_value.9 = cast(value=$const18.8) ['$20return_value.9', '$const18.8']
    return $20return_value.9                 ['$20return_value.9']

2024-09-04 18:31:38,766 - ==== SSA block analysis pass on 0
2024-09-04 18:31:38,766 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D1E8A30>
2024-09-04 18:31:38,766 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:38,766 - on stmt: y = arg(1, name=y)
2024-09-04 18:31:38,767 - on stmt: $2load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x000002431B51D660>)
2024-09-04 18:31:38,767 - on stmt: $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1051)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:38,767 - on stmt: $const10.4 = const(NoneType, None)
2024-09-04 18:31:38,767 - on stmt: $const12.5 = const(NoneType, None)
2024-09-04 18:31:38,767 - on stmt: $14build_slice.6 = global(slice: <class 'slice'>)
2024-09-04 18:31:38,768 - on stmt: $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1065), Var($const12.5, utils.py:1065)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:38,768 - on stmt: y[slice(None, None, None)] = $6call_function.2
2024-09-04 18:31:38,768 - on stmt: $const18.8 = const(NoneType, None)
2024-09-04 18:31:38,768 - on stmt: $20return_value.9 = cast(value=$const18.8)
2024-09-04 18:31:38,768 - on stmt: return $20return_value.9
2024-09-04 18:31:38,770 - defs defaultdict(<class 'list'>,
            {'$14build_slice.6': [(<numba.core.ir.Assign object at 0x000002431B51C1F0>,
                                   0)],
             '$14build_slice.7': [(<numba.core.ir.Assign object at 0x000002431B51C820>,
                                   0)],
             '$20return_value.9': [(<numba.core.ir.Assign object at 0x00000243133A2050>,
                                    0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x000002431B52FF70>,
                                  0)],
             '$6call_function.2': [(<numba.core.ir.Assign object at 0x000002431B52E710>,
                                    0)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x000002431B52E680>,
                             0)],
             '$const12.5': [(<numba.core.ir.Assign object at 0x000002431B52D9F0>,
                             0)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x00000243182E5F90>,
                             0)],
             'x': [(<numba.core.ir.Assign object at 0x000002431B51C670>, 0)],
             'y': [(<numba.core.ir.Assign object at 0x000002431B51C610>, 0)]})
2024-09-04 18:31:38,770 - SSA violators <numba.core.utils.OrderedSet object at 0x000002431D1E8A30>
2024-09-04 18:31:38,818 - bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=2)
           4	LOAD_ATTR(arg=0, lineno=2)
           6	STORE_FAST(arg=1, lineno=2)
           8	LOAD_GLOBAL(arg=1, lineno=3)
          10	LOAD_ATTR(arg=2, lineno=3)
          12	LOAD_FAST(arg=1, lineno=3)
          14	LOAD_GLOBAL(arg=1, lineno=3)
          16	LOAD_ATTR(arg=3, lineno=3)
          18	LOAD_CONST(arg=1, lineno=3)
          20	CALL_FUNCTION_KW(arg=2, lineno=3)
          22	STORE_FAST(arg=2, lineno=3)
          24	LOAD_CONST(arg=2, lineno=4)
          26	LOAD_FAST(arg=2, lineno=4)
          28	LOAD_CONST(arg=0, lineno=4)
          30	LOAD_CONST(arg=3, lineno=4)
          32	BUILD_SLICE(arg=2, lineno=4)
          34	STORE_SUBSCR(arg=None, lineno=4)
          36	LOAD_CONST(arg=2, lineno=5)
          38	LOAD_FAST(arg=2, lineno=5)
          40	LOAD_CONST(arg=4, lineno=5)
          42	LOAD_CONST(arg=0, lineno=5)
          44	BUILD_SLICE(arg=2, lineno=5)
          46	STORE_SUBSCR(arg=None, lineno=5)
          48	LOAD_GLOBAL(arg=4, lineno=6)
          50	LOAD_GLOBAL(arg=5, lineno=6)
          52	LOAD_CONST(arg=2, lineno=6)
          54	LOAD_CONST(arg=4, lineno=6)
          56	CALL_FUNCTION(arg=2, lineno=6)
          58	UNARY_NEGATIVE(arg=None, lineno=6)
          60	LOAD_FAST(arg=1, lineno=6)
          62	LOAD_CONST(arg=2, lineno=6)
          64	BINARY_SUBSCR(arg=None, lineno=6)
          66	LOAD_GLOBAL(arg=6, lineno=6)
          68	LOAD_CONST(arg=2, lineno=6)
          70	LOAD_CONST(arg=3, lineno=6)
          72	CALL_FUNCTION(arg=2, lineno=6)
          74	BINARY_SUBTRACT(arg=None, lineno=6)
          76	CALL_FUNCTION(arg=2, lineno=6)
          78	GET_ITER(arg=None, lineno=6)
>         80	FOR_ITER(arg=4, lineno=6)
          82	STORE_FAST(arg=3, lineno=6)
          84	LOAD_CONST(arg=2, lineno=7)
          86	STORE_FAST(arg=4, lineno=7)
          88	JUMP_ABSOLUTE(arg=41, lineno=7)
>         90	LOAD_FAST(arg=2, lineno=8)
          92	RETURN_VALUE(arg=None, lineno=8)
2024-09-04 18:31:38,818 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:38,818 - stack: []
2024-09-04 18:31:38,818 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:38,818 - dispatch pc=0, inst=NOP(arg=None, lineno=1)
2024-09-04 18:31:38,818 - stack []
2024-09-04 18:31:38,818 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2)
2024-09-04 18:31:38,818 - stack []
2024-09-04 18:31:38,818 - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2)
2024-09-04 18:31:38,818 - stack ['$x2.0']
2024-09-04 18:31:38,818 - dispatch pc=6, inst=STORE_FAST(arg=1, lineno=2)
2024-09-04 18:31:38,819 - stack ['$4load_attr.1']
2024-09-04 18:31:38,819 - dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=3)
2024-09-04 18:31:38,819 - stack []
2024-09-04 18:31:38,819 - dispatch pc=10, inst=LOAD_ATTR(arg=2, lineno=3)
2024-09-04 18:31:38,819 - stack ['$8load_global.2']
2024-09-04 18:31:38,819 - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=3)
2024-09-04 18:31:38,819 - stack ['$10load_attr.3']
2024-09-04 18:31:38,819 - dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=3)
2024-09-04 18:31:38,819 - stack ['$10load_attr.3', '$full_shape012.4']
2024-09-04 18:31:38,819 - dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=3)
2024-09-04 18:31:38,819 - stack ['$10load_attr.3', '$full_shape012.4', '$14load_global.5']
2024-09-04 18:31:38,819 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=3)
2024-09-04 18:31:38,820 - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6']
2024-09-04 18:31:38,820 - dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=3)
2024-09-04 18:31:38,820 - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6', '$const18.7']
2024-09-04 18:31:38,820 - dispatch pc=22, inst=STORE_FAST(arg=2, lineno=3)
2024-09-04 18:31:38,820 - stack ['$20call_function_kw.8']
2024-09-04 18:31:38,820 - dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=4)
2024-09-04 18:31:38,820 - stack []
2024-09-04 18:31:38,820 - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=4)
2024-09-04 18:31:38,820 - stack ['$const24.9']
2024-09-04 18:31:38,820 - dispatch pc=28, inst=LOAD_CONST(arg=0, lineno=4)
2024-09-04 18:31:38,820 - stack ['$const24.9', '$out026.10']
2024-09-04 18:31:38,821 - dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=4)
2024-09-04 18:31:38,821 - stack ['$const24.9', '$out026.10', '$const28.11']
2024-09-04 18:31:38,821 - dispatch pc=32, inst=BUILD_SLICE(arg=2, lineno=4)
2024-09-04 18:31:38,821 - stack ['$const24.9', '$out026.10', '$const28.11', '$const30.12']
2024-09-04 18:31:38,821 - dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=4)
2024-09-04 18:31:38,821 - stack ['$const24.9', '$out026.10', '$32build_slice.14']
2024-09-04 18:31:38,821 - dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=5)
2024-09-04 18:31:38,821 - stack []
2024-09-04 18:31:38,821 - dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=5)
2024-09-04 18:31:38,821 - stack ['$const36.15']
2024-09-04 18:31:38,821 - dispatch pc=40, inst=LOAD_CONST(arg=4, lineno=5)
2024-09-04 18:31:38,821 - stack ['$const36.15', '$out038.16']
2024-09-04 18:31:38,821 - dispatch pc=42, inst=LOAD_CONST(arg=0, lineno=5)
2024-09-04 18:31:38,822 - stack ['$const36.15', '$out038.16', '$const40.17']
2024-09-04 18:31:38,822 - dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=5)
2024-09-04 18:31:38,822 - stack ['$const36.15', '$out038.16', '$const40.17', '$const42.18']
2024-09-04 18:31:38,822 - dispatch pc=46, inst=STORE_SUBSCR(arg=None, lineno=5)
2024-09-04 18:31:38,822 - stack ['$const36.15', '$out038.16', '$44build_slice.20']
2024-09-04 18:31:38,822 - dispatch pc=48, inst=LOAD_GLOBAL(arg=4, lineno=6)
2024-09-04 18:31:38,822 - stack []
2024-09-04 18:31:38,822 - dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=6)
2024-09-04 18:31:38,822 - stack ['$48load_global.21']
2024-09-04 18:31:38,822 - dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:38,822 - stack ['$48load_global.21', '$50load_global.22']
2024-09-04 18:31:38,822 - dispatch pc=54, inst=LOAD_CONST(arg=4, lineno=6)
2024-09-04 18:31:38,822 - stack ['$48load_global.21', '$50load_global.22', '$const52.23']
2024-09-04 18:31:38,823 - dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:38,823 - stack ['$48load_global.21', '$50load_global.22', '$const52.23', '$const54.24']
2024-09-04 18:31:38,823 - dispatch pc=58, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2024-09-04 18:31:38,823 - stack ['$48load_global.21', '$56call_function.25']
2024-09-04 18:31:38,823 - dispatch pc=60, inst=LOAD_FAST(arg=1, lineno=6)
2024-09-04 18:31:38,823 - stack ['$48load_global.21', '$58unary_negative.26']
2024-09-04 18:31:38,823 - dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:38,823 - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27']
2024-09-04 18:31:38,823 - dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=6)
2024-09-04 18:31:38,823 - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27', '$const62.28']
2024-09-04 18:31:38,823 - dispatch pc=66, inst=LOAD_GLOBAL(arg=6, lineno=6)
2024-09-04 18:31:38,823 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29']
2024-09-04 18:31:38,823 - dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:38,824 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30']
2024-09-04 18:31:38,824 - dispatch pc=70, inst=LOAD_CONST(arg=3, lineno=6)
2024-09-04 18:31:38,824 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31']
2024-09-04 18:31:38,824 - dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:38,824 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31', '$const70.32']
2024-09-04 18:31:38,824 - dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=6)
2024-09-04 18:31:38,824 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$72call_function.33']
2024-09-04 18:31:38,824 - dispatch pc=76, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:38,824 - stack ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34']
2024-09-04 18:31:38,824 - dispatch pc=78, inst=GET_ITER(arg=None, lineno=6)
2024-09-04 18:31:38,824 - stack ['$76call_function.35']
2024-09-04 18:31:38,824 - end state. edges=[Edge(pc=80, stack=('$78get_iter.36',), blockstack=(), npush=0)]
2024-09-04 18:31:38,825 - pending: deque([State(pc_initial=80 nstack_initial=1)])
2024-09-04 18:31:38,825 - stack: ['$phi80.0']
2024-09-04 18:31:38,825 - state.pc_initial: State(pc_initial=80 nstack_initial=1)
2024-09-04 18:31:38,825 - dispatch pc=80, inst=FOR_ITER(arg=4, lineno=6)
2024-09-04 18:31:38,825 - stack ['$phi80.0']
2024-09-04 18:31:38,825 - end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
2024-09-04 18:31:38,825 - pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=82 nstack_initial=2)])
2024-09-04 18:31:38,825 - stack: []
2024-09-04 18:31:38,825 - state.pc_initial: State(pc_initial=90 nstack_initial=0)
2024-09-04 18:31:38,825 - dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=8)
2024-09-04 18:31:38,825 - stack []
2024-09-04 18:31:38,825 - dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=8)
2024-09-04 18:31:38,825 - stack ['$out090.0']
2024-09-04 18:31:38,826 - end state. edges=[]
2024-09-04 18:31:38,826 - pending: deque([State(pc_initial=82 nstack_initial=2)])
2024-09-04 18:31:38,826 - stack: ['$phi82.0', '$phi82.1']
2024-09-04 18:31:38,826 - state.pc_initial: State(pc_initial=82 nstack_initial=2)
2024-09-04 18:31:38,826 - dispatch pc=82, inst=STORE_FAST(arg=3, lineno=6)
2024-09-04 18:31:38,826 - stack ['$phi82.0', '$phi82.1']
2024-09-04 18:31:38,826 - dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=7)
2024-09-04 18:31:38,826 - stack ['$phi82.0']
2024-09-04 18:31:38,826 - dispatch pc=86, inst=STORE_FAST(arg=4, lineno=7)
2024-09-04 18:31:38,826 - stack ['$phi82.0', '$const84.2']
2024-09-04 18:31:38,826 - dispatch pc=88, inst=JUMP_ABSOLUTE(arg=41, lineno=7)
2024-09-04 18:31:38,826 - stack ['$phi82.0']
2024-09-04 18:31:38,826 - end state. edges=[Edge(pc=80, stack=('$phi82.0',), blockstack=(), npush=0)]
2024-09-04 18:31:38,826 - pending: deque([State(pc_initial=80 nstack_initial=1)])
2024-09-04 18:31:38,827 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:38,827 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=82 nstack_initial=2): {'$phi82.1'},
             State(pc_initial=90 nstack_initial=0): set()})
2024-09-04 18:31:38,827 - defmap: {'$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi82.1': State(pc_initial=80 nstack_initial=1)}
2024-09-04 18:31:38,827 - phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=2))},
             '$phi82.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:38,827 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:38,828 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:38,828 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:38,828 - keep phismap: {'$phi80.0': {('$78get_iter.36', State(pc_initial=0 nstack_initial=0))},
 '$phi82.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
2024-09-04 18:31:38,828 - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.36'},
             State(pc_initial=80 nstack_initial=1): {'$phi82.1': '$80for_iter.2'}})
2024-09-04 18:31:38,828 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:38,828 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_global.2'}), (10, {'item': '$8load_global.2', 'res': '$10load_attr.3'}), (12, {'res': '$full_shape012.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$10load_attr.3', 'args': ['$full_shape012.4', '$16load_attr.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$out026.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$const30.12'}), (32, {'start': '$const28.11', 'stop': '$const30.12', 'step': None, 'res': '$32build_slice.14', 'slicevar': '$32build_slice.13'}), (34, {'target': '$out026.10', 'index': '$32build_slice.14', 'value': '$const24.9'}), (36, {'res': '$const36.15'}), (38, {'res': '$out038.16'}), (40, {'res': '$const40.17'}), (42, {'res': '$const42.18'}), (44, {'start': '$const40.17', 'stop': '$const42.18', 'step': None, 'res': '$44build_slice.20', 'slicevar': '$44build_slice.19'}), (46, {'target': '$out038.16', 'index': '$44build_slice.20', 'value': '$const36.15'}), (48, {'res': '$48load_global.21'}), (50, {'res': '$50load_global.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$50load_global.22', 'args': ['$const52.23', '$const54.24'], 'res': '$56call_function.25'}), (58, {'value': '$56call_function.25', 'res': '$58unary_negative.26'}), (60, {'res': '$full_shape060.27'}), (62, {'res': '$const62.28'}), (64, {'index': '$const62.28', 'target': '$full_shape060.27', 'res': '$64binary_subscr.29'}), (66, {'res': '$66load_global.30'}), (68, {'res': '$const68.31'}), (70, {'res': '$const70.32'}), (72, {'func': '$66load_global.30', 'args': ['$const68.31', '$const70.32'], 'res': '$72call_function.33'}), (74, {'lhs': '$64binary_subscr.29', 'rhs': '$72call_function.33', 'res': '$74binary_subtract.34'}), (76, {'func': '$48load_global.21', 'args': ['$58unary_negative.26', '$74binary_subtract.34'], 'res': '$76call_function.35'}), (78, {'value': '$76call_function.35', 'res': '$78get_iter.36'})), outgoing_phis={'$phi80.0': '$78get_iter.36'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.36',)})
2024-09-04 18:31:38,829 - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi82.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 82: ('$phi80.0', '$80for_iter.2')})
2024-09-04 18:31:38,829 - block_infos State(pc_initial=82 nstack_initial=2):
AdaptBlockInfo(insts=((82, {'value': '$phi82.1'}), (84, {'res': '$const84.2'}), (86, {'value': '$const84.2'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi82.0',)})
2024-09-04 18:31:38,829 - block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$out090.0'}), (92, {'retval': '$out090.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:38,831 - label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $8load_global.2 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$8load_global.2']
    $10load_attr.3 = getattr(value=$8load_global.2, attr=empty) ['$10load_attr.3', '$8load_global.2']
    $14load_global.5 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=bool_) ['$14load_global.5', '$16load_attr.6']
    out0 = call $10load_attr.3(full_shape0, func=$10load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6, <string>:3))], vararg=None, varkwarg=None, target=None) ['$10load_attr.3', '$16load_attr.6', 'full_shape0', 'out0']
    $const24.9 = const(int, 0)               ['$const24.9']
    $const28.11 = const(NoneType, None)      ['$const28.11']
    $const30.12 = const(int, 1)              ['$const30.12']
    $32build_slice.13 = global(slice: <class 'slice'>) ['$32build_slice.13']
    $32build_slice.14 = call $32build_slice.13($const28.11, $const30.12, func=$32build_slice.13, args=(Var($const28.11, <string>:4), Var($const30.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$32build_slice.13', '$32build_slice.14', '$const28.11', '$const30.12']
    out0[$32build_slice.14] = $const24.9     ['$32build_slice.14', '$const24.9', 'out0']
    $const36.15 = const(int, 0)              ['$const36.15']
    $const40.17 = const(int, -1)             ['$const40.17']
    $const42.18 = const(NoneType, None)      ['$const42.18']
    $44build_slice.19 = global(slice: <class 'slice'>) ['$44build_slice.19']
    $44build_slice.20 = call $44build_slice.19($const40.17, $const42.18, func=$44build_slice.19, args=(Var($const40.17, <string>:5), Var($const42.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$44build_slice.19', '$44build_slice.20', '$const40.17', '$const42.18']
    out0[$44build_slice.20] = $const36.15    ['$44build_slice.20', '$const36.15', 'out0']
    $48load_global.21 = global(range: <class 'range'>) ['$48load_global.21']
    $50load_global.22 = global(min: <built-in function min>) ['$50load_global.22']
    $const52.23 = const(int, 0)              ['$const52.23']
    $const54.24 = const(int, -1)             ['$const54.24']
    $56call_function.25 = call $50load_global.22($const52.23, $const54.24, func=$50load_global.22, args=[Var($const52.23, <string>:6), Var($const54.24, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.22', '$56call_function.25', '$const52.23', '$const54.24']
    $58unary_negative.26 = unary(fn=<built-in function neg>, value=$56call_function.25) ['$56call_function.25', '$58unary_negative.26']
    $const62.28 = const(int, 0)              ['$const62.28']
    $64binary_subscr.29 = getitem(value=full_shape0, index=$const62.28, fn=<built-in function getitem>) ['$64binary_subscr.29', '$const62.28', 'full_shape0']
    $66load_global.30 = global(max: <built-in function max>) ['$66load_global.30']
    $const68.31 = const(int, 0)              ['$const68.31']
    $const70.32 = const(int, 1)              ['$const70.32']
    $72call_function.33 = call $66load_global.30($const68.31, $const70.32, func=$66load_global.30, args=[Var($const68.31, <string>:6), Var($const70.32, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.30', '$72call_function.33', '$const68.31', '$const70.32']
    $74binary_subtract.34 = $64binary_subscr.29 - $72call_function.33 ['$64binary_subscr.29', '$72call_function.33', '$74binary_subtract.34']
    $76call_function.35 = call $48load_global.21($58unary_negative.26, $74binary_subtract.34, func=$48load_global.21, args=[Var($58unary_negative.26, <string>:6), Var($74binary_subtract.34, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34', '$76call_function.35']
    $78get_iter.36 = getiter(value=$76call_function.35) ['$76call_function.35', '$78get_iter.36']
    $phi80.0 = $78get_iter.36                ['$78get_iter.36', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi82.1 = $80for_iter.2                 ['$80for_iter.2', '$phi82.1']
    branch $80for_iter.3, 82, 90             ['$80for_iter.3']
label 82:
    index00 = $phi82.1                       ['$phi82.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 80                                  []
label 90:
    $92return_value.1 = cast(value=out0)     ['$92return_value.1', 'out0']
    return $92return_value.1                 ['$92return_value.1']

2024-09-04 18:31:38,852 - ==== SSA block analysis pass on 0
2024-09-04 18:31:38,852 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024312A5C130>
2024-09-04 18:31:38,852 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:38,852 - on stmt: full_shape0 = getattr(value=x, attr=shape)
2024-09-04 18:31:38,852 - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:38,852 - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2024-09-04 18:31:38,852 - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:38,852 - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2024-09-04 18:31:38,852 - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:38,852 - on stmt: $const24.9.1 = const(int, 0)
2024-09-04 18:31:38,852 - on stmt: $const28.11.1 = const(NoneType, None)
2024-09-04 18:31:38,853 - on stmt: $const30.12.1 = const(int, 1)
2024-09-04 18:31:38,853 - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:38,853 - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:38,853 - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2024-09-04 18:31:38,853 - on stmt: $const36.15.1 = const(int, 0)
2024-09-04 18:31:38,853 - on stmt: $const40.17.1 = const(int, -1)
2024-09-04 18:31:38,853 - on stmt: $const42.18.1 = const(NoneType, None)
2024-09-04 18:31:38,853 - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:38,853 - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:38,853 - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2024-09-04 18:31:38,853 - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2024-09-04 18:31:38,853 - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2024-09-04 18:31:38,853 - on stmt: $const52.23.1 = const(int, 0)
2024-09-04 18:31:38,854 - on stmt: $const54.24.1 = const(int, -1)
2024-09-04 18:31:38,854 - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:38,854 - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2024-09-04 18:31:38,854 - on stmt: $const62.28.1 = const(int, 0)
2024-09-04 18:31:38,854 - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2024-09-04 18:31:38,854 - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2024-09-04 18:31:38,854 - on stmt: $const68.31.1 = const(int, 0)
2024-09-04 18:31:38,854 - on stmt: $const70.32.1 = const(int, 1)
2024-09-04 18:31:38,854 - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:38,854 - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2024-09-04 18:31:38,854 - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:38,855 - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2024-09-04 18:31:38,855 - on stmt: $phi80.0.1 = $78get_iter.36.1
2024-09-04 18:31:38,855 - on stmt: jump 80
2024-09-04 18:31:38,855 - ==== SSA block analysis pass on 80
2024-09-04 18:31:38,855 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024312A5C130>
2024-09-04 18:31:38,855 - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2024-09-04 18:31:38,855 - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2024-09-04 18:31:38,855 - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2024-09-04 18:31:38,855 - on stmt: $phi82.1.1 = $80for_iter.2.1
2024-09-04 18:31:38,855 - on stmt: branch $80for_iter.3.1, 82, 92
2024-09-04 18:31:38,855 - ==== SSA block analysis pass on 82
2024-09-04 18:31:38,855 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024312A5C130>
2024-09-04 18:31:38,855 - on stmt: index00 = $phi82.1.1
2024-09-04 18:31:38,855 - on stmt: jump 90
2024-09-04 18:31:38,856 - ==== SSA block analysis pass on 92
2024-09-04 18:31:38,856 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024312A5C130>
2024-09-04 18:31:38,856 - on stmt: $92return_value.1.1 = cast(value=out0)
2024-09-04 18:31:38,856 - on stmt: return $92return_value.1.1
2024-09-04 18:31:38,856 - ==== SSA block analysis pass on 90
2024-09-04 18:31:38,856 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024312A5C130>
2024-09-04 18:31:38,856 - on stmt: $const4.1 = const(int, 0)
2024-09-04 18:31:38,856 - on stmt: stencil_index = $const4.1 + index00
2024-09-04 18:31:38,856 - on stmt: $6binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:38,856 - on stmt: $const10.4 = const(int, -1)
2024-09-04 18:31:38,856 - on stmt: stencil_index.1 = $const10.4 + index00
2024-09-04 18:31:38,856 - on stmt: $12binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2024-09-04 18:31:38,856 - on stmt: $14compare_op.6 = $6binary_subscr.2 > $12binary_subscr.5
2024-09-04 18:31:38,857 - on stmt: $const18.8 = const(int, 0)
2024-09-04 18:31:38,857 - on stmt: stencil_index.2 = $const18.8 + index00
2024-09-04 18:31:38,857 - on stmt: $20binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
2024-09-04 18:31:38,857 - on stmt: $const24.11 = const(int, 1)
2024-09-04 18:31:38,857 - on stmt: stencil_index.3 = $const24.11 + index00
2024-09-04 18:31:38,857 - on stmt: $26binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
2024-09-04 18:31:38,857 - on stmt: $28compare_op.13 = $20binary_subscr.9 >= $26binary_subscr.12
2024-09-04 18:31:38,857 - on stmt: $30binary_and.14 = $14compare_op.6 & $28compare_op.13
2024-09-04 18:31:38,857 - on stmt: $32return_value.15 = cast(value=$30binary_and.14)
2024-09-04 18:31:38,857 - on stmt: out0[index00] = $32return_value.15
2024-09-04 18:31:38,857 - on stmt: jump 91
2024-09-04 18:31:38,857 - ==== SSA block analysis pass on 91
2024-09-04 18:31:38,857 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024312A5C130>
2024-09-04 18:31:38,858 - on stmt: jump 80
2024-09-04 18:31:38,860 - defs defaultdict(<class 'list'>,
            {'$10load_attr.3.1': [(<numba.core.ir.Assign object at 0x0000024313305BA0>,
                                   0)],
             '$12binary_subscr.5': [(<numba.core.ir.Assign object at 0x0000024313319750>,
                                     90)],
             '$14compare_op.6': [(<numba.core.ir.Assign object at 0x00000243133A3010>,
                                  90)],
             '$14load_global.5.1': [(<numba.core.ir.Assign object at 0x0000024313305F90>,
                                     0)],
             '$16load_attr.6.1': [(<numba.core.ir.Assign object at 0x0000024313307550>,
                                   0)],
             '$20binary_subscr.9': [(<numba.core.ir.Assign object at 0x0000024313318E80>,
                                     90)],
             '$26binary_subscr.12': [(<numba.core.ir.Assign object at 0x0000024313306EC0>,
                                      90)],
             '$28compare_op.13': [(<numba.core.ir.Assign object at 0x0000024313408A00>,
                                   90)],
             '$30binary_and.14': [(<numba.core.ir.Assign object at 0x0000024313409000>,
                                   90)],
             '$32build_slice.13.1': [(<numba.core.ir.Assign object at 0x0000024313306710>,
                                      0)],
             '$32build_slice.14.1': [(<numba.core.ir.Assign object at 0x00000243133065F0>,
                                      0)],
             '$32return_value.15': [(<numba.core.ir.Assign object at 0x0000024313460160>,
                                     90)],
             '$44build_slice.19.1': [(<numba.core.ir.Assign object at 0x0000024313304760>,
                                      0)],
             '$44build_slice.20.1': [(<numba.core.ir.Assign object at 0x0000024313304C10>,
                                      0)],
             '$48load_global.21.1': [(<numba.core.ir.Assign object at 0x00000243133046D0>,
                                      0)],
             '$50load_global.22.1': [(<numba.core.ir.Assign object at 0x0000024313304E50>,
                                      0)],
             '$56call_function.25.1': [(<numba.core.ir.Assign object at 0x0000024313306650>,
                                        0)],
             '$58unary_negative.26.1': [(<numba.core.ir.Assign object at 0x0000024313307D30>,
                                         0)],
             '$64binary_subscr.29.1': [(<numba.core.ir.Assign object at 0x0000024313305A20>,
                                        0)],
             '$66load_global.30.1': [(<numba.core.ir.Assign object at 0x0000024313307BB0>,
                                      0)],
             '$6binary_subscr.2': [(<numba.core.ir.Assign object at 0x00000243133180D0>,
                                    90)],
             '$72call_function.33.1': [(<numba.core.ir.Assign object at 0x00000243177AF850>,
                                        0)],
             '$74binary_subtract.34.1': [(<numba.core.ir.Assign object at 0x00000243177AEC20>,
                                          0)],
             '$76call_function.35.1': [(<numba.core.ir.Assign object at 0x00000243177AEB00>,
                                        0)],
             '$78get_iter.36.1': [(<numba.core.ir.Assign object at 0x00000243177AC760>,
                                   0)],
             '$80for_iter.1.1': [(<numba.core.ir.Assign object at 0x00000243177AE950>,
                                  80)],
             '$80for_iter.2.1': [(<numba.core.ir.Assign object at 0x00000243177AE8C0>,
                                  80)],
             '$80for_iter.3.1': [(<numba.core.ir.Assign object at 0x00000243177AE290>,
                                  80)],
             '$8load_global.2.1': [(<numba.core.ir.Assign object at 0x0000024313307400>,
                                    0)],
             '$92return_value.1.1': [(<numba.core.ir.Assign object at 0x00000243177ADCC0>,
                                      92)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x00000243132382B0>,
                             90)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x00000243133A2F20>,
                             90)],
             '$const24.11': [(<numba.core.ir.Assign object at 0x00000243133A2DA0>,
                              90)],
             '$const24.9.1': [(<numba.core.ir.Assign object at 0x0000024313305B40>,
                               0)],
             '$const28.11.1': [(<numba.core.ir.Assign object at 0x0000024313307160>,
                                0)],
             '$const30.12.1': [(<numba.core.ir.Assign object at 0x0000024313306A10>,
                                0)],
             '$const36.15.1': [(<numba.core.ir.Assign object at 0x00000243133048B0>,
                                0)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x000002431B52D1B0>,
                            90)],
             '$const40.17.1': [(<numba.core.ir.Assign object at 0x0000024313305270>,
                                0)],
             '$const42.18.1': [(<numba.core.ir.Assign object at 0x0000024313305150>,
                                0)],
             '$const52.23.1': [(<numba.core.ir.Assign object at 0x0000024313304640>,
                                0)],
             '$const54.24.1': [(<numba.core.ir.Assign object at 0x0000024313306CB0>,
                                0)],
             '$const62.28.1': [(<numba.core.ir.Assign object at 0x0000024313305DB0>,
                                0)],
             '$const68.31.1': [(<numba.core.ir.Assign object at 0x0000024313306B90>,
                                0)],
             '$const70.32.1': [(<numba.core.ir.Assign object at 0x0000024313267040>,
                                0)],
             '$phi80.0.1': [(<numba.core.ir.Assign object at 0x0000024313306F50>,
                             0)],
             '$phi82.1.1': [(<numba.core.ir.Assign object at 0x0000024313305B70>,
                             80)],
             'full_shape0': [(<numba.core.ir.Assign object at 0x0000024313306EF0>,
                              0)],
             'index00': [(<numba.core.ir.Assign object at 0x00000243177AC6A0>,
                          82)],
             'out0': [(<numba.core.ir.Assign object at 0x00000243133040D0>, 0)],
             'stencil_index': [(<numba.core.ir.Assign object at 0x0000024313319E10>,
                                90)],
             'stencil_index.1': [(<numba.core.ir.Assign object at 0x0000024313319CF0>,
                                  90)],
             'stencil_index.2': [(<numba.core.ir.Assign object at 0x0000024313318F70>,
                                  90)],
             'stencil_index.3': [(<numba.core.ir.Assign object at 0x0000024313304460>,
                                  90)],
             'x': [(<numba.core.ir.Assign object at 0x0000024313307130>, 0)]})
2024-09-04 18:31:38,861 - SSA violators <numba.core.utils.OrderedSet object at 0x0000024312A5C130>
2024-09-04 18:31:39,441 - bytecode dump:
>          0	NOP(arg=None, lineno=1051)
           2	LOAD_GLOBAL(arg=0, lineno=1065)
           4	LOAD_FAST(arg=0, lineno=1065)
           6	CALL_FUNCTION(arg=1, lineno=1065)
           8	LOAD_FAST(arg=1, lineno=1065)
          10	LOAD_CONST(arg=1, lineno=1065)
          12	LOAD_CONST(arg=1, lineno=1065)
          14	BUILD_SLICE(arg=2, lineno=1065)
          16	STORE_SUBSCR(arg=None, lineno=1065)
          18	LOAD_CONST(arg=1, lineno=1065)
          20	RETURN_VALUE(arg=None, lineno=1065)
2024-09-04 18:31:39,442 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:39,442 - stack: []
2024-09-04 18:31:39,442 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:39,442 - dispatch pc=0, inst=NOP(arg=None, lineno=1051)
2024-09-04 18:31:39,442 - stack []
2024-09-04 18:31:39,443 - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1065)
2024-09-04 18:31:39,443 - stack []
2024-09-04 18:31:39,443 - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1065)
2024-09-04 18:31:39,443 - stack ['$2load_global.0']
2024-09-04 18:31:39,443 - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=1065)
2024-09-04 18:31:39,444 - stack ['$2load_global.0', '$x4.1']
2024-09-04 18:31:39,444 - dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=1065)
2024-09-04 18:31:39,444 - stack ['$6call_function.2']
2024-09-04 18:31:39,444 - dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=1065)
2024-09-04 18:31:39,444 - stack ['$6call_function.2', '$y8.3']
2024-09-04 18:31:39,444 - dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=1065)
2024-09-04 18:31:39,445 - stack ['$6call_function.2', '$y8.3', '$const10.4']
2024-09-04 18:31:39,445 - dispatch pc=14, inst=BUILD_SLICE(arg=2, lineno=1065)
2024-09-04 18:31:39,445 - stack ['$6call_function.2', '$y8.3', '$const10.4', '$const12.5']
2024-09-04 18:31:39,445 - dispatch pc=16, inst=STORE_SUBSCR(arg=None, lineno=1065)
2024-09-04 18:31:39,445 - stack ['$6call_function.2', '$y8.3', '$14build_slice.7']
2024-09-04 18:31:39,446 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1065)
2024-09-04 18:31:39,446 - stack []
2024-09-04 18:31:39,446 - dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=1065)
2024-09-04 18:31:39,446 - stack ['$const18.8']
2024-09-04 18:31:39,446 - end state. edges=[]
2024-09-04 18:31:39,446 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:39,446 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 18:31:39,446 - defmap: {}
2024-09-04 18:31:39,446 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:39,446 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:39,446 - keep phismap: {}
2024-09-04 18:31:39,446 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:39,447 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:39,447 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'res': '$y8.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$const12.5'}), (14, {'start': '$const10.4', 'stop': '$const12.5', 'step': None, 'res': '$14build_slice.7', 'slicevar': '$14build_slice.6'}), (16, {'target': '$y8.3', 'index': '$14build_slice.7', 'value': '$6call_function.2'}), (18, {'res': '$const18.8'}), (20, {'retval': '$const18.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:39,448 - label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $2load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x000002431B51D660>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1051)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'x']
    $const10.4 = const(NoneType, None)       ['$const10.4']
    $const12.5 = const(NoneType, None)       ['$const12.5']
    $14build_slice.6 = global(slice: <class 'slice'>) ['$14build_slice.6']
    $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1065), Var($const12.5, utils.py:1065)), kws=(), vararg=None, varkwarg=None, target=None) ['$14build_slice.6', '$14build_slice.7', '$const10.4', '$const12.5']
    y[$14build_slice.7] = $6call_function.2  ['$14build_slice.7', '$6call_function.2', 'y']
    $const18.8 = const(NoneType, None)       ['$const18.8']
    $20return_value.9 = cast(value=$const18.8) ['$20return_value.9', '$const18.8']
    return $20return_value.9                 ['$20return_value.9']

2024-09-04 18:31:39,456 - ==== SSA block analysis pass on 0
2024-09-04 18:31:39,456 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243182E6C50>
2024-09-04 18:31:39,456 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:39,457 - on stmt: y = arg(1, name=y)
2024-09-04 18:31:39,457 - on stmt: $2load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x000002431B51D660>)
2024-09-04 18:31:39,457 - on stmt: $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1051)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:39,457 - on stmt: $const10.4 = const(NoneType, None)
2024-09-04 18:31:39,457 - on stmt: $const12.5 = const(NoneType, None)
2024-09-04 18:31:39,457 - on stmt: $14build_slice.6 = global(slice: <class 'slice'>)
2024-09-04 18:31:39,457 - on stmt: $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1065), Var($const12.5, utils.py:1065)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:39,457 - on stmt: y[slice(None, None, None)] = $6call_function.2
2024-09-04 18:31:39,457 - on stmt: $const18.8 = const(NoneType, None)
2024-09-04 18:31:39,457 - on stmt: $20return_value.9 = cast(value=$const18.8)
2024-09-04 18:31:39,457 - on stmt: return $20return_value.9
2024-09-04 18:31:39,458 - defs defaultdict(<class 'list'>,
            {'$14build_slice.6': [(<numba.core.ir.Assign object at 0x000002431323BD60>,
                                   0)],
             '$14build_slice.7': [(<numba.core.ir.Assign object at 0x000002431B52C070>,
                                   0)],
             '$20return_value.9': [(<numba.core.ir.Assign object at 0x00000243183381F0>,
                                    0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x0000024318338880>,
                                  0)],
             '$6call_function.2': [(<numba.core.ir.Assign object at 0x00000243183389A0>,
                                    0)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x0000024318338FA0>,
                             0)],
             '$const12.5': [(<numba.core.ir.Assign object at 0x0000024318339D80>,
                             0)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x000002431833A200>,
                             0)],
             'x': [(<numba.core.ir.Assign object at 0x0000024318339780>, 0)],
             'y': [(<numba.core.ir.Assign object at 0x00000243183386A0>, 0)]})
2024-09-04 18:31:39,458 - SSA violators <numba.core.utils.OrderedSet object at 0x00000243182E6C50>
2024-09-04 18:31:39,491 - bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=2)
           4	LOAD_ATTR(arg=0, lineno=2)
           6	STORE_FAST(arg=1, lineno=2)
           8	LOAD_GLOBAL(arg=1, lineno=3)
          10	LOAD_ATTR(arg=2, lineno=3)
          12	LOAD_FAST(arg=1, lineno=3)
          14	LOAD_GLOBAL(arg=1, lineno=3)
          16	LOAD_ATTR(arg=3, lineno=3)
          18	LOAD_CONST(arg=1, lineno=3)
          20	CALL_FUNCTION_KW(arg=2, lineno=3)
          22	STORE_FAST(arg=2, lineno=3)
          24	LOAD_CONST(arg=2, lineno=4)
          26	LOAD_FAST(arg=2, lineno=4)
          28	LOAD_CONST(arg=0, lineno=4)
          30	LOAD_CONST(arg=3, lineno=4)
          32	BUILD_SLICE(arg=2, lineno=4)
          34	STORE_SUBSCR(arg=None, lineno=4)
          36	LOAD_CONST(arg=2, lineno=5)
          38	LOAD_FAST(arg=2, lineno=5)
          40	LOAD_CONST(arg=4, lineno=5)
          42	LOAD_CONST(arg=0, lineno=5)
          44	BUILD_SLICE(arg=2, lineno=5)
          46	STORE_SUBSCR(arg=None, lineno=5)
          48	LOAD_GLOBAL(arg=4, lineno=6)
          50	LOAD_GLOBAL(arg=5, lineno=6)
          52	LOAD_CONST(arg=2, lineno=6)
          54	LOAD_CONST(arg=4, lineno=6)
          56	CALL_FUNCTION(arg=2, lineno=6)
          58	UNARY_NEGATIVE(arg=None, lineno=6)
          60	LOAD_FAST(arg=1, lineno=6)
          62	LOAD_CONST(arg=2, lineno=6)
          64	BINARY_SUBSCR(arg=None, lineno=6)
          66	LOAD_GLOBAL(arg=6, lineno=6)
          68	LOAD_CONST(arg=2, lineno=6)
          70	LOAD_CONST(arg=3, lineno=6)
          72	CALL_FUNCTION(arg=2, lineno=6)
          74	BINARY_SUBTRACT(arg=None, lineno=6)
          76	CALL_FUNCTION(arg=2, lineno=6)
          78	GET_ITER(arg=None, lineno=6)
>         80	FOR_ITER(arg=4, lineno=6)
          82	STORE_FAST(arg=3, lineno=6)
          84	LOAD_CONST(arg=2, lineno=7)
          86	STORE_FAST(arg=4, lineno=7)
          88	JUMP_ABSOLUTE(arg=41, lineno=7)
>         90	LOAD_FAST(arg=2, lineno=8)
          92	RETURN_VALUE(arg=None, lineno=8)
2024-09-04 18:31:39,491 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:39,491 - stack: []
2024-09-04 18:31:39,491 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:39,491 - dispatch pc=0, inst=NOP(arg=None, lineno=1)
2024-09-04 18:31:39,491 - stack []
2024-09-04 18:31:39,491 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2)
2024-09-04 18:31:39,491 - stack []
2024-09-04 18:31:39,491 - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2)
2024-09-04 18:31:39,491 - stack ['$x2.0']
2024-09-04 18:31:39,491 - dispatch pc=6, inst=STORE_FAST(arg=1, lineno=2)
2024-09-04 18:31:39,491 - stack ['$4load_attr.1']
2024-09-04 18:31:39,492 - dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=3)
2024-09-04 18:31:39,492 - stack []
2024-09-04 18:31:39,492 - dispatch pc=10, inst=LOAD_ATTR(arg=2, lineno=3)
2024-09-04 18:31:39,492 - stack ['$8load_global.2']
2024-09-04 18:31:39,492 - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=3)
2024-09-04 18:31:39,492 - stack ['$10load_attr.3']
2024-09-04 18:31:39,492 - dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=3)
2024-09-04 18:31:39,492 - stack ['$10load_attr.3', '$full_shape012.4']
2024-09-04 18:31:39,492 - dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=3)
2024-09-04 18:31:39,492 - stack ['$10load_attr.3', '$full_shape012.4', '$14load_global.5']
2024-09-04 18:31:39,492 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=3)
2024-09-04 18:31:39,492 - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6']
2024-09-04 18:31:39,492 - dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=3)
2024-09-04 18:31:39,493 - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6', '$const18.7']
2024-09-04 18:31:39,493 - dispatch pc=22, inst=STORE_FAST(arg=2, lineno=3)
2024-09-04 18:31:39,493 - stack ['$20call_function_kw.8']
2024-09-04 18:31:39,493 - dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=4)
2024-09-04 18:31:39,493 - stack []
2024-09-04 18:31:39,493 - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=4)
2024-09-04 18:31:39,493 - stack ['$const24.9']
2024-09-04 18:31:39,493 - dispatch pc=28, inst=LOAD_CONST(arg=0, lineno=4)
2024-09-04 18:31:39,493 - stack ['$const24.9', '$out026.10']
2024-09-04 18:31:39,493 - dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=4)
2024-09-04 18:31:39,493 - stack ['$const24.9', '$out026.10', '$const28.11']
2024-09-04 18:31:39,493 - dispatch pc=32, inst=BUILD_SLICE(arg=2, lineno=4)
2024-09-04 18:31:39,493 - stack ['$const24.9', '$out026.10', '$const28.11', '$const30.12']
2024-09-04 18:31:39,494 - dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=4)
2024-09-04 18:31:39,494 - stack ['$const24.9', '$out026.10', '$32build_slice.14']
2024-09-04 18:31:39,494 - dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=5)
2024-09-04 18:31:39,494 - stack []
2024-09-04 18:31:39,494 - dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=5)
2024-09-04 18:31:39,494 - stack ['$const36.15']
2024-09-04 18:31:39,494 - dispatch pc=40, inst=LOAD_CONST(arg=4, lineno=5)
2024-09-04 18:31:39,494 - stack ['$const36.15', '$out038.16']
2024-09-04 18:31:39,494 - dispatch pc=42, inst=LOAD_CONST(arg=0, lineno=5)
2024-09-04 18:31:39,494 - stack ['$const36.15', '$out038.16', '$const40.17']
2024-09-04 18:31:39,494 - dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=5)
2024-09-04 18:31:39,494 - stack ['$const36.15', '$out038.16', '$const40.17', '$const42.18']
2024-09-04 18:31:39,495 - dispatch pc=46, inst=STORE_SUBSCR(arg=None, lineno=5)
2024-09-04 18:31:39,495 - stack ['$const36.15', '$out038.16', '$44build_slice.20']
2024-09-04 18:31:39,495 - dispatch pc=48, inst=LOAD_GLOBAL(arg=4, lineno=6)
2024-09-04 18:31:39,495 - stack []
2024-09-04 18:31:39,495 - dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=6)
2024-09-04 18:31:39,495 - stack ['$48load_global.21']
2024-09-04 18:31:39,495 - dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:39,495 - stack ['$48load_global.21', '$50load_global.22']
2024-09-04 18:31:39,495 - dispatch pc=54, inst=LOAD_CONST(arg=4, lineno=6)
2024-09-04 18:31:39,495 - stack ['$48load_global.21', '$50load_global.22', '$const52.23']
2024-09-04 18:31:39,495 - dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:39,495 - stack ['$48load_global.21', '$50load_global.22', '$const52.23', '$const54.24']
2024-09-04 18:31:39,495 - dispatch pc=58, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2024-09-04 18:31:39,496 - stack ['$48load_global.21', '$56call_function.25']
2024-09-04 18:31:39,496 - dispatch pc=60, inst=LOAD_FAST(arg=1, lineno=6)
2024-09-04 18:31:39,496 - stack ['$48load_global.21', '$58unary_negative.26']
2024-09-04 18:31:39,496 - dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:39,496 - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27']
2024-09-04 18:31:39,496 - dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=6)
2024-09-04 18:31:39,496 - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27', '$const62.28']
2024-09-04 18:31:39,496 - dispatch pc=66, inst=LOAD_GLOBAL(arg=6, lineno=6)
2024-09-04 18:31:39,496 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29']
2024-09-04 18:31:39,496 - dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:39,496 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30']
2024-09-04 18:31:39,496 - dispatch pc=70, inst=LOAD_CONST(arg=3, lineno=6)
2024-09-04 18:31:39,496 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31']
2024-09-04 18:31:39,497 - dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:39,497 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31', '$const70.32']
2024-09-04 18:31:39,497 - dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=6)
2024-09-04 18:31:39,497 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$72call_function.33']
2024-09-04 18:31:39,497 - dispatch pc=76, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:39,497 - stack ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34']
2024-09-04 18:31:39,497 - dispatch pc=78, inst=GET_ITER(arg=None, lineno=6)
2024-09-04 18:31:39,497 - stack ['$76call_function.35']
2024-09-04 18:31:39,497 - end state. edges=[Edge(pc=80, stack=('$78get_iter.36',), blockstack=(), npush=0)]
2024-09-04 18:31:39,497 - pending: deque([State(pc_initial=80 nstack_initial=1)])
2024-09-04 18:31:39,497 - stack: ['$phi80.0']
2024-09-04 18:31:39,498 - state.pc_initial: State(pc_initial=80 nstack_initial=1)
2024-09-04 18:31:39,498 - dispatch pc=80, inst=FOR_ITER(arg=4, lineno=6)
2024-09-04 18:31:39,498 - stack ['$phi80.0']
2024-09-04 18:31:39,498 - end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
2024-09-04 18:31:39,498 - pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=82 nstack_initial=2)])
2024-09-04 18:31:39,498 - stack: []
2024-09-04 18:31:39,498 - state.pc_initial: State(pc_initial=90 nstack_initial=0)
2024-09-04 18:31:39,499 - dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=8)
2024-09-04 18:31:39,499 - stack []
2024-09-04 18:31:39,499 - dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=8)
2024-09-04 18:31:39,499 - stack ['$out090.0']
2024-09-04 18:31:39,499 - end state. edges=[]
2024-09-04 18:31:39,499 - pending: deque([State(pc_initial=82 nstack_initial=2)])
2024-09-04 18:31:39,499 - stack: ['$phi82.0', '$phi82.1']
2024-09-04 18:31:39,499 - state.pc_initial: State(pc_initial=82 nstack_initial=2)
2024-09-04 18:31:39,499 - dispatch pc=82, inst=STORE_FAST(arg=3, lineno=6)
2024-09-04 18:31:39,499 - stack ['$phi82.0', '$phi82.1']
2024-09-04 18:31:39,499 - dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=7)
2024-09-04 18:31:39,499 - stack ['$phi82.0']
2024-09-04 18:31:39,499 - dispatch pc=86, inst=STORE_FAST(arg=4, lineno=7)
2024-09-04 18:31:39,499 - stack ['$phi82.0', '$const84.2']
2024-09-04 18:31:39,500 - dispatch pc=88, inst=JUMP_ABSOLUTE(arg=41, lineno=7)
2024-09-04 18:31:39,500 - stack ['$phi82.0']
2024-09-04 18:31:39,500 - end state. edges=[Edge(pc=80, stack=('$phi82.0',), blockstack=(), npush=0)]
2024-09-04 18:31:39,500 - pending: deque([State(pc_initial=80 nstack_initial=1)])
2024-09-04 18:31:39,500 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:39,500 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=82 nstack_initial=2): {'$phi82.1'},
             State(pc_initial=90 nstack_initial=0): set()})
2024-09-04 18:31:39,500 - defmap: {'$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi82.1': State(pc_initial=80 nstack_initial=1)}
2024-09-04 18:31:39,500 - phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=2))},
             '$phi82.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:39,500 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:39,501 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:39,501 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:39,501 - keep phismap: {'$phi80.0': {('$78get_iter.36', State(pc_initial=0 nstack_initial=0))},
 '$phi82.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
2024-09-04 18:31:39,501 - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.36'},
             State(pc_initial=80 nstack_initial=1): {'$phi82.1': '$80for_iter.2'}})
2024-09-04 18:31:39,502 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:39,502 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_global.2'}), (10, {'item': '$8load_global.2', 'res': '$10load_attr.3'}), (12, {'res': '$full_shape012.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$10load_attr.3', 'args': ['$full_shape012.4', '$16load_attr.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$out026.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$const30.12'}), (32, {'start': '$const28.11', 'stop': '$const30.12', 'step': None, 'res': '$32build_slice.14', 'slicevar': '$32build_slice.13'}), (34, {'target': '$out026.10', 'index': '$32build_slice.14', 'value': '$const24.9'}), (36, {'res': '$const36.15'}), (38, {'res': '$out038.16'}), (40, {'res': '$const40.17'}), (42, {'res': '$const42.18'}), (44, {'start': '$const40.17', 'stop': '$const42.18', 'step': None, 'res': '$44build_slice.20', 'slicevar': '$44build_slice.19'}), (46, {'target': '$out038.16', 'index': '$44build_slice.20', 'value': '$const36.15'}), (48, {'res': '$48load_global.21'}), (50, {'res': '$50load_global.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$50load_global.22', 'args': ['$const52.23', '$const54.24'], 'res': '$56call_function.25'}), (58, {'value': '$56call_function.25', 'res': '$58unary_negative.26'}), (60, {'res': '$full_shape060.27'}), (62, {'res': '$const62.28'}), (64, {'index': '$const62.28', 'target': '$full_shape060.27', 'res': '$64binary_subscr.29'}), (66, {'res': '$66load_global.30'}), (68, {'res': '$const68.31'}), (70, {'res': '$const70.32'}), (72, {'func': '$66load_global.30', 'args': ['$const68.31', '$const70.32'], 'res': '$72call_function.33'}), (74, {'lhs': '$64binary_subscr.29', 'rhs': '$72call_function.33', 'res': '$74binary_subtract.34'}), (76, {'func': '$48load_global.21', 'args': ['$58unary_negative.26', '$74binary_subtract.34'], 'res': '$76call_function.35'}), (78, {'value': '$76call_function.35', 'res': '$78get_iter.36'})), outgoing_phis={'$phi80.0': '$78get_iter.36'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.36',)})
2024-09-04 18:31:39,502 - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi82.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 82: ('$phi80.0', '$80for_iter.2')})
2024-09-04 18:31:39,502 - block_infos State(pc_initial=82 nstack_initial=2):
AdaptBlockInfo(insts=((82, {'value': '$phi82.1'}), (84, {'res': '$const84.2'}), (86, {'value': '$const84.2'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi82.0',)})
2024-09-04 18:31:39,502 - block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$out090.0'}), (92, {'retval': '$out090.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:39,504 - label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $8load_global.2 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$8load_global.2']
    $10load_attr.3 = getattr(value=$8load_global.2, attr=empty) ['$10load_attr.3', '$8load_global.2']
    $14load_global.5 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=bool_) ['$14load_global.5', '$16load_attr.6']
    out0 = call $10load_attr.3(full_shape0, func=$10load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6, <string>:3))], vararg=None, varkwarg=None, target=None) ['$10load_attr.3', '$16load_attr.6', 'full_shape0', 'out0']
    $const24.9 = const(int, 0)               ['$const24.9']
    $const28.11 = const(NoneType, None)      ['$const28.11']
    $const30.12 = const(int, 1)              ['$const30.12']
    $32build_slice.13 = global(slice: <class 'slice'>) ['$32build_slice.13']
    $32build_slice.14 = call $32build_slice.13($const28.11, $const30.12, func=$32build_slice.13, args=(Var($const28.11, <string>:4), Var($const30.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$32build_slice.13', '$32build_slice.14', '$const28.11', '$const30.12']
    out0[$32build_slice.14] = $const24.9     ['$32build_slice.14', '$const24.9', 'out0']
    $const36.15 = const(int, 0)              ['$const36.15']
    $const40.17 = const(int, -1)             ['$const40.17']
    $const42.18 = const(NoneType, None)      ['$const42.18']
    $44build_slice.19 = global(slice: <class 'slice'>) ['$44build_slice.19']
    $44build_slice.20 = call $44build_slice.19($const40.17, $const42.18, func=$44build_slice.19, args=(Var($const40.17, <string>:5), Var($const42.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$44build_slice.19', '$44build_slice.20', '$const40.17', '$const42.18']
    out0[$44build_slice.20] = $const36.15    ['$44build_slice.20', '$const36.15', 'out0']
    $48load_global.21 = global(range: <class 'range'>) ['$48load_global.21']
    $50load_global.22 = global(min: <built-in function min>) ['$50load_global.22']
    $const52.23 = const(int, 0)              ['$const52.23']
    $const54.24 = const(int, -1)             ['$const54.24']
    $56call_function.25 = call $50load_global.22($const52.23, $const54.24, func=$50load_global.22, args=[Var($const52.23, <string>:6), Var($const54.24, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.22', '$56call_function.25', '$const52.23', '$const54.24']
    $58unary_negative.26 = unary(fn=<built-in function neg>, value=$56call_function.25) ['$56call_function.25', '$58unary_negative.26']
    $const62.28 = const(int, 0)              ['$const62.28']
    $64binary_subscr.29 = getitem(value=full_shape0, index=$const62.28, fn=<built-in function getitem>) ['$64binary_subscr.29', '$const62.28', 'full_shape0']
    $66load_global.30 = global(max: <built-in function max>) ['$66load_global.30']
    $const68.31 = const(int, 0)              ['$const68.31']
    $const70.32 = const(int, 1)              ['$const70.32']
    $72call_function.33 = call $66load_global.30($const68.31, $const70.32, func=$66load_global.30, args=[Var($const68.31, <string>:6), Var($const70.32, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.30', '$72call_function.33', '$const68.31', '$const70.32']
    $74binary_subtract.34 = $64binary_subscr.29 - $72call_function.33 ['$64binary_subscr.29', '$72call_function.33', '$74binary_subtract.34']
    $76call_function.35 = call $48load_global.21($58unary_negative.26, $74binary_subtract.34, func=$48load_global.21, args=[Var($58unary_negative.26, <string>:6), Var($74binary_subtract.34, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34', '$76call_function.35']
    $78get_iter.36 = getiter(value=$76call_function.35) ['$76call_function.35', '$78get_iter.36']
    $phi80.0 = $78get_iter.36                ['$78get_iter.36', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi82.1 = $80for_iter.2                 ['$80for_iter.2', '$phi82.1']
    branch $80for_iter.3, 82, 90             ['$80for_iter.3']
label 82:
    index00 = $phi82.1                       ['$phi82.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 80                                  []
label 90:
    $92return_value.1 = cast(value=out0)     ['$92return_value.1', 'out0']
    return $92return_value.1                 ['$92return_value.1']

2024-09-04 18:31:39,529 - ==== SSA block analysis pass on 0
2024-09-04 18:31:39,529 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431B584070>
2024-09-04 18:31:39,529 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:39,529 - on stmt: full_shape0 = getattr(value=x, attr=shape)
2024-09-04 18:31:39,529 - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:39,529 - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2024-09-04 18:31:39,529 - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:39,530 - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2024-09-04 18:31:39,530 - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:39,530 - on stmt: $const24.9.1 = const(int, 0)
2024-09-04 18:31:39,530 - on stmt: $const28.11.1 = const(NoneType, None)
2024-09-04 18:31:39,530 - on stmt: $const30.12.1 = const(int, 1)
2024-09-04 18:31:39,530 - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:39,530 - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:39,530 - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2024-09-04 18:31:39,530 - on stmt: $const36.15.1 = const(int, 0)
2024-09-04 18:31:39,530 - on stmt: $const40.17.1 = const(int, -1)
2024-09-04 18:31:39,531 - on stmt: $const42.18.1 = const(NoneType, None)
2024-09-04 18:31:39,531 - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:39,531 - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:39,531 - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2024-09-04 18:31:39,531 - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2024-09-04 18:31:39,531 - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2024-09-04 18:31:39,531 - on stmt: $const52.23.1 = const(int, 0)
2024-09-04 18:31:39,531 - on stmt: $const54.24.1 = const(int, -1)
2024-09-04 18:31:39,531 - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:39,532 - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2024-09-04 18:31:39,532 - on stmt: $const62.28.1 = const(int, 0)
2024-09-04 18:31:39,532 - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2024-09-04 18:31:39,532 - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2024-09-04 18:31:39,532 - on stmt: $const68.31.1 = const(int, 0)
2024-09-04 18:31:39,532 - on stmt: $const70.32.1 = const(int, 1)
2024-09-04 18:31:39,532 - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:39,532 - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2024-09-04 18:31:39,532 - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:39,533 - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2024-09-04 18:31:39,533 - on stmt: $phi80.0.1 = $78get_iter.36.1
2024-09-04 18:31:39,533 - on stmt: jump 80
2024-09-04 18:31:39,533 - ==== SSA block analysis pass on 80
2024-09-04 18:31:39,533 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431B584070>
2024-09-04 18:31:39,533 - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2024-09-04 18:31:39,533 - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2024-09-04 18:31:39,533 - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2024-09-04 18:31:39,533 - on stmt: $phi82.1.1 = $80for_iter.2.1
2024-09-04 18:31:39,533 - on stmt: branch $80for_iter.3.1, 82, 92
2024-09-04 18:31:39,533 - ==== SSA block analysis pass on 82
2024-09-04 18:31:39,534 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431B584070>
2024-09-04 18:31:39,534 - on stmt: index00 = $phi82.1.1
2024-09-04 18:31:39,534 - on stmt: jump 90
2024-09-04 18:31:39,534 - ==== SSA block analysis pass on 92
2024-09-04 18:31:39,534 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431B584070>
2024-09-04 18:31:39,534 - on stmt: $92return_value.1.1 = cast(value=out0)
2024-09-04 18:31:39,534 - on stmt: return $92return_value.1.1
2024-09-04 18:31:39,534 - ==== SSA block analysis pass on 90
2024-09-04 18:31:39,534 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431B584070>
2024-09-04 18:31:39,534 - on stmt: $const4.1 = const(int, 0)
2024-09-04 18:31:39,534 - on stmt: stencil_index = $const4.1 + index00
2024-09-04 18:31:39,534 - on stmt: $6binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:39,535 - on stmt: $const10.4 = const(int, -1)
2024-09-04 18:31:39,535 - on stmt: stencil_index.1 = $const10.4 + index00
2024-09-04 18:31:39,535 - on stmt: $12binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2024-09-04 18:31:39,535 - on stmt: $14compare_op.6 = $6binary_subscr.2 > $12binary_subscr.5
2024-09-04 18:31:39,535 - on stmt: $const18.8 = const(int, 0)
2024-09-04 18:31:39,535 - on stmt: stencil_index.2 = $const18.8 + index00
2024-09-04 18:31:39,535 - on stmt: $20binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
2024-09-04 18:31:39,535 - on stmt: $const24.11 = const(int, 1)
2024-09-04 18:31:39,535 - on stmt: stencil_index.3 = $const24.11 + index00
2024-09-04 18:31:39,535 - on stmt: $26binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
2024-09-04 18:31:39,536 - on stmt: $28compare_op.13 = $20binary_subscr.9 >= $26binary_subscr.12
2024-09-04 18:31:39,536 - on stmt: $30binary_and.14 = $14compare_op.6 & $28compare_op.13
2024-09-04 18:31:39,536 - on stmt: $32return_value.15 = cast(value=$30binary_and.14)
2024-09-04 18:31:39,536 - on stmt: out0[index00] = $32return_value.15
2024-09-04 18:31:39,536 - on stmt: jump 91
2024-09-04 18:31:39,536 - ==== SSA block analysis pass on 91
2024-09-04 18:31:39,536 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431B584070>
2024-09-04 18:31:39,536 - on stmt: jump 80
2024-09-04 18:31:39,540 - defs defaultdict(<class 'list'>,
            {'$10load_attr.3.1': [(<numba.core.ir.Assign object at 0x000002431B575540>,
                                   0)],
             '$12binary_subscr.5': [(<numba.core.ir.Assign object at 0x000002431B5599C0>,
                                     90)],
             '$14compare_op.6': [(<numba.core.ir.Assign object at 0x000002431B546DD0>,
                                  90)],
             '$14load_global.5.1': [(<numba.core.ir.Assign object at 0x000002431B5757E0>,
                                     0)],
             '$16load_attr.6.1': [(<numba.core.ir.Assign object at 0x000002431B575960>,
                                   0)],
             '$20binary_subscr.9': [(<numba.core.ir.Assign object at 0x000002431B559780>,
                                     90)],
             '$26binary_subscr.12': [(<numba.core.ir.Assign object at 0x000002431B559540>,
                                      90)],
             '$28compare_op.13': [(<numba.core.ir.Assign object at 0x00000243177F7B80>,
                                   90)],
             '$30binary_and.14': [(<numba.core.ir.Assign object at 0x00000243177F7B20>,
                                   90)],
             '$32build_slice.13.1': [(<numba.core.ir.Assign object at 0x000002431B574BE0>,
                                      0)],
             '$32build_slice.14.1': [(<numba.core.ir.Assign object at 0x000002431B574AC0>,
                                      0)],
             '$32return_value.15': [(<numba.core.ir.Assign object at 0x000002431B561C90>,
                                     90)],
             '$44build_slice.19.1': [(<numba.core.ir.Assign object at 0x000002431B57A560>,
                                      0)],
             '$44build_slice.20.1': [(<numba.core.ir.Assign object at 0x000002431B57A590>,
                                      0)],
             '$48load_global.21.1': [(<numba.core.ir.Assign object at 0x000002431B57A290>,
                                      0)],
             '$50load_global.22.1': [(<numba.core.ir.Assign object at 0x000002431B57A110>,
                                      0)],
             '$56call_function.25.1': [(<numba.core.ir.Assign object at 0x000002431B579C30>,
                                        0)],
             '$58unary_negative.26.1': [(<numba.core.ir.Assign object at 0x000002431B579B10>,
                                         0)],
             '$64binary_subscr.29.1': [(<numba.core.ir.Assign object at 0x000002431B579660>,
                                        0)],
             '$66load_global.30.1': [(<numba.core.ir.Assign object at 0x000002431B579570>,
                                      0)],
             '$6binary_subscr.2': [(<numba.core.ir.Assign object at 0x000002431B559C00>,
                                    90)],
             '$72call_function.33.1': [(<numba.core.ir.Assign object at 0x000002431B5790C0>,
                                        0)],
             '$74binary_subtract.34.1': [(<numba.core.ir.Assign object at 0x000002431B578EE0>,
                                          0)],
             '$76call_function.35.1': [(<numba.core.ir.Assign object at 0x000002431B578D90>,
                                        0)],
             '$78get_iter.36.1': [(<numba.core.ir.Assign object at 0x000002431B57BE80>,
                                   0)],
             '$80for_iter.1.1': [(<numba.core.ir.Assign object at 0x000002431B57BDF0>,
                                  80)],
             '$80for_iter.2.1': [(<numba.core.ir.Assign object at 0x000002431B57BCD0>,
                                  80)],
             '$80for_iter.3.1': [(<numba.core.ir.Assign object at 0x000002431B57BBB0>,
                                  80)],
             '$8load_global.2.1': [(<numba.core.ir.Assign object at 0x000002431B5753C0>,
                                    0)],
             '$92return_value.1.1': [(<numba.core.ir.Assign object at 0x000002431B57B220>,
                                      92)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x000002431B53C430>,
                             90)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x000002431B546BF0>,
                             90)],
             '$const24.11': [(<numba.core.ir.Assign object at 0x000002431B544790>,
                              90)],
             '$const24.9.1': [(<numba.core.ir.Assign object at 0x000002431B577850>,
                               0)],
             '$const28.11.1': [(<numba.core.ir.Assign object at 0x000002431B577970>,
                                0)],
             '$const30.12.1': [(<numba.core.ir.Assign object at 0x000002431B574D60>,
                                0)],
             '$const36.15.1': [(<numba.core.ir.Assign object at 0x000002431B574880>,
                                0)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x000002431B53EF80>,
                            90)],
             '$const40.17.1': [(<numba.core.ir.Assign object at 0x000002431B5745E0>,
                                0)],
             '$const42.18.1': [(<numba.core.ir.Assign object at 0x000002431B574460>,
                                0)],
             '$const52.23.1': [(<numba.core.ir.Assign object at 0x000002431B579F90>,
                                0)],
             '$const54.24.1': [(<numba.core.ir.Assign object at 0x000002431B579E10>,
                                0)],
             '$const62.28.1': [(<numba.core.ir.Assign object at 0x000002431B579870>,
                                0)],
             '$const68.31.1': [(<numba.core.ir.Assign object at 0x000002431B5793F0>,
                                0)],
             '$const70.32.1': [(<numba.core.ir.Assign object at 0x000002431B579270>,
                                0)],
             '$phi80.0.1': [(<numba.core.ir.Assign object at 0x000002431B574FD0>,
                             0)],
             '$phi82.1.1': [(<numba.core.ir.Assign object at 0x000002431B5799F0>,
                             80)],
             'full_shape0': [(<numba.core.ir.Assign object at 0x000002431B575120>,
                              0)],
             'index00': [(<numba.core.ir.Assign object at 0x000002431B57B880>,
                          82)],
             'out0': [(<numba.core.ir.Assign object at 0x000002431B577550>, 0)],
             'stencil_index': [(<numba.core.ir.Assign object at 0x000002431B55A650>,
                                90)],
             'stencil_index.1': [(<numba.core.ir.Assign object at 0x000002431B559A80>,
                                  90)],
             'stencil_index.2': [(<numba.core.ir.Assign object at 0x000002431B559840>,
                                  90)],
             'stencil_index.3': [(<numba.core.ir.Assign object at 0x000002431B559600>,
                                  90)],
             'x': [(<numba.core.ir.Assign object at 0x000002431B574EB0>, 0)]})
2024-09-04 18:31:39,540 - SSA violators <numba.core.utils.OrderedSet object at 0x000002431B584070>
2024-09-04 18:31:40,538 - bytecode dump:
>          0	NOP(arg=None, lineno=1068)
           2	LOAD_GLOBAL(arg=0, lineno=1082)
           4	LOAD_FAST(arg=0, lineno=1082)
           6	CALL_FUNCTION(arg=1, lineno=1082)
           8	LOAD_FAST(arg=1, lineno=1082)
          10	LOAD_CONST(arg=1, lineno=1082)
          12	LOAD_CONST(arg=1, lineno=1082)
          14	BUILD_SLICE(arg=2, lineno=1082)
          16	STORE_SUBSCR(arg=None, lineno=1082)
          18	LOAD_CONST(arg=1, lineno=1082)
          20	RETURN_VALUE(arg=None, lineno=1082)
2024-09-04 18:31:40,538 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:40,538 - stack: []
2024-09-04 18:31:40,539 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:40,539 - dispatch pc=0, inst=NOP(arg=None, lineno=1068)
2024-09-04 18:31:40,539 - stack []
2024-09-04 18:31:40,539 - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1082)
2024-09-04 18:31:40,539 - stack []
2024-09-04 18:31:40,539 - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1082)
2024-09-04 18:31:40,539 - stack ['$2load_global.0']
2024-09-04 18:31:40,539 - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=1082)
2024-09-04 18:31:40,539 - stack ['$2load_global.0', '$x4.1']
2024-09-04 18:31:40,539 - dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=1082)
2024-09-04 18:31:40,540 - stack ['$6call_function.2']
2024-09-04 18:31:40,540 - dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=1082)
2024-09-04 18:31:40,540 - stack ['$6call_function.2', '$y8.3']
2024-09-04 18:31:40,540 - dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=1082)
2024-09-04 18:31:40,540 - stack ['$6call_function.2', '$y8.3', '$const10.4']
2024-09-04 18:31:40,540 - dispatch pc=14, inst=BUILD_SLICE(arg=2, lineno=1082)
2024-09-04 18:31:40,540 - stack ['$6call_function.2', '$y8.3', '$const10.4', '$const12.5']
2024-09-04 18:31:40,540 - dispatch pc=16, inst=STORE_SUBSCR(arg=None, lineno=1082)
2024-09-04 18:31:40,540 - stack ['$6call_function.2', '$y8.3', '$14build_slice.7']
2024-09-04 18:31:40,540 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1082)
2024-09-04 18:31:40,540 - stack []
2024-09-04 18:31:40,540 - dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=1082)
2024-09-04 18:31:40,541 - stack ['$const18.8']
2024-09-04 18:31:40,541 - end state. edges=[]
2024-09-04 18:31:40,541 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:40,541 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 18:31:40,541 - defmap: {}
2024-09-04 18:31:40,541 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:40,541 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:40,541 - keep phismap: {}
2024-09-04 18:31:40,541 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:40,541 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:40,541 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'res': '$y8.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$const12.5'}), (14, {'start': '$const10.4', 'stop': '$const12.5', 'step': None, 'res': '$14build_slice.7', 'slicevar': '$14build_slice.6'}), (16, {'target': '$y8.3', 'index': '$14build_slice.7', 'value': '$6call_function.2'}), (18, {'res': '$const18.8'}), (20, {'retval': '$const18.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:40,542 - label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $2load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x000002431B51D3F0>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1068)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'x']
    $const10.4 = const(NoneType, None)       ['$const10.4']
    $const12.5 = const(NoneType, None)       ['$const12.5']
    $14build_slice.6 = global(slice: <class 'slice'>) ['$14build_slice.6']
    $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1082), Var($const12.5, utils.py:1082)), kws=(), vararg=None, varkwarg=None, target=None) ['$14build_slice.6', '$14build_slice.7', '$const10.4', '$const12.5']
    y[$14build_slice.7] = $6call_function.2  ['$14build_slice.7', '$6call_function.2', 'y']
    $const18.8 = const(NoneType, None)       ['$const18.8']
    $20return_value.9 = cast(value=$const18.8) ['$20return_value.9', '$const18.8']
    return $20return_value.9                 ['$20return_value.9']

2024-09-04 18:31:40,553 - ==== SSA block analysis pass on 0
2024-09-04 18:31:40,553 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431833A470>
2024-09-04 18:31:40,553 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:40,553 - on stmt: y = arg(1, name=y)
2024-09-04 18:31:40,553 - on stmt: $2load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x000002431B51D3F0>)
2024-09-04 18:31:40,553 - on stmt: $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1068)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:40,553 - on stmt: $const10.4 = const(NoneType, None)
2024-09-04 18:31:40,553 - on stmt: $const12.5 = const(NoneType, None)
2024-09-04 18:31:40,554 - on stmt: $14build_slice.6 = global(slice: <class 'slice'>)
2024-09-04 18:31:40,554 - on stmt: $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1082), Var($const12.5, utils.py:1082)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:40,554 - on stmt: y[slice(None, None, None)] = $6call_function.2
2024-09-04 18:31:40,555 - on stmt: $const18.8 = const(NoneType, None)
2024-09-04 18:31:40,555 - on stmt: $20return_value.9 = cast(value=$const18.8)
2024-09-04 18:31:40,555 - on stmt: return $20return_value.9
2024-09-04 18:31:40,556 - defs defaultdict(<class 'list'>,
            {'$14build_slice.6': [(<numba.core.ir.Assign object at 0x00000243131B2DD0>,
                                   0)],
             '$14build_slice.7': [(<numba.core.ir.Assign object at 0x00000243131B1120>,
                                   0)],
             '$20return_value.9': [(<numba.core.ir.Assign object at 0x00000243131B28C0>,
                                    0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x00000243131B3A30>,
                                  0)],
             '$6call_function.2': [(<numba.core.ir.Assign object at 0x00000243131B3EE0>,
                                    0)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x00000243131B3970>,
                             0)],
             '$const12.5': [(<numba.core.ir.Assign object at 0x00000243131B3610>,
                             0)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x00000243131B2140>,
                             0)],
             'x': [(<numba.core.ir.Assign object at 0x00000243131B2740>, 0)],
             'y': [(<numba.core.ir.Assign object at 0x00000243131B2200>, 0)]})
2024-09-04 18:31:40,556 - SSA violators <numba.core.utils.OrderedSet object at 0x00000243178C9D50>
2024-09-04 18:31:40,592 - bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=2)
           4	LOAD_ATTR(arg=0, lineno=2)
           6	STORE_FAST(arg=1, lineno=2)
           8	LOAD_GLOBAL(arg=1, lineno=3)
          10	LOAD_ATTR(arg=2, lineno=3)
          12	LOAD_FAST(arg=1, lineno=3)
          14	LOAD_GLOBAL(arg=1, lineno=3)
          16	LOAD_ATTR(arg=3, lineno=3)
          18	LOAD_CONST(arg=1, lineno=3)
          20	CALL_FUNCTION_KW(arg=2, lineno=3)
          22	STORE_FAST(arg=2, lineno=3)
          24	LOAD_CONST(arg=2, lineno=4)
          26	LOAD_FAST(arg=2, lineno=4)
          28	LOAD_CONST(arg=0, lineno=4)
          30	LOAD_CONST(arg=3, lineno=4)
          32	BUILD_SLICE(arg=2, lineno=4)
          34	STORE_SUBSCR(arg=None, lineno=4)
          36	LOAD_CONST(arg=2, lineno=5)
          38	LOAD_FAST(arg=2, lineno=5)
          40	LOAD_CONST(arg=4, lineno=5)
          42	LOAD_CONST(arg=0, lineno=5)
          44	BUILD_SLICE(arg=2, lineno=5)
          46	STORE_SUBSCR(arg=None, lineno=5)
          48	LOAD_GLOBAL(arg=4, lineno=6)
          50	LOAD_GLOBAL(arg=5, lineno=6)
          52	LOAD_CONST(arg=2, lineno=6)
          54	LOAD_CONST(arg=4, lineno=6)
          56	CALL_FUNCTION(arg=2, lineno=6)
          58	UNARY_NEGATIVE(arg=None, lineno=6)
          60	LOAD_FAST(arg=1, lineno=6)
          62	LOAD_CONST(arg=2, lineno=6)
          64	BINARY_SUBSCR(arg=None, lineno=6)
          66	LOAD_GLOBAL(arg=6, lineno=6)
          68	LOAD_CONST(arg=2, lineno=6)
          70	LOAD_CONST(arg=3, lineno=6)
          72	CALL_FUNCTION(arg=2, lineno=6)
          74	BINARY_SUBTRACT(arg=None, lineno=6)
          76	CALL_FUNCTION(arg=2, lineno=6)
          78	GET_ITER(arg=None, lineno=6)
>         80	FOR_ITER(arg=4, lineno=6)
          82	STORE_FAST(arg=3, lineno=6)
          84	LOAD_CONST(arg=2, lineno=7)
          86	STORE_FAST(arg=4, lineno=7)
          88	JUMP_ABSOLUTE(arg=41, lineno=7)
>         90	LOAD_FAST(arg=2, lineno=8)
          92	RETURN_VALUE(arg=None, lineno=8)
2024-09-04 18:31:40,592 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:40,592 - stack: []
2024-09-04 18:31:40,593 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:40,593 - dispatch pc=0, inst=NOP(arg=None, lineno=1)
2024-09-04 18:31:40,593 - stack []
2024-09-04 18:31:40,593 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2)
2024-09-04 18:31:40,593 - stack []
2024-09-04 18:31:40,593 - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2)
2024-09-04 18:31:40,593 - stack ['$x2.0']
2024-09-04 18:31:40,593 - dispatch pc=6, inst=STORE_FAST(arg=1, lineno=2)
2024-09-04 18:31:40,593 - stack ['$4load_attr.1']
2024-09-04 18:31:40,593 - dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=3)
2024-09-04 18:31:40,593 - stack []
2024-09-04 18:31:40,594 - dispatch pc=10, inst=LOAD_ATTR(arg=2, lineno=3)
2024-09-04 18:31:40,594 - stack ['$8load_global.2']
2024-09-04 18:31:40,594 - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=3)
2024-09-04 18:31:40,594 - stack ['$10load_attr.3']
2024-09-04 18:31:40,594 - dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=3)
2024-09-04 18:31:40,594 - stack ['$10load_attr.3', '$full_shape012.4']
2024-09-04 18:31:40,594 - dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=3)
2024-09-04 18:31:40,594 - stack ['$10load_attr.3', '$full_shape012.4', '$14load_global.5']
2024-09-04 18:31:40,594 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=3)
2024-09-04 18:31:40,594 - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6']
2024-09-04 18:31:40,594 - dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=3)
2024-09-04 18:31:40,595 - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6', '$const18.7']
2024-09-04 18:31:40,595 - dispatch pc=22, inst=STORE_FAST(arg=2, lineno=3)
2024-09-04 18:31:40,595 - stack ['$20call_function_kw.8']
2024-09-04 18:31:40,595 - dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=4)
2024-09-04 18:31:40,595 - stack []
2024-09-04 18:31:40,595 - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=4)
2024-09-04 18:31:40,595 - stack ['$const24.9']
2024-09-04 18:31:40,595 - dispatch pc=28, inst=LOAD_CONST(arg=0, lineno=4)
2024-09-04 18:31:40,595 - stack ['$const24.9', '$out026.10']
2024-09-04 18:31:40,595 - dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=4)
2024-09-04 18:31:40,595 - stack ['$const24.9', '$out026.10', '$const28.11']
2024-09-04 18:31:40,595 - dispatch pc=32, inst=BUILD_SLICE(arg=2, lineno=4)
2024-09-04 18:31:40,595 - stack ['$const24.9', '$out026.10', '$const28.11', '$const30.12']
2024-09-04 18:31:40,595 - dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=4)
2024-09-04 18:31:40,596 - stack ['$const24.9', '$out026.10', '$32build_slice.14']
2024-09-04 18:31:40,596 - dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=5)
2024-09-04 18:31:40,596 - stack []
2024-09-04 18:31:40,596 - dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=5)
2024-09-04 18:31:40,596 - stack ['$const36.15']
2024-09-04 18:31:40,596 - dispatch pc=40, inst=LOAD_CONST(arg=4, lineno=5)
2024-09-04 18:31:40,596 - stack ['$const36.15', '$out038.16']
2024-09-04 18:31:40,596 - dispatch pc=42, inst=LOAD_CONST(arg=0, lineno=5)
2024-09-04 18:31:40,596 - stack ['$const36.15', '$out038.16', '$const40.17']
2024-09-04 18:31:40,596 - dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=5)
2024-09-04 18:31:40,596 - stack ['$const36.15', '$out038.16', '$const40.17', '$const42.18']
2024-09-04 18:31:40,596 - dispatch pc=46, inst=STORE_SUBSCR(arg=None, lineno=5)
2024-09-04 18:31:40,596 - stack ['$const36.15', '$out038.16', '$44build_slice.20']
2024-09-04 18:31:40,597 - dispatch pc=48, inst=LOAD_GLOBAL(arg=4, lineno=6)
2024-09-04 18:31:40,597 - stack []
2024-09-04 18:31:40,597 - dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=6)
2024-09-04 18:31:40,597 - stack ['$48load_global.21']
2024-09-04 18:31:40,597 - dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:40,597 - stack ['$48load_global.21', '$50load_global.22']
2024-09-04 18:31:40,597 - dispatch pc=54, inst=LOAD_CONST(arg=4, lineno=6)
2024-09-04 18:31:40,597 - stack ['$48load_global.21', '$50load_global.22', '$const52.23']
2024-09-04 18:31:40,597 - dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:40,597 - stack ['$48load_global.21', '$50load_global.22', '$const52.23', '$const54.24']
2024-09-04 18:31:40,597 - dispatch pc=58, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2024-09-04 18:31:40,597 - stack ['$48load_global.21', '$56call_function.25']
2024-09-04 18:31:40,597 - dispatch pc=60, inst=LOAD_FAST(arg=1, lineno=6)
2024-09-04 18:31:40,597 - stack ['$48load_global.21', '$58unary_negative.26']
2024-09-04 18:31:40,598 - dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:40,598 - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27']
2024-09-04 18:31:40,598 - dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=6)
2024-09-04 18:31:40,598 - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27', '$const62.28']
2024-09-04 18:31:40,598 - dispatch pc=66, inst=LOAD_GLOBAL(arg=6, lineno=6)
2024-09-04 18:31:40,598 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29']
2024-09-04 18:31:40,598 - dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:40,598 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30']
2024-09-04 18:31:40,598 - dispatch pc=70, inst=LOAD_CONST(arg=3, lineno=6)
2024-09-04 18:31:40,598 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31']
2024-09-04 18:31:40,598 - dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:40,598 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31', '$const70.32']
2024-09-04 18:31:40,598 - dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=6)
2024-09-04 18:31:40,599 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$72call_function.33']
2024-09-04 18:31:40,599 - dispatch pc=76, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:40,599 - stack ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34']
2024-09-04 18:31:40,599 - dispatch pc=78, inst=GET_ITER(arg=None, lineno=6)
2024-09-04 18:31:40,599 - stack ['$76call_function.35']
2024-09-04 18:31:40,599 - end state. edges=[Edge(pc=80, stack=('$78get_iter.36',), blockstack=(), npush=0)]
2024-09-04 18:31:40,599 - pending: deque([State(pc_initial=80 nstack_initial=1)])
2024-09-04 18:31:40,599 - stack: ['$phi80.0']
2024-09-04 18:31:40,599 - state.pc_initial: State(pc_initial=80 nstack_initial=1)
2024-09-04 18:31:40,599 - dispatch pc=80, inst=FOR_ITER(arg=4, lineno=6)
2024-09-04 18:31:40,599 - stack ['$phi80.0']
2024-09-04 18:31:40,600 - end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
2024-09-04 18:31:40,600 - pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=82 nstack_initial=2)])
2024-09-04 18:31:40,600 - stack: []
2024-09-04 18:31:40,600 - state.pc_initial: State(pc_initial=90 nstack_initial=0)
2024-09-04 18:31:40,600 - dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=8)
2024-09-04 18:31:40,600 - stack []
2024-09-04 18:31:40,600 - dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=8)
2024-09-04 18:31:40,600 - stack ['$out090.0']
2024-09-04 18:31:40,600 - end state. edges=[]
2024-09-04 18:31:40,600 - pending: deque([State(pc_initial=82 nstack_initial=2)])
2024-09-04 18:31:40,600 - stack: ['$phi82.0', '$phi82.1']
2024-09-04 18:31:40,600 - state.pc_initial: State(pc_initial=82 nstack_initial=2)
2024-09-04 18:31:40,600 - dispatch pc=82, inst=STORE_FAST(arg=3, lineno=6)
2024-09-04 18:31:40,600 - stack ['$phi82.0', '$phi82.1']
2024-09-04 18:31:40,600 - dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=7)
2024-09-04 18:31:40,600 - stack ['$phi82.0']
2024-09-04 18:31:40,601 - dispatch pc=86, inst=STORE_FAST(arg=4, lineno=7)
2024-09-04 18:31:40,601 - stack ['$phi82.0', '$const84.2']
2024-09-04 18:31:40,601 - dispatch pc=88, inst=JUMP_ABSOLUTE(arg=41, lineno=7)
2024-09-04 18:31:40,601 - stack ['$phi82.0']
2024-09-04 18:31:40,601 - end state. edges=[Edge(pc=80, stack=('$phi82.0',), blockstack=(), npush=0)]
2024-09-04 18:31:40,601 - pending: deque([State(pc_initial=80 nstack_initial=1)])
2024-09-04 18:31:40,601 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:40,601 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=82 nstack_initial=2): {'$phi82.1'},
             State(pc_initial=90 nstack_initial=0): set()})
2024-09-04 18:31:40,624 - defmap: {'$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi82.1': State(pc_initial=80 nstack_initial=1)}
2024-09-04 18:31:40,624 - phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=2))},
             '$phi82.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:40,628 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:40,628 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:40,628 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:40,629 - keep phismap: {'$phi80.0': {('$78get_iter.36', State(pc_initial=0 nstack_initial=0))},
 '$phi82.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
2024-09-04 18:31:40,629 - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.36'},
             State(pc_initial=80 nstack_initial=1): {'$phi82.1': '$80for_iter.2'}})
2024-09-04 18:31:40,629 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:40,629 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_global.2'}), (10, {'item': '$8load_global.2', 'res': '$10load_attr.3'}), (12, {'res': '$full_shape012.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$10load_attr.3', 'args': ['$full_shape012.4', '$16load_attr.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$out026.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$const30.12'}), (32, {'start': '$const28.11', 'stop': '$const30.12', 'step': None, 'res': '$32build_slice.14', 'slicevar': '$32build_slice.13'}), (34, {'target': '$out026.10', 'index': '$32build_slice.14', 'value': '$const24.9'}), (36, {'res': '$const36.15'}), (38, {'res': '$out038.16'}), (40, {'res': '$const40.17'}), (42, {'res': '$const42.18'}), (44, {'start': '$const40.17', 'stop': '$const42.18', 'step': None, 'res': '$44build_slice.20', 'slicevar': '$44build_slice.19'}), (46, {'target': '$out038.16', 'index': '$44build_slice.20', 'value': '$const36.15'}), (48, {'res': '$48load_global.21'}), (50, {'res': '$50load_global.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$50load_global.22', 'args': ['$const52.23', '$const54.24'], 'res': '$56call_function.25'}), (58, {'value': '$56call_function.25', 'res': '$58unary_negative.26'}), (60, {'res': '$full_shape060.27'}), (62, {'res': '$const62.28'}), (64, {'index': '$const62.28', 'target': '$full_shape060.27', 'res': '$64binary_subscr.29'}), (66, {'res': '$66load_global.30'}), (68, {'res': '$const68.31'}), (70, {'res': '$const70.32'}), (72, {'func': '$66load_global.30', 'args': ['$const68.31', '$const70.32'], 'res': '$72call_function.33'}), (74, {'lhs': '$64binary_subscr.29', 'rhs': '$72call_function.33', 'res': '$74binary_subtract.34'}), (76, {'func': '$48load_global.21', 'args': ['$58unary_negative.26', '$74binary_subtract.34'], 'res': '$76call_function.35'}), (78, {'value': '$76call_function.35', 'res': '$78get_iter.36'})), outgoing_phis={'$phi80.0': '$78get_iter.36'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.36',)})
2024-09-04 18:31:40,629 - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi82.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 82: ('$phi80.0', '$80for_iter.2')})
2024-09-04 18:31:40,629 - block_infos State(pc_initial=82 nstack_initial=2):
AdaptBlockInfo(insts=((82, {'value': '$phi82.1'}), (84, {'res': '$const84.2'}), (86, {'value': '$const84.2'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi82.0',)})
2024-09-04 18:31:40,629 - block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$out090.0'}), (92, {'retval': '$out090.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:40,629 - label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $8load_global.2 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$8load_global.2']
    $10load_attr.3 = getattr(value=$8load_global.2, attr=empty) ['$10load_attr.3', '$8load_global.2']
    $14load_global.5 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=bool_) ['$14load_global.5', '$16load_attr.6']
    out0 = call $10load_attr.3(full_shape0, func=$10load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6, <string>:3))], vararg=None, varkwarg=None, target=None) ['$10load_attr.3', '$16load_attr.6', 'full_shape0', 'out0']
    $const24.9 = const(int, 0)               ['$const24.9']
    $const28.11 = const(NoneType, None)      ['$const28.11']
    $const30.12 = const(int, 1)              ['$const30.12']
    $32build_slice.13 = global(slice: <class 'slice'>) ['$32build_slice.13']
    $32build_slice.14 = call $32build_slice.13($const28.11, $const30.12, func=$32build_slice.13, args=(Var($const28.11, <string>:4), Var($const30.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$32build_slice.13', '$32build_slice.14', '$const28.11', '$const30.12']
    out0[$32build_slice.14] = $const24.9     ['$32build_slice.14', '$const24.9', 'out0']
    $const36.15 = const(int, 0)              ['$const36.15']
    $const40.17 = const(int, -1)             ['$const40.17']
    $const42.18 = const(NoneType, None)      ['$const42.18']
    $44build_slice.19 = global(slice: <class 'slice'>) ['$44build_slice.19']
    $44build_slice.20 = call $44build_slice.19($const40.17, $const42.18, func=$44build_slice.19, args=(Var($const40.17, <string>:5), Var($const42.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$44build_slice.19', '$44build_slice.20', '$const40.17', '$const42.18']
    out0[$44build_slice.20] = $const36.15    ['$44build_slice.20', '$const36.15', 'out0']
    $48load_global.21 = global(range: <class 'range'>) ['$48load_global.21']
    $50load_global.22 = global(min: <built-in function min>) ['$50load_global.22']
    $const52.23 = const(int, 0)              ['$const52.23']
    $const54.24 = const(int, -1)             ['$const54.24']
    $56call_function.25 = call $50load_global.22($const52.23, $const54.24, func=$50load_global.22, args=[Var($const52.23, <string>:6), Var($const54.24, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.22', '$56call_function.25', '$const52.23', '$const54.24']
    $58unary_negative.26 = unary(fn=<built-in function neg>, value=$56call_function.25) ['$56call_function.25', '$58unary_negative.26']
    $const62.28 = const(int, 0)              ['$const62.28']
    $64binary_subscr.29 = getitem(value=full_shape0, index=$const62.28, fn=<built-in function getitem>) ['$64binary_subscr.29', '$const62.28', 'full_shape0']
    $66load_global.30 = global(max: <built-in function max>) ['$66load_global.30']
    $const68.31 = const(int, 0)              ['$const68.31']
    $const70.32 = const(int, 1)              ['$const70.32']
    $72call_function.33 = call $66load_global.30($const68.31, $const70.32, func=$66load_global.30, args=[Var($const68.31, <string>:6), Var($const70.32, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.30', '$72call_function.33', '$const68.31', '$const70.32']
    $74binary_subtract.34 = $64binary_subscr.29 - $72call_function.33 ['$64binary_subscr.29', '$72call_function.33', '$74binary_subtract.34']
    $76call_function.35 = call $48load_global.21($58unary_negative.26, $74binary_subtract.34, func=$48load_global.21, args=[Var($58unary_negative.26, <string>:6), Var($74binary_subtract.34, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34', '$76call_function.35']
    $78get_iter.36 = getiter(value=$76call_function.35) ['$76call_function.35', '$78get_iter.36']
    $phi80.0 = $78get_iter.36                ['$78get_iter.36', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi82.1 = $80for_iter.2                 ['$80for_iter.2', '$phi82.1']
    branch $80for_iter.3, 82, 90             ['$80for_iter.3']
label 82:
    index00 = $phi82.1                       ['$phi82.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 80                                  []
label 90:
    $92return_value.1 = cast(value=out0)     ['$92return_value.1', 'out0']
    return $92return_value.1                 ['$92return_value.1']

2024-09-04 18:31:40,653 - ==== SSA block analysis pass on 0
2024-09-04 18:31:40,653 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243132C6200>
2024-09-04 18:31:40,653 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:40,653 - on stmt: full_shape0 = getattr(value=x, attr=shape)
2024-09-04 18:31:40,653 - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:40,653 - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2024-09-04 18:31:40,653 - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:40,653 - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2024-09-04 18:31:40,653 - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:40,654 - on stmt: $const24.9.1 = const(int, 0)
2024-09-04 18:31:40,654 - on stmt: $const28.11.1 = const(NoneType, None)
2024-09-04 18:31:40,654 - on stmt: $const30.12.1 = const(int, 1)
2024-09-04 18:31:40,654 - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:40,654 - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:40,654 - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2024-09-04 18:31:40,654 - on stmt: $const36.15.1 = const(int, 0)
2024-09-04 18:31:40,654 - on stmt: $const40.17.1 = const(int, -1)
2024-09-04 18:31:40,654 - on stmt: $const42.18.1 = const(NoneType, None)
2024-09-04 18:31:40,654 - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:40,655 - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:40,655 - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2024-09-04 18:31:40,655 - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2024-09-04 18:31:40,655 - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2024-09-04 18:31:40,655 - on stmt: $const52.23.1 = const(int, 0)
2024-09-04 18:31:40,655 - on stmt: $const54.24.1 = const(int, -1)
2024-09-04 18:31:40,655 - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:40,655 - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2024-09-04 18:31:40,655 - on stmt: $const62.28.1 = const(int, 0)
2024-09-04 18:31:40,655 - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2024-09-04 18:31:40,655 - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2024-09-04 18:31:40,655 - on stmt: $const68.31.1 = const(int, 0)
2024-09-04 18:31:40,656 - on stmt: $const70.32.1 = const(int, 1)
2024-09-04 18:31:40,656 - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:40,656 - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2024-09-04 18:31:40,656 - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:40,656 - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2024-09-04 18:31:40,656 - on stmt: $phi80.0.1 = $78get_iter.36.1
2024-09-04 18:31:40,656 - on stmt: jump 80
2024-09-04 18:31:40,656 - ==== SSA block analysis pass on 80
2024-09-04 18:31:40,656 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243132C6200>
2024-09-04 18:31:40,656 - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2024-09-04 18:31:40,656 - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2024-09-04 18:31:40,656 - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2024-09-04 18:31:40,656 - on stmt: $phi82.1.1 = $80for_iter.2.1
2024-09-04 18:31:40,657 - on stmt: branch $80for_iter.3.1, 82, 92
2024-09-04 18:31:40,657 - ==== SSA block analysis pass on 82
2024-09-04 18:31:40,657 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243132C6200>
2024-09-04 18:31:40,657 - on stmt: index00 = $phi82.1.1
2024-09-04 18:31:40,657 - on stmt: jump 90
2024-09-04 18:31:40,657 - ==== SSA block analysis pass on 92
2024-09-04 18:31:40,657 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243132C6200>
2024-09-04 18:31:40,657 - on stmt: $92return_value.1.1 = cast(value=out0)
2024-09-04 18:31:40,657 - on stmt: return $92return_value.1.1
2024-09-04 18:31:40,657 - ==== SSA block analysis pass on 90
2024-09-04 18:31:40,657 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243132C6200>
2024-09-04 18:31:40,657 - on stmt: $const4.1 = const(int, 0)
2024-09-04 18:31:40,657 - on stmt: stencil_index = $const4.1 + index00
2024-09-04 18:31:40,657 - on stmt: $6binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:40,658 - on stmt: $const10.4 = const(int, -1)
2024-09-04 18:31:40,658 - on stmt: stencil_index.1 = $const10.4 + index00
2024-09-04 18:31:40,658 - on stmt: $12binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2024-09-04 18:31:40,658 - on stmt: $14compare_op.6 = $6binary_subscr.2 < $12binary_subscr.5
2024-09-04 18:31:40,658 - on stmt: $const18.8 = const(int, 0)
2024-09-04 18:31:40,658 - on stmt: stencil_index.2 = $const18.8 + index00
2024-09-04 18:31:40,658 - on stmt: $20binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
2024-09-04 18:31:40,658 - on stmt: $const24.11 = const(int, 1)
2024-09-04 18:31:40,658 - on stmt: stencil_index.3 = $const24.11 + index00
2024-09-04 18:31:40,658 - on stmt: $26binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
2024-09-04 18:31:40,658 - on stmt: $28compare_op.13 = $20binary_subscr.9 <= $26binary_subscr.12
2024-09-04 18:31:40,658 - on stmt: $30binary_and.14 = $14compare_op.6 & $28compare_op.13
2024-09-04 18:31:40,659 - on stmt: $32return_value.15 = cast(value=$30binary_and.14)
2024-09-04 18:31:40,659 - on stmt: out0[index00] = $32return_value.15
2024-09-04 18:31:40,659 - on stmt: jump 91
2024-09-04 18:31:40,659 - ==== SSA block analysis pass on 91
2024-09-04 18:31:40,659 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243132C6200>
2024-09-04 18:31:40,659 - on stmt: jump 80
2024-09-04 18:31:40,661 - defs defaultdict(<class 'list'>,
            {'$10load_attr.3.1': [(<numba.core.ir.Assign object at 0x0000024313585510>,
                                   0)],
             '$12binary_subscr.5': [(<numba.core.ir.Assign object at 0x0000024313570550>,
                                     90)],
             '$14compare_op.6': [(<numba.core.ir.Assign object at 0x000002431331B160>,
                                  90)],
             '$14load_global.5.1': [(<numba.core.ir.Assign object at 0x0000024313585030>,
                                     0)],
             '$16load_attr.6.1': [(<numba.core.ir.Assign object at 0x0000024313585ED0>,
                                   0)],
             '$20binary_subscr.9': [(<numba.core.ir.Assign object at 0x0000024313570520>,
                                     90)],
             '$26binary_subscr.12': [(<numba.core.ir.Assign object at 0x0000024313572740>,
                                      90)],
             '$28compare_op.13': [(<numba.core.ir.Assign object at 0x0000024313573880>,
                                   90)],
             '$30binary_and.14': [(<numba.core.ir.Assign object at 0x00000243135709D0>,
                                   90)],
             '$32build_slice.13.1': [(<numba.core.ir.Assign object at 0x0000024313586A70>,
                                      0)],
             '$32build_slice.14.1': [(<numba.core.ir.Assign object at 0x0000024313586860>,
                                      0)],
             '$32return_value.15': [(<numba.core.ir.Assign object at 0x0000024313573970>,
                                     90)],
             '$44build_slice.19.1': [(<numba.core.ir.Assign object at 0x00000243135861D0>,
                                      0)],
             '$44build_slice.20.1': [(<numba.core.ir.Assign object at 0x0000024313585E40>,
                                      0)],
             '$48load_global.21.1': [(<numba.core.ir.Assign object at 0x00000243135867D0>,
                                      0)],
             '$50load_global.22.1': [(<numba.core.ir.Assign object at 0x00000243133360B0>,
                                      0)],
             '$56call_function.25.1': [(<numba.core.ir.Assign object at 0x0000024313336920>,
                                        0)],
             '$58unary_negative.26.1': [(<numba.core.ir.Assign object at 0x0000024313336A40>,
                                         0)],
             '$64binary_subscr.29.1': [(<numba.core.ir.Assign object at 0x0000024313336E90>,
                                        0)],
             '$66load_global.30.1': [(<numba.core.ir.Assign object at 0x0000024313336FE0>,
                                      0)],
             '$6binary_subscr.2': [(<numba.core.ir.Assign object at 0x00000243135735E0>,
                                    90)],
             '$72call_function.33.1': [(<numba.core.ir.Assign object at 0x00000243133374C0>,
                                        0)],
             '$74binary_subtract.34.1': [(<numba.core.ir.Assign object at 0x0000024313337610>,
                                          0)],
             '$76call_function.35.1': [(<numba.core.ir.Assign object at 0x00000243133377C0>,
                                        0)],
             '$78get_iter.36.1': [(<numba.core.ir.Assign object at 0x00000243133378E0>,
                                   0)],
             '$80for_iter.1.1': [(<numba.core.ir.Assign object at 0x00000243133379D0>,
                                  80)],
             '$80for_iter.2.1': [(<numba.core.ir.Assign object at 0x0000024313337AF0>,
                                  80)],
             '$80for_iter.3.1': [(<numba.core.ir.Assign object at 0x0000024313337C10>,
                                  80)],
             '$8load_global.2.1': [(<numba.core.ir.Assign object at 0x0000024313585420>,
                                    0)],
             '$92return_value.1.1': [(<numba.core.ir.Assign object at 0x0000024313560580>,
                                      92)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x00000243131F5630>,
                             90)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x000002431770EA40>,
                             90)],
             '$const24.11': [(<numba.core.ir.Assign object at 0x000002431770ED70>,
                              90)],
             '$const24.9.1': [(<numba.core.ir.Assign object at 0x00000243135851E0>,
                               0)],
             '$const28.11.1': [(<numba.core.ir.Assign object at 0x0000024313584880>,
                                0)],
             '$const30.12.1': [(<numba.core.ir.Assign object at 0x0000024313585C90>,
                                0)],
             '$const36.15.1': [(<numba.core.ir.Assign object at 0x0000024313586E30>,
                                0)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x00000243131B1CF0>,
                            90)],
             '$const40.17.1': [(<numba.core.ir.Assign object at 0x0000024313586290>,
                                0)],
             '$const42.18.1': [(<numba.core.ir.Assign object at 0x0000024313585FC0>,
                                0)],
             '$const52.23.1': [(<numba.core.ir.Assign object at 0x00000243133365C0>,
                                0)],
             '$const54.24.1': [(<numba.core.ir.Assign object at 0x0000024313336740>,
                                0)],
             '$const62.28.1': [(<numba.core.ir.Assign object at 0x0000024313336CE0>,
                                0)],
             '$const68.31.1': [(<numba.core.ir.Assign object at 0x0000024313337160>,
                                0)],
             '$const70.32.1': [(<numba.core.ir.Assign object at 0x00000243133372E0>,
                                0)],
             '$phi80.0.1': [(<numba.core.ir.Assign object at 0x0000024313585660>,
                             0)],
             '$phi82.1.1': [(<numba.core.ir.Assign object at 0x0000024313336B60>,
                             80)],
             'full_shape0': [(<numba.core.ir.Assign object at 0x0000024313585210>,
                              0)],
             'index00': [(<numba.core.ir.Assign object at 0x0000024313337EE0>,
                          82)],
             'out0': [(<numba.core.ir.Assign object at 0x00000243135842E0>, 0)],
             'stencil_index': [(<numba.core.ir.Assign object at 0x0000024313572E90>,
                                90)],
             'stencil_index.1': [(<numba.core.ir.Assign object at 0x0000024313573640>,
                                  90)],
             'stencil_index.2': [(<numba.core.ir.Assign object at 0x00000243135736A0>,
                                  90)],
             'stencil_index.3': [(<numba.core.ir.Assign object at 0x0000024313570CD0>,
                                  90)],
             'x': [(<numba.core.ir.Assign object at 0x0000024313584E50>, 0)]})
2024-09-04 18:31:40,662 - SSA violators <numba.core.utils.OrderedSet object at 0x0000024313563820>
2024-09-04 18:31:41,054 - bytecode dump:
>          0	NOP(arg=None, lineno=1068)
           2	LOAD_GLOBAL(arg=0, lineno=1082)
           4	LOAD_FAST(arg=0, lineno=1082)
           6	CALL_FUNCTION(arg=1, lineno=1082)
           8	LOAD_FAST(arg=1, lineno=1082)
          10	LOAD_CONST(arg=1, lineno=1082)
          12	LOAD_CONST(arg=1, lineno=1082)
          14	BUILD_SLICE(arg=2, lineno=1082)
          16	STORE_SUBSCR(arg=None, lineno=1082)
          18	LOAD_CONST(arg=1, lineno=1082)
          20	RETURN_VALUE(arg=None, lineno=1082)
2024-09-04 18:31:41,054 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:41,054 - stack: []
2024-09-04 18:31:41,054 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:41,054 - dispatch pc=0, inst=NOP(arg=None, lineno=1068)
2024-09-04 18:31:41,054 - stack []
2024-09-04 18:31:41,055 - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1082)
2024-09-04 18:31:41,055 - stack []
2024-09-04 18:31:41,055 - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1082)
2024-09-04 18:31:41,055 - stack ['$2load_global.0']
2024-09-04 18:31:41,055 - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=1082)
2024-09-04 18:31:41,055 - stack ['$2load_global.0', '$x4.1']
2024-09-04 18:31:41,055 - dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=1082)
2024-09-04 18:31:41,055 - stack ['$6call_function.2']
2024-09-04 18:31:41,055 - dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=1082)
2024-09-04 18:31:41,055 - stack ['$6call_function.2', '$y8.3']
2024-09-04 18:31:41,055 - dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=1082)
2024-09-04 18:31:41,055 - stack ['$6call_function.2', '$y8.3', '$const10.4']
2024-09-04 18:31:41,055 - dispatch pc=14, inst=BUILD_SLICE(arg=2, lineno=1082)
2024-09-04 18:31:41,055 - stack ['$6call_function.2', '$y8.3', '$const10.4', '$const12.5']
2024-09-04 18:31:41,056 - dispatch pc=16, inst=STORE_SUBSCR(arg=None, lineno=1082)
2024-09-04 18:31:41,056 - stack ['$6call_function.2', '$y8.3', '$14build_slice.7']
2024-09-04 18:31:41,056 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1082)
2024-09-04 18:31:41,056 - stack []
2024-09-04 18:31:41,056 - dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=1082)
2024-09-04 18:31:41,056 - stack ['$const18.8']
2024-09-04 18:31:41,056 - end state. edges=[]
2024-09-04 18:31:41,056 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:41,056 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 18:31:41,056 - defmap: {}
2024-09-04 18:31:41,056 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:41,056 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:41,056 - keep phismap: {}
2024-09-04 18:31:41,057 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:41,057 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:41,057 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'res': '$y8.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$const12.5'}), (14, {'start': '$const10.4', 'stop': '$const12.5', 'step': None, 'res': '$14build_slice.7', 'slicevar': '$14build_slice.6'}), (16, {'target': '$y8.3', 'index': '$14build_slice.7', 'value': '$6call_function.2'}), (18, {'res': '$const18.8'}), (20, {'retval': '$const18.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:41,057 - label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $2load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x000002431B51D3F0>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1068)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'x']
    $const10.4 = const(NoneType, None)       ['$const10.4']
    $const12.5 = const(NoneType, None)       ['$const12.5']
    $14build_slice.6 = global(slice: <class 'slice'>) ['$14build_slice.6']
    $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1082), Var($const12.5, utils.py:1082)), kws=(), vararg=None, varkwarg=None, target=None) ['$14build_slice.6', '$14build_slice.7', '$const10.4', '$const12.5']
    y[$14build_slice.7] = $6call_function.2  ['$14build_slice.7', '$6call_function.2', 'y']
    $const18.8 = const(NoneType, None)       ['$const18.8']
    $20return_value.9 = cast(value=$const18.8) ['$20return_value.9', '$const18.8']
    return $20return_value.9                 ['$20return_value.9']

2024-09-04 18:31:41,067 - ==== SSA block analysis pass on 0
2024-09-04 18:31:41,068 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243131B3D00>
2024-09-04 18:31:41,068 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:41,068 - on stmt: y = arg(1, name=y)
2024-09-04 18:31:41,068 - on stmt: $2load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x000002431B51D3F0>)
2024-09-04 18:31:41,068 - on stmt: $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1068)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:41,068 - on stmt: $const10.4 = const(NoneType, None)
2024-09-04 18:31:41,068 - on stmt: $const12.5 = const(NoneType, None)
2024-09-04 18:31:41,068 - on stmt: $14build_slice.6 = global(slice: <class 'slice'>)
2024-09-04 18:31:41,068 - on stmt: $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1082), Var($const12.5, utils.py:1082)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:41,068 - on stmt: y[slice(None, None, None)] = $6call_function.2
2024-09-04 18:31:41,068 - on stmt: $const18.8 = const(NoneType, None)
2024-09-04 18:31:41,068 - on stmt: $20return_value.9 = cast(value=$const18.8)
2024-09-04 18:31:41,068 - on stmt: return $20return_value.9
2024-09-04 18:31:41,069 - defs defaultdict(<class 'list'>,
            {'$14build_slice.6': [(<numba.core.ir.Assign object at 0x00000243136BC0D0>,
                                   0)],
             '$14build_slice.7': [(<numba.core.ir.Assign object at 0x00000243136BC1F0>,
                                   0)],
             '$20return_value.9': [(<numba.core.ir.Assign object at 0x00000243136BC5B0>,
                                    0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x000002431369F850>,
                                  0)],
             '$6call_function.2': [(<numba.core.ir.Assign object at 0x000002431369FB50>,
                                    0)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x000002431369FD90>,
                             0)],
             '$const12.5': [(<numba.core.ir.Assign object at 0x000002431369FF10>,
                             0)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x00000243136BC430>,
                             0)],
             'x': [(<numba.core.ir.Assign object at 0x000002431369EFE0>, 0)],
             'y': [(<numba.core.ir.Assign object at 0x000002431369ED70>, 0)]})
2024-09-04 18:31:41,069 - SSA violators <numba.core.utils.OrderedSet object at 0x00000243131B3D00>
2024-09-04 18:31:41,107 - bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=2)
           4	LOAD_ATTR(arg=0, lineno=2)
           6	STORE_FAST(arg=1, lineno=2)
           8	LOAD_GLOBAL(arg=1, lineno=3)
          10	LOAD_ATTR(arg=2, lineno=3)
          12	LOAD_FAST(arg=1, lineno=3)
          14	LOAD_GLOBAL(arg=1, lineno=3)
          16	LOAD_ATTR(arg=3, lineno=3)
          18	LOAD_CONST(arg=1, lineno=3)
          20	CALL_FUNCTION_KW(arg=2, lineno=3)
          22	STORE_FAST(arg=2, lineno=3)
          24	LOAD_CONST(arg=2, lineno=4)
          26	LOAD_FAST(arg=2, lineno=4)
          28	LOAD_CONST(arg=0, lineno=4)
          30	LOAD_CONST(arg=3, lineno=4)
          32	BUILD_SLICE(arg=2, lineno=4)
          34	STORE_SUBSCR(arg=None, lineno=4)
          36	LOAD_CONST(arg=2, lineno=5)
          38	LOAD_FAST(arg=2, lineno=5)
          40	LOAD_CONST(arg=4, lineno=5)
          42	LOAD_CONST(arg=0, lineno=5)
          44	BUILD_SLICE(arg=2, lineno=5)
          46	STORE_SUBSCR(arg=None, lineno=5)
          48	LOAD_GLOBAL(arg=4, lineno=6)
          50	LOAD_GLOBAL(arg=5, lineno=6)
          52	LOAD_CONST(arg=2, lineno=6)
          54	LOAD_CONST(arg=4, lineno=6)
          56	CALL_FUNCTION(arg=2, lineno=6)
          58	UNARY_NEGATIVE(arg=None, lineno=6)
          60	LOAD_FAST(arg=1, lineno=6)
          62	LOAD_CONST(arg=2, lineno=6)
          64	BINARY_SUBSCR(arg=None, lineno=6)
          66	LOAD_GLOBAL(arg=6, lineno=6)
          68	LOAD_CONST(arg=2, lineno=6)
          70	LOAD_CONST(arg=3, lineno=6)
          72	CALL_FUNCTION(arg=2, lineno=6)
          74	BINARY_SUBTRACT(arg=None, lineno=6)
          76	CALL_FUNCTION(arg=2, lineno=6)
          78	GET_ITER(arg=None, lineno=6)
>         80	FOR_ITER(arg=4, lineno=6)
          82	STORE_FAST(arg=3, lineno=6)
          84	LOAD_CONST(arg=2, lineno=7)
          86	STORE_FAST(arg=4, lineno=7)
          88	JUMP_ABSOLUTE(arg=41, lineno=7)
>         90	LOAD_FAST(arg=2, lineno=8)
          92	RETURN_VALUE(arg=None, lineno=8)
2024-09-04 18:31:41,107 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:41,107 - stack: []
2024-09-04 18:31:41,107 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:41,107 - dispatch pc=0, inst=NOP(arg=None, lineno=1)
2024-09-04 18:31:41,107 - stack []
2024-09-04 18:31:41,107 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2)
2024-09-04 18:31:41,107 - stack []
2024-09-04 18:31:41,108 - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2)
2024-09-04 18:31:41,108 - stack ['$x2.0']
2024-09-04 18:31:41,108 - dispatch pc=6, inst=STORE_FAST(arg=1, lineno=2)
2024-09-04 18:31:41,108 - stack ['$4load_attr.1']
2024-09-04 18:31:41,108 - dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=3)
2024-09-04 18:31:41,108 - stack []
2024-09-04 18:31:41,108 - dispatch pc=10, inst=LOAD_ATTR(arg=2, lineno=3)
2024-09-04 18:31:41,108 - stack ['$8load_global.2']
2024-09-04 18:31:41,108 - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=3)
2024-09-04 18:31:41,108 - stack ['$10load_attr.3']
2024-09-04 18:31:41,108 - dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=3)
2024-09-04 18:31:41,108 - stack ['$10load_attr.3', '$full_shape012.4']
2024-09-04 18:31:41,109 - dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=3)
2024-09-04 18:31:41,109 - stack ['$10load_attr.3', '$full_shape012.4', '$14load_global.5']
2024-09-04 18:31:41,109 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=3)
2024-09-04 18:31:41,109 - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6']
2024-09-04 18:31:41,109 - dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=3)
2024-09-04 18:31:41,109 - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6', '$const18.7']
2024-09-04 18:31:41,109 - dispatch pc=22, inst=STORE_FAST(arg=2, lineno=3)
2024-09-04 18:31:41,109 - stack ['$20call_function_kw.8']
2024-09-04 18:31:41,109 - dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=4)
2024-09-04 18:31:41,109 - stack []
2024-09-04 18:31:41,110 - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=4)
2024-09-04 18:31:41,110 - stack ['$const24.9']
2024-09-04 18:31:41,110 - dispatch pc=28, inst=LOAD_CONST(arg=0, lineno=4)
2024-09-04 18:31:41,110 - stack ['$const24.9', '$out026.10']
2024-09-04 18:31:41,110 - dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=4)
2024-09-04 18:31:41,110 - stack ['$const24.9', '$out026.10', '$const28.11']
2024-09-04 18:31:41,110 - dispatch pc=32, inst=BUILD_SLICE(arg=2, lineno=4)
2024-09-04 18:31:41,110 - stack ['$const24.9', '$out026.10', '$const28.11', '$const30.12']
2024-09-04 18:31:41,110 - dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=4)
2024-09-04 18:31:41,110 - stack ['$const24.9', '$out026.10', '$32build_slice.14']
2024-09-04 18:31:41,110 - dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=5)
2024-09-04 18:31:41,111 - stack []
2024-09-04 18:31:41,111 - dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=5)
2024-09-04 18:31:41,111 - stack ['$const36.15']
2024-09-04 18:31:41,111 - dispatch pc=40, inst=LOAD_CONST(arg=4, lineno=5)
2024-09-04 18:31:41,111 - stack ['$const36.15', '$out038.16']
2024-09-04 18:31:41,111 - dispatch pc=42, inst=LOAD_CONST(arg=0, lineno=5)
2024-09-04 18:31:41,111 - stack ['$const36.15', '$out038.16', '$const40.17']
2024-09-04 18:31:41,111 - dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=5)
2024-09-04 18:31:41,111 - stack ['$const36.15', '$out038.16', '$const40.17', '$const42.18']
2024-09-04 18:31:41,111 - dispatch pc=46, inst=STORE_SUBSCR(arg=None, lineno=5)
2024-09-04 18:31:41,111 - stack ['$const36.15', '$out038.16', '$44build_slice.20']
2024-09-04 18:31:41,112 - dispatch pc=48, inst=LOAD_GLOBAL(arg=4, lineno=6)
2024-09-04 18:31:41,112 - stack []
2024-09-04 18:31:41,112 - dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=6)
2024-09-04 18:31:41,112 - stack ['$48load_global.21']
2024-09-04 18:31:41,112 - dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:41,112 - stack ['$48load_global.21', '$50load_global.22']
2024-09-04 18:31:41,112 - dispatch pc=54, inst=LOAD_CONST(arg=4, lineno=6)
2024-09-04 18:31:41,112 - stack ['$48load_global.21', '$50load_global.22', '$const52.23']
2024-09-04 18:31:41,112 - dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:41,112 - stack ['$48load_global.21', '$50load_global.22', '$const52.23', '$const54.24']
2024-09-04 18:31:41,112 - dispatch pc=58, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2024-09-04 18:31:41,113 - stack ['$48load_global.21', '$56call_function.25']
2024-09-04 18:31:41,113 - dispatch pc=60, inst=LOAD_FAST(arg=1, lineno=6)
2024-09-04 18:31:41,113 - stack ['$48load_global.21', '$58unary_negative.26']
2024-09-04 18:31:41,113 - dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:41,113 - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27']
2024-09-04 18:31:41,113 - dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=6)
2024-09-04 18:31:41,113 - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27', '$const62.28']
2024-09-04 18:31:41,113 - dispatch pc=66, inst=LOAD_GLOBAL(arg=6, lineno=6)
2024-09-04 18:31:41,113 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29']
2024-09-04 18:31:41,113 - dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:41,113 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30']
2024-09-04 18:31:41,113 - dispatch pc=70, inst=LOAD_CONST(arg=3, lineno=6)
2024-09-04 18:31:41,113 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31']
2024-09-04 18:31:41,113 - dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:41,114 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31', '$const70.32']
2024-09-04 18:31:41,114 - dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=6)
2024-09-04 18:31:41,114 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$72call_function.33']
2024-09-04 18:31:41,114 - dispatch pc=76, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:41,114 - stack ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34']
2024-09-04 18:31:41,114 - dispatch pc=78, inst=GET_ITER(arg=None, lineno=6)
2024-09-04 18:31:41,114 - stack ['$76call_function.35']
2024-09-04 18:31:41,114 - end state. edges=[Edge(pc=80, stack=('$78get_iter.36',), blockstack=(), npush=0)]
2024-09-04 18:31:41,114 - pending: deque([State(pc_initial=80 nstack_initial=1)])
2024-09-04 18:31:41,114 - stack: ['$phi80.0']
2024-09-04 18:31:41,114 - state.pc_initial: State(pc_initial=80 nstack_initial=1)
2024-09-04 18:31:41,115 - dispatch pc=80, inst=FOR_ITER(arg=4, lineno=6)
2024-09-04 18:31:41,115 - stack ['$phi80.0']
2024-09-04 18:31:41,115 - end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
2024-09-04 18:31:41,115 - pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=82 nstack_initial=2)])
2024-09-04 18:31:41,115 - stack: []
2024-09-04 18:31:41,115 - state.pc_initial: State(pc_initial=90 nstack_initial=0)
2024-09-04 18:31:41,115 - dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=8)
2024-09-04 18:31:41,115 - stack []
2024-09-04 18:31:41,115 - dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=8)
2024-09-04 18:31:41,115 - stack ['$out090.0']
2024-09-04 18:31:41,115 - end state. edges=[]
2024-09-04 18:31:41,116 - pending: deque([State(pc_initial=82 nstack_initial=2)])
2024-09-04 18:31:41,116 - stack: ['$phi82.0', '$phi82.1']
2024-09-04 18:31:41,116 - state.pc_initial: State(pc_initial=82 nstack_initial=2)
2024-09-04 18:31:41,116 - dispatch pc=82, inst=STORE_FAST(arg=3, lineno=6)
2024-09-04 18:31:41,116 - stack ['$phi82.0', '$phi82.1']
2024-09-04 18:31:41,116 - dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=7)
2024-09-04 18:31:41,116 - stack ['$phi82.0']
2024-09-04 18:31:41,116 - dispatch pc=86, inst=STORE_FAST(arg=4, lineno=7)
2024-09-04 18:31:41,116 - stack ['$phi82.0', '$const84.2']
2024-09-04 18:31:41,116 - dispatch pc=88, inst=JUMP_ABSOLUTE(arg=41, lineno=7)
2024-09-04 18:31:41,116 - stack ['$phi82.0']
2024-09-04 18:31:41,116 - end state. edges=[Edge(pc=80, stack=('$phi82.0',), blockstack=(), npush=0)]
2024-09-04 18:31:41,117 - pending: deque([State(pc_initial=80 nstack_initial=1)])
2024-09-04 18:31:41,117 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:41,117 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=82 nstack_initial=2): {'$phi82.1'},
             State(pc_initial=90 nstack_initial=0): set()})
2024-09-04 18:31:41,117 - defmap: {'$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi82.1': State(pc_initial=80 nstack_initial=1)}
2024-09-04 18:31:41,117 - phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=2))},
             '$phi82.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:41,117 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:41,118 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:41,118 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:41,118 - keep phismap: {'$phi80.0': {('$78get_iter.36', State(pc_initial=0 nstack_initial=0))},
 '$phi82.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
2024-09-04 18:31:41,118 - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.36'},
             State(pc_initial=80 nstack_initial=1): {'$phi82.1': '$80for_iter.2'}})
2024-09-04 18:31:41,118 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:41,118 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_global.2'}), (10, {'item': '$8load_global.2', 'res': '$10load_attr.3'}), (12, {'res': '$full_shape012.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$10load_attr.3', 'args': ['$full_shape012.4', '$16load_attr.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$out026.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$const30.12'}), (32, {'start': '$const28.11', 'stop': '$const30.12', 'step': None, 'res': '$32build_slice.14', 'slicevar': '$32build_slice.13'}), (34, {'target': '$out026.10', 'index': '$32build_slice.14', 'value': '$const24.9'}), (36, {'res': '$const36.15'}), (38, {'res': '$out038.16'}), (40, {'res': '$const40.17'}), (42, {'res': '$const42.18'}), (44, {'start': '$const40.17', 'stop': '$const42.18', 'step': None, 'res': '$44build_slice.20', 'slicevar': '$44build_slice.19'}), (46, {'target': '$out038.16', 'index': '$44build_slice.20', 'value': '$const36.15'}), (48, {'res': '$48load_global.21'}), (50, {'res': '$50load_global.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$50load_global.22', 'args': ['$const52.23', '$const54.24'], 'res': '$56call_function.25'}), (58, {'value': '$56call_function.25', 'res': '$58unary_negative.26'}), (60, {'res': '$full_shape060.27'}), (62, {'res': '$const62.28'}), (64, {'index': '$const62.28', 'target': '$full_shape060.27', 'res': '$64binary_subscr.29'}), (66, {'res': '$66load_global.30'}), (68, {'res': '$const68.31'}), (70, {'res': '$const70.32'}), (72, {'func': '$66load_global.30', 'args': ['$const68.31', '$const70.32'], 'res': '$72call_function.33'}), (74, {'lhs': '$64binary_subscr.29', 'rhs': '$72call_function.33', 'res': '$74binary_subtract.34'}), (76, {'func': '$48load_global.21', 'args': ['$58unary_negative.26', '$74binary_subtract.34'], 'res': '$76call_function.35'}), (78, {'value': '$76call_function.35', 'res': '$78get_iter.36'})), outgoing_phis={'$phi80.0': '$78get_iter.36'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.36',)})
2024-09-04 18:31:41,119 - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi82.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 82: ('$phi80.0', '$80for_iter.2')})
2024-09-04 18:31:41,119 - block_infos State(pc_initial=82 nstack_initial=2):
AdaptBlockInfo(insts=((82, {'value': '$phi82.1'}), (84, {'res': '$const84.2'}), (86, {'value': '$const84.2'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi82.0',)})
2024-09-04 18:31:41,119 - block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$out090.0'}), (92, {'retval': '$out090.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:41,121 - label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $8load_global.2 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$8load_global.2']
    $10load_attr.3 = getattr(value=$8load_global.2, attr=empty) ['$10load_attr.3', '$8load_global.2']
    $14load_global.5 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=bool_) ['$14load_global.5', '$16load_attr.6']
    out0 = call $10load_attr.3(full_shape0, func=$10load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6, <string>:3))], vararg=None, varkwarg=None, target=None) ['$10load_attr.3', '$16load_attr.6', 'full_shape0', 'out0']
    $const24.9 = const(int, 0)               ['$const24.9']
    $const28.11 = const(NoneType, None)      ['$const28.11']
    $const30.12 = const(int, 1)              ['$const30.12']
    $32build_slice.13 = global(slice: <class 'slice'>) ['$32build_slice.13']
    $32build_slice.14 = call $32build_slice.13($const28.11, $const30.12, func=$32build_slice.13, args=(Var($const28.11, <string>:4), Var($const30.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$32build_slice.13', '$32build_slice.14', '$const28.11', '$const30.12']
    out0[$32build_slice.14] = $const24.9     ['$32build_slice.14', '$const24.9', 'out0']
    $const36.15 = const(int, 0)              ['$const36.15']
    $const40.17 = const(int, -1)             ['$const40.17']
    $const42.18 = const(NoneType, None)      ['$const42.18']
    $44build_slice.19 = global(slice: <class 'slice'>) ['$44build_slice.19']
    $44build_slice.20 = call $44build_slice.19($const40.17, $const42.18, func=$44build_slice.19, args=(Var($const40.17, <string>:5), Var($const42.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$44build_slice.19', '$44build_slice.20', '$const40.17', '$const42.18']
    out0[$44build_slice.20] = $const36.15    ['$44build_slice.20', '$const36.15', 'out0']
    $48load_global.21 = global(range: <class 'range'>) ['$48load_global.21']
    $50load_global.22 = global(min: <built-in function min>) ['$50load_global.22']
    $const52.23 = const(int, 0)              ['$const52.23']
    $const54.24 = const(int, -1)             ['$const54.24']
    $56call_function.25 = call $50load_global.22($const52.23, $const54.24, func=$50load_global.22, args=[Var($const52.23, <string>:6), Var($const54.24, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.22', '$56call_function.25', '$const52.23', '$const54.24']
    $58unary_negative.26 = unary(fn=<built-in function neg>, value=$56call_function.25) ['$56call_function.25', '$58unary_negative.26']
    $const62.28 = const(int, 0)              ['$const62.28']
    $64binary_subscr.29 = getitem(value=full_shape0, index=$const62.28, fn=<built-in function getitem>) ['$64binary_subscr.29', '$const62.28', 'full_shape0']
    $66load_global.30 = global(max: <built-in function max>) ['$66load_global.30']
    $const68.31 = const(int, 0)              ['$const68.31']
    $const70.32 = const(int, 1)              ['$const70.32']
    $72call_function.33 = call $66load_global.30($const68.31, $const70.32, func=$66load_global.30, args=[Var($const68.31, <string>:6), Var($const70.32, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.30', '$72call_function.33', '$const68.31', '$const70.32']
    $74binary_subtract.34 = $64binary_subscr.29 - $72call_function.33 ['$64binary_subscr.29', '$72call_function.33', '$74binary_subtract.34']
    $76call_function.35 = call $48load_global.21($58unary_negative.26, $74binary_subtract.34, func=$48load_global.21, args=[Var($58unary_negative.26, <string>:6), Var($74binary_subtract.34, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34', '$76call_function.35']
    $78get_iter.36 = getiter(value=$76call_function.35) ['$76call_function.35', '$78get_iter.36']
    $phi80.0 = $78get_iter.36                ['$78get_iter.36', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi82.1 = $80for_iter.2                 ['$80for_iter.2', '$phi82.1']
    branch $80for_iter.3, 82, 90             ['$80for_iter.3']
label 82:
    index00 = $phi82.1                       ['$phi82.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 80                                  []
label 90:
    $92return_value.1 = cast(value=out0)     ['$92return_value.1', 'out0']
    return $92return_value.1                 ['$92return_value.1']

2024-09-04 18:31:41,144 - ==== SSA block analysis pass on 0
2024-09-04 18:31:41,144 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431369A980>
2024-09-04 18:31:41,144 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:41,144 - on stmt: full_shape0 = getattr(value=x, attr=shape)
2024-09-04 18:31:41,144 - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:41,145 - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2024-09-04 18:31:41,145 - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:41,145 - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2024-09-04 18:31:41,145 - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:41,145 - on stmt: $const24.9.1 = const(int, 0)
2024-09-04 18:31:41,145 - on stmt: $const28.11.1 = const(NoneType, None)
2024-09-04 18:31:41,145 - on stmt: $const30.12.1 = const(int, 1)
2024-09-04 18:31:41,145 - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:41,145 - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:41,146 - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2024-09-04 18:31:41,146 - on stmt: $const36.15.1 = const(int, 0)
2024-09-04 18:31:41,146 - on stmt: $const40.17.1 = const(int, -1)
2024-09-04 18:31:41,146 - on stmt: $const42.18.1 = const(NoneType, None)
2024-09-04 18:31:41,146 - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:41,146 - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:41,146 - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2024-09-04 18:31:41,146 - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2024-09-04 18:31:41,146 - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2024-09-04 18:31:41,146 - on stmt: $const52.23.1 = const(int, 0)
2024-09-04 18:31:41,147 - on stmt: $const54.24.1 = const(int, -1)
2024-09-04 18:31:41,147 - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:41,147 - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2024-09-04 18:31:41,147 - on stmt: $const62.28.1 = const(int, 0)
2024-09-04 18:31:41,147 - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2024-09-04 18:31:41,147 - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2024-09-04 18:31:41,147 - on stmt: $const68.31.1 = const(int, 0)
2024-09-04 18:31:41,147 - on stmt: $const70.32.1 = const(int, 1)
2024-09-04 18:31:41,147 - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:41,148 - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2024-09-04 18:31:41,148 - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:41,148 - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2024-09-04 18:31:41,148 - on stmt: $phi80.0.1 = $78get_iter.36.1
2024-09-04 18:31:41,148 - on stmt: jump 80
2024-09-04 18:31:41,148 - ==== SSA block analysis pass on 80
2024-09-04 18:31:41,148 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431369A980>
2024-09-04 18:31:41,148 - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2024-09-04 18:31:41,148 - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2024-09-04 18:31:41,149 - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2024-09-04 18:31:41,149 - on stmt: $phi82.1.1 = $80for_iter.2.1
2024-09-04 18:31:41,149 - on stmt: branch $80for_iter.3.1, 82, 92
2024-09-04 18:31:41,149 - ==== SSA block analysis pass on 82
2024-09-04 18:31:41,149 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431369A980>
2024-09-04 18:31:41,149 - on stmt: index00 = $phi82.1.1
2024-09-04 18:31:41,149 - on stmt: jump 90
2024-09-04 18:31:41,149 - ==== SSA block analysis pass on 92
2024-09-04 18:31:41,149 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431369A980>
2024-09-04 18:31:41,149 - on stmt: $92return_value.1.1 = cast(value=out0)
2024-09-04 18:31:41,149 - on stmt: return $92return_value.1.1
2024-09-04 18:31:41,149 - ==== SSA block analysis pass on 90
2024-09-04 18:31:41,149 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431369A980>
2024-09-04 18:31:41,150 - on stmt: $const4.1 = const(int, 0)
2024-09-04 18:31:41,150 - on stmt: stencil_index = $const4.1 + index00
2024-09-04 18:31:41,150 - on stmt: $6binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:41,150 - on stmt: $const10.4 = const(int, -1)
2024-09-04 18:31:41,150 - on stmt: stencil_index.1 = $const10.4 + index00
2024-09-04 18:31:41,150 - on stmt: $12binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2024-09-04 18:31:41,150 - on stmt: $14compare_op.6 = $6binary_subscr.2 < $12binary_subscr.5
2024-09-04 18:31:41,150 - on stmt: $const18.8 = const(int, 0)
2024-09-04 18:31:41,150 - on stmt: stencil_index.2 = $const18.8 + index00
2024-09-04 18:31:41,150 - on stmt: $20binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
2024-09-04 18:31:41,151 - on stmt: $const24.11 = const(int, 1)
2024-09-04 18:31:41,151 - on stmt: stencil_index.3 = $const24.11 + index00
2024-09-04 18:31:41,151 - on stmt: $26binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
2024-09-04 18:31:41,151 - on stmt: $28compare_op.13 = $20binary_subscr.9 <= $26binary_subscr.12
2024-09-04 18:31:41,151 - on stmt: $30binary_and.14 = $14compare_op.6 & $28compare_op.13
2024-09-04 18:31:41,151 - on stmt: $32return_value.15 = cast(value=$30binary_and.14)
2024-09-04 18:31:41,151 - on stmt: out0[index00] = $32return_value.15
2024-09-04 18:31:41,151 - on stmt: jump 91
2024-09-04 18:31:41,151 - ==== SSA block analysis pass on 91
2024-09-04 18:31:41,151 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431369A980>
2024-09-04 18:31:41,151 - on stmt: jump 80
2024-09-04 18:31:41,155 - defs defaultdict(<class 'list'>,
            {'$10load_attr.3.1': [(<numba.core.ir.Assign object at 0x00000243136BD690>,
                                   0)],
             '$12binary_subscr.5': [(<numba.core.ir.Assign object at 0x00000243135E9180>,
                                     90)],
             '$14compare_op.6': [(<numba.core.ir.Assign object at 0x000002431368CAC0>,
                                  90)],
             '$14load_global.5.1': [(<numba.core.ir.Assign object at 0x00000243136BD3F0>,
                                     0)],
             '$16load_attr.6.1': [(<numba.core.ir.Assign object at 0x00000243136BD270>,
                                   0)],
             '$20binary_subscr.9': [(<numba.core.ir.Assign object at 0x00000243135E9360>,
                                     90)],
             '$26binary_subscr.12': [(<numba.core.ir.Assign object at 0x00000243135E95A0>,
                                      90)],
             '$28compare_op.13': [(<numba.core.ir.Assign object at 0x00000243136089A0>,
                                   90)],
             '$30binary_and.14': [(<numba.core.ir.Assign object at 0x0000024313608490>,
                                   90)],
             '$32build_slice.13.1': [(<numba.core.ir.Assign object at 0x00000243136BDEA0>,
                                      0)],
             '$32build_slice.14.1': [(<numba.core.ir.Assign object at 0x00000243136BDFC0>,
                                      0)],
             '$32return_value.15': [(<numba.core.ir.Assign object at 0x00000243135EAFB0>,
                                     90)],
             '$44build_slice.19.1': [(<numba.core.ir.Assign object at 0x00000243136BE7A0>,
                                      0)],
             '$44build_slice.20.1': [(<numba.core.ir.Assign object at 0x00000243136BE8C0>,
                                      0)],
             '$48load_global.21.1': [(<numba.core.ir.Assign object at 0x00000243136BEB00>,
                                      0)],
             '$50load_global.22.1': [(<numba.core.ir.Assign object at 0x00000243136BEC80>,
                                      0)],
             '$56call_function.25.1': [(<numba.core.ir.Assign object at 0x00000243136BF160>,
                                        0)],
             '$58unary_negative.26.1': [(<numba.core.ir.Assign object at 0x00000243136BF280>,
                                         0)],
             '$64binary_subscr.29.1': [(<numba.core.ir.Assign object at 0x00000243136BF6D0>,
                                        0)],
             '$66load_global.30.1': [(<numba.core.ir.Assign object at 0x00000243136BF820>,
                                      0)],
             '$6binary_subscr.2': [(<numba.core.ir.Assign object at 0x00000243135E96C0>,
                                    90)],
             '$72call_function.33.1': [(<numba.core.ir.Assign object at 0x00000243136BFD00>,
                                        0)],
             '$74binary_subtract.34.1': [(<numba.core.ir.Assign object at 0x00000243136BFE50>,
                                          0)],
             '$76call_function.35.1': [(<numba.core.ir.Assign object at 0x00000243136B4040>,
                                        0)],
             '$78get_iter.36.1': [(<numba.core.ir.Assign object at 0x00000243136B4160>,
                                   0)],
             '$80for_iter.1.1': [(<numba.core.ir.Assign object at 0x00000243136B4250>,
                                  80)],
             '$80for_iter.2.1': [(<numba.core.ir.Assign object at 0x00000243136B4370>,
                                  80)],
             '$80for_iter.3.1': [(<numba.core.ir.Assign object at 0x00000243136B4490>,
                                  80)],
             '$8load_global.2.1': [(<numba.core.ir.Assign object at 0x00000243136BD810>,
                                    0)],
             '$92return_value.1.1': [(<numba.core.ir.Assign object at 0x00000243136B4DC0>,
                                      92)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x000002431368D2A0>,
                             90)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x000002431368CCA0>,
                             90)],
             '$const24.11': [(<numba.core.ir.Assign object at 0x00000243136098D0>,
                              90)],
             '$const24.9.1': [(<numba.core.ir.Assign object at 0x00000243136BC6D0>,
                               0)],
             '$const28.11.1': [(<numba.core.ir.Assign object at 0x00000243136BCAF0>,
                                0)],
             '$const30.12.1': [(<numba.core.ir.Assign object at 0x00000243136BDD20>,
                                0)],
             '$const36.15.1': [(<numba.core.ir.Assign object at 0x00000243136BE200>,
                                0)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x000002431369E7D0>,
                            90)],
             '$const40.17.1': [(<numba.core.ir.Assign object at 0x00000243136BE4A0>,
                                0)],
             '$const42.18.1': [(<numba.core.ir.Assign object at 0x00000243136BE620>,
                                0)],
             '$const52.23.1': [(<numba.core.ir.Assign object at 0x00000243136BEE00>,
                                0)],
             '$const54.24.1': [(<numba.core.ir.Assign object at 0x00000243136BEF80>,
                                0)],
             '$const62.28.1': [(<numba.core.ir.Assign object at 0x00000243136BF520>,
                                0)],
             '$const68.31.1': [(<numba.core.ir.Assign object at 0x00000243136BF9A0>,
                                0)],
             '$const70.32.1': [(<numba.core.ir.Assign object at 0x00000243136BFB20>,
                                0)],
             '$phi80.0.1': [(<numba.core.ir.Assign object at 0x00000243136BDBD0>,
                             0)],
             '$phi82.1.1': [(<numba.core.ir.Assign object at 0x00000243136BF430>,
                             80)],
             'full_shape0': [(<numba.core.ir.Assign object at 0x00000243136BDAE0>,
                              0)],
             'index00': [(<numba.core.ir.Assign object at 0x00000243136B4760>,
                          82)],
             'out0': [(<numba.core.ir.Assign object at 0x00000243136BC760>, 0)],
             'stencil_index': [(<numba.core.ir.Assign object at 0x00000243135EA290>,
                                90)],
             'stencil_index.1': [(<numba.core.ir.Assign object at 0x00000243135E9120>,
                                  90)],
             'stencil_index.2': [(<numba.core.ir.Assign object at 0x00000243135E92A0>,
                                  90)],
             'stencil_index.3': [(<numba.core.ir.Assign object at 0x00000243135E94E0>,
                                  90)],
             'x': [(<numba.core.ir.Assign object at 0x00000243136BCE20>, 0)]})
2024-09-04 18:31:41,197 - SSA violators <numba.core.utils.OrderedSet object at 0x00000243136B7CA0>
2024-09-04 18:31:41,798 - bytecode dump:
>          0	NOP(arg=None, lineno=1068)
           2	LOAD_GLOBAL(arg=0, lineno=1082)
           4	LOAD_FAST(arg=0, lineno=1082)
           6	CALL_FUNCTION(arg=1, lineno=1082)
           8	LOAD_FAST(arg=1, lineno=1082)
          10	LOAD_CONST(arg=1, lineno=1082)
          12	LOAD_CONST(arg=1, lineno=1082)
          14	BUILD_SLICE(arg=2, lineno=1082)
          16	STORE_SUBSCR(arg=None, lineno=1082)
          18	LOAD_CONST(arg=1, lineno=1082)
          20	RETURN_VALUE(arg=None, lineno=1082)
2024-09-04 18:31:41,798 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:41,798 - stack: []
2024-09-04 18:31:41,798 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:41,798 - dispatch pc=0, inst=NOP(arg=None, lineno=1068)
2024-09-04 18:31:41,798 - stack []
2024-09-04 18:31:41,798 - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1082)
2024-09-04 18:31:41,798 - stack []
2024-09-04 18:31:41,798 - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1082)
2024-09-04 18:31:41,798 - stack ['$2load_global.0']
2024-09-04 18:31:41,798 - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=1082)
2024-09-04 18:31:41,798 - stack ['$2load_global.0', '$x4.1']
2024-09-04 18:31:41,798 - dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=1082)
2024-09-04 18:31:41,798 - stack ['$6call_function.2']
2024-09-04 18:31:41,798 - dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=1082)
2024-09-04 18:31:41,798 - stack ['$6call_function.2', '$y8.3']
2024-09-04 18:31:41,798 - dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=1082)
2024-09-04 18:31:41,798 - stack ['$6call_function.2', '$y8.3', '$const10.4']
2024-09-04 18:31:41,798 - dispatch pc=14, inst=BUILD_SLICE(arg=2, lineno=1082)
2024-09-04 18:31:41,798 - stack ['$6call_function.2', '$y8.3', '$const10.4', '$const12.5']
2024-09-04 18:31:41,798 - dispatch pc=16, inst=STORE_SUBSCR(arg=None, lineno=1082)
2024-09-04 18:31:41,798 - stack ['$6call_function.2', '$y8.3', '$14build_slice.7']
2024-09-04 18:31:41,798 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1082)
2024-09-04 18:31:41,798 - stack []
2024-09-04 18:31:41,798 - dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=1082)
2024-09-04 18:31:41,798 - stack ['$const18.8']
2024-09-04 18:31:41,798 - end state. edges=[]
2024-09-04 18:31:41,806 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:41,806 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 18:31:41,806 - defmap: {}
2024-09-04 18:31:41,806 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:41,806 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:41,806 - keep phismap: {}
2024-09-04 18:31:41,808 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:41,808 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:41,808 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'res': '$y8.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$const12.5'}), (14, {'start': '$const10.4', 'stop': '$const12.5', 'step': None, 'res': '$14build_slice.7', 'slicevar': '$14build_slice.6'}), (16, {'target': '$y8.3', 'index': '$14build_slice.7', 'value': '$6call_function.2'}), (18, {'res': '$const18.8'}), (20, {'retval': '$const18.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:41,808 - label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $2load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x000002431B51D3F0>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1068)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'x']
    $const10.4 = const(NoneType, None)       ['$const10.4']
    $const12.5 = const(NoneType, None)       ['$const12.5']
    $14build_slice.6 = global(slice: <class 'slice'>) ['$14build_slice.6']
    $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1082), Var($const12.5, utils.py:1082)), kws=(), vararg=None, varkwarg=None, target=None) ['$14build_slice.6', '$14build_slice.7', '$const10.4', '$const12.5']
    y[$14build_slice.7] = $6call_function.2  ['$14build_slice.7', '$6call_function.2', 'y']
    $const18.8 = const(NoneType, None)       ['$const18.8']
    $20return_value.9 = cast(value=$const18.8) ['$20return_value.9', '$const18.8']
    return $20return_value.9                 ['$20return_value.9']

2024-09-04 18:31:41,838 - ==== SSA block analysis pass on 0
2024-09-04 18:31:41,838 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431368F2E0>
2024-09-04 18:31:41,838 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:41,838 - on stmt: y = arg(1, name=y)
2024-09-04 18:31:41,838 - on stmt: $2load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x000002431B51D3F0>)
2024-09-04 18:31:41,838 - on stmt: $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1068)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:41,838 - on stmt: $const10.4 = const(NoneType, None)
2024-09-04 18:31:41,846 - on stmt: $const12.5 = const(NoneType, None)
2024-09-04 18:31:41,846 - on stmt: $14build_slice.6 = global(slice: <class 'slice'>)
2024-09-04 18:31:41,848 - on stmt: $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1082), Var($const12.5, utils.py:1082)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:41,848 - on stmt: y[slice(None, None, None)] = $6call_function.2
2024-09-04 18:31:41,849 - on stmt: $const18.8 = const(NoneType, None)
2024-09-04 18:31:41,849 - on stmt: $20return_value.9 = cast(value=$const18.8)
2024-09-04 18:31:41,850 - on stmt: return $20return_value.9
2024-09-04 18:31:41,852 - defs defaultdict(<class 'list'>,
            {'$14build_slice.6': [(<numba.core.ir.Assign object at 0x0000024313A4F0A0>,
                                   0)],
             '$14build_slice.7': [(<numba.core.ir.Assign object at 0x0000024313A4F1C0>,
                                   0)],
             '$20return_value.9': [(<numba.core.ir.Assign object at 0x0000024313A4F580>,
                                    0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x0000024313A4E860>,
                                  0)],
             '$6call_function.2': [(<numba.core.ir.Assign object at 0x0000024313A4EB60>,
                                    0)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x0000024313A4EDA0>,
                             0)],
             '$const12.5': [(<numba.core.ir.Assign object at 0x0000024313A4EF20>,
                             0)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x0000024313A4F400>,
                             0)],
             'x': [(<numba.core.ir.Assign object at 0x0000024313A4DFF0>, 0)],
             'y': [(<numba.core.ir.Assign object at 0x0000024313A4DD80>, 0)]})
2024-09-04 18:31:41,852 - SSA violators <numba.core.utils.OrderedSet object at 0x000002431368F2E0>
2024-09-04 18:31:41,991 - bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=2)
           4	LOAD_ATTR(arg=0, lineno=2)
           6	STORE_FAST(arg=1, lineno=2)
           8	LOAD_GLOBAL(arg=1, lineno=3)
          10	LOAD_ATTR(arg=2, lineno=3)
          12	LOAD_FAST(arg=1, lineno=3)
          14	LOAD_GLOBAL(arg=1, lineno=3)
          16	LOAD_ATTR(arg=3, lineno=3)
          18	LOAD_CONST(arg=1, lineno=3)
          20	CALL_FUNCTION_KW(arg=2, lineno=3)
          22	STORE_FAST(arg=2, lineno=3)
          24	LOAD_CONST(arg=2, lineno=4)
          26	LOAD_FAST(arg=2, lineno=4)
          28	LOAD_CONST(arg=0, lineno=4)
          30	LOAD_CONST(arg=3, lineno=4)
          32	BUILD_SLICE(arg=2, lineno=4)
          34	STORE_SUBSCR(arg=None, lineno=4)
          36	LOAD_CONST(arg=2, lineno=5)
          38	LOAD_FAST(arg=2, lineno=5)
          40	LOAD_CONST(arg=4, lineno=5)
          42	LOAD_CONST(arg=0, lineno=5)
          44	BUILD_SLICE(arg=2, lineno=5)
          46	STORE_SUBSCR(arg=None, lineno=5)
          48	LOAD_GLOBAL(arg=4, lineno=6)
          50	LOAD_GLOBAL(arg=5, lineno=6)
          52	LOAD_CONST(arg=2, lineno=6)
          54	LOAD_CONST(arg=4, lineno=6)
          56	CALL_FUNCTION(arg=2, lineno=6)
          58	UNARY_NEGATIVE(arg=None, lineno=6)
          60	LOAD_FAST(arg=1, lineno=6)
          62	LOAD_CONST(arg=2, lineno=6)
          64	BINARY_SUBSCR(arg=None, lineno=6)
          66	LOAD_GLOBAL(arg=6, lineno=6)
          68	LOAD_CONST(arg=2, lineno=6)
          70	LOAD_CONST(arg=3, lineno=6)
          72	CALL_FUNCTION(arg=2, lineno=6)
          74	BINARY_SUBTRACT(arg=None, lineno=6)
          76	CALL_FUNCTION(arg=2, lineno=6)
          78	GET_ITER(arg=None, lineno=6)
>         80	FOR_ITER(arg=4, lineno=6)
          82	STORE_FAST(arg=3, lineno=6)
          84	LOAD_CONST(arg=2, lineno=7)
          86	STORE_FAST(arg=4, lineno=7)
          88	JUMP_ABSOLUTE(arg=41, lineno=7)
>         90	LOAD_FAST(arg=2, lineno=8)
          92	RETURN_VALUE(arg=None, lineno=8)
2024-09-04 18:31:41,991 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:41,991 - stack: []
2024-09-04 18:31:41,991 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:41,991 - dispatch pc=0, inst=NOP(arg=None, lineno=1)
2024-09-04 18:31:41,991 - stack []
2024-09-04 18:31:41,991 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2)
2024-09-04 18:31:41,991 - stack []
2024-09-04 18:31:41,991 - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2)
2024-09-04 18:31:41,991 - stack ['$x2.0']
2024-09-04 18:31:41,991 - dispatch pc=6, inst=STORE_FAST(arg=1, lineno=2)
2024-09-04 18:31:41,991 - stack ['$4load_attr.1']
2024-09-04 18:31:41,991 - dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=3)
2024-09-04 18:31:41,991 - stack []
2024-09-04 18:31:41,991 - dispatch pc=10, inst=LOAD_ATTR(arg=2, lineno=3)
2024-09-04 18:31:41,991 - stack ['$8load_global.2']
2024-09-04 18:31:41,991 - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=3)
2024-09-04 18:31:41,991 - stack ['$10load_attr.3']
2024-09-04 18:31:41,991 - dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=3)
2024-09-04 18:31:41,991 - stack ['$10load_attr.3', '$full_shape012.4']
2024-09-04 18:31:41,991 - dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=3)
2024-09-04 18:31:41,991 - stack ['$10load_attr.3', '$full_shape012.4', '$14load_global.5']
2024-09-04 18:31:41,998 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=3)
2024-09-04 18:31:41,998 - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6']
2024-09-04 18:31:41,999 - dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=3)
2024-09-04 18:31:42,000 - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6', '$const18.7']
2024-09-04 18:31:42,000 - dispatch pc=22, inst=STORE_FAST(arg=2, lineno=3)
2024-09-04 18:31:42,001 - stack ['$20call_function_kw.8']
2024-09-04 18:31:42,001 - dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=4)
2024-09-04 18:31:42,001 - stack []
2024-09-04 18:31:42,002 - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=4)
2024-09-04 18:31:42,002 - stack ['$const24.9']
2024-09-04 18:31:42,002 - dispatch pc=28, inst=LOAD_CONST(arg=0, lineno=4)
2024-09-04 18:31:42,002 - stack ['$const24.9', '$out026.10']
2024-09-04 18:31:42,003 - dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=4)
2024-09-04 18:31:42,003 - stack ['$const24.9', '$out026.10', '$const28.11']
2024-09-04 18:31:42,003 - dispatch pc=32, inst=BUILD_SLICE(arg=2, lineno=4)
2024-09-04 18:31:42,003 - stack ['$const24.9', '$out026.10', '$const28.11', '$const30.12']
2024-09-04 18:31:42,003 - dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=4)
2024-09-04 18:31:42,003 - stack ['$const24.9', '$out026.10', '$32build_slice.14']
2024-09-04 18:31:42,003 - dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=5)
2024-09-04 18:31:42,003 - stack []
2024-09-04 18:31:42,003 - dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=5)
2024-09-04 18:31:42,003 - stack ['$const36.15']
2024-09-04 18:31:42,003 - dispatch pc=40, inst=LOAD_CONST(arg=4, lineno=5)
2024-09-04 18:31:42,003 - stack ['$const36.15', '$out038.16']
2024-09-04 18:31:42,003 - dispatch pc=42, inst=LOAD_CONST(arg=0, lineno=5)
2024-09-04 18:31:42,003 - stack ['$const36.15', '$out038.16', '$const40.17']
2024-09-04 18:31:42,003 - dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=5)
2024-09-04 18:31:42,003 - stack ['$const36.15', '$out038.16', '$const40.17', '$const42.18']
2024-09-04 18:31:42,003 - dispatch pc=46, inst=STORE_SUBSCR(arg=None, lineno=5)
2024-09-04 18:31:42,003 - stack ['$const36.15', '$out038.16', '$44build_slice.20']
2024-09-04 18:31:42,003 - dispatch pc=48, inst=LOAD_GLOBAL(arg=4, lineno=6)
2024-09-04 18:31:42,003 - stack []
2024-09-04 18:31:42,003 - dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=6)
2024-09-04 18:31:42,008 - stack ['$48load_global.21']
2024-09-04 18:31:42,008 - dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:42,008 - stack ['$48load_global.21', '$50load_global.22']
2024-09-04 18:31:42,009 - dispatch pc=54, inst=LOAD_CONST(arg=4, lineno=6)
2024-09-04 18:31:42,009 - stack ['$48load_global.21', '$50load_global.22', '$const52.23']
2024-09-04 18:31:42,009 - dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:42,009 - stack ['$48load_global.21', '$50load_global.22', '$const52.23', '$const54.24']
2024-09-04 18:31:42,010 - dispatch pc=58, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2024-09-04 18:31:42,010 - stack ['$48load_global.21', '$56call_function.25']
2024-09-04 18:31:42,010 - dispatch pc=60, inst=LOAD_FAST(arg=1, lineno=6)
2024-09-04 18:31:42,010 - stack ['$48load_global.21', '$58unary_negative.26']
2024-09-04 18:31:42,010 - dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:42,010 - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27']
2024-09-04 18:31:42,010 - dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=6)
2024-09-04 18:31:42,010 - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27', '$const62.28']
2024-09-04 18:31:42,010 - dispatch pc=66, inst=LOAD_GLOBAL(arg=6, lineno=6)
2024-09-04 18:31:42,012 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29']
2024-09-04 18:31:42,012 - dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:42,012 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30']
2024-09-04 18:31:42,012 - dispatch pc=70, inst=LOAD_CONST(arg=3, lineno=6)
2024-09-04 18:31:42,012 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31']
2024-09-04 18:31:42,012 - dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:42,012 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31', '$const70.32']
2024-09-04 18:31:42,012 - dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=6)
2024-09-04 18:31:42,012 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$72call_function.33']
2024-09-04 18:31:42,012 - dispatch pc=76, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:42,012 - stack ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34']
2024-09-04 18:31:42,012 - dispatch pc=78, inst=GET_ITER(arg=None, lineno=6)
2024-09-04 18:31:42,012 - stack ['$76call_function.35']
2024-09-04 18:31:42,012 - end state. edges=[Edge(pc=80, stack=('$78get_iter.36',), blockstack=(), npush=0)]
2024-09-04 18:31:42,012 - pending: deque([State(pc_initial=80 nstack_initial=1)])
2024-09-04 18:31:42,012 - stack: ['$phi80.0']
2024-09-04 18:31:42,012 - state.pc_initial: State(pc_initial=80 nstack_initial=1)
2024-09-04 18:31:42,012 - dispatch pc=80, inst=FOR_ITER(arg=4, lineno=6)
2024-09-04 18:31:42,012 - stack ['$phi80.0']
2024-09-04 18:31:42,018 - end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
2024-09-04 18:31:42,018 - pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=82 nstack_initial=2)])
2024-09-04 18:31:42,018 - stack: []
2024-09-04 18:31:42,019 - state.pc_initial: State(pc_initial=90 nstack_initial=0)
2024-09-04 18:31:42,019 - dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=8)
2024-09-04 18:31:42,019 - stack []
2024-09-04 18:31:42,019 - dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=8)
2024-09-04 18:31:42,020 - stack ['$out090.0']
2024-09-04 18:31:42,020 - end state. edges=[]
2024-09-04 18:31:42,020 - pending: deque([State(pc_initial=82 nstack_initial=2)])
2024-09-04 18:31:42,020 - stack: ['$phi82.0', '$phi82.1']
2024-09-04 18:31:42,020 - state.pc_initial: State(pc_initial=82 nstack_initial=2)
2024-09-04 18:31:42,020 - dispatch pc=82, inst=STORE_FAST(arg=3, lineno=6)
2024-09-04 18:31:42,020 - stack ['$phi82.0', '$phi82.1']
2024-09-04 18:31:42,020 - dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=7)
2024-09-04 18:31:42,020 - stack ['$phi82.0']
2024-09-04 18:31:42,022 - dispatch pc=86, inst=STORE_FAST(arg=4, lineno=7)
2024-09-04 18:31:42,022 - stack ['$phi82.0', '$const84.2']
2024-09-04 18:31:42,022 - dispatch pc=88, inst=JUMP_ABSOLUTE(arg=41, lineno=7)
2024-09-04 18:31:42,022 - stack ['$phi82.0']
2024-09-04 18:31:42,022 - end state. edges=[Edge(pc=80, stack=('$phi82.0',), blockstack=(), npush=0)]
2024-09-04 18:31:42,022 - pending: deque([State(pc_initial=80 nstack_initial=1)])
2024-09-04 18:31:42,022 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:42,022 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=82 nstack_initial=2): {'$phi82.1'},
             State(pc_initial=90 nstack_initial=0): set()})
2024-09-04 18:31:42,022 - defmap: {'$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi82.1': State(pc_initial=80 nstack_initial=1)}
2024-09-04 18:31:42,022 - phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=2))},
             '$phi82.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:42,022 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:42,022 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:42,022 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:42,022 - keep phismap: {'$phi80.0': {('$78get_iter.36', State(pc_initial=0 nstack_initial=0))},
 '$phi82.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
2024-09-04 18:31:42,022 - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.36'},
             State(pc_initial=80 nstack_initial=1): {'$phi82.1': '$80for_iter.2'}})
2024-09-04 18:31:42,028 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:42,028 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_global.2'}), (10, {'item': '$8load_global.2', 'res': '$10load_attr.3'}), (12, {'res': '$full_shape012.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$10load_attr.3', 'args': ['$full_shape012.4', '$16load_attr.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$out026.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$const30.12'}), (32, {'start': '$const28.11', 'stop': '$const30.12', 'step': None, 'res': '$32build_slice.14', 'slicevar': '$32build_slice.13'}), (34, {'target': '$out026.10', 'index': '$32build_slice.14', 'value': '$const24.9'}), (36, {'res': '$const36.15'}), (38, {'res': '$out038.16'}), (40, {'res': '$const40.17'}), (42, {'res': '$const42.18'}), (44, {'start': '$const40.17', 'stop': '$const42.18', 'step': None, 'res': '$44build_slice.20', 'slicevar': '$44build_slice.19'}), (46, {'target': '$out038.16', 'index': '$44build_slice.20', 'value': '$const36.15'}), (48, {'res': '$48load_global.21'}), (50, {'res': '$50load_global.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$50load_global.22', 'args': ['$const52.23', '$const54.24'], 'res': '$56call_function.25'}), (58, {'value': '$56call_function.25', 'res': '$58unary_negative.26'}), (60, {'res': '$full_shape060.27'}), (62, {'res': '$const62.28'}), (64, {'index': '$const62.28', 'target': '$full_shape060.27', 'res': '$64binary_subscr.29'}), (66, {'res': '$66load_global.30'}), (68, {'res': '$const68.31'}), (70, {'res': '$const70.32'}), (72, {'func': '$66load_global.30', 'args': ['$const68.31', '$const70.32'], 'res': '$72call_function.33'}), (74, {'lhs': '$64binary_subscr.29', 'rhs': '$72call_function.33', 'res': '$74binary_subtract.34'}), (76, {'func': '$48load_global.21', 'args': ['$58unary_negative.26', '$74binary_subtract.34'], 'res': '$76call_function.35'}), (78, {'value': '$76call_function.35', 'res': '$78get_iter.36'})), outgoing_phis={'$phi80.0': '$78get_iter.36'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.36',)})
2024-09-04 18:31:42,029 - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi82.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 82: ('$phi80.0', '$80for_iter.2')})
2024-09-04 18:31:42,029 - block_infos State(pc_initial=82 nstack_initial=2):
AdaptBlockInfo(insts=((82, {'value': '$phi82.1'}), (84, {'res': '$const84.2'}), (86, {'value': '$const84.2'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi82.0',)})
2024-09-04 18:31:42,029 - block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$out090.0'}), (92, {'retval': '$out090.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:42,038 - label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $8load_global.2 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$8load_global.2']
    $10load_attr.3 = getattr(value=$8load_global.2, attr=empty) ['$10load_attr.3', '$8load_global.2']
    $14load_global.5 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=bool_) ['$14load_global.5', '$16load_attr.6']
    out0 = call $10load_attr.3(full_shape0, func=$10load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6, <string>:3))], vararg=None, varkwarg=None, target=None) ['$10load_attr.3', '$16load_attr.6', 'full_shape0', 'out0']
    $const24.9 = const(int, 0)               ['$const24.9']
    $const28.11 = const(NoneType, None)      ['$const28.11']
    $const30.12 = const(int, 1)              ['$const30.12']
    $32build_slice.13 = global(slice: <class 'slice'>) ['$32build_slice.13']
    $32build_slice.14 = call $32build_slice.13($const28.11, $const30.12, func=$32build_slice.13, args=(Var($const28.11, <string>:4), Var($const30.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$32build_slice.13', '$32build_slice.14', '$const28.11', '$const30.12']
    out0[$32build_slice.14] = $const24.9     ['$32build_slice.14', '$const24.9', 'out0']
    $const36.15 = const(int, 0)              ['$const36.15']
    $const40.17 = const(int, -1)             ['$const40.17']
    $const42.18 = const(NoneType, None)      ['$const42.18']
    $44build_slice.19 = global(slice: <class 'slice'>) ['$44build_slice.19']
    $44build_slice.20 = call $44build_slice.19($const40.17, $const42.18, func=$44build_slice.19, args=(Var($const40.17, <string>:5), Var($const42.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$44build_slice.19', '$44build_slice.20', '$const40.17', '$const42.18']
    out0[$44build_slice.20] = $const36.15    ['$44build_slice.20', '$const36.15', 'out0']
    $48load_global.21 = global(range: <class 'range'>) ['$48load_global.21']
    $50load_global.22 = global(min: <built-in function min>) ['$50load_global.22']
    $const52.23 = const(int, 0)              ['$const52.23']
    $const54.24 = const(int, -1)             ['$const54.24']
    $56call_function.25 = call $50load_global.22($const52.23, $const54.24, func=$50load_global.22, args=[Var($const52.23, <string>:6), Var($const54.24, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.22', '$56call_function.25', '$const52.23', '$const54.24']
    $58unary_negative.26 = unary(fn=<built-in function neg>, value=$56call_function.25) ['$56call_function.25', '$58unary_negative.26']
    $const62.28 = const(int, 0)              ['$const62.28']
    $64binary_subscr.29 = getitem(value=full_shape0, index=$const62.28, fn=<built-in function getitem>) ['$64binary_subscr.29', '$const62.28', 'full_shape0']
    $66load_global.30 = global(max: <built-in function max>) ['$66load_global.30']
    $const68.31 = const(int, 0)              ['$const68.31']
    $const70.32 = const(int, 1)              ['$const70.32']
    $72call_function.33 = call $66load_global.30($const68.31, $const70.32, func=$66load_global.30, args=[Var($const68.31, <string>:6), Var($const70.32, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.30', '$72call_function.33', '$const68.31', '$const70.32']
    $74binary_subtract.34 = $64binary_subscr.29 - $72call_function.33 ['$64binary_subscr.29', '$72call_function.33', '$74binary_subtract.34']
    $76call_function.35 = call $48load_global.21($58unary_negative.26, $74binary_subtract.34, func=$48load_global.21, args=[Var($58unary_negative.26, <string>:6), Var($74binary_subtract.34, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34', '$76call_function.35']
    $78get_iter.36 = getiter(value=$76call_function.35) ['$76call_function.35', '$78get_iter.36']
    $phi80.0 = $78get_iter.36                ['$78get_iter.36', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi82.1 = $80for_iter.2                 ['$80for_iter.2', '$phi82.1']
    branch $80for_iter.3, 82, 90             ['$80for_iter.3']
label 82:
    index00 = $phi82.1                       ['$phi82.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 80                                  []
label 90:
    $92return_value.1 = cast(value=out0)     ['$92return_value.1', 'out0']
    return $92return_value.1                 ['$92return_value.1']

2024-09-04 18:31:42,082 - ==== SSA block analysis pass on 0
2024-09-04 18:31:42,082 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313A42D40>
2024-09-04 18:31:42,082 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:42,082 - on stmt: full_shape0 = getattr(value=x, attr=shape)
2024-09-04 18:31:42,082 - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:42,082 - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2024-09-04 18:31:42,082 - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:42,082 - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2024-09-04 18:31:42,084 - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:42,084 - on stmt: $const24.9.1 = const(int, 0)
2024-09-04 18:31:42,084 - on stmt: $const28.11.1 = const(NoneType, None)
2024-09-04 18:31:42,084 - on stmt: $const30.12.1 = const(int, 1)
2024-09-04 18:31:42,084 - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:42,084 - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:42,085 - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2024-09-04 18:31:42,085 - on stmt: $const36.15.1 = const(int, 0)
2024-09-04 18:31:42,085 - on stmt: $const40.17.1 = const(int, -1)
2024-09-04 18:31:42,086 - on stmt: $const42.18.1 = const(NoneType, None)
2024-09-04 18:31:42,086 - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:42,086 - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:42,086 - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2024-09-04 18:31:42,086 - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2024-09-04 18:31:42,087 - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2024-09-04 18:31:42,087 - on stmt: $const52.23.1 = const(int, 0)
2024-09-04 18:31:42,087 - on stmt: $const54.24.1 = const(int, -1)
2024-09-04 18:31:42,087 - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:42,088 - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2024-09-04 18:31:42,088 - on stmt: $const62.28.1 = const(int, 0)
2024-09-04 18:31:42,089 - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2024-09-04 18:31:42,089 - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2024-09-04 18:31:42,089 - on stmt: $const68.31.1 = const(int, 0)
2024-09-04 18:31:42,090 - on stmt: $const70.32.1 = const(int, 1)
2024-09-04 18:31:42,091 - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:42,091 - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2024-09-04 18:31:42,091 - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:42,091 - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2024-09-04 18:31:42,091 - on stmt: $phi80.0.1 = $78get_iter.36.1
2024-09-04 18:31:42,092 - on stmt: jump 80
2024-09-04 18:31:42,092 - ==== SSA block analysis pass on 80
2024-09-04 18:31:42,092 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313A42D40>
2024-09-04 18:31:42,092 - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2024-09-04 18:31:42,092 - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2024-09-04 18:31:42,092 - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2024-09-04 18:31:42,093 - on stmt: $phi82.1.1 = $80for_iter.2.1
2024-09-04 18:31:42,093 - on stmt: branch $80for_iter.3.1, 82, 92
2024-09-04 18:31:42,093 - ==== SSA block analysis pass on 82
2024-09-04 18:31:42,093 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313A42D40>
2024-09-04 18:31:42,093 - on stmt: index00 = $phi82.1.1
2024-09-04 18:31:42,093 - on stmt: jump 90
2024-09-04 18:31:42,354 - ==== SSA block analysis pass on 92
2024-09-04 18:31:42,354 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313A42D40>
2024-09-04 18:31:42,354 - on stmt: $92return_value.1.1 = cast(value=out0)
2024-09-04 18:31:42,354 - on stmt: return $92return_value.1.1
2024-09-04 18:31:42,354 - ==== SSA block analysis pass on 90
2024-09-04 18:31:42,354 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313A42D40>
2024-09-04 18:31:42,354 - on stmt: $const4.1 = const(int, 0)
2024-09-04 18:31:42,354 - on stmt: stencil_index = $const4.1 + index00
2024-09-04 18:31:42,354 - on stmt: $6binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:42,354 - on stmt: $const10.4 = const(int, -1)
2024-09-04 18:31:42,354 - on stmt: stencil_index.1 = $const10.4 + index00
2024-09-04 18:31:42,354 - on stmt: $12binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2024-09-04 18:31:42,354 - on stmt: $14compare_op.6 = $6binary_subscr.2 < $12binary_subscr.5
2024-09-04 18:31:42,354 - on stmt: $const18.8 = const(int, 0)
2024-09-04 18:31:42,354 - on stmt: stencil_index.2 = $const18.8 + index00
2024-09-04 18:31:42,354 - on stmt: $20binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
2024-09-04 18:31:42,354 - on stmt: $const24.11 = const(int, 1)
2024-09-04 18:31:42,354 - on stmt: stencil_index.3 = $const24.11 + index00
2024-09-04 18:31:42,354 - on stmt: $26binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
2024-09-04 18:31:42,354 - on stmt: $28compare_op.13 = $20binary_subscr.9 <= $26binary_subscr.12
2024-09-04 18:31:42,354 - on stmt: $30binary_and.14 = $14compare_op.6 & $28compare_op.13
2024-09-04 18:31:42,354 - on stmt: $32return_value.15 = cast(value=$30binary_and.14)
2024-09-04 18:31:42,354 - on stmt: out0[index00] = $32return_value.15
2024-09-04 18:31:42,354 - on stmt: jump 91
2024-09-04 18:31:42,354 - ==== SSA block analysis pass on 91
2024-09-04 18:31:42,354 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313A42D40>
2024-09-04 18:31:42,354 - on stmt: jump 80
2024-09-04 18:31:42,363 - defs defaultdict(<class 'list'>,
            {'$10load_attr.3.1': [(<numba.core.ir.Assign object at 0x0000024316C55930>,
                                   0)],
             '$12binary_subscr.5': [(<numba.core.ir.Assign object at 0x0000024316C54430>,
                                     90)],
             '$14compare_op.6': [(<numba.core.ir.Assign object at 0x0000024316C457B0>,
                                  90)],
             '$14load_global.5.1': [(<numba.core.ir.Assign object at 0x0000024316C55540>,
                                     0)],
             '$16load_attr.6.1': [(<numba.core.ir.Assign object at 0x0000024316C553C0>,
                                   0)],
             '$20binary_subscr.9': [(<numba.core.ir.Assign object at 0x0000024316C54670>,
                                     90)],
             '$26binary_subscr.12': [(<numba.core.ir.Assign object at 0x0000024316C548B0>,
                                      90)],
             '$28compare_op.13': [(<numba.core.ir.Assign object at 0x0000024316C48CA0>,
                                   90)],
             '$30binary_and.14': [(<numba.core.ir.Assign object at 0x0000024316C48E80>,
                                   90)],
             '$32build_slice.13.1': [(<numba.core.ir.Assign object at 0x0000024316C565F0>,
                                      0)],
             '$32build_slice.14.1': [(<numba.core.ir.Assign object at 0x0000024316C56710>,
                                      0)],
             '$32return_value.15': [(<numba.core.ir.Assign object at 0x0000024316C49930>,
                                     90)],
             '$44build_slice.19.1': [(<numba.core.ir.Assign object at 0x0000024316C56EF0>,
                                      0)],
             '$44build_slice.20.1': [(<numba.core.ir.Assign object at 0x0000024316C57010>,
                                      0)],
             '$48load_global.21.1': [(<numba.core.ir.Assign object at 0x0000024316C57250>,
                                      0)],
             '$50load_global.22.1': [(<numba.core.ir.Assign object at 0x0000024316C573D0>,
                                      0)],
             '$56call_function.25.1': [(<numba.core.ir.Assign object at 0x0000024316C578B0>,
                                        0)],
             '$58unary_negative.26.1': [(<numba.core.ir.Assign object at 0x0000024316C579D0>,
                                         0)],
             '$64binary_subscr.29.1': [(<numba.core.ir.Assign object at 0x0000024316C57E20>,
                                        0)],
             '$66load_global.30.1': [(<numba.core.ir.Assign object at 0x0000024316C57F70>,
                                      0)],
             '$6binary_subscr.2': [(<numba.core.ir.Assign object at 0x0000024316C541F0>,
                                    90)],
             '$72call_function.33.1': [(<numba.core.ir.Assign object at 0x0000024316C64490>,
                                        0)],
             '$74binary_subtract.34.1': [(<numba.core.ir.Assign object at 0x0000024316C645E0>,
                                          0)],
             '$76call_function.35.1': [(<numba.core.ir.Assign object at 0x0000024316C64790>,
                                        0)],
             '$78get_iter.36.1': [(<numba.core.ir.Assign object at 0x0000024316C648B0>,
                                   0)],
             '$80for_iter.1.1': [(<numba.core.ir.Assign object at 0x0000024316C649A0>,
                                  80)],
             '$80for_iter.2.1': [(<numba.core.ir.Assign object at 0x0000024316C64AC0>,
                                  80)],
             '$80for_iter.3.1': [(<numba.core.ir.Assign object at 0x0000024316C64BE0>,
                                  80)],
             '$8load_global.2.1': [(<numba.core.ir.Assign object at 0x0000024316C55AB0>,
                                    0)],
             '$92return_value.1.1': [(<numba.core.ir.Assign object at 0x0000024316C65510>,
                                      92)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x0000024316C442B0>,
                             90)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x0000024316C45990>,
                             90)],
             '$const24.11': [(<numba.core.ir.Assign object at 0x0000024316C47790>,
                              90)],
             '$const24.9.1': [(<numba.core.ir.Assign object at 0x0000024316C54C70>,
                               0)],
             '$const28.11.1': [(<numba.core.ir.Assign object at 0x0000024316C54940>,
                                0)],
             '$const30.12.1': [(<numba.core.ir.Assign object at 0x0000024316C56470>,
                                0)],
             '$const36.15.1': [(<numba.core.ir.Assign object at 0x0000024316C56950>,
                                0)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x0000024313A651B0>,
                            90)],
             '$const40.17.1': [(<numba.core.ir.Assign object at 0x0000024316C56BF0>,
                                0)],
             '$const42.18.1': [(<numba.core.ir.Assign object at 0x0000024316C56D70>,
                                0)],
             '$const52.23.1': [(<numba.core.ir.Assign object at 0x0000024316C57550>,
                                0)],
             '$const54.24.1': [(<numba.core.ir.Assign object at 0x0000024316C576D0>,
                                0)],
             '$const62.28.1': [(<numba.core.ir.Assign object at 0x0000024316C57C70>,
                                0)],
             '$const68.31.1': [(<numba.core.ir.Assign object at 0x0000024316C64130>,
                                0)],
             '$const70.32.1': [(<numba.core.ir.Assign object at 0x0000024316C642B0>,
                                0)],
             '$phi80.0.1': [(<numba.core.ir.Assign object at 0x0000024316C55E40>,
                             0)],
             '$phi82.1.1': [(<numba.core.ir.Assign object at 0x0000024316C57B80>,
                             80)],
             'full_shape0': [(<numba.core.ir.Assign object at 0x0000024316C55D50>,
                              0)],
             'index00': [(<numba.core.ir.Assign object at 0x0000024316C64EB0>,
                          82)],
             'out0': [(<numba.core.ir.Assign object at 0x0000024316C54DF0>, 0)],
             'stencil_index': [(<numba.core.ir.Assign object at 0x0000024316C4B7C0>,
                                90)],
             'stencil_index.1': [(<numba.core.ir.Assign object at 0x0000024316C54370>,
                                  90)],
             'stencil_index.2': [(<numba.core.ir.Assign object at 0x0000024316C545B0>,
                                  90)],
             'stencil_index.3': [(<numba.core.ir.Assign object at 0x0000024316C547F0>,
                                  90)],
             'x': [(<numba.core.ir.Assign object at 0x0000024316C55FF0>, 0)]})
2024-09-04 18:31:42,363 - SSA violators <numba.core.utils.OrderedSet object at 0x000002431D1E8700>
2024-09-04 18:31:43,277 - bytecode dump:
>          0	NOP(arg=None, lineno=1068)
           2	LOAD_GLOBAL(arg=0, lineno=1082)
           4	LOAD_FAST(arg=0, lineno=1082)
           6	CALL_FUNCTION(arg=1, lineno=1082)
           8	LOAD_FAST(arg=1, lineno=1082)
          10	LOAD_CONST(arg=1, lineno=1082)
          12	LOAD_CONST(arg=1, lineno=1082)
          14	BUILD_SLICE(arg=2, lineno=1082)
          16	STORE_SUBSCR(arg=None, lineno=1082)
          18	LOAD_CONST(arg=1, lineno=1082)
          20	RETURN_VALUE(arg=None, lineno=1082)
2024-09-04 18:31:43,277 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:43,277 - stack: []
2024-09-04 18:31:43,277 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:43,277 - dispatch pc=0, inst=NOP(arg=None, lineno=1068)
2024-09-04 18:31:43,277 - stack []
2024-09-04 18:31:43,277 - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1082)
2024-09-04 18:31:43,277 - stack []
2024-09-04 18:31:43,277 - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1082)
2024-09-04 18:31:43,277 - stack ['$2load_global.0']
2024-09-04 18:31:43,277 - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=1082)
2024-09-04 18:31:43,277 - stack ['$2load_global.0', '$x4.1']
2024-09-04 18:31:43,277 - dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=1082)
2024-09-04 18:31:43,277 - stack ['$6call_function.2']
2024-09-04 18:31:43,277 - dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=1082)
2024-09-04 18:31:43,277 - stack ['$6call_function.2', '$y8.3']
2024-09-04 18:31:43,277 - dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=1082)
2024-09-04 18:31:43,283 - stack ['$6call_function.2', '$y8.3', '$const10.4']
2024-09-04 18:31:43,283 - dispatch pc=14, inst=BUILD_SLICE(arg=2, lineno=1082)
2024-09-04 18:31:43,283 - stack ['$6call_function.2', '$y8.3', '$const10.4', '$const12.5']
2024-09-04 18:31:43,283 - dispatch pc=16, inst=STORE_SUBSCR(arg=None, lineno=1082)
2024-09-04 18:31:43,283 - stack ['$6call_function.2', '$y8.3', '$14build_slice.7']
2024-09-04 18:31:43,284 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1082)
2024-09-04 18:31:43,284 - stack []
2024-09-04 18:31:43,284 - dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=1082)
2024-09-04 18:31:43,284 - stack ['$const18.8']
2024-09-04 18:31:43,284 - end state. edges=[]
2024-09-04 18:31:43,284 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:43,284 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 18:31:43,284 - defmap: {}
2024-09-04 18:31:43,284 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:43,284 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:43,284 - keep phismap: {}
2024-09-04 18:31:43,284 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:43,284 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:43,284 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'res': '$y8.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$const12.5'}), (14, {'start': '$const10.4', 'stop': '$const12.5', 'step': None, 'res': '$14build_slice.7', 'slicevar': '$14build_slice.6'}), (16, {'target': '$y8.3', 'index': '$14build_slice.7', 'value': '$6call_function.2'}), (18, {'res': '$const18.8'}), (20, {'retval': '$const18.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:43,284 - label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $2load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x000002431B51D3F0>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1068)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'x']
    $const10.4 = const(NoneType, None)       ['$const10.4']
    $const12.5 = const(NoneType, None)       ['$const12.5']
    $14build_slice.6 = global(slice: <class 'slice'>) ['$14build_slice.6']
    $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1082), Var($const12.5, utils.py:1082)), kws=(), vararg=None, varkwarg=None, target=None) ['$14build_slice.6', '$14build_slice.7', '$const10.4', '$const12.5']
    y[$14build_slice.7] = $6call_function.2  ['$14build_slice.7', '$6call_function.2', 'y']
    $const18.8 = const(NoneType, None)       ['$const18.8']
    $20return_value.9 = cast(value=$const18.8) ['$20return_value.9', '$const18.8']
    return $20return_value.9                 ['$20return_value.9']

2024-09-04 18:31:43,293 - ==== SSA block analysis pass on 0
2024-09-04 18:31:43,293 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431360A350>
2024-09-04 18:31:43,293 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:43,293 - on stmt: y = arg(1, name=y)
2024-09-04 18:31:43,293 - on stmt: $2load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x000002431B51D3F0>)
2024-09-04 18:31:43,293 - on stmt: $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1068)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:43,293 - on stmt: $const10.4 = const(NoneType, None)
2024-09-04 18:31:43,293 - on stmt: $const12.5 = const(NoneType, None)
2024-09-04 18:31:43,293 - on stmt: $14build_slice.6 = global(slice: <class 'slice'>)
2024-09-04 18:31:43,293 - on stmt: $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1082), Var($const12.5, utils.py:1082)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:43,293 - on stmt: y[slice(None, None, None)] = $6call_function.2
2024-09-04 18:31:43,293 - on stmt: $const18.8 = const(NoneType, None)
2024-09-04 18:31:43,293 - on stmt: $20return_value.9 = cast(value=$const18.8)
2024-09-04 18:31:43,293 - on stmt: return $20return_value.9
2024-09-04 18:31:43,293 - defs defaultdict(<class 'list'>,
            {'$14build_slice.6': [(<numba.core.ir.Assign object at 0x00000243135631C0>,
                                   0)],
             '$14build_slice.7': [(<numba.core.ir.Assign object at 0x0000024313563E50>,
                                   0)],
             '$20return_value.9': [(<numba.core.ir.Assign object at 0x00000243135610F0>,
                                    0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x00000243135635B0>,
                                  0)],
             '$6call_function.2': [(<numba.core.ir.Assign object at 0x0000024313563280>,
                                    0)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x0000024313563370>,
                             0)],
             '$const12.5': [(<numba.core.ir.Assign object at 0x0000024313563070>,
                             0)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x00000243135630D0>,
                             0)],
             'x': [(<numba.core.ir.Assign object at 0x000002431360B3D0>, 0)],
             'y': [(<numba.core.ir.Assign object at 0x00000243131B3460>, 0)]})
2024-09-04 18:31:43,293 - SSA violators <numba.core.utils.OrderedSet object at 0x000002431360A350>
2024-09-04 18:31:43,333 - bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=2)
           4	LOAD_ATTR(arg=0, lineno=2)
           6	STORE_FAST(arg=1, lineno=2)
           8	LOAD_GLOBAL(arg=1, lineno=3)
          10	LOAD_ATTR(arg=2, lineno=3)
          12	LOAD_FAST(arg=1, lineno=3)
          14	LOAD_GLOBAL(arg=1, lineno=3)
          16	LOAD_ATTR(arg=3, lineno=3)
          18	LOAD_CONST(arg=1, lineno=3)
          20	CALL_FUNCTION_KW(arg=2, lineno=3)
          22	STORE_FAST(arg=2, lineno=3)
          24	LOAD_CONST(arg=2, lineno=4)
          26	LOAD_FAST(arg=2, lineno=4)
          28	LOAD_CONST(arg=0, lineno=4)
          30	LOAD_CONST(arg=3, lineno=4)
          32	BUILD_SLICE(arg=2, lineno=4)
          34	STORE_SUBSCR(arg=None, lineno=4)
          36	LOAD_CONST(arg=2, lineno=5)
          38	LOAD_FAST(arg=2, lineno=5)
          40	LOAD_CONST(arg=4, lineno=5)
          42	LOAD_CONST(arg=0, lineno=5)
          44	BUILD_SLICE(arg=2, lineno=5)
          46	STORE_SUBSCR(arg=None, lineno=5)
          48	LOAD_GLOBAL(arg=4, lineno=6)
          50	LOAD_GLOBAL(arg=5, lineno=6)
          52	LOAD_CONST(arg=2, lineno=6)
          54	LOAD_CONST(arg=4, lineno=6)
          56	CALL_FUNCTION(arg=2, lineno=6)
          58	UNARY_NEGATIVE(arg=None, lineno=6)
          60	LOAD_FAST(arg=1, lineno=6)
          62	LOAD_CONST(arg=2, lineno=6)
          64	BINARY_SUBSCR(arg=None, lineno=6)
          66	LOAD_GLOBAL(arg=6, lineno=6)
          68	LOAD_CONST(arg=2, lineno=6)
          70	LOAD_CONST(arg=3, lineno=6)
          72	CALL_FUNCTION(arg=2, lineno=6)
          74	BINARY_SUBTRACT(arg=None, lineno=6)
          76	CALL_FUNCTION(arg=2, lineno=6)
          78	GET_ITER(arg=None, lineno=6)
>         80	FOR_ITER(arg=4, lineno=6)
          82	STORE_FAST(arg=3, lineno=6)
          84	LOAD_CONST(arg=2, lineno=7)
          86	STORE_FAST(arg=4, lineno=7)
          88	JUMP_ABSOLUTE(arg=41, lineno=7)
>         90	LOAD_FAST(arg=2, lineno=8)
          92	RETURN_VALUE(arg=None, lineno=8)
2024-09-04 18:31:43,333 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:43,333 - stack: []
2024-09-04 18:31:43,333 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:43,333 - dispatch pc=0, inst=NOP(arg=None, lineno=1)
2024-09-04 18:31:43,333 - stack []
2024-09-04 18:31:43,333 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2)
2024-09-04 18:31:43,333 - stack []
2024-09-04 18:31:43,333 - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2)
2024-09-04 18:31:43,333 - stack ['$x2.0']
2024-09-04 18:31:43,333 - dispatch pc=6, inst=STORE_FAST(arg=1, lineno=2)
2024-09-04 18:31:43,333 - stack ['$4load_attr.1']
2024-09-04 18:31:43,333 - dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=3)
2024-09-04 18:31:43,333 - stack []
2024-09-04 18:31:43,333 - dispatch pc=10, inst=LOAD_ATTR(arg=2, lineno=3)
2024-09-04 18:31:43,333 - stack ['$8load_global.2']
2024-09-04 18:31:43,333 - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=3)
2024-09-04 18:31:43,333 - stack ['$10load_attr.3']
2024-09-04 18:31:43,333 - dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=3)
2024-09-04 18:31:43,333 - stack ['$10load_attr.3', '$full_shape012.4']
2024-09-04 18:31:43,333 - dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=3)
2024-09-04 18:31:43,333 - stack ['$10load_attr.3', '$full_shape012.4', '$14load_global.5']
2024-09-04 18:31:43,333 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=3)
2024-09-04 18:31:43,333 - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6']
2024-09-04 18:31:43,333 - dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=3)
2024-09-04 18:31:43,333 - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6', '$const18.7']
2024-09-04 18:31:43,333 - dispatch pc=22, inst=STORE_FAST(arg=2, lineno=3)
2024-09-04 18:31:43,333 - stack ['$20call_function_kw.8']
2024-09-04 18:31:43,333 - dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=4)
2024-09-04 18:31:43,333 - stack []
2024-09-04 18:31:43,333 - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=4)
2024-09-04 18:31:43,333 - stack ['$const24.9']
2024-09-04 18:31:43,333 - dispatch pc=28, inst=LOAD_CONST(arg=0, lineno=4)
2024-09-04 18:31:43,333 - stack ['$const24.9', '$out026.10']
2024-09-04 18:31:43,333 - dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=4)
2024-09-04 18:31:43,333 - stack ['$const24.9', '$out026.10', '$const28.11']
2024-09-04 18:31:43,333 - dispatch pc=32, inst=BUILD_SLICE(arg=2, lineno=4)
2024-09-04 18:31:43,333 - stack ['$const24.9', '$out026.10', '$const28.11', '$const30.12']
2024-09-04 18:31:43,333 - dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=4)
2024-09-04 18:31:43,333 - stack ['$const24.9', '$out026.10', '$32build_slice.14']
2024-09-04 18:31:43,333 - dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=5)
2024-09-04 18:31:43,333 - stack []
2024-09-04 18:31:43,333 - dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=5)
2024-09-04 18:31:43,333 - stack ['$const36.15']
2024-09-04 18:31:43,333 - dispatch pc=40, inst=LOAD_CONST(arg=4, lineno=5)
2024-09-04 18:31:43,333 - stack ['$const36.15', '$out038.16']
2024-09-04 18:31:43,333 - dispatch pc=42, inst=LOAD_CONST(arg=0, lineno=5)
2024-09-04 18:31:43,333 - stack ['$const36.15', '$out038.16', '$const40.17']
2024-09-04 18:31:43,333 - dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=5)
2024-09-04 18:31:43,333 - stack ['$const36.15', '$out038.16', '$const40.17', '$const42.18']
2024-09-04 18:31:43,333 - dispatch pc=46, inst=STORE_SUBSCR(arg=None, lineno=5)
2024-09-04 18:31:43,333 - stack ['$const36.15', '$out038.16', '$44build_slice.20']
2024-09-04 18:31:43,333 - dispatch pc=48, inst=LOAD_GLOBAL(arg=4, lineno=6)
2024-09-04 18:31:43,333 - stack []
2024-09-04 18:31:43,333 - dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=6)
2024-09-04 18:31:43,333 - stack ['$48load_global.21']
2024-09-04 18:31:43,333 - dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:43,333 - stack ['$48load_global.21', '$50load_global.22']
2024-09-04 18:31:43,333 - dispatch pc=54, inst=LOAD_CONST(arg=4, lineno=6)
2024-09-04 18:31:43,333 - stack ['$48load_global.21', '$50load_global.22', '$const52.23']
2024-09-04 18:31:43,333 - dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:43,333 - stack ['$48load_global.21', '$50load_global.22', '$const52.23', '$const54.24']
2024-09-04 18:31:43,343 - dispatch pc=58, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2024-09-04 18:31:43,343 - stack ['$48load_global.21', '$56call_function.25']
2024-09-04 18:31:43,343 - dispatch pc=60, inst=LOAD_FAST(arg=1, lineno=6)
2024-09-04 18:31:43,343 - stack ['$48load_global.21', '$58unary_negative.26']
2024-09-04 18:31:43,343 - dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:43,343 - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27']
2024-09-04 18:31:43,343 - dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=6)
2024-09-04 18:31:43,343 - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27', '$const62.28']
2024-09-04 18:31:43,343 - dispatch pc=66, inst=LOAD_GLOBAL(arg=6, lineno=6)
2024-09-04 18:31:43,343 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29']
2024-09-04 18:31:43,343 - dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:43,343 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30']
2024-09-04 18:31:43,344 - dispatch pc=70, inst=LOAD_CONST(arg=3, lineno=6)
2024-09-04 18:31:43,344 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31']
2024-09-04 18:31:43,344 - dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:43,344 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31', '$const70.32']
2024-09-04 18:31:43,344 - dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=6)
2024-09-04 18:31:43,344 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$72call_function.33']
2024-09-04 18:31:43,344 - dispatch pc=76, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:43,344 - stack ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34']
2024-09-04 18:31:43,344 - dispatch pc=78, inst=GET_ITER(arg=None, lineno=6)
2024-09-04 18:31:43,344 - stack ['$76call_function.35']
2024-09-04 18:31:43,344 - end state. edges=[Edge(pc=80, stack=('$78get_iter.36',), blockstack=(), npush=0)]
2024-09-04 18:31:43,344 - pending: deque([State(pc_initial=80 nstack_initial=1)])
2024-09-04 18:31:43,344 - stack: ['$phi80.0']
2024-09-04 18:31:43,344 - state.pc_initial: State(pc_initial=80 nstack_initial=1)
2024-09-04 18:31:43,344 - dispatch pc=80, inst=FOR_ITER(arg=4, lineno=6)
2024-09-04 18:31:43,344 - stack ['$phi80.0']
2024-09-04 18:31:43,344 - end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
2024-09-04 18:31:43,344 - pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=82 nstack_initial=2)])
2024-09-04 18:31:43,344 - stack: []
2024-09-04 18:31:43,344 - state.pc_initial: State(pc_initial=90 nstack_initial=0)
2024-09-04 18:31:43,344 - dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=8)
2024-09-04 18:31:43,344 - stack []
2024-09-04 18:31:43,344 - dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=8)
2024-09-04 18:31:43,344 - stack ['$out090.0']
2024-09-04 18:31:43,344 - end state. edges=[]
2024-09-04 18:31:43,344 - pending: deque([State(pc_initial=82 nstack_initial=2)])
2024-09-04 18:31:43,344 - stack: ['$phi82.0', '$phi82.1']
2024-09-04 18:31:43,344 - state.pc_initial: State(pc_initial=82 nstack_initial=2)
2024-09-04 18:31:43,344 - dispatch pc=82, inst=STORE_FAST(arg=3, lineno=6)
2024-09-04 18:31:43,344 - stack ['$phi82.0', '$phi82.1']
2024-09-04 18:31:43,344 - dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=7)
2024-09-04 18:31:43,344 - stack ['$phi82.0']
2024-09-04 18:31:43,344 - dispatch pc=86, inst=STORE_FAST(arg=4, lineno=7)
2024-09-04 18:31:43,353 - stack ['$phi82.0', '$const84.2']
2024-09-04 18:31:43,353 - dispatch pc=88, inst=JUMP_ABSOLUTE(arg=41, lineno=7)
2024-09-04 18:31:43,353 - stack ['$phi82.0']
2024-09-04 18:31:43,353 - end state. edges=[Edge(pc=80, stack=('$phi82.0',), blockstack=(), npush=0)]
2024-09-04 18:31:43,353 - pending: deque([State(pc_initial=80 nstack_initial=1)])
2024-09-04 18:31:43,353 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:43,353 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=82 nstack_initial=2): {'$phi82.1'},
             State(pc_initial=90 nstack_initial=0): set()})
2024-09-04 18:31:43,353 - defmap: {'$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi82.1': State(pc_initial=80 nstack_initial=1)}
2024-09-04 18:31:43,353 - phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=2))},
             '$phi82.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:43,363 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:43,363 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:43,363 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:43,364 - keep phismap: {'$phi80.0': {('$78get_iter.36', State(pc_initial=0 nstack_initial=0))},
 '$phi82.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
2024-09-04 18:31:43,364 - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.36'},
             State(pc_initial=80 nstack_initial=1): {'$phi82.1': '$80for_iter.2'}})
2024-09-04 18:31:43,364 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:43,364 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_global.2'}), (10, {'item': '$8load_global.2', 'res': '$10load_attr.3'}), (12, {'res': '$full_shape012.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$10load_attr.3', 'args': ['$full_shape012.4', '$16load_attr.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$out026.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$const30.12'}), (32, {'start': '$const28.11', 'stop': '$const30.12', 'step': None, 'res': '$32build_slice.14', 'slicevar': '$32build_slice.13'}), (34, {'target': '$out026.10', 'index': '$32build_slice.14', 'value': '$const24.9'}), (36, {'res': '$const36.15'}), (38, {'res': '$out038.16'}), (40, {'res': '$const40.17'}), (42, {'res': '$const42.18'}), (44, {'start': '$const40.17', 'stop': '$const42.18', 'step': None, 'res': '$44build_slice.20', 'slicevar': '$44build_slice.19'}), (46, {'target': '$out038.16', 'index': '$44build_slice.20', 'value': '$const36.15'}), (48, {'res': '$48load_global.21'}), (50, {'res': '$50load_global.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$50load_global.22', 'args': ['$const52.23', '$const54.24'], 'res': '$56call_function.25'}), (58, {'value': '$56call_function.25', 'res': '$58unary_negative.26'}), (60, {'res': '$full_shape060.27'}), (62, {'res': '$const62.28'}), (64, {'index': '$const62.28', 'target': '$full_shape060.27', 'res': '$64binary_subscr.29'}), (66, {'res': '$66load_global.30'}), (68, {'res': '$const68.31'}), (70, {'res': '$const70.32'}), (72, {'func': '$66load_global.30', 'args': ['$const68.31', '$const70.32'], 'res': '$72call_function.33'}), (74, {'lhs': '$64binary_subscr.29', 'rhs': '$72call_function.33', 'res': '$74binary_subtract.34'}), (76, {'func': '$48load_global.21', 'args': ['$58unary_negative.26', '$74binary_subtract.34'], 'res': '$76call_function.35'}), (78, {'value': '$76call_function.35', 'res': '$78get_iter.36'})), outgoing_phis={'$phi80.0': '$78get_iter.36'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.36',)})
2024-09-04 18:31:43,364 - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi82.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 82: ('$phi80.0', '$80for_iter.2')})
2024-09-04 18:31:43,364 - block_infos State(pc_initial=82 nstack_initial=2):
AdaptBlockInfo(insts=((82, {'value': '$phi82.1'}), (84, {'res': '$const84.2'}), (86, {'value': '$const84.2'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi82.0',)})
2024-09-04 18:31:43,364 - block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$out090.0'}), (92, {'retval': '$out090.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:43,364 - label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $8load_global.2 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$8load_global.2']
    $10load_attr.3 = getattr(value=$8load_global.2, attr=empty) ['$10load_attr.3', '$8load_global.2']
    $14load_global.5 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=bool_) ['$14load_global.5', '$16load_attr.6']
    out0 = call $10load_attr.3(full_shape0, func=$10load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6, <string>:3))], vararg=None, varkwarg=None, target=None) ['$10load_attr.3', '$16load_attr.6', 'full_shape0', 'out0']
    $const24.9 = const(int, 0)               ['$const24.9']
    $const28.11 = const(NoneType, None)      ['$const28.11']
    $const30.12 = const(int, 1)              ['$const30.12']
    $32build_slice.13 = global(slice: <class 'slice'>) ['$32build_slice.13']
    $32build_slice.14 = call $32build_slice.13($const28.11, $const30.12, func=$32build_slice.13, args=(Var($const28.11, <string>:4), Var($const30.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$32build_slice.13', '$32build_slice.14', '$const28.11', '$const30.12']
    out0[$32build_slice.14] = $const24.9     ['$32build_slice.14', '$const24.9', 'out0']
    $const36.15 = const(int, 0)              ['$const36.15']
    $const40.17 = const(int, -1)             ['$const40.17']
    $const42.18 = const(NoneType, None)      ['$const42.18']
    $44build_slice.19 = global(slice: <class 'slice'>) ['$44build_slice.19']
    $44build_slice.20 = call $44build_slice.19($const40.17, $const42.18, func=$44build_slice.19, args=(Var($const40.17, <string>:5), Var($const42.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$44build_slice.19', '$44build_slice.20', '$const40.17', '$const42.18']
    out0[$44build_slice.20] = $const36.15    ['$44build_slice.20', '$const36.15', 'out0']
    $48load_global.21 = global(range: <class 'range'>) ['$48load_global.21']
    $50load_global.22 = global(min: <built-in function min>) ['$50load_global.22']
    $const52.23 = const(int, 0)              ['$const52.23']
    $const54.24 = const(int, -1)             ['$const54.24']
    $56call_function.25 = call $50load_global.22($const52.23, $const54.24, func=$50load_global.22, args=[Var($const52.23, <string>:6), Var($const54.24, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.22', '$56call_function.25', '$const52.23', '$const54.24']
    $58unary_negative.26 = unary(fn=<built-in function neg>, value=$56call_function.25) ['$56call_function.25', '$58unary_negative.26']
    $const62.28 = const(int, 0)              ['$const62.28']
    $64binary_subscr.29 = getitem(value=full_shape0, index=$const62.28, fn=<built-in function getitem>) ['$64binary_subscr.29', '$const62.28', 'full_shape0']
    $66load_global.30 = global(max: <built-in function max>) ['$66load_global.30']
    $const68.31 = const(int, 0)              ['$const68.31']
    $const70.32 = const(int, 1)              ['$const70.32']
    $72call_function.33 = call $66load_global.30($const68.31, $const70.32, func=$66load_global.30, args=[Var($const68.31, <string>:6), Var($const70.32, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.30', '$72call_function.33', '$const68.31', '$const70.32']
    $74binary_subtract.34 = $64binary_subscr.29 - $72call_function.33 ['$64binary_subscr.29', '$72call_function.33', '$74binary_subtract.34']
    $76call_function.35 = call $48load_global.21($58unary_negative.26, $74binary_subtract.34, func=$48load_global.21, args=[Var($58unary_negative.26, <string>:6), Var($74binary_subtract.34, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34', '$76call_function.35']
    $78get_iter.36 = getiter(value=$76call_function.35) ['$76call_function.35', '$78get_iter.36']
    $phi80.0 = $78get_iter.36                ['$78get_iter.36', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi82.1 = $80for_iter.2                 ['$80for_iter.2', '$phi82.1']
    branch $80for_iter.3, 82, 90             ['$80for_iter.3']
label 82:
    index00 = $phi82.1                       ['$phi82.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 80                                  []
label 90:
    $92return_value.1 = cast(value=out0)     ['$92return_value.1', 'out0']
    return $92return_value.1                 ['$92return_value.1']

2024-09-04 18:31:43,418 - ==== SSA block analysis pass on 0
2024-09-04 18:31:43,418 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D1A8BB0>
2024-09-04 18:31:43,418 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:43,418 - on stmt: full_shape0 = getattr(value=x, attr=shape)
2024-09-04 18:31:43,418 - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:43,418 - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2024-09-04 18:31:43,418 - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:43,418 - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2024-09-04 18:31:43,418 - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:43,418 - on stmt: $const24.9.1 = const(int, 0)
2024-09-04 18:31:43,418 - on stmt: $const28.11.1 = const(NoneType, None)
2024-09-04 18:31:43,418 - on stmt: $const30.12.1 = const(int, 1)
2024-09-04 18:31:43,418 - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:43,418 - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:43,418 - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2024-09-04 18:31:43,418 - on stmt: $const36.15.1 = const(int, 0)
2024-09-04 18:31:43,418 - on stmt: $const40.17.1 = const(int, -1)
2024-09-04 18:31:43,423 - on stmt: $const42.18.1 = const(NoneType, None)
2024-09-04 18:31:43,423 - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:43,423 - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:43,423 - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2024-09-04 18:31:43,423 - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2024-09-04 18:31:43,423 - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2024-09-04 18:31:43,423 - on stmt: $const52.23.1 = const(int, 0)
2024-09-04 18:31:43,423 - on stmt: $const54.24.1 = const(int, -1)
2024-09-04 18:31:43,423 - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:43,423 - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2024-09-04 18:31:43,423 - on stmt: $const62.28.1 = const(int, 0)
2024-09-04 18:31:43,423 - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2024-09-04 18:31:43,423 - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2024-09-04 18:31:43,423 - on stmt: $const68.31.1 = const(int, 0)
2024-09-04 18:31:43,423 - on stmt: $const70.32.1 = const(int, 1)
2024-09-04 18:31:43,424 - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:43,424 - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2024-09-04 18:31:43,424 - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:43,424 - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2024-09-04 18:31:43,424 - on stmt: $phi80.0.1 = $78get_iter.36.1
2024-09-04 18:31:43,424 - on stmt: jump 80
2024-09-04 18:31:43,424 - ==== SSA block analysis pass on 80
2024-09-04 18:31:43,424 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D1A8BB0>
2024-09-04 18:31:43,424 - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2024-09-04 18:31:43,424 - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2024-09-04 18:31:43,424 - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2024-09-04 18:31:43,424 - on stmt: $phi82.1.1 = $80for_iter.2.1
2024-09-04 18:31:43,424 - on stmt: branch $80for_iter.3.1, 82, 92
2024-09-04 18:31:43,424 - ==== SSA block analysis pass on 82
2024-09-04 18:31:43,424 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D1A8BB0>
2024-09-04 18:31:43,424 - on stmt: index00 = $phi82.1.1
2024-09-04 18:31:43,424 - on stmt: jump 90
2024-09-04 18:31:43,424 - ==== SSA block analysis pass on 92
2024-09-04 18:31:43,424 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D1A8BB0>
2024-09-04 18:31:43,424 - on stmt: $92return_value.1.1 = cast(value=out0)
2024-09-04 18:31:43,424 - on stmt: return $92return_value.1.1
2024-09-04 18:31:43,424 - ==== SSA block analysis pass on 90
2024-09-04 18:31:43,424 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D1A8BB0>
2024-09-04 18:31:43,424 - on stmt: $const4.1 = const(int, 0)
2024-09-04 18:31:43,424 - on stmt: stencil_index = $const4.1 + index00
2024-09-04 18:31:43,424 - on stmt: $6binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:43,424 - on stmt: $const10.4 = const(int, -1)
2024-09-04 18:31:43,424 - on stmt: stencil_index.1 = $const10.4 + index00
2024-09-04 18:31:43,424 - on stmt: $12binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2024-09-04 18:31:43,424 - on stmt: $14compare_op.6 = $6binary_subscr.2 < $12binary_subscr.5
2024-09-04 18:31:43,424 - on stmt: $const18.8 = const(int, 0)
2024-09-04 18:31:43,424 - on stmt: stencil_index.2 = $const18.8 + index00
2024-09-04 18:31:43,424 - on stmt: $20binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
2024-09-04 18:31:43,424 - on stmt: $const24.11 = const(int, 1)
2024-09-04 18:31:43,424 - on stmt: stencil_index.3 = $const24.11 + index00
2024-09-04 18:31:43,424 - on stmt: $26binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
2024-09-04 18:31:43,424 - on stmt: $28compare_op.13 = $20binary_subscr.9 <= $26binary_subscr.12
2024-09-04 18:31:43,424 - on stmt: $30binary_and.14 = $14compare_op.6 & $28compare_op.13
2024-09-04 18:31:43,424 - on stmt: $32return_value.15 = cast(value=$30binary_and.14)
2024-09-04 18:31:43,424 - on stmt: out0[index00] = $32return_value.15
2024-09-04 18:31:43,424 - on stmt: jump 91
2024-09-04 18:31:43,424 - ==== SSA block analysis pass on 91
2024-09-04 18:31:43,424 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D1A8BB0>
2024-09-04 18:31:43,424 - on stmt: jump 80
2024-09-04 18:31:43,424 - defs defaultdict(<class 'list'>,
            {'$10load_attr.3.1': [(<numba.core.ir.Assign object at 0x00000243132A3D00>,
                                   0)],
             '$12binary_subscr.5': [(<numba.core.ir.Assign object at 0x00000243132A1CF0>,
                                     90)],
             '$14compare_op.6': [(<numba.core.ir.Assign object at 0x0000024313297CA0>,
                                  90)],
             '$14load_global.5.1': [(<numba.core.ir.Assign object at 0x00000243132A3820>,
                                     0)],
             '$16load_attr.6.1': [(<numba.core.ir.Assign object at 0x00000243132A0CD0>,
                                   0)],
             '$20binary_subscr.9': [(<numba.core.ir.Assign object at 0x00000243132A1000>,
                                     90)],
             '$26binary_subscr.12': [(<numba.core.ir.Assign object at 0x00000243132A2BF0>,
                                      90)],
             '$28compare_op.13': [(<numba.core.ir.Assign object at 0x00000243132DA980>,
                                   90)],
             '$30binary_and.14': [(<numba.core.ir.Assign object at 0x00000243132D9ED0>,
                                   90)],
             '$32build_slice.13.1': [(<numba.core.ir.Assign object at 0x00000243132A0BE0>,
                                      0)],
             '$32build_slice.14.1': [(<numba.core.ir.Assign object at 0x00000243132A0B50>,
                                      0)],
             '$32return_value.15': [(<numba.core.ir.Assign object at 0x00000243132D8DC0>,
                                     90)],
             '$44build_slice.19.1': [(<numba.core.ir.Assign object at 0x0000024313314190>,
                                      0)],
             '$44build_slice.20.1': [(<numba.core.ir.Assign object at 0x0000024313314850>,
                                      0)],
             '$48load_global.21.1': [(<numba.core.ir.Assign object at 0x0000024313314A30>,
                                      0)],
             '$50load_global.22.1': [(<numba.core.ir.Assign object at 0x0000024313317670>,
                                      0)],
             '$56call_function.25.1': [(<numba.core.ir.Assign object at 0x0000024313317FA0>,
                                        0)],
             '$58unary_negative.26.1': [(<numba.core.ir.Assign object at 0x0000024313316890>,
                                         0)],
             '$64binary_subscr.29.1': [(<numba.core.ir.Assign object at 0x00000243133175E0>,
                                        0)],
             '$66load_global.30.1': [(<numba.core.ir.Assign object at 0x0000024313316E00>,
                                      0)],
             '$6binary_subscr.2': [(<numba.core.ir.Assign object at 0x00000243132A1C60>,
                                    90)],
             '$72call_function.33.1': [(<numba.core.ir.Assign object at 0x0000024313314250>,
                                        0)],
             '$74binary_subtract.34.1': [(<numba.core.ir.Assign object at 0x0000024313315D80>,
                                          0)],
             '$76call_function.35.1': [(<numba.core.ir.Assign object at 0x0000024313315B10>,
                                        0)],
             '$78get_iter.36.1': [(<numba.core.ir.Assign object at 0x00000243133173A0>,
                                   0)],
             '$80for_iter.1.1': [(<numba.core.ir.Assign object at 0x0000024313315DB0>,
                                  80)],
             '$80for_iter.2.1': [(<numba.core.ir.Assign object at 0x00000243133142E0>,
                                  80)],
             '$80for_iter.3.1': [(<numba.core.ir.Assign object at 0x0000024313315A80>,
                                  80)],
             '$8load_global.2.1': [(<numba.core.ir.Assign object at 0x00000243132A3CA0>,
                                    0)],
             '$92return_value.1.1': [(<numba.core.ir.Assign object at 0x0000024313315960>,
                                      92)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x00000243129C53C0>,
                             90)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x0000024313297DF0>,
                             90)],
             '$const24.11': [(<numba.core.ir.Assign object at 0x00000243132D8D60>,
                              90)],
             '$const24.9.1': [(<numba.core.ir.Assign object at 0x00000243132A13C0>,
                               0)],
             '$const28.11.1': [(<numba.core.ir.Assign object at 0x00000243132A1720>,
                                0)],
             '$const30.12.1': [(<numba.core.ir.Assign object at 0x00000243132A2B60>,
                                0)],
             '$const36.15.1': [(<numba.core.ir.Assign object at 0x00000243132A2440>,
                                0)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x0000024313293B50>,
                            90)],
             '$const40.17.1': [(<numba.core.ir.Assign object at 0x00000243132A26E0>,
                                0)],
             '$const42.18.1': [(<numba.core.ir.Assign object at 0x00000243132A19C0>,
                                0)],
             '$const52.23.1': [(<numba.core.ir.Assign object at 0x0000024313317FD0>,
                                0)],
             '$const54.24.1': [(<numba.core.ir.Assign object at 0x0000024313317AC0>,
                                0)],
             '$const62.28.1': [(<numba.core.ir.Assign object at 0x0000024313316AD0>,
                                0)],
             '$const68.31.1': [(<numba.core.ir.Assign object at 0x0000024313317220>,
                                0)],
             '$const70.32.1': [(<numba.core.ir.Assign object at 0x0000024313316D40>,
                                0)],
             '$phi80.0.1': [(<numba.core.ir.Assign object at 0x00000243132A3A60>,
                             0)],
             '$phi82.1.1': [(<numba.core.ir.Assign object at 0x0000024313317490>,
                             80)],
             'full_shape0': [(<numba.core.ir.Assign object at 0x00000243132A1F90>,
                              0)],
             'index00': [(<numba.core.ir.Assign object at 0x0000024313315A20>,
                          82)],
             'out0': [(<numba.core.ir.Assign object at 0x00000243132A17B0>, 0)],
             'stencil_index': [(<numba.core.ir.Assign object at 0x00000243132A2E00>,
                                90)],
             'stencil_index.1': [(<numba.core.ir.Assign object at 0x00000243132A0070>,
                                  90)],
             'stencil_index.2': [(<numba.core.ir.Assign object at 0x00000243132A1810>,
                                  90)],
             'stencil_index.3': [(<numba.core.ir.Assign object at 0x00000243132A1450>,
                                  90)],
             'x': [(<numba.core.ir.Assign object at 0x00000243132A0460>, 0)]})
2024-09-04 18:31:43,424 - SSA violators <numba.core.utils.OrderedSet object at 0x000002431D1A8BB0>
2024-09-04 18:31:43,883 - bytecode dump:
>          0	NOP(arg=None, lineno=1068)
           2	LOAD_GLOBAL(arg=0, lineno=1082)
           4	LOAD_FAST(arg=0, lineno=1082)
           6	CALL_FUNCTION(arg=1, lineno=1082)
           8	LOAD_FAST(arg=1, lineno=1082)
          10	LOAD_CONST(arg=1, lineno=1082)
          12	LOAD_CONST(arg=1, lineno=1082)
          14	BUILD_SLICE(arg=2, lineno=1082)
          16	STORE_SUBSCR(arg=None, lineno=1082)
          18	LOAD_CONST(arg=1, lineno=1082)
          20	RETURN_VALUE(arg=None, lineno=1082)
2024-09-04 18:31:43,883 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:43,883 - stack: []
2024-09-04 18:31:43,883 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:43,884 - dispatch pc=0, inst=NOP(arg=None, lineno=1068)
2024-09-04 18:31:43,884 - stack []
2024-09-04 18:31:43,884 - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1082)
2024-09-04 18:31:43,884 - stack []
2024-09-04 18:31:43,884 - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1082)
2024-09-04 18:31:43,884 - stack ['$2load_global.0']
2024-09-04 18:31:43,884 - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=1082)
2024-09-04 18:31:43,884 - stack ['$2load_global.0', '$x4.1']
2024-09-04 18:31:43,884 - dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=1082)
2024-09-04 18:31:43,885 - stack ['$6call_function.2']
2024-09-04 18:31:43,885 - dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=1082)
2024-09-04 18:31:43,885 - stack ['$6call_function.2', '$y8.3']
2024-09-04 18:31:43,885 - dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=1082)
2024-09-04 18:31:43,885 - stack ['$6call_function.2', '$y8.3', '$const10.4']
2024-09-04 18:31:43,885 - dispatch pc=14, inst=BUILD_SLICE(arg=2, lineno=1082)
2024-09-04 18:31:43,885 - stack ['$6call_function.2', '$y8.3', '$const10.4', '$const12.5']
2024-09-04 18:31:43,885 - dispatch pc=16, inst=STORE_SUBSCR(arg=None, lineno=1082)
2024-09-04 18:31:43,885 - stack ['$6call_function.2', '$y8.3', '$14build_slice.7']
2024-09-04 18:31:43,885 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1082)
2024-09-04 18:31:43,885 - stack []
2024-09-04 18:31:43,886 - dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=1082)
2024-09-04 18:31:43,886 - stack ['$const18.8']
2024-09-04 18:31:43,886 - end state. edges=[]
2024-09-04 18:31:43,886 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:43,886 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 18:31:43,886 - defmap: {}
2024-09-04 18:31:43,886 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:43,886 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:43,886 - keep phismap: {}
2024-09-04 18:31:43,887 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:43,887 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:43,887 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'res': '$y8.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$const12.5'}), (14, {'start': '$const10.4', 'stop': '$const12.5', 'step': None, 'res': '$14build_slice.7', 'slicevar': '$14build_slice.6'}), (16, {'target': '$y8.3', 'index': '$14build_slice.7', 'value': '$6call_function.2'}), (18, {'res': '$const18.8'}), (20, {'retval': '$const18.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:43,887 - label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $2load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x000002431B51D3F0>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1068)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'x']
    $const10.4 = const(NoneType, None)       ['$const10.4']
    $const12.5 = const(NoneType, None)       ['$const12.5']
    $14build_slice.6 = global(slice: <class 'slice'>) ['$14build_slice.6']
    $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1082), Var($const12.5, utils.py:1082)), kws=(), vararg=None, varkwarg=None, target=None) ['$14build_slice.6', '$14build_slice.7', '$const10.4', '$const12.5']
    y[$14build_slice.7] = $6call_function.2  ['$14build_slice.7', '$6call_function.2', 'y']
    $const18.8 = const(NoneType, None)       ['$const18.8']
    $20return_value.9 = cast(value=$const18.8) ['$20return_value.9', '$const18.8']
    return $20return_value.9                 ['$20return_value.9']

2024-09-04 18:31:43,898 - ==== SSA block analysis pass on 0
2024-09-04 18:31:43,898 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D212680>
2024-09-04 18:31:43,898 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:43,898 - on stmt: y = arg(1, name=y)
2024-09-04 18:31:43,898 - on stmt: $2load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x000002431B51D3F0>)
2024-09-04 18:31:43,898 - on stmt: $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1068)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:43,899 - on stmt: $const10.4 = const(NoneType, None)
2024-09-04 18:31:43,899 - on stmt: $const12.5 = const(NoneType, None)
2024-09-04 18:31:43,899 - on stmt: $14build_slice.6 = global(slice: <class 'slice'>)
2024-09-04 18:31:43,899 - on stmt: $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1082), Var($const12.5, utils.py:1082)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:43,899 - on stmt: y[slice(None, None, None)] = $6call_function.2
2024-09-04 18:31:43,900 - on stmt: $const18.8 = const(NoneType, None)
2024-09-04 18:31:43,900 - on stmt: $20return_value.9 = cast(value=$const18.8)
2024-09-04 18:31:43,929 - on stmt: return $20return_value.9
2024-09-04 18:31:43,930 - defs defaultdict(<class 'list'>,
            {'$14build_slice.6': [(<numba.core.ir.Assign object at 0x000002431D1D18D0>,
                                   0)],
             '$14build_slice.7': [(<numba.core.ir.Assign object at 0x000002431D1D0070>,
                                   0)],
             '$20return_value.9': [(<numba.core.ir.Assign object at 0x000002431D1D01C0>,
                                    0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x000002431D1D1C60>,
                                  0)],
             '$6call_function.2': [(<numba.core.ir.Assign object at 0x000002431D1D1510>,
                                    0)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x000002431D1D15D0>,
                             0)],
             '$const12.5': [(<numba.core.ir.Assign object at 0x000002431D1D1450>,
                             0)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x000002431D1D08E0>,
                             0)],
             'x': [(<numba.core.ir.Assign object at 0x000002431D1D2800>, 0)],
             'y': [(<numba.core.ir.Assign object at 0x000002431D1D1810>, 0)]})
2024-09-04 18:31:43,930 - SSA violators <numba.core.utils.OrderedSet object at 0x000002431D212680>
2024-09-04 18:31:43,964 - bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=2)
           4	LOAD_ATTR(arg=0, lineno=2)
           6	STORE_FAST(arg=1, lineno=2)
           8	LOAD_GLOBAL(arg=1, lineno=3)
          10	LOAD_ATTR(arg=2, lineno=3)
          12	LOAD_FAST(arg=1, lineno=3)
          14	LOAD_GLOBAL(arg=1, lineno=3)
          16	LOAD_ATTR(arg=3, lineno=3)
          18	LOAD_CONST(arg=1, lineno=3)
          20	CALL_FUNCTION_KW(arg=2, lineno=3)
          22	STORE_FAST(arg=2, lineno=3)
          24	LOAD_CONST(arg=2, lineno=4)
          26	LOAD_FAST(arg=2, lineno=4)
          28	LOAD_CONST(arg=0, lineno=4)
          30	LOAD_CONST(arg=3, lineno=4)
          32	BUILD_SLICE(arg=2, lineno=4)
          34	STORE_SUBSCR(arg=None, lineno=4)
          36	LOAD_CONST(arg=2, lineno=5)
          38	LOAD_FAST(arg=2, lineno=5)
          40	LOAD_CONST(arg=4, lineno=5)
          42	LOAD_CONST(arg=0, lineno=5)
          44	BUILD_SLICE(arg=2, lineno=5)
          46	STORE_SUBSCR(arg=None, lineno=5)
          48	LOAD_GLOBAL(arg=4, lineno=6)
          50	LOAD_GLOBAL(arg=5, lineno=6)
          52	LOAD_CONST(arg=2, lineno=6)
          54	LOAD_CONST(arg=4, lineno=6)
          56	CALL_FUNCTION(arg=2, lineno=6)
          58	UNARY_NEGATIVE(arg=None, lineno=6)
          60	LOAD_FAST(arg=1, lineno=6)
          62	LOAD_CONST(arg=2, lineno=6)
          64	BINARY_SUBSCR(arg=None, lineno=6)
          66	LOAD_GLOBAL(arg=6, lineno=6)
          68	LOAD_CONST(arg=2, lineno=6)
          70	LOAD_CONST(arg=3, lineno=6)
          72	CALL_FUNCTION(arg=2, lineno=6)
          74	BINARY_SUBTRACT(arg=None, lineno=6)
          76	CALL_FUNCTION(arg=2, lineno=6)
          78	GET_ITER(arg=None, lineno=6)
>         80	FOR_ITER(arg=4, lineno=6)
          82	STORE_FAST(arg=3, lineno=6)
          84	LOAD_CONST(arg=2, lineno=7)
          86	STORE_FAST(arg=4, lineno=7)
          88	JUMP_ABSOLUTE(arg=41, lineno=7)
>         90	LOAD_FAST(arg=2, lineno=8)
          92	RETURN_VALUE(arg=None, lineno=8)
2024-09-04 18:31:43,964 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:43,965 - stack: []
2024-09-04 18:31:43,965 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:43,965 - dispatch pc=0, inst=NOP(arg=None, lineno=1)
2024-09-04 18:31:43,965 - stack []
2024-09-04 18:31:43,965 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2)
2024-09-04 18:31:43,965 - stack []
2024-09-04 18:31:43,965 - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2)
2024-09-04 18:31:43,965 - stack ['$x2.0']
2024-09-04 18:31:43,965 - dispatch pc=6, inst=STORE_FAST(arg=1, lineno=2)
2024-09-04 18:31:43,965 - stack ['$4load_attr.1']
2024-09-04 18:31:43,965 - dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=3)
2024-09-04 18:31:43,965 - stack []
2024-09-04 18:31:43,965 - dispatch pc=10, inst=LOAD_ATTR(arg=2, lineno=3)
2024-09-04 18:31:43,965 - stack ['$8load_global.2']
2024-09-04 18:31:43,966 - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=3)
2024-09-04 18:31:43,966 - stack ['$10load_attr.3']
2024-09-04 18:31:43,966 - dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=3)
2024-09-04 18:31:43,966 - stack ['$10load_attr.3', '$full_shape012.4']
2024-09-04 18:31:43,966 - dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=3)
2024-09-04 18:31:43,966 - stack ['$10load_attr.3', '$full_shape012.4', '$14load_global.5']
2024-09-04 18:31:43,966 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=3)
2024-09-04 18:31:43,966 - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6']
2024-09-04 18:31:43,966 - dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=3)
2024-09-04 18:31:43,966 - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6', '$const18.7']
2024-09-04 18:31:43,966 - dispatch pc=22, inst=STORE_FAST(arg=2, lineno=3)
2024-09-04 18:31:43,966 - stack ['$20call_function_kw.8']
2024-09-04 18:31:43,966 - dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=4)
2024-09-04 18:31:43,967 - stack []
2024-09-04 18:31:43,967 - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=4)
2024-09-04 18:31:43,967 - stack ['$const24.9']
2024-09-04 18:31:43,967 - dispatch pc=28, inst=LOAD_CONST(arg=0, lineno=4)
2024-09-04 18:31:43,967 - stack ['$const24.9', '$out026.10']
2024-09-04 18:31:43,967 - dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=4)
2024-09-04 18:31:43,967 - stack ['$const24.9', '$out026.10', '$const28.11']
2024-09-04 18:31:43,967 - dispatch pc=32, inst=BUILD_SLICE(arg=2, lineno=4)
2024-09-04 18:31:43,967 - stack ['$const24.9', '$out026.10', '$const28.11', '$const30.12']
2024-09-04 18:31:43,967 - dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=4)
2024-09-04 18:31:43,967 - stack ['$const24.9', '$out026.10', '$32build_slice.14']
2024-09-04 18:31:43,967 - dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=5)
2024-09-04 18:31:43,967 - stack []
2024-09-04 18:31:43,967 - dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=5)
2024-09-04 18:31:43,968 - stack ['$const36.15']
2024-09-04 18:31:43,968 - dispatch pc=40, inst=LOAD_CONST(arg=4, lineno=5)
2024-09-04 18:31:43,968 - stack ['$const36.15', '$out038.16']
2024-09-04 18:31:43,968 - dispatch pc=42, inst=LOAD_CONST(arg=0, lineno=5)
2024-09-04 18:31:43,968 - stack ['$const36.15', '$out038.16', '$const40.17']
2024-09-04 18:31:43,968 - dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=5)
2024-09-04 18:31:43,968 - stack ['$const36.15', '$out038.16', '$const40.17', '$const42.18']
2024-09-04 18:31:43,968 - dispatch pc=46, inst=STORE_SUBSCR(arg=None, lineno=5)
2024-09-04 18:31:43,968 - stack ['$const36.15', '$out038.16', '$44build_slice.20']
2024-09-04 18:31:43,968 - dispatch pc=48, inst=LOAD_GLOBAL(arg=4, lineno=6)
2024-09-04 18:31:43,968 - stack []
2024-09-04 18:31:43,968 - dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=6)
2024-09-04 18:31:43,968 - stack ['$48load_global.21']
2024-09-04 18:31:43,968 - dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:43,969 - stack ['$48load_global.21', '$50load_global.22']
2024-09-04 18:31:43,969 - dispatch pc=54, inst=LOAD_CONST(arg=4, lineno=6)
2024-09-04 18:31:43,969 - stack ['$48load_global.21', '$50load_global.22', '$const52.23']
2024-09-04 18:31:43,969 - dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:43,969 - stack ['$48load_global.21', '$50load_global.22', '$const52.23', '$const54.24']
2024-09-04 18:31:43,969 - dispatch pc=58, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2024-09-04 18:31:43,969 - stack ['$48load_global.21', '$56call_function.25']
2024-09-04 18:31:43,969 - dispatch pc=60, inst=LOAD_FAST(arg=1, lineno=6)
2024-09-04 18:31:43,969 - stack ['$48load_global.21', '$58unary_negative.26']
2024-09-04 18:31:43,969 - dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:43,969 - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27']
2024-09-04 18:31:43,969 - dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=6)
2024-09-04 18:31:43,969 - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27', '$const62.28']
2024-09-04 18:31:43,969 - dispatch pc=66, inst=LOAD_GLOBAL(arg=6, lineno=6)
2024-09-04 18:31:43,970 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29']
2024-09-04 18:31:43,970 - dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:43,970 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30']
2024-09-04 18:31:43,970 - dispatch pc=70, inst=LOAD_CONST(arg=3, lineno=6)
2024-09-04 18:31:43,970 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31']
2024-09-04 18:31:43,970 - dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:43,970 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31', '$const70.32']
2024-09-04 18:31:43,970 - dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=6)
2024-09-04 18:31:43,970 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$72call_function.33']
2024-09-04 18:31:43,970 - dispatch pc=76, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:43,970 - stack ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34']
2024-09-04 18:31:43,970 - dispatch pc=78, inst=GET_ITER(arg=None, lineno=6)
2024-09-04 18:31:43,970 - stack ['$76call_function.35']
2024-09-04 18:31:43,971 - end state. edges=[Edge(pc=80, stack=('$78get_iter.36',), blockstack=(), npush=0)]
2024-09-04 18:31:43,971 - pending: deque([State(pc_initial=80 nstack_initial=1)])
2024-09-04 18:31:43,971 - stack: ['$phi80.0']
2024-09-04 18:31:43,971 - state.pc_initial: State(pc_initial=80 nstack_initial=1)
2024-09-04 18:31:43,971 - dispatch pc=80, inst=FOR_ITER(arg=4, lineno=6)
2024-09-04 18:31:43,971 - stack ['$phi80.0']
2024-09-04 18:31:43,971 - end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
2024-09-04 18:31:43,971 - pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=82 nstack_initial=2)])
2024-09-04 18:31:43,971 - stack: []
2024-09-04 18:31:43,971 - state.pc_initial: State(pc_initial=90 nstack_initial=0)
2024-09-04 18:31:43,971 - dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=8)
2024-09-04 18:31:43,971 - stack []
2024-09-04 18:31:43,971 - dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=8)
2024-09-04 18:31:43,971 - stack ['$out090.0']
2024-09-04 18:31:43,972 - end state. edges=[]
2024-09-04 18:31:43,972 - pending: deque([State(pc_initial=82 nstack_initial=2)])
2024-09-04 18:31:43,972 - stack: ['$phi82.0', '$phi82.1']
2024-09-04 18:31:43,972 - state.pc_initial: State(pc_initial=82 nstack_initial=2)
2024-09-04 18:31:43,972 - dispatch pc=82, inst=STORE_FAST(arg=3, lineno=6)
2024-09-04 18:31:43,972 - stack ['$phi82.0', '$phi82.1']
2024-09-04 18:31:43,972 - dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=7)
2024-09-04 18:31:43,972 - stack ['$phi82.0']
2024-09-04 18:31:43,972 - dispatch pc=86, inst=STORE_FAST(arg=4, lineno=7)
2024-09-04 18:31:43,973 - stack ['$phi82.0', '$const84.2']
2024-09-04 18:31:43,973 - dispatch pc=88, inst=JUMP_ABSOLUTE(arg=41, lineno=7)
2024-09-04 18:31:43,973 - stack ['$phi82.0']
2024-09-04 18:31:43,973 - end state. edges=[Edge(pc=80, stack=('$phi82.0',), blockstack=(), npush=0)]
2024-09-04 18:31:43,973 - pending: deque([State(pc_initial=80 nstack_initial=1)])
2024-09-04 18:31:43,973 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:43,973 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=82 nstack_initial=2): {'$phi82.1'},
             State(pc_initial=90 nstack_initial=0): set()})
2024-09-04 18:31:43,973 - defmap: {'$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi82.1': State(pc_initial=80 nstack_initial=1)}
2024-09-04 18:31:43,973 - phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=2))},
             '$phi82.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:43,973 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:43,973 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:43,974 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:43,974 - keep phismap: {'$phi80.0': {('$78get_iter.36', State(pc_initial=0 nstack_initial=0))},
 '$phi82.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
2024-09-04 18:31:43,974 - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.36'},
             State(pc_initial=80 nstack_initial=1): {'$phi82.1': '$80for_iter.2'}})
2024-09-04 18:31:43,974 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:43,974 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_global.2'}), (10, {'item': '$8load_global.2', 'res': '$10load_attr.3'}), (12, {'res': '$full_shape012.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$10load_attr.3', 'args': ['$full_shape012.4', '$16load_attr.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$out026.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$const30.12'}), (32, {'start': '$const28.11', 'stop': '$const30.12', 'step': None, 'res': '$32build_slice.14', 'slicevar': '$32build_slice.13'}), (34, {'target': '$out026.10', 'index': '$32build_slice.14', 'value': '$const24.9'}), (36, {'res': '$const36.15'}), (38, {'res': '$out038.16'}), (40, {'res': '$const40.17'}), (42, {'res': '$const42.18'}), (44, {'start': '$const40.17', 'stop': '$const42.18', 'step': None, 'res': '$44build_slice.20', 'slicevar': '$44build_slice.19'}), (46, {'target': '$out038.16', 'index': '$44build_slice.20', 'value': '$const36.15'}), (48, {'res': '$48load_global.21'}), (50, {'res': '$50load_global.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$50load_global.22', 'args': ['$const52.23', '$const54.24'], 'res': '$56call_function.25'}), (58, {'value': '$56call_function.25', 'res': '$58unary_negative.26'}), (60, {'res': '$full_shape060.27'}), (62, {'res': '$const62.28'}), (64, {'index': '$const62.28', 'target': '$full_shape060.27', 'res': '$64binary_subscr.29'}), (66, {'res': '$66load_global.30'}), (68, {'res': '$const68.31'}), (70, {'res': '$const70.32'}), (72, {'func': '$66load_global.30', 'args': ['$const68.31', '$const70.32'], 'res': '$72call_function.33'}), (74, {'lhs': '$64binary_subscr.29', 'rhs': '$72call_function.33', 'res': '$74binary_subtract.34'}), (76, {'func': '$48load_global.21', 'args': ['$58unary_negative.26', '$74binary_subtract.34'], 'res': '$76call_function.35'}), (78, {'value': '$76call_function.35', 'res': '$78get_iter.36'})), outgoing_phis={'$phi80.0': '$78get_iter.36'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.36',)})
2024-09-04 18:31:43,974 - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi82.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 82: ('$phi80.0', '$80for_iter.2')})
2024-09-04 18:31:43,974 - block_infos State(pc_initial=82 nstack_initial=2):
AdaptBlockInfo(insts=((82, {'value': '$phi82.1'}), (84, {'res': '$const84.2'}), (86, {'value': '$const84.2'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi82.0',)})
2024-09-04 18:31:43,975 - block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$out090.0'}), (92, {'retval': '$out090.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:43,977 - label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $8load_global.2 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$8load_global.2']
    $10load_attr.3 = getattr(value=$8load_global.2, attr=empty) ['$10load_attr.3', '$8load_global.2']
    $14load_global.5 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=bool_) ['$14load_global.5', '$16load_attr.6']
    out0 = call $10load_attr.3(full_shape0, func=$10load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6, <string>:3))], vararg=None, varkwarg=None, target=None) ['$10load_attr.3', '$16load_attr.6', 'full_shape0', 'out0']
    $const24.9 = const(int, 0)               ['$const24.9']
    $const28.11 = const(NoneType, None)      ['$const28.11']
    $const30.12 = const(int, 1)              ['$const30.12']
    $32build_slice.13 = global(slice: <class 'slice'>) ['$32build_slice.13']
    $32build_slice.14 = call $32build_slice.13($const28.11, $const30.12, func=$32build_slice.13, args=(Var($const28.11, <string>:4), Var($const30.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$32build_slice.13', '$32build_slice.14', '$const28.11', '$const30.12']
    out0[$32build_slice.14] = $const24.9     ['$32build_slice.14', '$const24.9', 'out0']
    $const36.15 = const(int, 0)              ['$const36.15']
    $const40.17 = const(int, -1)             ['$const40.17']
    $const42.18 = const(NoneType, None)      ['$const42.18']
    $44build_slice.19 = global(slice: <class 'slice'>) ['$44build_slice.19']
    $44build_slice.20 = call $44build_slice.19($const40.17, $const42.18, func=$44build_slice.19, args=(Var($const40.17, <string>:5), Var($const42.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$44build_slice.19', '$44build_slice.20', '$const40.17', '$const42.18']
    out0[$44build_slice.20] = $const36.15    ['$44build_slice.20', '$const36.15', 'out0']
    $48load_global.21 = global(range: <class 'range'>) ['$48load_global.21']
    $50load_global.22 = global(min: <built-in function min>) ['$50load_global.22']
    $const52.23 = const(int, 0)              ['$const52.23']
    $const54.24 = const(int, -1)             ['$const54.24']
    $56call_function.25 = call $50load_global.22($const52.23, $const54.24, func=$50load_global.22, args=[Var($const52.23, <string>:6), Var($const54.24, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.22', '$56call_function.25', '$const52.23', '$const54.24']
    $58unary_negative.26 = unary(fn=<built-in function neg>, value=$56call_function.25) ['$56call_function.25', '$58unary_negative.26']
    $const62.28 = const(int, 0)              ['$const62.28']
    $64binary_subscr.29 = getitem(value=full_shape0, index=$const62.28, fn=<built-in function getitem>) ['$64binary_subscr.29', '$const62.28', 'full_shape0']
    $66load_global.30 = global(max: <built-in function max>) ['$66load_global.30']
    $const68.31 = const(int, 0)              ['$const68.31']
    $const70.32 = const(int, 1)              ['$const70.32']
    $72call_function.33 = call $66load_global.30($const68.31, $const70.32, func=$66load_global.30, args=[Var($const68.31, <string>:6), Var($const70.32, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.30', '$72call_function.33', '$const68.31', '$const70.32']
    $74binary_subtract.34 = $64binary_subscr.29 - $72call_function.33 ['$64binary_subscr.29', '$72call_function.33', '$74binary_subtract.34']
    $76call_function.35 = call $48load_global.21($58unary_negative.26, $74binary_subtract.34, func=$48load_global.21, args=[Var($58unary_negative.26, <string>:6), Var($74binary_subtract.34, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34', '$76call_function.35']
    $78get_iter.36 = getiter(value=$76call_function.35) ['$76call_function.35', '$78get_iter.36']
    $phi80.0 = $78get_iter.36                ['$78get_iter.36', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi82.1 = $80for_iter.2                 ['$80for_iter.2', '$phi82.1']
    branch $80for_iter.3, 82, 90             ['$80for_iter.3']
label 82:
    index00 = $phi82.1                       ['$phi82.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 80                                  []
label 90:
    $92return_value.1 = cast(value=out0)     ['$92return_value.1', 'out0']
    return $92return_value.1                 ['$92return_value.1']

2024-09-04 18:31:43,997 - ==== SSA block analysis pass on 0
2024-09-04 18:31:43,997 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024312A5D7B0>
2024-09-04 18:31:43,997 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:43,997 - on stmt: full_shape0 = getattr(value=x, attr=shape)
2024-09-04 18:31:43,997 - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:43,997 - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2024-09-04 18:31:43,998 - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:43,998 - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2024-09-04 18:31:43,998 - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:43,998 - on stmt: $const24.9.1 = const(int, 0)
2024-09-04 18:31:43,998 - on stmt: $const28.11.1 = const(NoneType, None)
2024-09-04 18:31:43,998 - on stmt: $const30.12.1 = const(int, 1)
2024-09-04 18:31:43,998 - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:43,998 - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:43,998 - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2024-09-04 18:31:43,998 - on stmt: $const36.15.1 = const(int, 0)
2024-09-04 18:31:43,998 - on stmt: $const40.17.1 = const(int, -1)
2024-09-04 18:31:43,998 - on stmt: $const42.18.1 = const(NoneType, None)
2024-09-04 18:31:43,999 - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:43,999 - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:43,999 - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2024-09-04 18:31:43,999 - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2024-09-04 18:31:43,999 - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2024-09-04 18:31:43,999 - on stmt: $const52.23.1 = const(int, 0)
2024-09-04 18:31:43,999 - on stmt: $const54.24.1 = const(int, -1)
2024-09-04 18:31:43,999 - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:43,999 - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2024-09-04 18:31:43,999 - on stmt: $const62.28.1 = const(int, 0)
2024-09-04 18:31:44,000 - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2024-09-04 18:31:44,000 - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2024-09-04 18:31:44,000 - on stmt: $const68.31.1 = const(int, 0)
2024-09-04 18:31:44,000 - on stmt: $const70.32.1 = const(int, 1)
2024-09-04 18:31:44,000 - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:44,000 - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2024-09-04 18:31:44,000 - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:44,000 - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2024-09-04 18:31:44,001 - on stmt: $phi80.0.1 = $78get_iter.36.1
2024-09-04 18:31:44,001 - on stmt: jump 80
2024-09-04 18:31:44,001 - ==== SSA block analysis pass on 80
2024-09-04 18:31:44,001 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024312A5D7B0>
2024-09-04 18:31:44,001 - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2024-09-04 18:31:44,001 - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2024-09-04 18:31:44,001 - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2024-09-04 18:31:44,001 - on stmt: $phi82.1.1 = $80for_iter.2.1
2024-09-04 18:31:44,001 - on stmt: branch $80for_iter.3.1, 82, 92
2024-09-04 18:31:44,001 - ==== SSA block analysis pass on 82
2024-09-04 18:31:44,001 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024312A5D7B0>
2024-09-04 18:31:44,001 - on stmt: index00 = $phi82.1.1
2024-09-04 18:31:44,001 - on stmt: jump 90
2024-09-04 18:31:44,001 - ==== SSA block analysis pass on 92
2024-09-04 18:31:44,002 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024312A5D7B0>
2024-09-04 18:31:44,002 - on stmt: $92return_value.1.1 = cast(value=out0)
2024-09-04 18:31:44,002 - on stmt: return $92return_value.1.1
2024-09-04 18:31:44,002 - ==== SSA block analysis pass on 90
2024-09-04 18:31:44,002 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024312A5D7B0>
2024-09-04 18:31:44,002 - on stmt: $const4.1 = const(int, 0)
2024-09-04 18:31:44,002 - on stmt: stencil_index = $const4.1 + index00
2024-09-04 18:31:44,002 - on stmt: $6binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:44,002 - on stmt: $const10.4 = const(int, -1)
2024-09-04 18:31:44,002 - on stmt: stencil_index.1 = $const10.4 + index00
2024-09-04 18:31:44,002 - on stmt: $12binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2024-09-04 18:31:44,002 - on stmt: $14compare_op.6 = $6binary_subscr.2 < $12binary_subscr.5
2024-09-04 18:31:44,002 - on stmt: $const18.8 = const(int, 0)
2024-09-04 18:31:44,003 - on stmt: stencil_index.2 = $const18.8 + index00
2024-09-04 18:31:44,003 - on stmt: $20binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
2024-09-04 18:31:44,003 - on stmt: $const24.11 = const(int, 1)
2024-09-04 18:31:44,003 - on stmt: stencil_index.3 = $const24.11 + index00
2024-09-04 18:31:44,003 - on stmt: $26binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
2024-09-04 18:31:44,003 - on stmt: $28compare_op.13 = $20binary_subscr.9 <= $26binary_subscr.12
2024-09-04 18:31:44,003 - on stmt: $30binary_and.14 = $14compare_op.6 & $28compare_op.13
2024-09-04 18:31:44,003 - on stmt: $32return_value.15 = cast(value=$30binary_and.14)
2024-09-04 18:31:44,003 - on stmt: out0[index00] = $32return_value.15
2024-09-04 18:31:44,003 - on stmt: jump 91
2024-09-04 18:31:44,003 - ==== SSA block analysis pass on 91
2024-09-04 18:31:44,003 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024312A5D7B0>
2024-09-04 18:31:44,003 - on stmt: jump 80
2024-09-04 18:31:44,006 - defs defaultdict(<class 'list'>,
            {'$10load_attr.3.1': [(<numba.core.ir.Assign object at 0x0000024312E1BDC0>,
                                   0)],
             '$12binary_subscr.5': [(<numba.core.ir.Assign object at 0x000002431D1E2740>,
                                     90)],
             '$14compare_op.6': [(<numba.core.ir.Assign object at 0x000002431D1F76D0>,
                                  90)],
             '$14load_global.5.1': [(<numba.core.ir.Assign object at 0x000002431D1E31F0>,
                                     0)],
             '$16load_attr.6.1': [(<numba.core.ir.Assign object at 0x000002431D1E36A0>,
                                   0)],
             '$20binary_subscr.9': [(<numba.core.ir.Assign object at 0x000002431D1E3A60>,
                                     90)],
             '$26binary_subscr.12': [(<numba.core.ir.Assign object at 0x000002431D1E3B80>,
                                      90)],
             '$28compare_op.13': [(<numba.core.ir.Assign object at 0x000002431D18C3A0>,
                                   90)],
             '$30binary_and.14': [(<numba.core.ir.Assign object at 0x000002431D18DED0>,
                                   90)],
             '$32build_slice.13.1': [(<numba.core.ir.Assign object at 0x00000243178970D0>,
                                      0)],
             '$32build_slice.14.1': [(<numba.core.ir.Assign object at 0x00000243178971C0>,
                                      0)],
             '$32return_value.15': [(<numba.core.ir.Assign object at 0x000002431D18C1C0>,
                                     90)],
             '$44build_slice.19.1': [(<numba.core.ir.Assign object at 0x0000024317897940>,
                                      0)],
             '$44build_slice.20.1': [(<numba.core.ir.Assign object at 0x0000024317896A10>,
                                      0)],
             '$48load_global.21.1': [(<numba.core.ir.Assign object at 0x0000024317894610>,
                                      0)],
             '$50load_global.22.1': [(<numba.core.ir.Assign object at 0x0000024317897520>,
                                      0)],
             '$56call_function.25.1': [(<numba.core.ir.Assign object at 0x0000024317894880>,
                                        0)],
             '$58unary_negative.26.1': [(<numba.core.ir.Assign object at 0x0000024317894FD0>,
                                         0)],
             '$64binary_subscr.29.1': [(<numba.core.ir.Assign object at 0x0000024317894940>,
                                        0)],
             '$66load_global.30.1': [(<numba.core.ir.Assign object at 0x0000024317897160>,
                                      0)],
             '$6binary_subscr.2': [(<numba.core.ir.Assign object at 0x000002431D1E2890>,
                                    90)],
             '$72call_function.33.1': [(<numba.core.ir.Assign object at 0x0000024317897850>,
                                        0)],
             '$74binary_subtract.34.1': [(<numba.core.ir.Assign object at 0x00000243178951B0>,
                                          0)],
             '$76call_function.35.1': [(<numba.core.ir.Assign object at 0x0000024317895990>,
                                        0)],
             '$78get_iter.36.1': [(<numba.core.ir.Assign object at 0x0000024317895780>,
                                   0)],
             '$80for_iter.1.1': [(<numba.core.ir.Assign object at 0x0000024317897EE0>,
                                  80)],
             '$80for_iter.2.1': [(<numba.core.ir.Assign object at 0x0000024318F86800>,
                                  80)],
             '$80for_iter.3.1': [(<numba.core.ir.Assign object at 0x0000024318F87040>,
                                  80)],
             '$8load_global.2.1': [(<numba.core.ir.Assign object at 0x0000024312E1B790>,
                                    0)],
             '$92return_value.1.1': [(<numba.core.ir.Assign object at 0x0000024318F86F50>,
                                      92)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x000002431D212DA0>,
                             90)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x000002431D1F7DC0>,
                             90)],
             '$const24.11': [(<numba.core.ir.Assign object at 0x00000243133153C0>,
                              90)],
             '$const24.9.1': [(<numba.core.ir.Assign object at 0x000002431D1F6650>,
                               0)],
             '$const28.11.1': [(<numba.core.ir.Assign object at 0x0000024317895D50>,
                                0)],
             '$const30.12.1': [(<numba.core.ir.Assign object at 0x0000024317896800>,
                                0)],
             '$const36.15.1': [(<numba.core.ir.Assign object at 0x0000024317896AD0>,
                                0)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x000002431D1F6200>,
                            90)],
             '$const40.17.1': [(<numba.core.ir.Assign object at 0x0000024317894E80>,
                                0)],
             '$const42.18.1': [(<numba.core.ir.Assign object at 0x0000024317896920>,
                                0)],
             '$const52.23.1': [(<numba.core.ir.Assign object at 0x0000024317894820>,
                                0)],
             '$const54.24.1': [(<numba.core.ir.Assign object at 0x0000024317895B70>,
                                0)],
             '$const62.28.1': [(<numba.core.ir.Assign object at 0x0000024317896260>,
                                0)],
             '$const68.31.1': [(<numba.core.ir.Assign object at 0x0000024317896EF0>,
                                0)],
             '$const70.32.1': [(<numba.core.ir.Assign object at 0x0000024317894A90>,
                                0)],
             '$phi80.0.1': [(<numba.core.ir.Assign object at 0x0000024312E1BF70>,
                             0)],
             '$phi82.1.1': [(<numba.core.ir.Assign object at 0x00000243178978B0>,
                             80)],
             'full_shape0': [(<numba.core.ir.Assign object at 0x000002431B53F1F0>,
                              0)],
             'index00': [(<numba.core.ir.Assign object at 0x0000024318F85960>,
                          82)],
             'out0': [(<numba.core.ir.Assign object at 0x000002431D1E3970>, 0)],
             'stencil_index': [(<numba.core.ir.Assign object at 0x000002431D1E3850>,
                                90)],
             'stencil_index.1': [(<numba.core.ir.Assign object at 0x000002431D1E28F0>,
                                  90)],
             'stencil_index.2': [(<numba.core.ir.Assign object at 0x000002431D1E2410>,
                                  90)],
             'stencil_index.3': [(<numba.core.ir.Assign object at 0x000002431D1E1FC0>,
                                  90)],
             'x': [(<numba.core.ir.Assign object at 0x000002431B53EC80>, 0)]})
2024-09-04 18:31:44,006 - SSA violators <numba.core.utils.OrderedSet object at 0x0000024312A5D7B0>
2024-09-04 18:31:45,378 - bytecode dump:
>          0	NOP(arg=None, lineno=1209)
           2	LOAD_FAST(arg=0, lineno=1221)
           4	LOAD_CONST(arg=1, lineno=1221)
           6	BINARY_SUBSCR(arg=None, lineno=1221)
           8	LOAD_GLOBAL(arg=0, lineno=1221)
          10	LOAD_METHOD(arg=1, lineno=1221)
          12	LOAD_FAST(arg=0, lineno=1221)
          14	LOAD_CONST(arg=2, lineno=1221)
          16	LOAD_GLOBAL(arg=2, lineno=1221)
          18	LOAD_FAST(arg=2, lineno=1221)
          20	LOAD_FAST(arg=0, lineno=1221)
          22	LOAD_ATTR(arg=3, lineno=1221)
          24	LOAD_CONST(arg=1, lineno=1221)
          26	BINARY_SUBSCR(arg=None, lineno=1221)
          28	CALL_FUNCTION(arg=2, lineno=1221)
          30	BUILD_SLICE(arg=2, lineno=1221)
          32	BINARY_SUBSCR(arg=None, lineno=1221)
          34	CALL_METHOD(arg=1, lineno=1221)
          36	COMPARE_OP(arg=5, lineno=1221)
          38	LOAD_FAST(arg=7, lineno=1221)
          40	LOAD_CONST(arg=1, lineno=1221)
          42	STORE_SUBSCR(arg=None, lineno=1221)
          44	LOAD_FAST(arg=7, lineno=1222)
          46	LOAD_CONST(arg=1, lineno=1222)
          48	DUP_TOP_TWO(arg=None, lineno=1222)
          50	BINARY_SUBSCR(arg=None, lineno=1222)
          52	LOAD_FAST(arg=0, lineno=1222)
          54	LOAD_CONST(arg=1, lineno=1222)
          56	BINARY_SUBSCR(arg=None, lineno=1222)
          58	LOAD_GLOBAL(arg=0, lineno=1222)
          60	LOAD_METHOD(arg=4, lineno=1222)
          62	LOAD_FAST(arg=0, lineno=1222)
          64	LOAD_CONST(arg=2, lineno=1222)
          66	LOAD_GLOBAL(arg=2, lineno=1222)
          68	LOAD_FAST(arg=4, lineno=1222)
          70	LOAD_FAST(arg=0, lineno=1222)
          72	LOAD_ATTR(arg=3, lineno=1222)
          74	LOAD_CONST(arg=1, lineno=1222)
          76	BINARY_SUBSCR(arg=None, lineno=1222)
          78	CALL_FUNCTION(arg=2, lineno=1222)
          80	BUILD_SLICE(arg=2, lineno=1222)
          82	BINARY_SUBSCR(arg=None, lineno=1222)
          84	CALL_METHOD(arg=1, lineno=1222)
          86	LOAD_FAST(arg=5, lineno=1222)
          88	BINARY_ADD(arg=None, lineno=1222)
          90	COMPARE_OP(arg=5, lineno=1222)
          92	INPLACE_AND(arg=None, lineno=1222)
          94	ROT_THREE(arg=None, lineno=1222)
          96	STORE_SUBSCR(arg=None, lineno=1222)
          98	LOAD_FAST(arg=7, lineno=1224)
         100	LOAD_CONST(arg=1, lineno=1224)
         102	BINARY_SUBSCR(arg=None, lineno=1224)
         104	POP_JUMP_IF_FALSE(arg=59, lineno=1224)
         106	LOAD_FAST(arg=6, lineno=1225)
         108	LOAD_CONST(arg=3, lineno=1225)
         110	BINARY_ADD(arg=None, lineno=1225)
         112	STORE_FAST(arg=8, lineno=1225)
         114	JUMP_FORWARD(arg=2, lineno=1225)
>        116	LOAD_CONST(arg=3, lineno=1227)
         118	STORE_FAST(arg=8, lineno=1227)
>        120	LOAD_FAST(arg=8, lineno=1229)
         122	LOAD_FAST(arg=0, lineno=1229)
         124	LOAD_ATTR(arg=3, lineno=1229)
         126	LOAD_CONST(arg=1, lineno=1229)
         128	BINARY_SUBSCR(arg=None, lineno=1229)
         130	COMPARE_OP(arg=0, lineno=1229)
         132	POP_JUMP_IF_FALSE(arg=167, lineno=1229)
>        134	LOAD_GLOBAL(arg=0, lineno=1230)
         136	LOAD_METHOD(arg=1, lineno=1230)
         138	LOAD_FAST(arg=0, lineno=1230)
         140	LOAD_GLOBAL(arg=1, lineno=1230)
         142	LOAD_CONST(arg=1, lineno=1230)
         144	LOAD_FAST(arg=8, lineno=1230)
         146	LOAD_FAST(arg=1, lineno=1230)
         148	BINARY_SUBTRACT(arg=None, lineno=1230)
         150	CALL_FUNCTION(arg=2, lineno=1230)
         152	LOAD_GLOBAL(arg=2, lineno=1230)
         154	LOAD_FAST(arg=8, lineno=1230)
         156	LOAD_FAST(arg=2, lineno=1230)
         158	BINARY_ADD(arg=None, lineno=1230)
         160	LOAD_FAST(arg=0, lineno=1230)
         162	LOAD_ATTR(arg=3, lineno=1230)
         164	LOAD_CONST(arg=1, lineno=1230)
         166	BINARY_SUBSCR(arg=None, lineno=1230)
         168	CALL_FUNCTION(arg=2, lineno=1230)
         170	BUILD_SLICE(arg=2, lineno=1230)
         172	BINARY_SUBSCR(arg=None, lineno=1230)
         174	CALL_METHOD(arg=1, lineno=1230)
         176	STORE_FAST(arg=9, lineno=1230)
         178	LOAD_FAST(arg=0, lineno=1233)
         180	LOAD_FAST(arg=8, lineno=1233)
         182	BINARY_SUBSCR(arg=None, lineno=1233)
         184	LOAD_FAST(arg=9, lineno=1233)
         186	COMPARE_OP(arg=2, lineno=1233)
         188	LOAD_FAST(arg=7, lineno=1233)
         190	LOAD_FAST(arg=8, lineno=1233)
         192	STORE_SUBSCR(arg=None, lineno=1233)
         194	LOAD_FAST(arg=7, lineno=1235)
         196	LOAD_FAST(arg=8, lineno=1235)
         198	BINARY_SUBSCR(arg=None, lineno=1235)
         200	POP_JUMP_IF_TRUE(arg=107, lineno=1235)
         202	LOAD_FAST(arg=8, lineno=1236)
         204	LOAD_CONST(arg=3, lineno=1236)
         206	INPLACE_ADD(arg=None, lineno=1236)
         208	STORE_FAST(arg=8, lineno=1236)
         210	JUMP_ABSOLUTE(arg=61, lineno=1237)
>        212	LOAD_GLOBAL(arg=0, lineno=1239)
         214	LOAD_METHOD(arg=4, lineno=1239)
         216	LOAD_FAST(arg=0, lineno=1239)
         218	LOAD_GLOBAL(arg=1, lineno=1239)
         220	LOAD_CONST(arg=1, lineno=1239)
         222	LOAD_FAST(arg=8, lineno=1239)
         224	LOAD_FAST(arg=3, lineno=1239)
         226	BINARY_SUBTRACT(arg=None, lineno=1239)
         228	CALL_FUNCTION(arg=2, lineno=1239)
         230	LOAD_GLOBAL(arg=2, lineno=1239)
         232	LOAD_FAST(arg=8, lineno=1239)
         234	LOAD_FAST(arg=4, lineno=1239)
         236	BINARY_ADD(arg=None, lineno=1239)
         238	LOAD_FAST(arg=0, lineno=1239)
         240	LOAD_ATTR(arg=3, lineno=1239)
         242	LOAD_CONST(arg=1, lineno=1239)
         244	BINARY_SUBSCR(arg=None, lineno=1239)
         246	CALL_FUNCTION(arg=2, lineno=1239)
         248	BUILD_SLICE(arg=2, lineno=1239)
         250	BINARY_SUBSCR(arg=None, lineno=1239)
         252	CALL_METHOD(arg=1, lineno=1239)
         254	STORE_FAST(arg=10, lineno=1239)
         256	LOAD_FAST(arg=7, lineno=1240)
         258	LOAD_FAST(arg=8, lineno=1240)
         260	DUP_TOP_TWO(arg=None, lineno=1240)
         262	BINARY_SUBSCR(arg=None, lineno=1240)
         264	LOAD_FAST(arg=0, lineno=1240)
         266	LOAD_FAST(arg=8, lineno=1240)
         268	BINARY_SUBSCR(arg=None, lineno=1240)
         270	LOAD_FAST(arg=10, lineno=1240)
         272	LOAD_FAST(arg=5, lineno=1240)
         274	BINARY_ADD(arg=None, lineno=1240)
         276	COMPARE_OP(arg=5, lineno=1240)
         278	INPLACE_AND(arg=None, lineno=1240)
         280	ROT_THREE(arg=None, lineno=1240)
         282	STORE_SUBSCR(arg=None, lineno=1240)
         284	LOAD_FAST(arg=7, lineno=1242)
         286	LOAD_FAST(arg=8, lineno=1242)
         288	BINARY_SUBSCR(arg=None, lineno=1242)
         290	POP_JUMP_IF_TRUE(arg=152, lineno=1242)
         292	LOAD_FAST(arg=8, lineno=1243)
         294	LOAD_CONST(arg=3, lineno=1243)
         296	INPLACE_ADD(arg=None, lineno=1243)
         298	STORE_FAST(arg=8, lineno=1243)
         300	JUMP_ABSOLUTE(arg=61, lineno=1244)
>        302	LOAD_FAST(arg=8, lineno=1247)
         304	LOAD_FAST(arg=6, lineno=1247)
         306	LOAD_CONST(arg=3, lineno=1247)
         308	BINARY_ADD(arg=None, lineno=1247)
         310	INPLACE_ADD(arg=None, lineno=1247)
         312	STORE_FAST(arg=8, lineno=1247)
         314	LOAD_FAST(arg=8, lineno=1229)
         316	LOAD_FAST(arg=0, lineno=1229)
         318	LOAD_ATTR(arg=3, lineno=1229)
         320	LOAD_CONST(arg=1, lineno=1229)
         322	BINARY_SUBSCR(arg=None, lineno=1229)
         324	COMPARE_OP(arg=0, lineno=1229)
         326	POP_JUMP_IF_TRUE(arg=68, lineno=1229)
         328	LOAD_CONST(arg=2, lineno=1229)
         330	RETURN_VALUE(arg=None, lineno=1229)
>        332	LOAD_CONST(arg=2, lineno=1229)
         334	RETURN_VALUE(arg=None, lineno=1229)
2024-09-04 18:31:45,378 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:45,378 - stack: []
2024-09-04 18:31:45,378 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:45,379 - dispatch pc=0, inst=NOP(arg=None, lineno=1209)
2024-09-04 18:31:45,379 - stack []
2024-09-04 18:31:45,379 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1221)
2024-09-04 18:31:45,379 - stack []
2024-09-04 18:31:45,379 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1221)
2024-09-04 18:31:45,379 - stack ['$x2.0']
2024-09-04 18:31:45,379 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1221)
2024-09-04 18:31:45,379 - stack ['$x2.0', '$const4.1']
2024-09-04 18:31:45,379 - dispatch pc=8, inst=LOAD_GLOBAL(arg=0, lineno=1221)
2024-09-04 18:31:45,379 - stack ['$6binary_subscr.2']
2024-09-04 18:31:45,379 - dispatch pc=10, inst=LOAD_METHOD(arg=1, lineno=1221)
2024-09-04 18:31:45,380 - stack ['$6binary_subscr.2', '$8load_global.3']
2024-09-04 18:31:45,380 - dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=1221)
2024-09-04 18:31:45,380 - stack ['$6binary_subscr.2', '$10load_method.4']
2024-09-04 18:31:45,380 - dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=1221)
2024-09-04 18:31:45,380 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5']
2024-09-04 18:31:45,380 - dispatch pc=16, inst=LOAD_GLOBAL(arg=2, lineno=1221)
2024-09-04 18:31:45,380 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6']
2024-09-04 18:31:45,380 - dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=1221)
2024-09-04 18:31:45,380 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7']
2024-09-04 18:31:45,380 - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=1221)
2024-09-04 18:31:45,380 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8']
2024-09-04 18:31:45,381 - dispatch pc=22, inst=LOAD_ATTR(arg=3, lineno=1221)
2024-09-04 18:31:45,381 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8', '$x20.9']
2024-09-04 18:31:45,381 - dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=1221)
2024-09-04 18:31:45,381 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8', '$22load_attr.10']
2024-09-04 18:31:45,381 - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1221)
2024-09-04 18:31:45,381 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8', '$22load_attr.10', '$const24.11']
2024-09-04 18:31:45,381 - dispatch pc=28, inst=CALL_FUNCTION(arg=2, lineno=1221)
2024-09-04 18:31:45,381 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8', '$26binary_subscr.12']
2024-09-04 18:31:45,381 - dispatch pc=30, inst=BUILD_SLICE(arg=2, lineno=1221)
2024-09-04 18:31:45,381 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$28call_function.13']
2024-09-04 18:31:45,381 - dispatch pc=32, inst=BINARY_SUBSCR(arg=None, lineno=1221)
2024-09-04 18:31:45,382 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$30build_slice.15']
2024-09-04 18:31:45,382 - dispatch pc=34, inst=CALL_METHOD(arg=1, lineno=1221)
2024-09-04 18:31:45,382 - stack ['$6binary_subscr.2', '$10load_method.4', '$32binary_subscr.16']
2024-09-04 18:31:45,382 - dispatch pc=36, inst=COMPARE_OP(arg=5, lineno=1221)
2024-09-04 18:31:45,382 - stack ['$6binary_subscr.2', '$34call_method.17']
2024-09-04 18:31:45,382 - dispatch pc=38, inst=LOAD_FAST(arg=7, lineno=1221)
2024-09-04 18:31:45,382 - stack ['$36compare_op.18']
2024-09-04 18:31:45,382 - dispatch pc=40, inst=LOAD_CONST(arg=1, lineno=1221)
2024-09-04 18:31:45,382 - stack ['$36compare_op.18', '$peaks38.19']
2024-09-04 18:31:45,383 - dispatch pc=42, inst=STORE_SUBSCR(arg=None, lineno=1221)
2024-09-04 18:31:45,383 - stack ['$36compare_op.18', '$peaks38.19', '$const40.20']
2024-09-04 18:31:45,383 - dispatch pc=44, inst=LOAD_FAST(arg=7, lineno=1222)
2024-09-04 18:31:45,383 - stack []
2024-09-04 18:31:45,383 - dispatch pc=46, inst=LOAD_CONST(arg=1, lineno=1222)
2024-09-04 18:31:45,383 - stack ['$peaks44.21']
2024-09-04 18:31:45,383 - dispatch pc=48, inst=DUP_TOP_TWO(arg=None, lineno=1222)
2024-09-04 18:31:45,383 - stack ['$peaks44.21', '$const46.22']
2024-09-04 18:31:45,383 - dispatch pc=50, inst=BINARY_SUBSCR(arg=None, lineno=1222)
2024-09-04 18:31:45,384 - stack ['$peaks44.21', '$const46.22', '$48dup_top_two.23', '$48dup_top_two.24']
2024-09-04 18:31:45,384 - dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=1222)
2024-09-04 18:31:45,384 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25']
2024-09-04 18:31:45,384 - dispatch pc=54, inst=LOAD_CONST(arg=1, lineno=1222)
2024-09-04 18:31:45,384 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$x52.26']
2024-09-04 18:31:45,384 - dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=1222)
2024-09-04 18:31:45,384 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$x52.26', '$const54.27']
2024-09-04 18:31:45,384 - dispatch pc=58, inst=LOAD_GLOBAL(arg=0, lineno=1222)
2024-09-04 18:31:45,384 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28']
2024-09-04 18:31:45,384 - dispatch pc=60, inst=LOAD_METHOD(arg=4, lineno=1222)
2024-09-04 18:31:45,384 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$58load_global.29']
2024-09-04 18:31:45,385 - dispatch pc=62, inst=LOAD_FAST(arg=0, lineno=1222)
2024-09-04 18:31:45,385 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30']
2024-09-04 18:31:45,385 - dispatch pc=64, inst=LOAD_CONST(arg=2, lineno=1222)
2024-09-04 18:31:45,385 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31']
2024-09-04 18:31:45,385 - dispatch pc=66, inst=LOAD_GLOBAL(arg=2, lineno=1222)
2024-09-04 18:31:45,385 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32']
2024-09-04 18:31:45,385 - dispatch pc=68, inst=LOAD_FAST(arg=4, lineno=1222)
2024-09-04 18:31:45,385 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33']
2024-09-04 18:31:45,385 - dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1222)
2024-09-04 18:31:45,385 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34']
2024-09-04 18:31:45,385 - dispatch pc=72, inst=LOAD_ATTR(arg=3, lineno=1222)
2024-09-04 18:31:45,385 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34', '$x70.35']
2024-09-04 18:31:45,386 - dispatch pc=74, inst=LOAD_CONST(arg=1, lineno=1222)
2024-09-04 18:31:45,386 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34', '$72load_attr.36']
2024-09-04 18:31:45,386 - dispatch pc=76, inst=BINARY_SUBSCR(arg=None, lineno=1222)
2024-09-04 18:31:45,386 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34', '$72load_attr.36', '$const74.37']
2024-09-04 18:31:45,386 - dispatch pc=78, inst=CALL_FUNCTION(arg=2, lineno=1222)
2024-09-04 18:31:45,386 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34', '$76binary_subscr.38']
2024-09-04 18:31:45,386 - dispatch pc=80, inst=BUILD_SLICE(arg=2, lineno=1222)
2024-09-04 18:31:45,386 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$78call_function.39']
2024-09-04 18:31:45,386 - dispatch pc=82, inst=BINARY_SUBSCR(arg=None, lineno=1222)
2024-09-04 18:31:45,386 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$80build_slice.41']
2024-09-04 18:31:45,387 - dispatch pc=84, inst=CALL_METHOD(arg=1, lineno=1222)
2024-09-04 18:31:45,387 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$82binary_subscr.42']
2024-09-04 18:31:45,387 - dispatch pc=86, inst=LOAD_FAST(arg=5, lineno=1222)
2024-09-04 18:31:45,387 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$84call_method.43']
2024-09-04 18:31:45,387 - dispatch pc=88, inst=BINARY_ADD(arg=None, lineno=1222)
2024-09-04 18:31:45,387 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$84call_method.43', '$delta86.44']
2024-09-04 18:31:45,387 - dispatch pc=90, inst=COMPARE_OP(arg=5, lineno=1222)
2024-09-04 18:31:45,387 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$88binary_add.45']
2024-09-04 18:31:45,387 - dispatch pc=92, inst=INPLACE_AND(arg=None, lineno=1222)
2024-09-04 18:31:45,387 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$90compare_op.46']
2024-09-04 18:31:45,387 - dispatch pc=94, inst=ROT_THREE(arg=None, lineno=1222)
2024-09-04 18:31:45,387 - stack ['$peaks44.21', '$const46.22', '$92inplace_and.47']
2024-09-04 18:31:45,388 - dispatch pc=96, inst=STORE_SUBSCR(arg=None, lineno=1222)
2024-09-04 18:31:45,388 - stack ['$92inplace_and.47', '$peaks44.21', '$const46.22']
2024-09-04 18:31:45,388 - dispatch pc=98, inst=LOAD_FAST(arg=7, lineno=1224)
2024-09-04 18:31:45,388 - stack []
2024-09-04 18:31:45,388 - dispatch pc=100, inst=LOAD_CONST(arg=1, lineno=1224)
2024-09-04 18:31:45,388 - stack ['$peaks98.48']
2024-09-04 18:31:45,388 - dispatch pc=102, inst=BINARY_SUBSCR(arg=None, lineno=1224)
2024-09-04 18:31:45,388 - stack ['$peaks98.48', '$const100.49']
2024-09-04 18:31:45,388 - dispatch pc=104, inst=POP_JUMP_IF_FALSE(arg=59, lineno=1224)
2024-09-04 18:31:45,388 - stack ['$102binary_subscr.50']
2024-09-04 18:31:45,388 - end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0), Edge(pc=116, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:45,389 - pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=116 nstack_initial=0)])
2024-09-04 18:31:45,389 - stack: []
2024-09-04 18:31:45,389 - state.pc_initial: State(pc_initial=106 nstack_initial=0)
2024-09-04 18:31:45,389 - dispatch pc=106, inst=LOAD_FAST(arg=6, lineno=1225)
2024-09-04 18:31:45,389 - stack []
2024-09-04 18:31:45,389 - dispatch pc=108, inst=LOAD_CONST(arg=3, lineno=1225)
2024-09-04 18:31:45,389 - stack ['$wait106.0']
2024-09-04 18:31:45,389 - dispatch pc=110, inst=BINARY_ADD(arg=None, lineno=1225)
2024-09-04 18:31:45,389 - stack ['$wait106.0', '$const108.1']
2024-09-04 18:31:45,389 - dispatch pc=112, inst=STORE_FAST(arg=8, lineno=1225)
2024-09-04 18:31:45,389 - stack ['$110binary_add.2']
2024-09-04 18:31:45,390 - dispatch pc=114, inst=JUMP_FORWARD(arg=2, lineno=1225)
2024-09-04 18:31:45,390 - stack []
2024-09-04 18:31:45,390 - end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:45,390 - pending: deque([State(pc_initial=116 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
2024-09-04 18:31:45,390 - stack: []
2024-09-04 18:31:45,390 - state.pc_initial: State(pc_initial=116 nstack_initial=0)
2024-09-04 18:31:45,390 - dispatch pc=116, inst=LOAD_CONST(arg=3, lineno=1227)
2024-09-04 18:31:45,390 - stack []
2024-09-04 18:31:45,390 - dispatch pc=118, inst=STORE_FAST(arg=8, lineno=1227)
2024-09-04 18:31:45,390 - stack ['$const116.0']
2024-09-04 18:31:45,390 - end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:45,390 - pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
2024-09-04 18:31:45,391 - stack: []
2024-09-04 18:31:45,391 - state.pc_initial: State(pc_initial=120 nstack_initial=0)
2024-09-04 18:31:45,391 - dispatch pc=120, inst=LOAD_FAST(arg=8, lineno=1229)
2024-09-04 18:31:45,391 - stack []
2024-09-04 18:31:45,391 - dispatch pc=122, inst=LOAD_FAST(arg=0, lineno=1229)
2024-09-04 18:31:45,391 - stack ['$n120.0']
2024-09-04 18:31:45,391 - dispatch pc=124, inst=LOAD_ATTR(arg=3, lineno=1229)
2024-09-04 18:31:45,391 - stack ['$n120.0', '$x122.1']
2024-09-04 18:31:45,391 - dispatch pc=126, inst=LOAD_CONST(arg=1, lineno=1229)
2024-09-04 18:31:45,391 - stack ['$n120.0', '$124load_attr.2']
2024-09-04 18:31:45,391 - dispatch pc=128, inst=BINARY_SUBSCR(arg=None, lineno=1229)
2024-09-04 18:31:45,391 - stack ['$n120.0', '$124load_attr.2', '$const126.3']
2024-09-04 18:31:45,392 - dispatch pc=130, inst=COMPARE_OP(arg=0, lineno=1229)
2024-09-04 18:31:45,392 - stack ['$n120.0', '$128binary_subscr.4']
2024-09-04 18:31:45,392 - dispatch pc=132, inst=POP_JUMP_IF_FALSE(arg=167, lineno=1229)
2024-09-04 18:31:45,392 - stack ['$130compare_op.5']
2024-09-04 18:31:45,392 - end state. edges=[Edge(pc=134, stack=(), blockstack=(), npush=0), Edge(pc=332, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:45,392 - pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=134 nstack_initial=0), State(pc_initial=332 nstack_initial=0)])
2024-09-04 18:31:45,392 - pending: deque([State(pc_initial=134 nstack_initial=0), State(pc_initial=332 nstack_initial=0)])
2024-09-04 18:31:45,392 - stack: []
2024-09-04 18:31:45,392 - state.pc_initial: State(pc_initial=134 nstack_initial=0)
2024-09-04 18:31:45,392 - dispatch pc=134, inst=LOAD_GLOBAL(arg=0, lineno=1230)
2024-09-04 18:31:45,392 - stack []
2024-09-04 18:31:45,393 - dispatch pc=136, inst=LOAD_METHOD(arg=1, lineno=1230)
2024-09-04 18:31:45,393 - stack ['$134load_global.0']
2024-09-04 18:31:45,393 - dispatch pc=138, inst=LOAD_FAST(arg=0, lineno=1230)
2024-09-04 18:31:45,393 - stack ['$136load_method.1']
2024-09-04 18:31:45,393 - dispatch pc=140, inst=LOAD_GLOBAL(arg=1, lineno=1230)
2024-09-04 18:31:45,393 - stack ['$136load_method.1', '$x138.2']
2024-09-04 18:31:45,393 - dispatch pc=142, inst=LOAD_CONST(arg=1, lineno=1230)
2024-09-04 18:31:45,393 - stack ['$136load_method.1', '$x138.2', '$140load_global.3']
2024-09-04 18:31:45,393 - dispatch pc=144, inst=LOAD_FAST(arg=8, lineno=1230)
2024-09-04 18:31:45,393 - stack ['$136load_method.1', '$x138.2', '$140load_global.3', '$const142.4']
2024-09-04 18:31:45,393 - dispatch pc=146, inst=LOAD_FAST(arg=1, lineno=1230)
2024-09-04 18:31:45,393 - stack ['$136load_method.1', '$x138.2', '$140load_global.3', '$const142.4', '$n144.5']
2024-09-04 18:31:45,394 - dispatch pc=148, inst=BINARY_SUBTRACT(arg=None, lineno=1230)
2024-09-04 18:31:45,394 - stack ['$136load_method.1', '$x138.2', '$140load_global.3', '$const142.4', '$n144.5', '$pre_max146.6']
2024-09-04 18:31:45,394 - dispatch pc=150, inst=CALL_FUNCTION(arg=2, lineno=1230)
2024-09-04 18:31:45,394 - stack ['$136load_method.1', '$x138.2', '$140load_global.3', '$const142.4', '$148binary_subtract.7']
2024-09-04 18:31:45,394 - dispatch pc=152, inst=LOAD_GLOBAL(arg=2, lineno=1230)
2024-09-04 18:31:45,394 - stack ['$136load_method.1', '$x138.2', '$150call_function.8']
2024-09-04 18:31:45,394 - dispatch pc=154, inst=LOAD_FAST(arg=8, lineno=1230)
2024-09-04 18:31:45,394 - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9']
2024-09-04 18:31:45,394 - dispatch pc=156, inst=LOAD_FAST(arg=2, lineno=1230)
2024-09-04 18:31:45,394 - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$n154.10']
2024-09-04 18:31:45,394 - dispatch pc=158, inst=BINARY_ADD(arg=None, lineno=1230)
2024-09-04 18:31:45,395 - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$n154.10', '$post_max156.11']
2024-09-04 18:31:45,395 - dispatch pc=160, inst=LOAD_FAST(arg=0, lineno=1230)
2024-09-04 18:31:45,395 - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12']
2024-09-04 18:31:45,395 - dispatch pc=162, inst=LOAD_ATTR(arg=3, lineno=1230)
2024-09-04 18:31:45,395 - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12', '$x160.13']
2024-09-04 18:31:45,395 - dispatch pc=164, inst=LOAD_CONST(arg=1, lineno=1230)
2024-09-04 18:31:45,395 - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12', '$162load_attr.14']
2024-09-04 18:31:45,395 - dispatch pc=166, inst=BINARY_SUBSCR(arg=None, lineno=1230)
2024-09-04 18:31:45,395 - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12', '$162load_attr.14', '$const164.15']
2024-09-04 18:31:45,395 - dispatch pc=168, inst=CALL_FUNCTION(arg=2, lineno=1230)
2024-09-04 18:31:45,395 - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12', '$166binary_subscr.16']
2024-09-04 18:31:45,396 - dispatch pc=170, inst=BUILD_SLICE(arg=2, lineno=1230)
2024-09-04 18:31:45,396 - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$168call_function.17']
2024-09-04 18:31:45,396 - dispatch pc=172, inst=BINARY_SUBSCR(arg=None, lineno=1230)
2024-09-04 18:31:45,396 - stack ['$136load_method.1', '$x138.2', '$170build_slice.19']
2024-09-04 18:31:45,396 - dispatch pc=174, inst=CALL_METHOD(arg=1, lineno=1230)
2024-09-04 18:31:45,396 - stack ['$136load_method.1', '$172binary_subscr.20']
2024-09-04 18:31:45,396 - dispatch pc=176, inst=STORE_FAST(arg=9, lineno=1230)
2024-09-04 18:31:45,396 - stack ['$174call_method.21']
2024-09-04 18:31:45,396 - dispatch pc=178, inst=LOAD_FAST(arg=0, lineno=1233)
2024-09-04 18:31:45,396 - stack []
2024-09-04 18:31:45,396 - dispatch pc=180, inst=LOAD_FAST(arg=8, lineno=1233)
2024-09-04 18:31:45,397 - stack ['$x178.22']
2024-09-04 18:31:45,397 - dispatch pc=182, inst=BINARY_SUBSCR(arg=None, lineno=1233)
2024-09-04 18:31:45,397 - stack ['$x178.22', '$n180.23']
2024-09-04 18:31:45,397 - dispatch pc=184, inst=LOAD_FAST(arg=9, lineno=1233)
2024-09-04 18:31:45,397 - stack ['$182binary_subscr.24']
2024-09-04 18:31:45,397 - dispatch pc=186, inst=COMPARE_OP(arg=2, lineno=1233)
2024-09-04 18:31:45,397 - stack ['$182binary_subscr.24', '$maxn184.25']
2024-09-04 18:31:45,397 - dispatch pc=188, inst=LOAD_FAST(arg=7, lineno=1233)
2024-09-04 18:31:45,397 - stack ['$186compare_op.26']
2024-09-04 18:31:45,397 - dispatch pc=190, inst=LOAD_FAST(arg=8, lineno=1233)
2024-09-04 18:31:45,397 - stack ['$186compare_op.26', '$peaks188.27']
2024-09-04 18:31:45,397 - dispatch pc=192, inst=STORE_SUBSCR(arg=None, lineno=1233)
2024-09-04 18:31:45,397 - stack ['$186compare_op.26', '$peaks188.27', '$n190.28']
2024-09-04 18:31:45,398 - dispatch pc=194, inst=LOAD_FAST(arg=7, lineno=1235)
2024-09-04 18:31:45,398 - stack []
2024-09-04 18:31:45,398 - dispatch pc=196, inst=LOAD_FAST(arg=8, lineno=1235)
2024-09-04 18:31:45,398 - stack ['$peaks194.29']
2024-09-04 18:31:45,398 - dispatch pc=198, inst=BINARY_SUBSCR(arg=None, lineno=1235)
2024-09-04 18:31:45,398 - stack ['$peaks194.29', '$n196.30']
2024-09-04 18:31:45,398 - dispatch pc=200, inst=POP_JUMP_IF_TRUE(arg=107, lineno=1235)
2024-09-04 18:31:45,398 - stack ['$198binary_subscr.31']
2024-09-04 18:31:45,398 - end state. edges=[Edge(pc=202, stack=(), blockstack=(), npush=0), Edge(pc=212, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:45,398 - pending: deque([State(pc_initial=332 nstack_initial=0), State(pc_initial=202 nstack_initial=0), State(pc_initial=212 nstack_initial=0)])
2024-09-04 18:31:45,398 - stack: []
2024-09-04 18:31:45,399 - state.pc_initial: State(pc_initial=332 nstack_initial=0)
2024-09-04 18:31:45,399 - dispatch pc=332, inst=LOAD_CONST(arg=2, lineno=1229)
2024-09-04 18:31:45,399 - stack []
2024-09-04 18:31:45,399 - dispatch pc=334, inst=RETURN_VALUE(arg=None, lineno=1229)
2024-09-04 18:31:45,399 - stack ['$const332.0']
2024-09-04 18:31:45,399 - end state. edges=[]
2024-09-04 18:31:45,399 - pending: deque([State(pc_initial=202 nstack_initial=0), State(pc_initial=212 nstack_initial=0)])
2024-09-04 18:31:45,399 - stack: []
2024-09-04 18:31:45,399 - state.pc_initial: State(pc_initial=202 nstack_initial=0)
2024-09-04 18:31:45,399 - dispatch pc=202, inst=LOAD_FAST(arg=8, lineno=1236)
2024-09-04 18:31:45,399 - stack []
2024-09-04 18:31:45,400 - dispatch pc=204, inst=LOAD_CONST(arg=3, lineno=1236)
2024-09-04 18:31:45,400 - stack ['$n202.0']
2024-09-04 18:31:45,400 - dispatch pc=206, inst=INPLACE_ADD(arg=None, lineno=1236)
2024-09-04 18:31:45,400 - stack ['$n202.0', '$const204.1']
2024-09-04 18:31:45,400 - dispatch pc=208, inst=STORE_FAST(arg=8, lineno=1236)
2024-09-04 18:31:45,400 - stack ['$206inplace_add.2']
2024-09-04 18:31:45,400 - dispatch pc=210, inst=JUMP_ABSOLUTE(arg=61, lineno=1237)
2024-09-04 18:31:45,400 - stack []
2024-09-04 18:31:45,400 - end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:45,400 - pending: deque([State(pc_initial=212 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
2024-09-04 18:31:45,400 - stack: []
2024-09-04 18:31:45,400 - state.pc_initial: State(pc_initial=212 nstack_initial=0)
2024-09-04 18:31:45,400 - dispatch pc=212, inst=LOAD_GLOBAL(arg=0, lineno=1239)
2024-09-04 18:31:45,401 - stack []
2024-09-04 18:31:45,401 - dispatch pc=214, inst=LOAD_METHOD(arg=4, lineno=1239)
2024-09-04 18:31:45,401 - stack ['$212load_global.0']
2024-09-04 18:31:45,401 - dispatch pc=216, inst=LOAD_FAST(arg=0, lineno=1239)
2024-09-04 18:31:45,401 - stack ['$214load_method.1']
2024-09-04 18:31:45,401 - dispatch pc=218, inst=LOAD_GLOBAL(arg=1, lineno=1239)
2024-09-04 18:31:45,401 - stack ['$214load_method.1', '$x216.2']
2024-09-04 18:31:45,401 - dispatch pc=220, inst=LOAD_CONST(arg=1, lineno=1239)
2024-09-04 18:31:45,401 - stack ['$214load_method.1', '$x216.2', '$218load_global.3']
2024-09-04 18:31:45,401 - dispatch pc=222, inst=LOAD_FAST(arg=8, lineno=1239)
2024-09-04 18:31:45,402 - stack ['$214load_method.1', '$x216.2', '$218load_global.3', '$const220.4']
2024-09-04 18:31:45,402 - dispatch pc=224, inst=LOAD_FAST(arg=3, lineno=1239)
2024-09-04 18:31:45,402 - stack ['$214load_method.1', '$x216.2', '$218load_global.3', '$const220.4', '$n222.5']
2024-09-04 18:31:45,402 - dispatch pc=226, inst=BINARY_SUBTRACT(arg=None, lineno=1239)
2024-09-04 18:31:45,402 - stack ['$214load_method.1', '$x216.2', '$218load_global.3', '$const220.4', '$n222.5', '$pre_avg224.6']
2024-09-04 18:31:45,402 - dispatch pc=228, inst=CALL_FUNCTION(arg=2, lineno=1239)
2024-09-04 18:31:45,402 - stack ['$214load_method.1', '$x216.2', '$218load_global.3', '$const220.4', '$226binary_subtract.7']
2024-09-04 18:31:45,402 - dispatch pc=230, inst=LOAD_GLOBAL(arg=2, lineno=1239)
2024-09-04 18:31:45,402 - stack ['$214load_method.1', '$x216.2', '$228call_function.8']
2024-09-04 18:31:45,402 - dispatch pc=232, inst=LOAD_FAST(arg=8, lineno=1239)
2024-09-04 18:31:45,402 - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9']
2024-09-04 18:31:45,402 - dispatch pc=234, inst=LOAD_FAST(arg=4, lineno=1239)
2024-09-04 18:31:45,404 - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$n232.10']
2024-09-04 18:31:45,404 - dispatch pc=236, inst=BINARY_ADD(arg=None, lineno=1239)
2024-09-04 18:31:45,404 - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$n232.10', '$post_avg234.11']
2024-09-04 18:31:45,404 - dispatch pc=238, inst=LOAD_FAST(arg=0, lineno=1239)
2024-09-04 18:31:45,404 - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12']
2024-09-04 18:31:45,404 - dispatch pc=240, inst=LOAD_ATTR(arg=3, lineno=1239)
2024-09-04 18:31:45,404 - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12', '$x238.13']
2024-09-04 18:31:45,404 - dispatch pc=242, inst=LOAD_CONST(arg=1, lineno=1239)
2024-09-04 18:31:45,404 - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12', '$240load_attr.14']
2024-09-04 18:31:45,404 - dispatch pc=244, inst=BINARY_SUBSCR(arg=None, lineno=1239)
2024-09-04 18:31:45,404 - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12', '$240load_attr.14', '$const242.15']
2024-09-04 18:31:45,405 - dispatch pc=246, inst=CALL_FUNCTION(arg=2, lineno=1239)
2024-09-04 18:31:45,405 - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12', '$244binary_subscr.16']
2024-09-04 18:31:45,405 - dispatch pc=248, inst=BUILD_SLICE(arg=2, lineno=1239)
2024-09-04 18:31:45,405 - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$246call_function.17']
2024-09-04 18:31:45,405 - dispatch pc=250, inst=BINARY_SUBSCR(arg=None, lineno=1239)
2024-09-04 18:31:45,405 - stack ['$214load_method.1', '$x216.2', '$248build_slice.19']
2024-09-04 18:31:45,405 - dispatch pc=252, inst=CALL_METHOD(arg=1, lineno=1239)
2024-09-04 18:31:45,405 - stack ['$214load_method.1', '$250binary_subscr.20']
2024-09-04 18:31:45,405 - dispatch pc=254, inst=STORE_FAST(arg=10, lineno=1239)
2024-09-04 18:31:45,405 - stack ['$252call_method.21']
2024-09-04 18:31:45,405 - dispatch pc=256, inst=LOAD_FAST(arg=7, lineno=1240)
2024-09-04 18:31:45,406 - stack []
2024-09-04 18:31:45,406 - dispatch pc=258, inst=LOAD_FAST(arg=8, lineno=1240)
2024-09-04 18:31:45,406 - stack ['$peaks256.22']
2024-09-04 18:31:45,406 - dispatch pc=260, inst=DUP_TOP_TWO(arg=None, lineno=1240)
2024-09-04 18:31:45,406 - stack ['$peaks256.22', '$n258.23']
2024-09-04 18:31:45,406 - dispatch pc=262, inst=BINARY_SUBSCR(arg=None, lineno=1240)
2024-09-04 18:31:45,406 - stack ['$peaks256.22', '$n258.23', '$260dup_top_two.24', '$260dup_top_two.25']
2024-09-04 18:31:45,406 - dispatch pc=264, inst=LOAD_FAST(arg=0, lineno=1240)
2024-09-04 18:31:45,406 - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26']
2024-09-04 18:31:45,406 - dispatch pc=266, inst=LOAD_FAST(arg=8, lineno=1240)
2024-09-04 18:31:45,406 - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$x264.27']
2024-09-04 18:31:45,406 - dispatch pc=268, inst=BINARY_SUBSCR(arg=None, lineno=1240)
2024-09-04 18:31:45,407 - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$x264.27', '$n266.28']
2024-09-04 18:31:45,407 - dispatch pc=270, inst=LOAD_FAST(arg=10, lineno=1240)
2024-09-04 18:31:45,407 - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$268binary_subscr.29']
2024-09-04 18:31:45,407 - dispatch pc=272, inst=LOAD_FAST(arg=5, lineno=1240)
2024-09-04 18:31:45,407 - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$268binary_subscr.29', '$avgn270.30']
2024-09-04 18:31:45,407 - dispatch pc=274, inst=BINARY_ADD(arg=None, lineno=1240)
2024-09-04 18:31:45,407 - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$268binary_subscr.29', '$avgn270.30', '$delta272.31']
2024-09-04 18:31:45,407 - dispatch pc=276, inst=COMPARE_OP(arg=5, lineno=1240)
2024-09-04 18:31:45,407 - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$268binary_subscr.29', '$274binary_add.32']
2024-09-04 18:31:45,407 - dispatch pc=278, inst=INPLACE_AND(arg=None, lineno=1240)
2024-09-04 18:31:45,407 - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$276compare_op.33']
2024-09-04 18:31:45,408 - dispatch pc=280, inst=ROT_THREE(arg=None, lineno=1240)
2024-09-04 18:31:45,408 - stack ['$peaks256.22', '$n258.23', '$278inplace_and.34']
2024-09-04 18:31:45,408 - dispatch pc=282, inst=STORE_SUBSCR(arg=None, lineno=1240)
2024-09-04 18:31:45,408 - stack ['$278inplace_and.34', '$peaks256.22', '$n258.23']
2024-09-04 18:31:45,408 - dispatch pc=284, inst=LOAD_FAST(arg=7, lineno=1242)
2024-09-04 18:31:45,408 - stack []
2024-09-04 18:31:45,408 - dispatch pc=286, inst=LOAD_FAST(arg=8, lineno=1242)
2024-09-04 18:31:45,408 - stack ['$peaks284.35']
2024-09-04 18:31:45,408 - dispatch pc=288, inst=BINARY_SUBSCR(arg=None, lineno=1242)
2024-09-04 18:31:45,408 - stack ['$peaks284.35', '$n286.36']
2024-09-04 18:31:45,409 - dispatch pc=290, inst=POP_JUMP_IF_TRUE(arg=152, lineno=1242)
2024-09-04 18:31:45,409 - stack ['$288binary_subscr.37']
2024-09-04 18:31:45,409 - end state. edges=[Edge(pc=292, stack=(), blockstack=(), npush=0), Edge(pc=302, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:45,409 - pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0)])
2024-09-04 18:31:45,409 - pending: deque([State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0)])
2024-09-04 18:31:45,409 - stack: []
2024-09-04 18:31:45,409 - state.pc_initial: State(pc_initial=292 nstack_initial=0)
2024-09-04 18:31:45,409 - dispatch pc=292, inst=LOAD_FAST(arg=8, lineno=1243)
2024-09-04 18:31:45,409 - stack []
2024-09-04 18:31:45,409 - dispatch pc=294, inst=LOAD_CONST(arg=3, lineno=1243)
2024-09-04 18:31:45,409 - stack ['$n292.0']
2024-09-04 18:31:45,410 - dispatch pc=296, inst=INPLACE_ADD(arg=None, lineno=1243)
2024-09-04 18:31:45,410 - stack ['$n292.0', '$const294.1']
2024-09-04 18:31:45,410 - dispatch pc=298, inst=STORE_FAST(arg=8, lineno=1243)
2024-09-04 18:31:45,410 - stack ['$296inplace_add.2']
2024-09-04 18:31:45,410 - dispatch pc=300, inst=JUMP_ABSOLUTE(arg=61, lineno=1244)
2024-09-04 18:31:45,410 - stack []
2024-09-04 18:31:45,410 - end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:45,410 - pending: deque([State(pc_initial=302 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
2024-09-04 18:31:45,410 - stack: []
2024-09-04 18:31:45,410 - state.pc_initial: State(pc_initial=302 nstack_initial=0)
2024-09-04 18:31:45,410 - dispatch pc=302, inst=LOAD_FAST(arg=8, lineno=1247)
2024-09-04 18:31:45,410 - stack []
2024-09-04 18:31:45,411 - dispatch pc=304, inst=LOAD_FAST(arg=6, lineno=1247)
2024-09-04 18:31:45,411 - stack ['$n302.0']
2024-09-04 18:31:45,411 - dispatch pc=306, inst=LOAD_CONST(arg=3, lineno=1247)
2024-09-04 18:31:45,411 - stack ['$n302.0', '$wait304.1']
2024-09-04 18:31:45,411 - dispatch pc=308, inst=BINARY_ADD(arg=None, lineno=1247)
2024-09-04 18:31:45,411 - stack ['$n302.0', '$wait304.1', '$const306.2']
2024-09-04 18:31:45,411 - dispatch pc=310, inst=INPLACE_ADD(arg=None, lineno=1247)
2024-09-04 18:31:45,411 - stack ['$n302.0', '$308binary_add.3']
2024-09-04 18:31:45,411 - dispatch pc=312, inst=STORE_FAST(arg=8, lineno=1247)
2024-09-04 18:31:45,411 - stack ['$310inplace_add.4']
2024-09-04 18:31:45,411 - dispatch pc=314, inst=LOAD_FAST(arg=8, lineno=1229)
2024-09-04 18:31:45,412 - stack []
2024-09-04 18:31:45,412 - dispatch pc=316, inst=LOAD_FAST(arg=0, lineno=1229)
2024-09-04 18:31:45,412 - stack ['$n314.5']
2024-09-04 18:31:45,412 - dispatch pc=318, inst=LOAD_ATTR(arg=3, lineno=1229)
2024-09-04 18:31:45,412 - stack ['$n314.5', '$x316.6']
2024-09-04 18:31:45,412 - dispatch pc=320, inst=LOAD_CONST(arg=1, lineno=1229)
2024-09-04 18:31:45,412 - stack ['$n314.5', '$318load_attr.7']
2024-09-04 18:31:45,412 - dispatch pc=322, inst=BINARY_SUBSCR(arg=None, lineno=1229)
2024-09-04 18:31:45,412 - stack ['$n314.5', '$318load_attr.7', '$const320.8']
2024-09-04 18:31:45,412 - dispatch pc=324, inst=COMPARE_OP(arg=0, lineno=1229)
2024-09-04 18:31:45,412 - stack ['$n314.5', '$322binary_subscr.9']
2024-09-04 18:31:45,413 - dispatch pc=326, inst=POP_JUMP_IF_TRUE(arg=68, lineno=1229)
2024-09-04 18:31:45,413 - stack ['$324compare_op.10']
2024-09-04 18:31:45,413 - end state. edges=[Edge(pc=328, stack=(), blockstack=(), npush=0), Edge(pc=134, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:45,413 - pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=328 nstack_initial=0), State(pc_initial=134 nstack_initial=0)])
2024-09-04 18:31:45,413 - pending: deque([State(pc_initial=328 nstack_initial=0), State(pc_initial=134 nstack_initial=0)])
2024-09-04 18:31:45,413 - stack: []
2024-09-04 18:31:45,413 - state.pc_initial: State(pc_initial=328 nstack_initial=0)
2024-09-04 18:31:45,413 - dispatch pc=328, inst=LOAD_CONST(arg=2, lineno=1229)
2024-09-04 18:31:45,413 - stack []
2024-09-04 18:31:45,413 - dispatch pc=330, inst=RETURN_VALUE(arg=None, lineno=1229)
2024-09-04 18:31:45,413 - stack ['$const328.0']
2024-09-04 18:31:45,413 - end state. edges=[]
2024-09-04 18:31:45,414 - pending: deque([State(pc_initial=134 nstack_initial=0)])
2024-09-04 18:31:45,414 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:45,414 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=116 nstack_initial=0): set(),
             State(pc_initial=120 nstack_initial=0): set(),
             State(pc_initial=134 nstack_initial=0): set(),
             State(pc_initial=202 nstack_initial=0): set(),
             State(pc_initial=212 nstack_initial=0): set(),
             State(pc_initial=292 nstack_initial=0): set(),
             State(pc_initial=302 nstack_initial=0): set(),
             State(pc_initial=328 nstack_initial=0): set(),
             State(pc_initial=332 nstack_initial=0): set()})
2024-09-04 18:31:45,414 - defmap: {}
2024-09-04 18:31:45,414 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:45,414 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:45,414 - keep phismap: {}
2024-09-04 18:31:45,414 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:45,414 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:45,414 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$8load_global.3'}), (10, {'item': '$8load_global.3', 'res': '$10load_method.4'}), (12, {'res': '$x12.5'}), (14, {'res': '$const14.6'}), (16, {'res': '$16load_global.7'}), (18, {'res': '$post_max18.8'}), (20, {'res': '$x20.9'}), (22, {'item': '$x20.9', 'res': '$22load_attr.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$22load_attr.10', 'res': '$26binary_subscr.12'}), (28, {'func': '$16load_global.7', 'args': ['$post_max18.8', '$26binary_subscr.12'], 'res': '$28call_function.13'}), (30, {'start': '$const14.6', 'stop': '$28call_function.13', 'step': None, 'res': '$30build_slice.15', 'slicevar': '$30build_slice.14'}), (32, {'index': '$30build_slice.15', 'target': '$x12.5', 'res': '$32binary_subscr.16'}), (34, {'func': '$10load_method.4', 'args': ['$32binary_subscr.16'], 'res': '$34call_method.17'}), (36, {'lhs': '$6binary_subscr.2', 'rhs': '$34call_method.17', 'res': '$36compare_op.18'}), (38, {'res': '$peaks38.19'}), (40, {'res': '$const40.20'}), (42, {'target': '$peaks38.19', 'index': '$const40.20', 'value': '$36compare_op.18'}), (44, {'res': '$peaks44.21'}), (46, {'res': '$const46.22'}), (48, {'orig': ['$peaks44.21', '$const46.22'], 'duped': ['$48dup_top_two.23', '$48dup_top_two.24']}), (50, {'index': '$48dup_top_two.24', 'target': '$48dup_top_two.23', 'res': '$50binary_subscr.25'}), (52, {'res': '$x52.26'}), (54, {'res': '$const54.27'}), (56, {'index': '$const54.27', 'target': '$x52.26', 'res': '$56binary_subscr.28'}), (58, {'res': '$58load_global.29'}), (60, {'item': '$58load_global.29', 'res': '$60load_method.30'}), (62, {'res': '$x62.31'}), (64, {'res': '$const64.32'}), (66, {'res': '$66load_global.33'}), (68, {'res': '$post_avg68.34'}), (70, {'res': '$x70.35'}), (72, {'item': '$x70.35', 'res': '$72load_attr.36'}), (74, {'res': '$const74.37'}), (76, {'index': '$const74.37', 'target': '$72load_attr.36', 'res': '$76binary_subscr.38'}), (78, {'func': '$66load_global.33', 'args': ['$post_avg68.34', '$76binary_subscr.38'], 'res': '$78call_function.39'}), (80, {'start': '$const64.32', 'stop': '$78call_function.39', 'step': None, 'res': '$80build_slice.41', 'slicevar': '$80build_slice.40'}), (82, {'index': '$80build_slice.41', 'target': '$x62.31', 'res': '$82binary_subscr.42'}), (84, {'func': '$60load_method.30', 'args': ['$82binary_subscr.42'], 'res': '$84call_method.43'}), (86, {'res': '$delta86.44'}), (88, {'lhs': '$84call_method.43', 'rhs': '$delta86.44', 'res': '$88binary_add.45'}), (90, {'lhs': '$56binary_subscr.28', 'rhs': '$88binary_add.45', 'res': '$90compare_op.46'}), (92, {'lhs': '$50binary_subscr.25', 'rhs': '$90compare_op.46', 'res': '$92inplace_and.47'}), (96, {'target': '$peaks44.21', 'index': '$const46.22', 'value': '$92inplace_and.47'}), (98, {'res': '$peaks98.48'}), (100, {'res': '$const100.49'}), (102, {'index': '$const100.49', 'target': '$peaks98.48', 'res': '$102binary_subscr.50'}), (104, {'pred': '$102binary_subscr.50'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: (), 116: ()})
2024-09-04 18:31:45,414 - block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$wait106.0'}), (108, {'res': '$const108.1'}), (110, {'lhs': '$wait106.0', 'rhs': '$const108.1', 'res': '$110binary_add.2'}), (112, {'value': '$110binary_add.2'}), (114, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ()})
2024-09-04 18:31:45,414 - block_infos State(pc_initial=116 nstack_initial=0):
AdaptBlockInfo(insts=((116, {'res': '$const116.0'}), (118, {'value': '$const116.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ()})
2024-09-04 18:31:45,414 - block_infos State(pc_initial=120 nstack_initial=0):
AdaptBlockInfo(insts=((120, {'res': '$n120.0'}), (122, {'res': '$x122.1'}), (124, {'item': '$x122.1', 'res': '$124load_attr.2'}), (126, {'res': '$const126.3'}), (128, {'index': '$const126.3', 'target': '$124load_attr.2', 'res': '$128binary_subscr.4'}), (130, {'lhs': '$n120.0', 'rhs': '$128binary_subscr.4', 'res': '$130compare_op.5'}), (132, {'pred': '$130compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={134: (), 332: ()})
2024-09-04 18:31:45,414 - block_infos State(pc_initial=134 nstack_initial=0):
AdaptBlockInfo(insts=((134, {'res': '$134load_global.0'}), (136, {'item': '$134load_global.0', 'res': '$136load_method.1'}), (138, {'res': '$x138.2'}), (140, {'res': '$140load_global.3'}), (142, {'res': '$const142.4'}), (144, {'res': '$n144.5'}), (146, {'res': '$pre_max146.6'}), (148, {'lhs': '$n144.5', 'rhs': '$pre_max146.6', 'res': '$148binary_subtract.7'}), (150, {'func': '$140load_global.3', 'args': ['$const142.4', '$148binary_subtract.7'], 'res': '$150call_function.8'}), (152, {'res': '$152load_global.9'}), (154, {'res': '$n154.10'}), (156, {'res': '$post_max156.11'}), (158, {'lhs': '$n154.10', 'rhs': '$post_max156.11', 'res': '$158binary_add.12'}), (160, {'res': '$x160.13'}), (162, {'item': '$x160.13', 'res': '$162load_attr.14'}), (164, {'res': '$const164.15'}), (166, {'index': '$const164.15', 'target': '$162load_attr.14', 'res': '$166binary_subscr.16'}), (168, {'func': '$152load_global.9', 'args': ['$158binary_add.12', '$166binary_subscr.16'], 'res': '$168call_function.17'}), (170, {'start': '$150call_function.8', 'stop': '$168call_function.17', 'step': None, 'res': '$170build_slice.19', 'slicevar': '$170build_slice.18'}), (172, {'index': '$170build_slice.19', 'target': '$x138.2', 'res': '$172binary_subscr.20'}), (174, {'func': '$136load_method.1', 'args': ['$172binary_subscr.20'], 'res': '$174call_method.21'}), (176, {'value': '$174call_method.21'}), (178, {'res': '$x178.22'}), (180, {'res': '$n180.23'}), (182, {'index': '$n180.23', 'target': '$x178.22', 'res': '$182binary_subscr.24'}), (184, {'res': '$maxn184.25'}), (186, {'lhs': '$182binary_subscr.24', 'rhs': '$maxn184.25', 'res': '$186compare_op.26'}), (188, {'res': '$peaks188.27'}), (190, {'res': '$n190.28'}), (192, {'target': '$peaks188.27', 'index': '$n190.28', 'value': '$186compare_op.26'}), (194, {'res': '$peaks194.29'}), (196, {'res': '$n196.30'}), (198, {'index': '$n196.30', 'target': '$peaks194.29', 'res': '$198binary_subscr.31'}), (200, {'pred': '$198binary_subscr.31'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={202: (), 212: ()})
2024-09-04 18:31:45,415 - block_infos State(pc_initial=202 nstack_initial=0):
AdaptBlockInfo(insts=((202, {'res': '$n202.0'}), (204, {'res': '$const204.1'}), (206, {'lhs': '$n202.0', 'rhs': '$const204.1', 'res': '$206inplace_add.2'}), (208, {'value': '$206inplace_add.2'}), (210, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ()})
2024-09-04 18:31:45,415 - block_infos State(pc_initial=212 nstack_initial=0):
AdaptBlockInfo(insts=((212, {'res': '$212load_global.0'}), (214, {'item': '$212load_global.0', 'res': '$214load_method.1'}), (216, {'res': '$x216.2'}), (218, {'res': '$218load_global.3'}), (220, {'res': '$const220.4'}), (222, {'res': '$n222.5'}), (224, {'res': '$pre_avg224.6'}), (226, {'lhs': '$n222.5', 'rhs': '$pre_avg224.6', 'res': '$226binary_subtract.7'}), (228, {'func': '$218load_global.3', 'args': ['$const220.4', '$226binary_subtract.7'], 'res': '$228call_function.8'}), (230, {'res': '$230load_global.9'}), (232, {'res': '$n232.10'}), (234, {'res': '$post_avg234.11'}), (236, {'lhs': '$n232.10', 'rhs': '$post_avg234.11', 'res': '$236binary_add.12'}), (238, {'res': '$x238.13'}), (240, {'item': '$x238.13', 'res': '$240load_attr.14'}), (242, {'res': '$const242.15'}), (244, {'index': '$const242.15', 'target': '$240load_attr.14', 'res': '$244binary_subscr.16'}), (246, {'func': '$230load_global.9', 'args': ['$236binary_add.12', '$244binary_subscr.16'], 'res': '$246call_function.17'}), (248, {'start': '$228call_function.8', 'stop': '$246call_function.17', 'step': None, 'res': '$248build_slice.19', 'slicevar': '$248build_slice.18'}), (250, {'index': '$248build_slice.19', 'target': '$x216.2', 'res': '$250binary_subscr.20'}), (252, {'func': '$214load_method.1', 'args': ['$250binary_subscr.20'], 'res': '$252call_method.21'}), (254, {'value': '$252call_method.21'}), (256, {'res': '$peaks256.22'}), (258, {'res': '$n258.23'}), (260, {'orig': ['$peaks256.22', '$n258.23'], 'duped': ['$260dup_top_two.24', '$260dup_top_two.25']}), (262, {'index': '$260dup_top_two.25', 'target': '$260dup_top_two.24', 'res': '$262binary_subscr.26'}), (264, {'res': '$x264.27'}), (266, {'res': '$n266.28'}), (268, {'index': '$n266.28', 'target': '$x264.27', 'res': '$268binary_subscr.29'}), (270, {'res': '$avgn270.30'}), (272, {'res': '$delta272.31'}), (274, {'lhs': '$avgn270.30', 'rhs': '$delta272.31', 'res': '$274binary_add.32'}), (276, {'lhs': '$268binary_subscr.29', 'rhs': '$274binary_add.32', 'res': '$276compare_op.33'}), (278, {'lhs': '$262binary_subscr.26', 'rhs': '$276compare_op.33', 'res': '$278inplace_and.34'}), (282, {'target': '$peaks256.22', 'index': '$n258.23', 'value': '$278inplace_and.34'}), (284, {'res': '$peaks284.35'}), (286, {'res': '$n286.36'}), (288, {'index': '$n286.36', 'target': '$peaks284.35', 'res': '$288binary_subscr.37'}), (290, {'pred': '$288binary_subscr.37'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={292: (), 302: ()})
2024-09-04 18:31:45,415 - block_infos State(pc_initial=292 nstack_initial=0):
AdaptBlockInfo(insts=((292, {'res': '$n292.0'}), (294, {'res': '$const294.1'}), (296, {'lhs': '$n292.0', 'rhs': '$const294.1', 'res': '$296inplace_add.2'}), (298, {'value': '$296inplace_add.2'}), (300, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ()})
2024-09-04 18:31:45,415 - block_infos State(pc_initial=302 nstack_initial=0):
AdaptBlockInfo(insts=((302, {'res': '$n302.0'}), (304, {'res': '$wait304.1'}), (306, {'res': '$const306.2'}), (308, {'lhs': '$wait304.1', 'rhs': '$const306.2', 'res': '$308binary_add.3'}), (310, {'lhs': '$n302.0', 'rhs': '$308binary_add.3', 'res': '$310inplace_add.4'}), (312, {'value': '$310inplace_add.4'}), (314, {'res': '$n314.5'}), (316, {'res': '$x316.6'}), (318, {'item': '$x316.6', 'res': '$318load_attr.7'}), (320, {'res': '$const320.8'}), (322, {'index': '$const320.8', 'target': '$318load_attr.7', 'res': '$322binary_subscr.9'}), (324, {'lhs': '$n314.5', 'rhs': '$322binary_subscr.9', 'res': '$324compare_op.10'}), (326, {'pred': '$324compare_op.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={328: (), 134: ()})
2024-09-04 18:31:45,415 - block_infos State(pc_initial=328 nstack_initial=0):
AdaptBlockInfo(insts=((328, {'res': '$const328.0'}), (330, {'retval': '$const328.0', 'castval': '$330return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:45,415 - block_infos State(pc_initial=332 nstack_initial=0):
AdaptBlockInfo(insts=((332, {'res': '$const332.0'}), (334, {'retval': '$const332.0', 'castval': '$334return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:45,423 - label 0:
    x = arg(0, name=x)                       ['x']
    pre_max = arg(1, name=pre_max)           ['pre_max']
    post_max = arg(2, name=post_max)         ['post_max']
    pre_avg = arg(3, name=pre_avg)           ['pre_avg']
    post_avg = arg(4, name=post_avg)         ['post_avg']
    delta = arg(5, name=delta)               ['delta']
    wait = arg(6, name=wait)                 ['wait']
    peaks = arg(7, name=peaks)               ['peaks']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $8load_global.3 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$8load_global.3']
    $10load_method.4 = getattr(value=$8load_global.3, attr=max) ['$10load_method.4', '$8load_global.3']
    $const14.6 = const(NoneType, None)       ['$const14.6']
    $16load_global.7 = global(min: <built-in function min>) ['$16load_global.7']
    $22load_attr.10 = getattr(value=x, attr=shape) ['$22load_attr.10', 'x']
    $const24.11 = const(int, 0)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=$22load_attr.10, index=$const24.11, fn=<built-in function getitem>) ['$22load_attr.10', '$26binary_subscr.12', '$const24.11']
    $28call_function.13 = call $16load_global.7(post_max, $26binary_subscr.12, func=$16load_global.7, args=[Var(post_max, utils.py:1209), Var($26binary_subscr.12, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None) ['$16load_global.7', '$26binary_subscr.12', '$28call_function.13', 'post_max']
    $30build_slice.14 = global(slice: <class 'slice'>) ['$30build_slice.14']
    $30build_slice.15 = call $30build_slice.14($const14.6, $28call_function.13, func=$30build_slice.14, args=(Var($const14.6, utils.py:1221), Var($28call_function.13, utils.py:1221)), kws=(), vararg=None, varkwarg=None, target=None) ['$28call_function.13', '$30build_slice.14', '$30build_slice.15', '$const14.6']
    $32binary_subscr.16 = getitem(value=x, index=$30build_slice.15, fn=<built-in function getitem>) ['$30build_slice.15', '$32binary_subscr.16', 'x']
    $34call_method.17 = call $10load_method.4($32binary_subscr.16, func=$10load_method.4, args=[Var($32binary_subscr.16, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_method.4', '$32binary_subscr.16', '$34call_method.17']
    $36compare_op.18 = $6binary_subscr.2 >= $34call_method.17 ['$34call_method.17', '$36compare_op.18', '$6binary_subscr.2']
    $const40.20 = const(int, 0)              ['$const40.20']
    peaks[$const40.20] = $36compare_op.18    ['$36compare_op.18', '$const40.20', 'peaks']
    $const46.22 = const(int, 0)              ['$const46.22']
    $50binary_subscr.25 = getitem(value=peaks, index=$const46.22, fn=<built-in function getitem>) ['$50binary_subscr.25', '$const46.22', 'peaks']
    $const54.27 = const(int, 0)              ['$const54.27']
    $56binary_subscr.28 = getitem(value=x, index=$const54.27, fn=<built-in function getitem>) ['$56binary_subscr.28', '$const54.27', 'x']
    $58load_global.29 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$58load_global.29']
    $60load_method.30 = getattr(value=$58load_global.29, attr=mean) ['$58load_global.29', '$60load_method.30']
    $const64.32 = const(NoneType, None)      ['$const64.32']
    $66load_global.33 = global(min: <built-in function min>) ['$66load_global.33']
    $72load_attr.36 = getattr(value=x, attr=shape) ['$72load_attr.36', 'x']
    $const74.37 = const(int, 0)              ['$const74.37']
    $76binary_subscr.38 = getitem(value=$72load_attr.36, index=$const74.37, fn=<built-in function getitem>) ['$72load_attr.36', '$76binary_subscr.38', '$const74.37']
    $78call_function.39 = call $66load_global.33(post_avg, $76binary_subscr.38, func=$66load_global.33, args=[Var(post_avg, utils.py:1209), Var($76binary_subscr.38, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.33', '$76binary_subscr.38', '$78call_function.39', 'post_avg']
    $80build_slice.40 = global(slice: <class 'slice'>) ['$80build_slice.40']
    $80build_slice.41 = call $80build_slice.40($const64.32, $78call_function.39, func=$80build_slice.40, args=(Var($const64.32, utils.py:1222), Var($78call_function.39, utils.py:1222)), kws=(), vararg=None, varkwarg=None, target=None) ['$78call_function.39', '$80build_slice.40', '$80build_slice.41', '$const64.32']
    $82binary_subscr.42 = getitem(value=x, index=$80build_slice.41, fn=<built-in function getitem>) ['$80build_slice.41', '$82binary_subscr.42', 'x']
    $84call_method.43 = call $60load_method.30($82binary_subscr.42, func=$60load_method.30, args=[Var($82binary_subscr.42, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None) ['$60load_method.30', '$82binary_subscr.42', '$84call_method.43']
    $88binary_add.45 = $84call_method.43 + delta ['$84call_method.43', '$88binary_add.45', 'delta']
    $90compare_op.46 = $56binary_subscr.28 >= $88binary_add.45 ['$56binary_subscr.28', '$88binary_add.45', '$90compare_op.46']
    $92inplace_and.47 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$50binary_subscr.25, rhs=$90compare_op.46, static_lhs=Undefined, static_rhs=Undefined) ['$50binary_subscr.25', '$90compare_op.46', '$92inplace_and.47']
    peaks[$const46.22] = $92inplace_and.47   ['$92inplace_and.47', '$const46.22', 'peaks']
    $const100.49 = const(int, 0)             ['$const100.49']
    $102binary_subscr.50 = getitem(value=peaks, index=$const100.49, fn=<built-in function getitem>) ['$102binary_subscr.50', '$const100.49', 'peaks']
    bool104 = global(bool: <class 'bool'>)   ['bool104']
    $104pred = call bool104($102binary_subscr.50, func=bool104, args=(Var($102binary_subscr.50, utils.py:1224),), kws=(), vararg=None, varkwarg=None, target=None) ['$102binary_subscr.50', '$104pred', 'bool104']
    branch $104pred, 106, 116                ['$104pred']
label 106:
    $const108.1 = const(int, 1)              ['$const108.1']
    n = wait + $const108.1                   ['$const108.1', 'n', 'wait']
    jump 120                                 []
label 116:
    n = const(int, 1)                        ['n']
    jump 120                                 []
label 120:
    $124load_attr.2 = getattr(value=x, attr=shape) ['$124load_attr.2', 'x']
    $const126.3 = const(int, 0)              ['$const126.3']
    $128binary_subscr.4 = getitem(value=$124load_attr.2, index=$const126.3, fn=<built-in function getitem>) ['$124load_attr.2', '$128binary_subscr.4', '$const126.3']
    $130compare_op.5 = n < $128binary_subscr.4 ['$128binary_subscr.4', '$130compare_op.5', 'n']
    bool132 = global(bool: <class 'bool'>)   ['bool132']
    $132pred = call bool132($130compare_op.5, func=bool132, args=(Var($130compare_op.5, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None) ['$130compare_op.5', '$132pred', 'bool132']
    branch $132pred, 134, 332                ['$132pred']
label 134:
    $134load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$134load_global.0']
    $136load_method.1 = getattr(value=$134load_global.0, attr=max) ['$134load_global.0', '$136load_method.1']
    $140load_global.3 = global(max: <built-in function max>) ['$140load_global.3']
    $const142.4 = const(int, 0)              ['$const142.4']
    $148binary_subtract.7 = n - pre_max      ['$148binary_subtract.7', 'n', 'pre_max']
    $150call_function.8 = call $140load_global.3($const142.4, $148binary_subtract.7, func=$140load_global.3, args=[Var($const142.4, utils.py:1230), Var($148binary_subtract.7, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None) ['$140load_global.3', '$148binary_subtract.7', '$150call_function.8', '$const142.4']
    $152load_global.9 = global(min: <built-in function min>) ['$152load_global.9']
    $158binary_add.12 = n + post_max         ['$158binary_add.12', 'n', 'post_max']
    $162load_attr.14 = getattr(value=x, attr=shape) ['$162load_attr.14', 'x']
    $const164.15 = const(int, 0)             ['$const164.15']
    $166binary_subscr.16 = getitem(value=$162load_attr.14, index=$const164.15, fn=<built-in function getitem>) ['$162load_attr.14', '$166binary_subscr.16', '$const164.15']
    $168call_function.17 = call $152load_global.9($158binary_add.12, $166binary_subscr.16, func=$152load_global.9, args=[Var($158binary_add.12, utils.py:1230), Var($166binary_subscr.16, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None) ['$152load_global.9', '$158binary_add.12', '$166binary_subscr.16', '$168call_function.17']
    $170build_slice.18 = global(slice: <class 'slice'>) ['$170build_slice.18']
    $170build_slice.19 = call $170build_slice.18($150call_function.8, $168call_function.17, func=$170build_slice.18, args=(Var($150call_function.8, utils.py:1230), Var($168call_function.17, utils.py:1230)), kws=(), vararg=None, varkwarg=None, target=None) ['$150call_function.8', '$168call_function.17', '$170build_slice.18', '$170build_slice.19']
    $172binary_subscr.20 = getitem(value=x, index=$170build_slice.19, fn=<built-in function getitem>) ['$170build_slice.19', '$172binary_subscr.20', 'x']
    maxn = call $136load_method.1($172binary_subscr.20, func=$136load_method.1, args=[Var($172binary_subscr.20, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None) ['$136load_method.1', '$172binary_subscr.20', 'maxn']
    $182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>) ['$182binary_subscr.24', 'n', 'x']
    $186compare_op.26 = $182binary_subscr.24 == maxn ['$182binary_subscr.24', '$186compare_op.26', 'maxn']
    peaks[n] = $186compare_op.26             ['$186compare_op.26', 'n', 'peaks']
    $198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>) ['$198binary_subscr.31', 'n', 'peaks']
    bool200 = global(bool: <class 'bool'>)   ['bool200']
    $200pred = call bool200($198binary_subscr.31, func=bool200, args=(Var($198binary_subscr.31, utils.py:1235),), kws=(), vararg=None, varkwarg=None, target=None) ['$198binary_subscr.31', '$200pred', 'bool200']
    branch $200pred, 212, 202                ['$200pred']
label 202:
    $const204.1 = const(int, 1)              ['$const204.1']
    $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined) ['$206inplace_add.2', '$const204.1', 'n']
    n = $206inplace_add.2                    ['$206inplace_add.2', 'n']
    jump 120                                 []
label 212:
    $212load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$212load_global.0']
    $214load_method.1 = getattr(value=$212load_global.0, attr=mean) ['$212load_global.0', '$214load_method.1']
    $218load_global.3 = global(max: <built-in function max>) ['$218load_global.3']
    $const220.4 = const(int, 0)              ['$const220.4']
    $226binary_subtract.7 = n - pre_avg      ['$226binary_subtract.7', 'n', 'pre_avg']
    $228call_function.8 = call $218load_global.3($const220.4, $226binary_subtract.7, func=$218load_global.3, args=[Var($const220.4, utils.py:1239), Var($226binary_subtract.7, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None) ['$218load_global.3', '$226binary_subtract.7', '$228call_function.8', '$const220.4']
    $230load_global.9 = global(min: <built-in function min>) ['$230load_global.9']
    $236binary_add.12 = n + post_avg         ['$236binary_add.12', 'n', 'post_avg']
    $240load_attr.14 = getattr(value=x, attr=shape) ['$240load_attr.14', 'x']
    $const242.15 = const(int, 0)             ['$const242.15']
    $244binary_subscr.16 = getitem(value=$240load_attr.14, index=$const242.15, fn=<built-in function getitem>) ['$240load_attr.14', '$244binary_subscr.16', '$const242.15']
    $246call_function.17 = call $230load_global.9($236binary_add.12, $244binary_subscr.16, func=$230load_global.9, args=[Var($236binary_add.12, utils.py:1239), Var($244binary_subscr.16, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None) ['$230load_global.9', '$236binary_add.12', '$244binary_subscr.16', '$246call_function.17']
    $248build_slice.18 = global(slice: <class 'slice'>) ['$248build_slice.18']
    $248build_slice.19 = call $248build_slice.18($228call_function.8, $246call_function.17, func=$248build_slice.18, args=(Var($228call_function.8, utils.py:1239), Var($246call_function.17, utils.py:1239)), kws=(), vararg=None, varkwarg=None, target=None) ['$228call_function.8', '$246call_function.17', '$248build_slice.18', '$248build_slice.19']
    $250binary_subscr.20 = getitem(value=x, index=$248build_slice.19, fn=<built-in function getitem>) ['$248build_slice.19', '$250binary_subscr.20', 'x']
    avgn = call $214load_method.1($250binary_subscr.20, func=$214load_method.1, args=[Var($250binary_subscr.20, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None) ['$214load_method.1', '$250binary_subscr.20', 'avgn']
    $262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>) ['$262binary_subscr.26', 'n', 'peaks']
    $268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>) ['$268binary_subscr.29', 'n', 'x']
    $274binary_add.32 = avgn + delta         ['$274binary_add.32', 'avgn', 'delta']
    $276compare_op.33 = $268binary_subscr.29 >= $274binary_add.32 ['$268binary_subscr.29', '$274binary_add.32', '$276compare_op.33']
    $278inplace_and.34 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$262binary_subscr.26, rhs=$276compare_op.33, static_lhs=Undefined, static_rhs=Undefined) ['$262binary_subscr.26', '$276compare_op.33', '$278inplace_and.34']
    peaks[n] = $278inplace_and.34            ['$278inplace_and.34', 'n', 'peaks']
    $288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>) ['$288binary_subscr.37', 'n', 'peaks']
    bool290 = global(bool: <class 'bool'>)   ['bool290']
    $290pred = call bool290($288binary_subscr.37, func=bool290, args=(Var($288binary_subscr.37, utils.py:1242),), kws=(), vararg=None, varkwarg=None, target=None) ['$288binary_subscr.37', '$290pred', 'bool290']
    branch $290pred, 302, 292                ['$290pred']
label 292:
    $const294.1 = const(int, 1)              ['$const294.1']
    $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined) ['$296inplace_add.2', '$const294.1', 'n']
    n = $296inplace_add.2                    ['$296inplace_add.2', 'n']
    jump 120                                 []
label 302:
    $const306.2 = const(int, 1)              ['$const306.2']
    $308binary_add.3 = wait + $const306.2    ['$308binary_add.3', '$const306.2', 'wait']
    $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined) ['$308binary_add.3', '$310inplace_add.4', 'n']
    n = $310inplace_add.4                    ['$310inplace_add.4', 'n']
    $318load_attr.7 = getattr(value=x, attr=shape) ['$318load_attr.7', 'x']
    $const320.8 = const(int, 0)              ['$const320.8']
    $322binary_subscr.9 = getitem(value=$318load_attr.7, index=$const320.8, fn=<built-in function getitem>) ['$318load_attr.7', '$322binary_subscr.9', '$const320.8']
    $324compare_op.10 = n < $322binary_subscr.9 ['$322binary_subscr.9', '$324compare_op.10', 'n']
    bool326 = global(bool: <class 'bool'>)   ['bool326']
    $326pred = call bool326($324compare_op.10, func=bool326, args=(Var($324compare_op.10, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None) ['$324compare_op.10', '$326pred', 'bool326']
    branch $326pred, 134, 328                ['$326pred']
label 328:
    $const328.0 = const(NoneType, None)      ['$const328.0']
    $330return_value.1 = cast(value=$const328.0) ['$330return_value.1', '$const328.0']
    return $330return_value.1                ['$330return_value.1']
label 332:
    $const332.0 = const(NoneType, None)      ['$const332.0']
    $334return_value.1 = cast(value=$const332.0) ['$334return_value.1', '$const332.0']
    return $334return_value.1                ['$334return_value.1']

2024-09-04 18:31:45,471 - ==== SSA block analysis pass on 0
2024-09-04 18:31:45,471 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243136C7700>
2024-09-04 18:31:45,471 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:45,471 - on stmt: pre_max = arg(1, name=pre_max)
2024-09-04 18:31:45,472 - on stmt: post_max = arg(2, name=post_max)
2024-09-04 18:31:45,472 - on stmt: pre_avg = arg(3, name=pre_avg)
2024-09-04 18:31:45,472 - on stmt: post_avg = arg(4, name=post_avg)
2024-09-04 18:31:45,472 - on stmt: delta = arg(5, name=delta)
2024-09-04 18:31:45,472 - on stmt: wait = arg(6, name=wait)
2024-09-04 18:31:45,473 - on stmt: peaks = arg(7, name=peaks)
2024-09-04 18:31:45,473 - on stmt: $const4.1 = const(int, 0)
2024-09-04 18:31:45,473 - on stmt: $6binary_subscr.2 = static_getitem(value=x, index=0, index_var=$const4.1, fn=<built-in function getitem>)
2024-09-04 18:31:45,473 - on stmt: $8load_global.3 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:45,473 - on stmt: $10load_method.4 = getattr(value=$8load_global.3, attr=max)
2024-09-04 18:31:45,473 - on stmt: $const14.6 = const(NoneType, None)
2024-09-04 18:31:45,473 - on stmt: $16load_global.7 = global(min: <built-in function min>)
2024-09-04 18:31:45,473 - on stmt: $22load_attr.10 = getattr(value=x, attr=shape)
2024-09-04 18:31:45,473 - on stmt: $const24.11 = const(int, 0)
2024-09-04 18:31:45,473 - on stmt: $26binary_subscr.12 = static_getitem(value=$22load_attr.10, index=0, index_var=$const24.11, fn=<built-in function getitem>)
2024-09-04 18:31:45,473 - on stmt: $28call_function.13 = call $16load_global.7(post_max, $26binary_subscr.12, func=$16load_global.7, args=[Var(post_max, utils.py:1209), Var($26binary_subscr.12, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,474 - on stmt: $30build_slice.14 = global(slice: <class 'slice'>)
2024-09-04 18:31:45,474 - on stmt: $30build_slice.15 = call $30build_slice.14($const14.6, $28call_function.13, func=$30build_slice.14, args=(Var($const14.6, utils.py:1221), Var($28call_function.13, utils.py:1221)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,474 - on stmt: $32binary_subscr.16 = getitem(value=x, index=$30build_slice.15, fn=<built-in function getitem>)
2024-09-04 18:31:45,474 - on stmt: $34call_method.17 = call $10load_method.4($32binary_subscr.16, func=$10load_method.4, args=[Var($32binary_subscr.16, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,474 - on stmt: $36compare_op.18 = $6binary_subscr.2 >= $34call_method.17
2024-09-04 18:31:45,474 - on stmt: $const40.20 = const(int, 0)
2024-09-04 18:31:45,474 - on stmt: peaks[0] = $36compare_op.18
2024-09-04 18:31:45,474 - on stmt: $const46.22 = const(int, 0)
2024-09-04 18:31:45,474 - on stmt: $50binary_subscr.25 = static_getitem(value=peaks, index=0, index_var=$const46.22, fn=<built-in function getitem>)
2024-09-04 18:31:45,474 - on stmt: $const54.27 = const(int, 0)
2024-09-04 18:31:45,475 - on stmt: $56binary_subscr.28 = static_getitem(value=x, index=0, index_var=$const54.27, fn=<built-in function getitem>)
2024-09-04 18:31:45,475 - on stmt: $58load_global.29 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:45,475 - on stmt: $60load_method.30 = getattr(value=$58load_global.29, attr=mean)
2024-09-04 18:31:45,475 - on stmt: $const64.32 = const(NoneType, None)
2024-09-04 18:31:45,475 - on stmt: $66load_global.33 = global(min: <built-in function min>)
2024-09-04 18:31:45,475 - on stmt: $72load_attr.36 = getattr(value=x, attr=shape)
2024-09-04 18:31:45,475 - on stmt: $const74.37 = const(int, 0)
2024-09-04 18:31:45,475 - on stmt: $76binary_subscr.38 = static_getitem(value=$72load_attr.36, index=0, index_var=$const74.37, fn=<built-in function getitem>)
2024-09-04 18:31:45,475 - on stmt: $78call_function.39 = call $66load_global.33(post_avg, $76binary_subscr.38, func=$66load_global.33, args=[Var(post_avg, utils.py:1209), Var($76binary_subscr.38, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,475 - on stmt: $80build_slice.40 = global(slice: <class 'slice'>)
2024-09-04 18:31:45,475 - on stmt: $80build_slice.41 = call $80build_slice.40($const64.32, $78call_function.39, func=$80build_slice.40, args=(Var($const64.32, utils.py:1222), Var($78call_function.39, utils.py:1222)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,475 - on stmt: $82binary_subscr.42 = getitem(value=x, index=$80build_slice.41, fn=<built-in function getitem>)
2024-09-04 18:31:45,475 - on stmt: $84call_method.43 = call $60load_method.30($82binary_subscr.42, func=$60load_method.30, args=[Var($82binary_subscr.42, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,475 - on stmt: $88binary_add.45 = $84call_method.43 + delta
2024-09-04 18:31:45,475 - on stmt: $90compare_op.46 = $56binary_subscr.28 >= $88binary_add.45
2024-09-04 18:31:45,475 - on stmt: $92inplace_and.47 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$50binary_subscr.25, rhs=$90compare_op.46, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:45,475 - on stmt: peaks[0] = $92inplace_and.47
2024-09-04 18:31:45,475 - on stmt: $const100.49 = const(int, 0)
2024-09-04 18:31:45,475 - on stmt: $102binary_subscr.50 = static_getitem(value=peaks, index=0, index_var=$const100.49, fn=<built-in function getitem>)
2024-09-04 18:31:45,475 - on stmt: bool104 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,475 - on stmt: $104pred = call bool104($102binary_subscr.50, func=bool104, args=(Var($102binary_subscr.50, utils.py:1224),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,475 - on stmt: branch $104pred, 106, 116
2024-09-04 18:31:45,475 - ==== SSA block analysis pass on 106
2024-09-04 18:31:45,475 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243136C7700>
2024-09-04 18:31:45,475 - on stmt: $const108.1 = const(int, 1)
2024-09-04 18:31:45,475 - on stmt: n = wait + $const108.1
2024-09-04 18:31:45,475 - on stmt: jump 120
2024-09-04 18:31:45,475 - ==== SSA block analysis pass on 116
2024-09-04 18:31:45,475 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243136C7700>
2024-09-04 18:31:45,475 - on stmt: n = const(int, 1)
2024-09-04 18:31:45,475 - on stmt: jump 120
2024-09-04 18:31:45,475 - ==== SSA block analysis pass on 120
2024-09-04 18:31:45,475 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243136C7700>
2024-09-04 18:31:45,475 - on stmt: $124load_attr.2 = getattr(value=x, attr=shape)
2024-09-04 18:31:45,475 - on stmt: $const126.3 = const(int, 0)
2024-09-04 18:31:45,475 - on stmt: $128binary_subscr.4 = static_getitem(value=$124load_attr.2, index=0, index_var=$const126.3, fn=<built-in function getitem>)
2024-09-04 18:31:45,475 - on stmt: $130compare_op.5 = n < $128binary_subscr.4
2024-09-04 18:31:45,475 - on stmt: bool132 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,475 - on stmt: $132pred = call bool132($130compare_op.5, func=bool132, args=(Var($130compare_op.5, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,475 - on stmt: branch $132pred, 134, 332
2024-09-04 18:31:45,475 - ==== SSA block analysis pass on 134
2024-09-04 18:31:45,475 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243136C7700>
2024-09-04 18:31:45,475 - on stmt: $134load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:45,475 - on stmt: $136load_method.1 = getattr(value=$134load_global.0, attr=max)
2024-09-04 18:31:45,475 - on stmt: $140load_global.3 = global(max: <built-in function max>)
2024-09-04 18:31:45,475 - on stmt: $const142.4 = const(int, 0)
2024-09-04 18:31:45,475 - on stmt: $148binary_subtract.7 = n - pre_max
2024-09-04 18:31:45,475 - on stmt: $150call_function.8 = call $140load_global.3($const142.4, $148binary_subtract.7, func=$140load_global.3, args=[Var($const142.4, utils.py:1230), Var($148binary_subtract.7, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,475 - on stmt: $152load_global.9 = global(min: <built-in function min>)
2024-09-04 18:31:45,475 - on stmt: $158binary_add.12 = n + post_max
2024-09-04 18:31:45,475 - on stmt: $162load_attr.14 = getattr(value=x, attr=shape)
2024-09-04 18:31:45,475 - on stmt: $const164.15 = const(int, 0)
2024-09-04 18:31:45,475 - on stmt: $166binary_subscr.16 = static_getitem(value=$162load_attr.14, index=0, index_var=$const164.15, fn=<built-in function getitem>)
2024-09-04 18:31:45,475 - on stmt: $168call_function.17 = call $152load_global.9($158binary_add.12, $166binary_subscr.16, func=$152load_global.9, args=[Var($158binary_add.12, utils.py:1230), Var($166binary_subscr.16, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,475 - on stmt: $170build_slice.18 = global(slice: <class 'slice'>)
2024-09-04 18:31:45,475 - on stmt: $170build_slice.19 = call $170build_slice.18($150call_function.8, $168call_function.17, func=$170build_slice.18, args=(Var($150call_function.8, utils.py:1230), Var($168call_function.17, utils.py:1230)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,475 - on stmt: $172binary_subscr.20 = getitem(value=x, index=$170build_slice.19, fn=<built-in function getitem>)
2024-09-04 18:31:45,475 - on stmt: maxn = call $136load_method.1($172binary_subscr.20, func=$136load_method.1, args=[Var($172binary_subscr.20, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,475 - on stmt: $182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:45,475 - on stmt: $186compare_op.26 = $182binary_subscr.24 == maxn
2024-09-04 18:31:45,475 - on stmt: peaks[n] = $186compare_op.26
2024-09-04 18:31:45,475 - on stmt: $198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:45,475 - on stmt: bool200 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,475 - on stmt: $200pred = call bool200($198binary_subscr.31, func=bool200, args=(Var($198binary_subscr.31, utils.py:1235),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,475 - on stmt: branch $200pred, 212, 202
2024-09-04 18:31:45,475 - ==== SSA block analysis pass on 202
2024-09-04 18:31:45,475 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243136C7700>
2024-09-04 18:31:45,475 - on stmt: $const204.1 = const(int, 1)
2024-09-04 18:31:45,475 - on stmt: $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:45,475 - on stmt: n = $206inplace_add.2
2024-09-04 18:31:45,475 - on stmt: jump 333
2024-09-04 18:31:45,475 - ==== SSA block analysis pass on 212
2024-09-04 18:31:45,475 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243136C7700>
2024-09-04 18:31:45,475 - on stmt: $212load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:45,475 - on stmt: $214load_method.1 = getattr(value=$212load_global.0, attr=mean)
2024-09-04 18:31:45,475 - on stmt: $218load_global.3 = global(max: <built-in function max>)
2024-09-04 18:31:45,475 - on stmt: $const220.4 = const(int, 0)
2024-09-04 18:31:45,475 - on stmt: $226binary_subtract.7 = n - pre_avg
2024-09-04 18:31:45,475 - on stmt: $228call_function.8 = call $218load_global.3($const220.4, $226binary_subtract.7, func=$218load_global.3, args=[Var($const220.4, utils.py:1239), Var($226binary_subtract.7, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,475 - on stmt: $230load_global.9 = global(min: <built-in function min>)
2024-09-04 18:31:45,475 - on stmt: $236binary_add.12 = n + post_avg
2024-09-04 18:31:45,475 - on stmt: $240load_attr.14 = getattr(value=x, attr=shape)
2024-09-04 18:31:45,475 - on stmt: $const242.15 = const(int, 0)
2024-09-04 18:31:45,483 - on stmt: $244binary_subscr.16 = static_getitem(value=$240load_attr.14, index=0, index_var=$const242.15, fn=<built-in function getitem>)
2024-09-04 18:31:45,483 - on stmt: $246call_function.17 = call $230load_global.9($236binary_add.12, $244binary_subscr.16, func=$230load_global.9, args=[Var($236binary_add.12, utils.py:1239), Var($244binary_subscr.16, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,483 - on stmt: $248build_slice.18 = global(slice: <class 'slice'>)
2024-09-04 18:31:45,483 - on stmt: $248build_slice.19 = call $248build_slice.18($228call_function.8, $246call_function.17, func=$248build_slice.18, args=(Var($228call_function.8, utils.py:1239), Var($246call_function.17, utils.py:1239)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,483 - on stmt: $250binary_subscr.20 = getitem(value=x, index=$248build_slice.19, fn=<built-in function getitem>)
2024-09-04 18:31:45,483 - on stmt: avgn = call $214load_method.1($250binary_subscr.20, func=$214load_method.1, args=[Var($250binary_subscr.20, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,483 - on stmt: $262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:45,483 - on stmt: $268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:45,483 - on stmt: $274binary_add.32 = avgn + delta
2024-09-04 18:31:45,483 - on stmt: $276compare_op.33 = $268binary_subscr.29 >= $274binary_add.32
2024-09-04 18:31:45,483 - on stmt: $278inplace_and.34 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$262binary_subscr.26, rhs=$276compare_op.33, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:45,483 - on stmt: peaks[n] = $278inplace_and.34
2024-09-04 18:31:45,483 - on stmt: $288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:45,483 - on stmt: bool290 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,483 - on stmt: $290pred = call bool290($288binary_subscr.37, func=bool290, args=(Var($288binary_subscr.37, utils.py:1242),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,483 - on stmt: branch $290pred, 302, 292
2024-09-04 18:31:45,483 - ==== SSA block analysis pass on 292
2024-09-04 18:31:45,483 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243136C7700>
2024-09-04 18:31:45,483 - on stmt: $const294.1 = const(int, 1)
2024-09-04 18:31:45,483 - on stmt: $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:45,483 - on stmt: n = $296inplace_add.2
2024-09-04 18:31:45,483 - on stmt: jump 333
2024-09-04 18:31:45,483 - ==== SSA block analysis pass on 302
2024-09-04 18:31:45,483 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243136C7700>
2024-09-04 18:31:45,483 - on stmt: $const306.2 = const(int, 1)
2024-09-04 18:31:45,483 - on stmt: $308binary_add.3 = wait + $const306.2
2024-09-04 18:31:45,483 - on stmt: $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:45,483 - on stmt: n = $310inplace_add.4
2024-09-04 18:31:45,483 - on stmt: $318load_attr.7 = getattr(value=x, attr=shape)
2024-09-04 18:31:45,483 - on stmt: $const320.8 = const(int, 0)
2024-09-04 18:31:45,483 - on stmt: $322binary_subscr.9 = static_getitem(value=$318load_attr.7, index=0, index_var=$const320.8, fn=<built-in function getitem>)
2024-09-04 18:31:45,483 - on stmt: $324compare_op.10 = n < $322binary_subscr.9
2024-09-04 18:31:45,483 - on stmt: bool326 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,483 - on stmt: $326pred = call bool326($324compare_op.10, func=bool326, args=(Var($324compare_op.10, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,483 - on stmt: branch $326pred, 134, 328
2024-09-04 18:31:45,487 - ==== SSA block analysis pass on 328
2024-09-04 18:31:45,487 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243136C7700>
2024-09-04 18:31:45,487 - on stmt: $const328.0 = const(NoneType, None)
2024-09-04 18:31:45,487 - on stmt: $330return_value.1 = cast(value=$const328.0)
2024-09-04 18:31:45,487 - on stmt: return $330return_value.1
2024-09-04 18:31:45,487 - ==== SSA block analysis pass on 332
2024-09-04 18:31:45,487 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243136C7700>
2024-09-04 18:31:45,487 - on stmt: $const332.0 = const(NoneType, None)
2024-09-04 18:31:45,487 - on stmt: $334return_value.1 = cast(value=$const332.0)
2024-09-04 18:31:45,487 - on stmt: return $334return_value.1
2024-09-04 18:31:45,487 - ==== SSA block analysis pass on 333
2024-09-04 18:31:45,487 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243136C7700>
2024-09-04 18:31:45,487 - on stmt: jump 120
2024-09-04 18:31:45,494 - defs defaultdict(<class 'list'>,
            {'$102binary_subscr.50': [(<numba.core.ir.Assign object at 0x00000243133E7220>,
                                       0)],
             '$104pred': [(<numba.core.ir.Assign object at 0x00000243133A7BE0>,
                           0)],
             '$10load_method.4': [(<numba.core.ir.Assign object at 0x0000024312A73880>,
                                   0)],
             '$124load_attr.2': [(<numba.core.ir.Assign object at 0x0000024313390460>,
                                  120)],
             '$128binary_subscr.4': [(<numba.core.ir.Assign object at 0x00000243133D85B0>,
                                      120)],
             '$130compare_op.5': [(<numba.core.ir.Assign object at 0x0000024313390910>,
                                   120)],
             '$132pred': [(<numba.core.ir.Assign object at 0x0000024313390B80>,
                           120)],
             '$134load_global.0': [(<numba.core.ir.Assign object at 0x0000024313390D60>,
                                    134)],
             '$136load_method.1': [(<numba.core.ir.Assign object at 0x0000024313390EE0>,
                                    134)],
             '$140load_global.3': [(<numba.core.ir.Assign object at 0x0000024313391180>,
                                    134)],
             '$148binary_subtract.7': [(<numba.core.ir.Assign object at 0x00000243133916F0>,
                                        134)],
             '$150call_function.8': [(<numba.core.ir.Assign object at 0x00000243133918A0>,
                                      134)],
             '$152load_global.9': [(<numba.core.ir.Assign object at 0x00000243133919C0>,
                                    134)],
             '$158binary_add.12': [(<numba.core.ir.Assign object at 0x0000024313391DB0>,
                                    134)],
             '$162load_attr.14': [(<numba.core.ir.Assign object at 0x0000024313392020>,
                                   134)],
             '$166binary_subscr.16': [(<numba.core.ir.Assign object at 0x00000243133D8130>,
                                       134)],
             '$168call_function.17': [(<numba.core.ir.Assign object at 0x0000024313392500>,
                                       134)],
             '$16load_global.7': [(<numba.core.ir.Assign object at 0x0000024312A73CA0>,
                                   0)],
             '$170build_slice.18': [(<numba.core.ir.Assign object at 0x0000024313392620>,
                                     134)],
             '$170build_slice.19': [(<numba.core.ir.Assign object at 0x0000024313392740>,
                                     134)],
             '$172binary_subscr.20': [(<numba.core.ir.Assign object at 0x00000243133928F0>,
                                       134)],
             '$182binary_subscr.24': [(<numba.core.ir.Assign object at 0x0000024313392F50>,
                                       134)],
             '$186compare_op.26': [(<numba.core.ir.Assign object at 0x0000024313393220>,
                                    134)],
             '$198binary_subscr.31': [(<numba.core.ir.Assign object at 0x00000243133938E0>,
                                       134)],
             '$200pred': [(<numba.core.ir.Assign object at 0x0000024313393B50>,
                           134)],
             '$206inplace_add.2': [(<numba.core.ir.Assign object at 0x00000243133936A0>,
                                    202)],
             '$212load_global.0': [(<numba.core.ir.Assign object at 0x0000024313393EB0>,
                                    212)],
             '$214load_method.1': [(<numba.core.ir.Assign object at 0x000002431339C070>,
                                    212)],
             '$218load_global.3': [(<numba.core.ir.Assign object at 0x000002431339C310>,
                                    212)],
             '$226binary_subtract.7': [(<numba.core.ir.Assign object at 0x000002431339C880>,
                                        212)],
             '$228call_function.8': [(<numba.core.ir.Assign object at 0x000002431339CA30>,
                                      212)],
             '$22load_attr.10': [(<numba.core.ir.Assign object at 0x00000243133A40A0>,
                                  0)],
             '$230load_global.9': [(<numba.core.ir.Assign object at 0x000002431339CB50>,
                                    212)],
             '$236binary_add.12': [(<numba.core.ir.Assign object at 0x000002431339CF40>,
                                    212)],
             '$240load_attr.14': [(<numba.core.ir.Assign object at 0x000002431339D1B0>,
                                   212)],
             '$244binary_subscr.16': [(<numba.core.ir.Assign object at 0x00000243133E66E0>,
                                       212)],
             '$246call_function.17': [(<numba.core.ir.Assign object at 0x000002431339D690>,
                                       212)],
             '$248build_slice.18': [(<numba.core.ir.Assign object at 0x000002431339D7B0>,
                                     212)],
             '$248build_slice.19': [(<numba.core.ir.Assign object at 0x000002431339D8D0>,
                                     212)],
             '$250binary_subscr.20': [(<numba.core.ir.Assign object at 0x000002431339DA80>,
                                       212)],
             '$262binary_subscr.26': [(<numba.core.ir.Assign object at 0x000002431339E2C0>,
                                       212)],
             '$268binary_subscr.29': [(<numba.core.ir.Assign object at 0x000002431339E680>,
                                       212)],
             '$26binary_subscr.12': [(<numba.core.ir.Assign object at 0x00000243133E6770>,
                                      0)],
             '$274binary_add.32': [(<numba.core.ir.Assign object at 0x000002431339EA40>,
                                    212)],
             '$276compare_op.33': [(<numba.core.ir.Assign object at 0x000002431339EBC0>,
                                    212)],
             '$278inplace_and.34': [(<numba.core.ir.Assign object at 0x000002431339ED40>,
                                     212)],
             '$288binary_subscr.37': [(<numba.core.ir.Assign object at 0x000002431339F1C0>,
                                       212)],
             '$28call_function.13': [(<numba.core.ir.Assign object at 0x00000243133A4580>,
                                      0)],
             '$290pred': [(<numba.core.ir.Assign object at 0x000002431339F430>,
                           212)],
             '$296inplace_add.2': [(<numba.core.ir.Assign object at 0x000002431339E4A0>,
                                    292)],
             '$308binary_add.3': [(<numba.core.ir.Assign object at 0x000002431339FA60>,
                                   302)],
             '$30build_slice.14': [(<numba.core.ir.Assign object at 0x00000243133A46A0>,
                                    0)],
             '$30build_slice.15': [(<numba.core.ir.Assign object at 0x00000243133A47C0>,
                                    0)],
             '$310inplace_add.4': [(<numba.core.ir.Assign object at 0x000002431339FBE0>,
                                    302)],
             '$318load_attr.7': [(<numba.core.ir.Assign object at 0x00000243133E4070>,
                                  302)],
             '$322binary_subscr.9': [(<numba.core.ir.Assign object at 0x0000024312A71E10>,
                                      302)],
             '$324compare_op.10': [(<numba.core.ir.Assign object at 0x00000243133E4520>,
                                    302)],
             '$326pred': [(<numba.core.ir.Assign object at 0x00000243133E4790>,
                           302)],
             '$32binary_subscr.16': [(<numba.core.ir.Assign object at 0x00000243133A4970>,
                                      0)],
             '$330return_value.1': [(<numba.core.ir.Assign object at 0x00000243133E4A30>,
                                     328)],
             '$334return_value.1': [(<numba.core.ir.Assign object at 0x00000243133E4E50>,
                                     332)],
             '$34call_method.17': [(<numba.core.ir.Assign object at 0x00000243133A4B50>,
                                    0)],
             '$36compare_op.18': [(<numba.core.ir.Assign object at 0x00000243133A4C70>,
                                   0)],
             '$50binary_subscr.25': [(<numba.core.ir.Assign object at 0x00000243133E6740>,
                                      0)],
             '$56binary_subscr.28': [(<numba.core.ir.Assign object at 0x00000243133E7310>,
                                      0)],
             '$58load_global.29': [(<numba.core.ir.Assign object at 0x00000243133A5B40>,
                                    0)],
             '$60load_method.30': [(<numba.core.ir.Assign object at 0x00000243133A5CC0>,
                                    0)],
             '$66load_global.33': [(<numba.core.ir.Assign object at 0x00000243133A60E0>,
                                    0)],
             '$6binary_subscr.2': [(<numba.core.ir.Assign object at 0x00000243133E7250>,
                                    0)],
             '$72load_attr.36': [(<numba.core.ir.Assign object at 0x00000243133A64A0>,
                                  0)],
             '$76binary_subscr.38': [(<numba.core.ir.Assign object at 0x00000243133E72B0>,
                                      0)],
             '$78call_function.39': [(<numba.core.ir.Assign object at 0x00000243133A6980>,
                                      0)],
             '$80build_slice.40': [(<numba.core.ir.Assign object at 0x00000243133A6AA0>,
                                    0)],
             '$80build_slice.41': [(<numba.core.ir.Assign object at 0x00000243133A6BC0>,
                                    0)],
             '$82binary_subscr.42': [(<numba.core.ir.Assign object at 0x00000243133A6D70>,
                                      0)],
             '$84call_method.43': [(<numba.core.ir.Assign object at 0x00000243133A6F50>,
                                    0)],
             '$88binary_add.45': [(<numba.core.ir.Assign object at 0x00000243133A7190>,
                                   0)],
             '$8load_global.3': [(<numba.core.ir.Assign object at 0x0000024312A73700>,
                                  0)],
             '$90compare_op.46': [(<numba.core.ir.Assign object at 0x00000243133A7310>,
                                   0)],
             '$92inplace_and.47': [(<numba.core.ir.Assign object at 0x00000243133A7490>,
                                    0)],
             '$const100.49': [(<numba.core.ir.Assign object at 0x00000243133A77C0>,
                               0)],
             '$const108.1': [(<numba.core.ir.Assign object at 0x00000243133A5510>,
                              106)],
             '$const126.3': [(<numba.core.ir.Assign object at 0x00000243133905E0>,
                              120)],
             '$const14.6': [(<numba.core.ir.Assign object at 0x0000024312A73B20>,
                             0)],
             '$const142.4': [(<numba.core.ir.Assign object at 0x0000024313391300>,
                              134)],
             '$const164.15': [(<numba.core.ir.Assign object at 0x00000243133921A0>,
                               134)],
             '$const204.1': [(<numba.core.ir.Assign object at 0x0000024313392DA0>,
                              202)],
             '$const220.4': [(<numba.core.ir.Assign object at 0x000002431339C490>,
                              212)],
             '$const24.11': [(<numba.core.ir.Assign object at 0x00000243133A4220>,
                              0)],
             '$const242.15': [(<numba.core.ir.Assign object at 0x000002431339D330>,
                               212)],
             '$const294.1': [(<numba.core.ir.Assign object at 0x000002431339DEA0>,
                              292)],
             '$const306.2': [(<numba.core.ir.Assign object at 0x000002431339F8B0>,
                              302)],
             '$const320.8': [(<numba.core.ir.Assign object at 0x00000243133E41F0>,
                              302)],
             '$const328.0': [(<numba.core.ir.Assign object at 0x00000243133E48B0>,
                              328)],
             '$const332.0': [(<numba.core.ir.Assign object at 0x00000243133E4CD0>,
                              332)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x0000024312A73400>,
                            0)],
             '$const40.20': [(<numba.core.ir.Assign object at 0x00000243133A4EE0>,
                              0)],
             '$const46.22': [(<numba.core.ir.Assign object at 0x00000243133A5240>,
                              0)],
             '$const54.27': [(<numba.core.ir.Assign object at 0x00000243133A5840>,
                              0)],
             '$const64.32': [(<numba.core.ir.Assign object at 0x00000243133A5F60>,
                              0)],
             '$const74.37': [(<numba.core.ir.Assign object at 0x00000243133A6620>,
                              0)],
             'avgn': [(<numba.core.ir.Assign object at 0x000002431339DC60>,
                       212)],
             'bool104': [(<numba.core.ir.Assign object at 0x00000243133A7AC0>,
                          0)],
             'bool132': [(<numba.core.ir.Assign object at 0x0000024313390A60>,
                          120)],
             'bool200': [(<numba.core.ir.Assign object at 0x0000024313393A30>,
                          134)],
             'bool290': [(<numba.core.ir.Assign object at 0x000002431339F310>,
                          212)],
             'bool326': [(<numba.core.ir.Assign object at 0x00000243133E4670>,
                          302)],
             'delta': [(<numba.core.ir.Assign object at 0x0000024312A72680>,
                        0)],
             'maxn': [(<numba.core.ir.Assign object at 0x0000024313392AD0>,
                       134)],
             'n': [(<numba.core.ir.Assign object at 0x00000243133A6FB0>, 106),
                   (<numba.core.ir.Assign object at 0x00000243133A7F40>, 116),
                   (<numba.core.ir.Assign object at 0x0000024313393C10>, 202),
                   (<numba.core.ir.Assign object at 0x000002431339E890>, 292),
                   (<numba.core.ir.Assign object at 0x000002431339FCA0>, 302)],
             'peaks': [(<numba.core.ir.Assign object at 0x0000024312A73160>,
                        0)],
             'post_avg': [(<numba.core.ir.Assign object at 0x0000024312A71BD0>,
                           0)],
             'post_max': [(<numba.core.ir.Assign object at 0x0000024312A72440>,
                           0)],
             'pre_avg': [(<numba.core.ir.Assign object at 0x0000024312A72320>,
                          0)],
             'pre_max': [(<numba.core.ir.Assign object at 0x0000024312A72560>,
                          0)],
             'wait': [(<numba.core.ir.Assign object at 0x0000024312A719F0>, 0)],
             'x': [(<numba.core.ir.Assign object at 0x0000024312A72C20>, 0)]})
2024-09-04 18:31:45,494 - SSA violators <numba.core.utils.OrderedSet object at 0x00000243133E7B20>
2024-09-04 18:31:45,494 - Fix SSA violator on var n
2024-09-04 18:31:45,494 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:45,494 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243133E78B0>
2024-09-04 18:31:45,494 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:45,494 - on stmt: pre_max = arg(1, name=pre_max)
2024-09-04 18:31:45,494 - on stmt: post_max = arg(2, name=post_max)
2024-09-04 18:31:45,494 - on stmt: pre_avg = arg(3, name=pre_avg)
2024-09-04 18:31:45,494 - on stmt: post_avg = arg(4, name=post_avg)
2024-09-04 18:31:45,494 - on stmt: delta = arg(5, name=delta)
2024-09-04 18:31:45,494 - on stmt: wait = arg(6, name=wait)
2024-09-04 18:31:45,494 - on stmt: peaks = arg(7, name=peaks)
2024-09-04 18:31:45,494 - on stmt: $const4.1 = const(int, 0)
2024-09-04 18:31:45,494 - on stmt: $6binary_subscr.2 = static_getitem(value=x, index=0, index_var=$const4.1, fn=<built-in function getitem>)
2024-09-04 18:31:45,494 - on stmt: $8load_global.3 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:45,494 - on stmt: $10load_method.4 = getattr(value=$8load_global.3, attr=max)
2024-09-04 18:31:45,494 - on stmt: $const14.6 = const(NoneType, None)
2024-09-04 18:31:45,494 - on stmt: $16load_global.7 = global(min: <built-in function min>)
2024-09-04 18:31:45,494 - on stmt: $22load_attr.10 = getattr(value=x, attr=shape)
2024-09-04 18:31:45,494 - on stmt: $const24.11 = const(int, 0)
2024-09-04 18:31:45,494 - on stmt: $26binary_subscr.12 = static_getitem(value=$22load_attr.10, index=0, index_var=$const24.11, fn=<built-in function getitem>)
2024-09-04 18:31:45,494 - on stmt: $28call_function.13 = call $16load_global.7(post_max, $26binary_subscr.12, func=$16load_global.7, args=[Var(post_max, utils.py:1209), Var($26binary_subscr.12, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,494 - on stmt: $30build_slice.14 = global(slice: <class 'slice'>)
2024-09-04 18:31:45,494 - on stmt: $30build_slice.15 = call $30build_slice.14($const14.6, $28call_function.13, func=$30build_slice.14, args=(Var($const14.6, utils.py:1221), Var($28call_function.13, utils.py:1221)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,494 - on stmt: $32binary_subscr.16 = getitem(value=x, index=$30build_slice.15, fn=<built-in function getitem>)
2024-09-04 18:31:45,494 - on stmt: $34call_method.17 = call $10load_method.4($32binary_subscr.16, func=$10load_method.4, args=[Var($32binary_subscr.16, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,494 - on stmt: $36compare_op.18 = $6binary_subscr.2 >= $34call_method.17
2024-09-04 18:31:45,494 - on stmt: $const40.20 = const(int, 0)
2024-09-04 18:31:45,494 - on stmt: peaks[0] = $36compare_op.18
2024-09-04 18:31:45,494 - on stmt: $const46.22 = const(int, 0)
2024-09-04 18:31:45,494 - on stmt: $50binary_subscr.25 = static_getitem(value=peaks, index=0, index_var=$const46.22, fn=<built-in function getitem>)
2024-09-04 18:31:45,494 - on stmt: $const54.27 = const(int, 0)
2024-09-04 18:31:45,494 - on stmt: $56binary_subscr.28 = static_getitem(value=x, index=0, index_var=$const54.27, fn=<built-in function getitem>)
2024-09-04 18:31:45,494 - on stmt: $58load_global.29 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:45,494 - on stmt: $60load_method.30 = getattr(value=$58load_global.29, attr=mean)
2024-09-04 18:31:45,494 - on stmt: $const64.32 = const(NoneType, None)
2024-09-04 18:31:45,494 - on stmt: $66load_global.33 = global(min: <built-in function min>)
2024-09-04 18:31:45,494 - on stmt: $72load_attr.36 = getattr(value=x, attr=shape)
2024-09-04 18:31:45,494 - on stmt: $const74.37 = const(int, 0)
2024-09-04 18:31:45,494 - on stmt: $76binary_subscr.38 = static_getitem(value=$72load_attr.36, index=0, index_var=$const74.37, fn=<built-in function getitem>)
2024-09-04 18:31:45,494 - on stmt: $78call_function.39 = call $66load_global.33(post_avg, $76binary_subscr.38, func=$66load_global.33, args=[Var(post_avg, utils.py:1209), Var($76binary_subscr.38, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,494 - on stmt: $80build_slice.40 = global(slice: <class 'slice'>)
2024-09-04 18:31:45,494 - on stmt: $80build_slice.41 = call $80build_slice.40($const64.32, $78call_function.39, func=$80build_slice.40, args=(Var($const64.32, utils.py:1222), Var($78call_function.39, utils.py:1222)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,494 - on stmt: $82binary_subscr.42 = getitem(value=x, index=$80build_slice.41, fn=<built-in function getitem>)
2024-09-04 18:31:45,494 - on stmt: $84call_method.43 = call $60load_method.30($82binary_subscr.42, func=$60load_method.30, args=[Var($82binary_subscr.42, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,494 - on stmt: $88binary_add.45 = $84call_method.43 + delta
2024-09-04 18:31:45,494 - on stmt: $90compare_op.46 = $56binary_subscr.28 >= $88binary_add.45
2024-09-04 18:31:45,494 - on stmt: $92inplace_and.47 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$50binary_subscr.25, rhs=$90compare_op.46, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:45,494 - on stmt: peaks[0] = $92inplace_and.47
2024-09-04 18:31:45,494 - on stmt: $const100.49 = const(int, 0)
2024-09-04 18:31:45,494 - on stmt: $102binary_subscr.50 = static_getitem(value=peaks, index=0, index_var=$const100.49, fn=<built-in function getitem>)
2024-09-04 18:31:45,494 - on stmt: bool104 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,494 - on stmt: $104pred = call bool104($102binary_subscr.50, func=bool104, args=(Var($102binary_subscr.50, utils.py:1224),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,494 - on stmt: branch $104pred, 106, 116
2024-09-04 18:31:45,494 - ==== SSA block rewrite pass on 106
2024-09-04 18:31:45,494 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243133E78B0>
2024-09-04 18:31:45,494 - on stmt: $const108.1 = const(int, 1)
2024-09-04 18:31:45,494 - on stmt: n = wait + $const108.1
2024-09-04 18:31:45,494 - first assign: n
2024-09-04 18:31:45,494 - replaced with: n = wait + $const108.1
2024-09-04 18:31:45,494 - on stmt: jump 120
2024-09-04 18:31:45,494 - ==== SSA block rewrite pass on 116
2024-09-04 18:31:45,494 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243133E78B0>
2024-09-04 18:31:45,494 - on stmt: n = const(int, 1)
2024-09-04 18:31:45,494 - replaced with: n.1 = const(int, 1)
2024-09-04 18:31:45,494 - on stmt: jump 120
2024-09-04 18:31:45,494 - ==== SSA block rewrite pass on 120
2024-09-04 18:31:45,494 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243133E78B0>
2024-09-04 18:31:45,494 - on stmt: $124load_attr.2 = getattr(value=x, attr=shape)
2024-09-04 18:31:45,494 - on stmt: $const126.3 = const(int, 0)
2024-09-04 18:31:45,494 - on stmt: $128binary_subscr.4 = static_getitem(value=$124load_attr.2, index=0, index_var=$const126.3, fn=<built-in function getitem>)
2024-09-04 18:31:45,494 - on stmt: $130compare_op.5 = n < $128binary_subscr.4
2024-09-04 18:31:45,494 - on stmt: bool132 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,494 - on stmt: $132pred = call bool132($130compare_op.5, func=bool132, args=(Var($130compare_op.5, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,494 - on stmt: branch $132pred, 134, 332
2024-09-04 18:31:45,502 - ==== SSA block rewrite pass on 134
2024-09-04 18:31:45,502 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243133E78B0>
2024-09-04 18:31:45,502 - on stmt: $134load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:45,502 - on stmt: $136load_method.1 = getattr(value=$134load_global.0, attr=max)
2024-09-04 18:31:45,502 - on stmt: $140load_global.3 = global(max: <built-in function max>)
2024-09-04 18:31:45,502 - on stmt: $const142.4 = const(int, 0)
2024-09-04 18:31:45,503 - on stmt: $148binary_subtract.7 = n - pre_max
2024-09-04 18:31:45,503 - on stmt: $150call_function.8 = call $140load_global.3($const142.4, $148binary_subtract.7, func=$140load_global.3, args=[Var($const142.4, utils.py:1230), Var($148binary_subtract.7, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,503 - on stmt: $152load_global.9 = global(min: <built-in function min>)
2024-09-04 18:31:45,503 - on stmt: $158binary_add.12 = n + post_max
2024-09-04 18:31:45,503 - on stmt: $162load_attr.14 = getattr(value=x, attr=shape)
2024-09-04 18:31:45,503 - on stmt: $const164.15 = const(int, 0)
2024-09-04 18:31:45,503 - on stmt: $166binary_subscr.16 = static_getitem(value=$162load_attr.14, index=0, index_var=$const164.15, fn=<built-in function getitem>)
2024-09-04 18:31:45,503 - on stmt: $168call_function.17 = call $152load_global.9($158binary_add.12, $166binary_subscr.16, func=$152load_global.9, args=[Var($158binary_add.12, utils.py:1230), Var($166binary_subscr.16, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,503 - on stmt: $170build_slice.18 = global(slice: <class 'slice'>)
2024-09-04 18:31:45,503 - on stmt: $170build_slice.19 = call $170build_slice.18($150call_function.8, $168call_function.17, func=$170build_slice.18, args=(Var($150call_function.8, utils.py:1230), Var($168call_function.17, utils.py:1230)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,503 - on stmt: $172binary_subscr.20 = getitem(value=x, index=$170build_slice.19, fn=<built-in function getitem>)
2024-09-04 18:31:45,503 - on stmt: maxn = call $136load_method.1($172binary_subscr.20, func=$136load_method.1, args=[Var($172binary_subscr.20, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,503 - on stmt: $182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:45,503 - on stmt: $186compare_op.26 = $182binary_subscr.24 == maxn
2024-09-04 18:31:45,503 - on stmt: peaks[n] = $186compare_op.26
2024-09-04 18:31:45,503 - on stmt: $198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:45,503 - on stmt: bool200 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,503 - on stmt: $200pred = call bool200($198binary_subscr.31, func=bool200, args=(Var($198binary_subscr.31, utils.py:1235),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,503 - on stmt: branch $200pred, 212, 202
2024-09-04 18:31:45,503 - ==== SSA block rewrite pass on 202
2024-09-04 18:31:45,503 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243133E78B0>
2024-09-04 18:31:45,503 - on stmt: $const204.1 = const(int, 1)
2024-09-04 18:31:45,503 - on stmt: $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:45,503 - on stmt: n = $206inplace_add.2
2024-09-04 18:31:45,503 - replaced with: n.2 = $206inplace_add.2
2024-09-04 18:31:45,503 - on stmt: jump 333
2024-09-04 18:31:45,503 - ==== SSA block rewrite pass on 212
2024-09-04 18:31:45,503 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243133E78B0>
2024-09-04 18:31:45,503 - on stmt: $212load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:45,503 - on stmt: $214load_method.1 = getattr(value=$212load_global.0, attr=mean)
2024-09-04 18:31:45,503 - on stmt: $218load_global.3 = global(max: <built-in function max>)
2024-09-04 18:31:45,503 - on stmt: $const220.4 = const(int, 0)
2024-09-04 18:31:45,503 - on stmt: $226binary_subtract.7 = n - pre_avg
2024-09-04 18:31:45,503 - on stmt: $228call_function.8 = call $218load_global.3($const220.4, $226binary_subtract.7, func=$218load_global.3, args=[Var($const220.4, utils.py:1239), Var($226binary_subtract.7, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,503 - on stmt: $230load_global.9 = global(min: <built-in function min>)
2024-09-04 18:31:45,503 - on stmt: $236binary_add.12 = n + post_avg
2024-09-04 18:31:45,503 - on stmt: $240load_attr.14 = getattr(value=x, attr=shape)
2024-09-04 18:31:45,503 - on stmt: $const242.15 = const(int, 0)
2024-09-04 18:31:45,503 - on stmt: $244binary_subscr.16 = static_getitem(value=$240load_attr.14, index=0, index_var=$const242.15, fn=<built-in function getitem>)
2024-09-04 18:31:45,503 - on stmt: $246call_function.17 = call $230load_global.9($236binary_add.12, $244binary_subscr.16, func=$230load_global.9, args=[Var($236binary_add.12, utils.py:1239), Var($244binary_subscr.16, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,503 - on stmt: $248build_slice.18 = global(slice: <class 'slice'>)
2024-09-04 18:31:45,503 - on stmt: $248build_slice.19 = call $248build_slice.18($228call_function.8, $246call_function.17, func=$248build_slice.18, args=(Var($228call_function.8, utils.py:1239), Var($246call_function.17, utils.py:1239)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,503 - on stmt: $250binary_subscr.20 = getitem(value=x, index=$248build_slice.19, fn=<built-in function getitem>)
2024-09-04 18:31:45,503 - on stmt: avgn = call $214load_method.1($250binary_subscr.20, func=$214load_method.1, args=[Var($250binary_subscr.20, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,503 - on stmt: $262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:45,503 - on stmt: $268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:45,503 - on stmt: $274binary_add.32 = avgn + delta
2024-09-04 18:31:45,503 - on stmt: $276compare_op.33 = $268binary_subscr.29 >= $274binary_add.32
2024-09-04 18:31:45,503 - on stmt: $278inplace_and.34 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$262binary_subscr.26, rhs=$276compare_op.33, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:45,503 - on stmt: peaks[n] = $278inplace_and.34
2024-09-04 18:31:45,503 - on stmt: $288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:45,503 - on stmt: bool290 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,503 - on stmt: $290pred = call bool290($288binary_subscr.37, func=bool290, args=(Var($288binary_subscr.37, utils.py:1242),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,503 - on stmt: branch $290pred, 302, 292
2024-09-04 18:31:45,503 - ==== SSA block rewrite pass on 292
2024-09-04 18:31:45,503 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243133E78B0>
2024-09-04 18:31:45,503 - on stmt: $const294.1 = const(int, 1)
2024-09-04 18:31:45,503 - on stmt: $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:45,503 - on stmt: n = $296inplace_add.2
2024-09-04 18:31:45,503 - replaced with: n.3 = $296inplace_add.2
2024-09-04 18:31:45,503 - on stmt: jump 333
2024-09-04 18:31:45,503 - ==== SSA block rewrite pass on 302
2024-09-04 18:31:45,503 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243133E78B0>
2024-09-04 18:31:45,503 - on stmt: $const306.2 = const(int, 1)
2024-09-04 18:31:45,503 - on stmt: $308binary_add.3 = wait + $const306.2
2024-09-04 18:31:45,503 - on stmt: $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:45,503 - on stmt: n = $310inplace_add.4
2024-09-04 18:31:45,503 - replaced with: n.4 = $310inplace_add.4
2024-09-04 18:31:45,503 - on stmt: $318load_attr.7 = getattr(value=x, attr=shape)
2024-09-04 18:31:45,503 - on stmt: $const320.8 = const(int, 0)
2024-09-04 18:31:45,503 - on stmt: $322binary_subscr.9 = static_getitem(value=$318load_attr.7, index=0, index_var=$const320.8, fn=<built-in function getitem>)
2024-09-04 18:31:45,503 - on stmt: $324compare_op.10 = n < $322binary_subscr.9
2024-09-04 18:31:45,503 - on stmt: bool326 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,503 - on stmt: $326pred = call bool326($324compare_op.10, func=bool326, args=(Var($324compare_op.10, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,503 - on stmt: branch $326pred, 134, 328
2024-09-04 18:31:45,503 - ==== SSA block rewrite pass on 328
2024-09-04 18:31:45,503 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243133E78B0>
2024-09-04 18:31:45,503 - on stmt: $const328.0 = const(NoneType, None)
2024-09-04 18:31:45,503 - on stmt: $330return_value.1 = cast(value=$const328.0)
2024-09-04 18:31:45,503 - on stmt: return $330return_value.1
2024-09-04 18:31:45,503 - ==== SSA block rewrite pass on 332
2024-09-04 18:31:45,503 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243133E78B0>
2024-09-04 18:31:45,503 - on stmt: $const332.0 = const(NoneType, None)
2024-09-04 18:31:45,503 - on stmt: $334return_value.1 = cast(value=$const332.0)
2024-09-04 18:31:45,503 - on stmt: return $334return_value.1
2024-09-04 18:31:45,503 - ==== SSA block rewrite pass on 333
2024-09-04 18:31:45,503 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243133E78B0>
2024-09-04 18:31:45,503 - on stmt: jump 120
2024-09-04 18:31:45,503 - Replaced assignments: defaultdict(<class 'list'>,
            {106: [<numba.core.ir.Assign object at 0x00000243133E7B80>],
             116: [<numba.core.ir.Assign object at 0x00000243133E5E10>],
             202: [<numba.core.ir.Assign object at 0x00000243133E6110>],
             292: [<numba.core.ir.Assign object at 0x00000243133E6D70>],
             302: [<numba.core.ir.Assign object at 0x00000243133E6EF0>]})
2024-09-04 18:31:45,503 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:45,503 - Running <numba.core.ssa._FixSSAVars object at 0x00000243133E78B0>
2024-09-04 18:31:45,503 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:45,503 - on stmt: pre_max = arg(1, name=pre_max)
2024-09-04 18:31:45,503 - on stmt: post_max = arg(2, name=post_max)
2024-09-04 18:31:45,503 - on stmt: pre_avg = arg(3, name=pre_avg)
2024-09-04 18:31:45,503 - on stmt: post_avg = arg(4, name=post_avg)
2024-09-04 18:31:45,503 - on stmt: delta = arg(5, name=delta)
2024-09-04 18:31:45,503 - on stmt: wait = arg(6, name=wait)
2024-09-04 18:31:45,503 - on stmt: peaks = arg(7, name=peaks)
2024-09-04 18:31:45,503 - on stmt: $const4.1 = const(int, 0)
2024-09-04 18:31:45,503 - on stmt: $6binary_subscr.2 = static_getitem(value=x, index=0, index_var=$const4.1, fn=<built-in function getitem>)
2024-09-04 18:31:45,503 - on stmt: $8load_global.3 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:45,503 - on stmt: $10load_method.4 = getattr(value=$8load_global.3, attr=max)
2024-09-04 18:31:45,503 - on stmt: $const14.6 = const(NoneType, None)
2024-09-04 18:31:45,503 - on stmt: $16load_global.7 = global(min: <built-in function min>)
2024-09-04 18:31:45,503 - on stmt: $22load_attr.10 = getattr(value=x, attr=shape)
2024-09-04 18:31:45,503 - on stmt: $const24.11 = const(int, 0)
2024-09-04 18:31:45,503 - on stmt: $26binary_subscr.12 = static_getitem(value=$22load_attr.10, index=0, index_var=$const24.11, fn=<built-in function getitem>)
2024-09-04 18:31:45,512 - on stmt: $28call_function.13 = call $16load_global.7(post_max, $26binary_subscr.12, func=$16load_global.7, args=[Var(post_max, utils.py:1209), Var($26binary_subscr.12, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,512 - on stmt: $30build_slice.14 = global(slice: <class 'slice'>)
2024-09-04 18:31:45,512 - on stmt: $30build_slice.15 = call $30build_slice.14($const14.6, $28call_function.13, func=$30build_slice.14, args=(Var($const14.6, utils.py:1221), Var($28call_function.13, utils.py:1221)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,512 - on stmt: $32binary_subscr.16 = getitem(value=x, index=$30build_slice.15, fn=<built-in function getitem>)
2024-09-04 18:31:45,513 - on stmt: $34call_method.17 = call $10load_method.4($32binary_subscr.16, func=$10load_method.4, args=[Var($32binary_subscr.16, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,513 - on stmt: $36compare_op.18 = $6binary_subscr.2 >= $34call_method.17
2024-09-04 18:31:45,513 - on stmt: $const40.20 = const(int, 0)
2024-09-04 18:31:45,513 - on stmt: peaks[0] = $36compare_op.18
2024-09-04 18:31:45,513 - on stmt: $const46.22 = const(int, 0)
2024-09-04 18:31:45,513 - on stmt: $50binary_subscr.25 = static_getitem(value=peaks, index=0, index_var=$const46.22, fn=<built-in function getitem>)
2024-09-04 18:31:45,513 - on stmt: $const54.27 = const(int, 0)
2024-09-04 18:31:45,513 - on stmt: $56binary_subscr.28 = static_getitem(value=x, index=0, index_var=$const54.27, fn=<built-in function getitem>)
2024-09-04 18:31:45,513 - on stmt: $58load_global.29 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:45,513 - on stmt: $60load_method.30 = getattr(value=$58load_global.29, attr=mean)
2024-09-04 18:31:45,513 - on stmt: $const64.32 = const(NoneType, None)
2024-09-04 18:31:45,514 - on stmt: $66load_global.33 = global(min: <built-in function min>)
2024-09-04 18:31:45,514 - on stmt: $72load_attr.36 = getattr(value=x, attr=shape)
2024-09-04 18:31:45,514 - on stmt: $const74.37 = const(int, 0)
2024-09-04 18:31:45,514 - on stmt: $76binary_subscr.38 = static_getitem(value=$72load_attr.36, index=0, index_var=$const74.37, fn=<built-in function getitem>)
2024-09-04 18:31:45,514 - on stmt: $78call_function.39 = call $66load_global.33(post_avg, $76binary_subscr.38, func=$66load_global.33, args=[Var(post_avg, utils.py:1209), Var($76binary_subscr.38, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,514 - on stmt: $80build_slice.40 = global(slice: <class 'slice'>)
2024-09-04 18:31:45,514 - on stmt: $80build_slice.41 = call $80build_slice.40($const64.32, $78call_function.39, func=$80build_slice.40, args=(Var($const64.32, utils.py:1222), Var($78call_function.39, utils.py:1222)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,514 - on stmt: $82binary_subscr.42 = getitem(value=x, index=$80build_slice.41, fn=<built-in function getitem>)
2024-09-04 18:31:45,514 - on stmt: $84call_method.43 = call $60load_method.30($82binary_subscr.42, func=$60load_method.30, args=[Var($82binary_subscr.42, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,514 - on stmt: $88binary_add.45 = $84call_method.43 + delta
2024-09-04 18:31:45,514 - on stmt: $90compare_op.46 = $56binary_subscr.28 >= $88binary_add.45
2024-09-04 18:31:45,514 - on stmt: $92inplace_and.47 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$50binary_subscr.25, rhs=$90compare_op.46, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:45,514 - on stmt: peaks[0] = $92inplace_and.47
2024-09-04 18:31:45,514 - on stmt: $const100.49 = const(int, 0)
2024-09-04 18:31:45,514 - on stmt: $102binary_subscr.50 = static_getitem(value=peaks, index=0, index_var=$const100.49, fn=<built-in function getitem>)
2024-09-04 18:31:45,514 - on stmt: bool104 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,514 - on stmt: $104pred = call bool104($102binary_subscr.50, func=bool104, args=(Var($102binary_subscr.50, utils.py:1224),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,514 - on stmt: branch $104pred, 106, 116
2024-09-04 18:31:45,514 - ==== SSA block rewrite pass on 106
2024-09-04 18:31:45,514 - Running <numba.core.ssa._FixSSAVars object at 0x00000243133E78B0>
2024-09-04 18:31:45,514 - on stmt: $const108.1 = const(int, 1)
2024-09-04 18:31:45,514 - on stmt: n = wait + $const108.1
2024-09-04 18:31:45,516 - on stmt: jump 120
2024-09-04 18:31:45,516 - ==== SSA block rewrite pass on 116
2024-09-04 18:31:45,516 - Running <numba.core.ssa._FixSSAVars object at 0x00000243133E78B0>
2024-09-04 18:31:45,516 - on stmt: n.1 = const(int, 1)
2024-09-04 18:31:45,516 - on stmt: jump 120
2024-09-04 18:31:45,516 - ==== SSA block rewrite pass on 120
2024-09-04 18:31:45,516 - Running <numba.core.ssa._FixSSAVars object at 0x00000243133E78B0>
2024-09-04 18:31:45,516 - on stmt: $124load_attr.2 = getattr(value=x, attr=shape)
2024-09-04 18:31:45,516 - on stmt: $const126.3 = const(int, 0)
2024-09-04 18:31:45,516 - on stmt: $128binary_subscr.4 = static_getitem(value=$124load_attr.2, index=0, index_var=$const126.3, fn=<built-in function getitem>)
2024-09-04 18:31:45,517 - on stmt: $130compare_op.5 = n < $128binary_subscr.4
2024-09-04 18:31:45,517 - find_def var='n' stmt=$130compare_op.5 = n < $128binary_subscr.4
2024-09-04 18:31:45,517 - find_def_from_top label 120
2024-09-04 18:31:45,517 - insert phi node n.5 = phi(incoming_values=[], incoming_blocks=[]) at 120
2024-09-04 18:31:45,517 - find_def_from_bottom label 106
2024-09-04 18:31:45,517 - incoming_def n = wait + $const108.1
2024-09-04 18:31:45,517 - find_def_from_bottom label 116
2024-09-04 18:31:45,517 - incoming_def n.1 = const(int, 1)
2024-09-04 18:31:45,517 - find_def_from_bottom label 333
2024-09-04 18:31:45,517 - find_def_from_top label 333
2024-09-04 18:31:45,518 - insert phi node n.6 = phi(incoming_values=[], incoming_blocks=[]) at 333
2024-09-04 18:31:45,518 - find_def_from_bottom label 202
2024-09-04 18:31:45,518 - incoming_def n.2 = $206inplace_add.2
2024-09-04 18:31:45,518 - find_def_from_bottom label 292
2024-09-04 18:31:45,518 - incoming_def n.3 = $296inplace_add.2
2024-09-04 18:31:45,518 - incoming_def n.6 = phi(incoming_values=[Var(n.2, utils.py:1236), Var(n.3, utils.py:1243)], incoming_blocks=[202, 292])
2024-09-04 18:31:45,519 - replaced with: $130compare_op.5 = n.5 < $128binary_subscr.4
2024-09-04 18:31:45,519 - on stmt: bool132 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,519 - on stmt: $132pred = call bool132($130compare_op.5, func=bool132, args=(Var($130compare_op.5, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,519 - on stmt: branch $132pred, 134, 332
2024-09-04 18:31:45,520 - ==== SSA block rewrite pass on 134
2024-09-04 18:31:45,520 - Running <numba.core.ssa._FixSSAVars object at 0x00000243133E78B0>
2024-09-04 18:31:45,520 - on stmt: $134load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:45,520 - on stmt: $136load_method.1 = getattr(value=$134load_global.0, attr=max)
2024-09-04 18:31:45,520 - on stmt: $140load_global.3 = global(max: <built-in function max>)
2024-09-04 18:31:45,520 - on stmt: $const142.4 = const(int, 0)
2024-09-04 18:31:45,520 - on stmt: $148binary_subtract.7 = n - pre_max
2024-09-04 18:31:45,520 - find_def var='n' stmt=$148binary_subtract.7 = n - pre_max
2024-09-04 18:31:45,520 - find_def_from_top label 134
2024-09-04 18:31:45,520 - insert phi node n.7 = phi(incoming_values=[], incoming_blocks=[]) at 134
2024-09-04 18:31:45,520 - find_def_from_bottom label 120
2024-09-04 18:31:45,521 - incoming_def n.5 = phi(incoming_values=[Var(n, utils.py:1225), Var(n.1, utils.py:1227), Var(n.6, utils.py:1229)], incoming_blocks=[106, 116, 333])
2024-09-04 18:31:45,521 - find_def_from_bottom label 302
2024-09-04 18:31:45,521 - incoming_def n.4 = $310inplace_add.4
2024-09-04 18:31:45,521 - replaced with: $148binary_subtract.7 = n.7 - pre_max
2024-09-04 18:31:45,521 - on stmt: $150call_function.8 = call $140load_global.3($const142.4, $148binary_subtract.7, func=$140load_global.3, args=[Var($const142.4, utils.py:1230), Var($148binary_subtract.7, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,521 - on stmt: $152load_global.9 = global(min: <built-in function min>)
2024-09-04 18:31:45,521 - on stmt: $158binary_add.12 = n + post_max
2024-09-04 18:31:45,521 - find_def var='n' stmt=$158binary_add.12 = n + post_max
2024-09-04 18:31:45,522 - replaced with: $158binary_add.12 = n.7 + post_max
2024-09-04 18:31:45,522 - on stmt: $162load_attr.14 = getattr(value=x, attr=shape)
2024-09-04 18:31:45,522 - on stmt: $const164.15 = const(int, 0)
2024-09-04 18:31:45,522 - on stmt: $166binary_subscr.16 = static_getitem(value=$162load_attr.14, index=0, index_var=$const164.15, fn=<built-in function getitem>)
2024-09-04 18:31:45,522 - on stmt: $168call_function.17 = call $152load_global.9($158binary_add.12, $166binary_subscr.16, func=$152load_global.9, args=[Var($158binary_add.12, utils.py:1230), Var($166binary_subscr.16, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,522 - on stmt: $170build_slice.18 = global(slice: <class 'slice'>)
2024-09-04 18:31:45,522 - on stmt: $170build_slice.19 = call $170build_slice.18($150call_function.8, $168call_function.17, func=$170build_slice.18, args=(Var($150call_function.8, utils.py:1230), Var($168call_function.17, utils.py:1230)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,522 - on stmt: $172binary_subscr.20 = getitem(value=x, index=$170build_slice.19, fn=<built-in function getitem>)
2024-09-04 18:31:45,522 - on stmt: maxn = call $136load_method.1($172binary_subscr.20, func=$136load_method.1, args=[Var($172binary_subscr.20, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,522 - on stmt: $182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:45,523 - find_def var='n' stmt=$182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:45,523 - replaced with: $182binary_subscr.24 = getitem(value=x, index=n.7, fn=<built-in function getitem>)
2024-09-04 18:31:45,523 - on stmt: $186compare_op.26 = $182binary_subscr.24 == maxn
2024-09-04 18:31:45,523 - on stmt: peaks[n] = $186compare_op.26
2024-09-04 18:31:45,523 - find_def var='n' stmt=peaks[n] = $186compare_op.26
2024-09-04 18:31:45,523 - replaced with: peaks[n.7] = $186compare_op.26
2024-09-04 18:31:45,523 - on stmt: $198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:45,523 - find_def var='n' stmt=$198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:45,524 - replaced with: $198binary_subscr.31 = getitem(value=peaks, index=n.7, fn=<built-in function getitem>)
2024-09-04 18:31:45,524 - on stmt: bool200 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,524 - on stmt: $200pred = call bool200($198binary_subscr.31, func=bool200, args=(Var($198binary_subscr.31, utils.py:1235),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,524 - on stmt: branch $200pred, 212, 202
2024-09-04 18:31:45,524 - ==== SSA block rewrite pass on 202
2024-09-04 18:31:45,524 - Running <numba.core.ssa._FixSSAVars object at 0x00000243133E78B0>
2024-09-04 18:31:45,524 - on stmt: $const204.1 = const(int, 1)
2024-09-04 18:31:45,524 - on stmt: $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:45,524 - find_def var='n' stmt=$206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:45,524 - find_def_from_top label 202
2024-09-04 18:31:45,525 - idom 134 from label 202
2024-09-04 18:31:45,525 - find_def_from_bottom label 134
2024-09-04 18:31:45,525 - replaced with: $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.7, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:45,525 - on stmt: n.2 = $206inplace_add.2
2024-09-04 18:31:45,525 - on stmt: jump 333
2024-09-04 18:31:45,525 - ==== SSA block rewrite pass on 212
2024-09-04 18:31:45,525 - Running <numba.core.ssa._FixSSAVars object at 0x00000243133E78B0>
2024-09-04 18:31:45,525 - on stmt: $212load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:45,525 - on stmt: $214load_method.1 = getattr(value=$212load_global.0, attr=mean)
2024-09-04 18:31:45,525 - on stmt: $218load_global.3 = global(max: <built-in function max>)
2024-09-04 18:31:45,525 - on stmt: $const220.4 = const(int, 0)
2024-09-04 18:31:45,525 - on stmt: $226binary_subtract.7 = n - pre_avg
2024-09-04 18:31:45,525 - find_def var='n' stmt=$226binary_subtract.7 = n - pre_avg
2024-09-04 18:31:45,525 - find_def_from_top label 212
2024-09-04 18:31:45,525 - idom 134 from label 212
2024-09-04 18:31:45,525 - find_def_from_bottom label 134
2024-09-04 18:31:45,525 - replaced with: $226binary_subtract.7 = n.7 - pre_avg
2024-09-04 18:31:45,525 - on stmt: $228call_function.8 = call $218load_global.3($const220.4, $226binary_subtract.7, func=$218load_global.3, args=[Var($const220.4, utils.py:1239), Var($226binary_subtract.7, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,525 - on stmt: $230load_global.9 = global(min: <built-in function min>)
2024-09-04 18:31:45,525 - on stmt: $236binary_add.12 = n + post_avg
2024-09-04 18:31:45,525 - find_def var='n' stmt=$236binary_add.12 = n + post_avg
2024-09-04 18:31:45,525 - find_def_from_top label 212
2024-09-04 18:31:45,525 - idom 134 from label 212
2024-09-04 18:31:45,525 - find_def_from_bottom label 134
2024-09-04 18:31:45,525 - replaced with: $236binary_add.12 = n.7 + post_avg
2024-09-04 18:31:45,525 - on stmt: $240load_attr.14 = getattr(value=x, attr=shape)
2024-09-04 18:31:45,525 - on stmt: $const242.15 = const(int, 0)
2024-09-04 18:31:45,525 - on stmt: $244binary_subscr.16 = static_getitem(value=$240load_attr.14, index=0, index_var=$const242.15, fn=<built-in function getitem>)
2024-09-04 18:31:45,525 - on stmt: $246call_function.17 = call $230load_global.9($236binary_add.12, $244binary_subscr.16, func=$230load_global.9, args=[Var($236binary_add.12, utils.py:1239), Var($244binary_subscr.16, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,525 - on stmt: $248build_slice.18 = global(slice: <class 'slice'>)
2024-09-04 18:31:45,525 - on stmt: $248build_slice.19 = call $248build_slice.18($228call_function.8, $246call_function.17, func=$248build_slice.18, args=(Var($228call_function.8, utils.py:1239), Var($246call_function.17, utils.py:1239)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,525 - on stmt: $250binary_subscr.20 = getitem(value=x, index=$248build_slice.19, fn=<built-in function getitem>)
2024-09-04 18:31:45,525 - on stmt: avgn = call $214load_method.1($250binary_subscr.20, func=$214load_method.1, args=[Var($250binary_subscr.20, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,525 - on stmt: $262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:45,525 - find_def var='n' stmt=$262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:45,525 - find_def_from_top label 212
2024-09-04 18:31:45,525 - idom 134 from label 212
2024-09-04 18:31:45,525 - find_def_from_bottom label 134
2024-09-04 18:31:45,525 - replaced with: $262binary_subscr.26 = getitem(value=peaks, index=n.7, fn=<built-in function getitem>)
2024-09-04 18:31:45,525 - on stmt: $268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:45,525 - find_def var='n' stmt=$268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:45,525 - find_def_from_top label 212
2024-09-04 18:31:45,525 - idom 134 from label 212
2024-09-04 18:31:45,525 - find_def_from_bottom label 134
2024-09-04 18:31:45,525 - replaced with: $268binary_subscr.29 = getitem(value=x, index=n.7, fn=<built-in function getitem>)
2024-09-04 18:31:45,525 - on stmt: $274binary_add.32 = avgn + delta
2024-09-04 18:31:45,525 - on stmt: $276compare_op.33 = $268binary_subscr.29 >= $274binary_add.32
2024-09-04 18:31:45,525 - on stmt: $278inplace_and.34 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$262binary_subscr.26, rhs=$276compare_op.33, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:45,525 - on stmt: peaks[n] = $278inplace_and.34
2024-09-04 18:31:45,525 - find_def var='n' stmt=peaks[n] = $278inplace_and.34
2024-09-04 18:31:45,525 - find_def_from_top label 212
2024-09-04 18:31:45,525 - idom 134 from label 212
2024-09-04 18:31:45,525 - find_def_from_bottom label 134
2024-09-04 18:31:45,525 - replaced with: peaks[n.7] = $278inplace_and.34
2024-09-04 18:31:45,525 - on stmt: $288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:45,532 - find_def var='n' stmt=$288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:45,532 - find_def_from_top label 212
2024-09-04 18:31:45,533 - idom 134 from label 212
2024-09-04 18:31:45,533 - find_def_from_bottom label 134
2024-09-04 18:31:45,533 - replaced with: $288binary_subscr.37 = getitem(value=peaks, index=n.7, fn=<built-in function getitem>)
2024-09-04 18:31:45,533 - on stmt: bool290 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,533 - on stmt: $290pred = call bool290($288binary_subscr.37, func=bool290, args=(Var($288binary_subscr.37, utils.py:1242),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,533 - on stmt: branch $290pred, 302, 292
2024-09-04 18:31:45,533 - ==== SSA block rewrite pass on 292
2024-09-04 18:31:45,533 - Running <numba.core.ssa._FixSSAVars object at 0x00000243133E78B0>
2024-09-04 18:31:45,533 - on stmt: $const294.1 = const(int, 1)
2024-09-04 18:31:45,533 - on stmt: $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:45,533 - find_def var='n' stmt=$296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:45,533 - find_def_from_top label 292
2024-09-04 18:31:45,533 - idom 212 from label 292
2024-09-04 18:31:45,533 - find_def_from_bottom label 212
2024-09-04 18:31:45,533 - find_def_from_top label 212
2024-09-04 18:31:45,533 - idom 134 from label 212
2024-09-04 18:31:45,533 - find_def_from_bottom label 134
2024-09-04 18:31:45,533 - replaced with: $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.7, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:45,533 - on stmt: n.3 = $296inplace_add.2
2024-09-04 18:31:45,533 - on stmt: jump 333
2024-09-04 18:31:45,533 - ==== SSA block rewrite pass on 302
2024-09-04 18:31:45,533 - Running <numba.core.ssa._FixSSAVars object at 0x00000243133E78B0>
2024-09-04 18:31:45,533 - on stmt: $const306.2 = const(int, 1)
2024-09-04 18:31:45,533 - on stmt: $308binary_add.3 = wait + $const306.2
2024-09-04 18:31:45,533 - on stmt: $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:45,533 - find_def var='n' stmt=$310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:45,533 - find_def_from_top label 302
2024-09-04 18:31:45,533 - idom 212 from label 302
2024-09-04 18:31:45,533 - find_def_from_bottom label 212
2024-09-04 18:31:45,533 - find_def_from_top label 212
2024-09-04 18:31:45,533 - idom 134 from label 212
2024-09-04 18:31:45,537 - find_def_from_bottom label 134
2024-09-04 18:31:45,537 - replaced with: $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.7, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:45,537 - on stmt: n.4 = $310inplace_add.4
2024-09-04 18:31:45,537 - on stmt: $318load_attr.7 = getattr(value=x, attr=shape)
2024-09-04 18:31:45,537 - on stmt: $const320.8 = const(int, 0)
2024-09-04 18:31:45,537 - on stmt: $322binary_subscr.9 = static_getitem(value=$318load_attr.7, index=0, index_var=$const320.8, fn=<built-in function getitem>)
2024-09-04 18:31:45,537 - on stmt: $324compare_op.10 = n < $322binary_subscr.9
2024-09-04 18:31:45,537 - find_def var='n' stmt=$324compare_op.10 = n < $322binary_subscr.9
2024-09-04 18:31:45,537 - replaced with: $324compare_op.10 = n.4 < $322binary_subscr.9
2024-09-04 18:31:45,537 - on stmt: bool326 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,537 - on stmt: $326pred = call bool326($324compare_op.10, func=bool326, args=(Var($324compare_op.10, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,537 - on stmt: branch $326pred, 134, 328
2024-09-04 18:31:45,537 - ==== SSA block rewrite pass on 328
2024-09-04 18:31:45,537 - Running <numba.core.ssa._FixSSAVars object at 0x00000243133E78B0>
2024-09-04 18:31:45,537 - on stmt: $const328.0 = const(NoneType, None)
2024-09-04 18:31:45,537 - on stmt: $330return_value.1 = cast(value=$const328.0)
2024-09-04 18:31:45,537 - on stmt: return $330return_value.1
2024-09-04 18:31:45,537 - ==== SSA block rewrite pass on 332
2024-09-04 18:31:45,537 - Running <numba.core.ssa._FixSSAVars object at 0x00000243133E78B0>
2024-09-04 18:31:45,537 - on stmt: $const332.0 = const(NoneType, None)
2024-09-04 18:31:45,537 - on stmt: $334return_value.1 = cast(value=$const332.0)
2024-09-04 18:31:45,537 - on stmt: return $334return_value.1
2024-09-04 18:31:45,537 - ==== SSA block rewrite pass on 333
2024-09-04 18:31:45,537 - Running <numba.core.ssa._FixSSAVars object at 0x00000243133E78B0>
2024-09-04 18:31:45,537 - on stmt: jump 120
2024-09-04 18:31:45,569 - bytecode dump:
>          0	NOP(arg=None, lineno=570)
           2	LOAD_FAST(arg=0, lineno=571)
           4	LOAD_ATTR(arg=0, lineno=571)
           6	LOAD_CONST(arg=1, lineno=571)
           8	COMPARE_OP(arg=2, lineno=571)
          10	POP_JUMP_IF_FALSE(arg=11, lineno=571)
          12	LOAD_GLOBAL(arg=1, lineno=572)
          14	LOAD_CONST(arg=2, lineno=572)
          16	CALL_FUNCTION(arg=1, lineno=572)
          18	RAISE_VARARGS(arg=1, lineno=572)
>         20	LOAD_GLOBAL(arg=2, lineno=575)
          22	LOAD_METHOD(arg=3, lineno=575)
          24	LOAD_FAST(arg=0, lineno=575)
          26	CALL_METHOD(arg=1, lineno=575)
          28	STORE_FAST(arg=1, lineno=575)
          30	LOAD_GLOBAL(arg=4, lineno=576)
          32	LOAD_FAST(arg=1, lineno=576)
          34	CALL_FUNCTION(arg=1, lineno=576)
          36	LOAD_METHOD(arg=5, lineno=576)
          38	LOAD_CONST(arg=1, lineno=576)
          40	CALL_METHOD(arg=1, lineno=576)
          42	STORE_FAST(arg=2, lineno=576)
          44	LOAD_DEREF(arg=1, lineno=577)
          46	LOAD_FAST(arg=2, lineno=577)
          48	CALL_FUNCTION(arg=1, lineno=577)
          50	POP_JUMP_IF_FALSE(arg=29, lineno=577)
          52	LOAD_FAST(arg=2, lineno=578)
          54	RETURN_VALUE(arg=None, lineno=578)
>         56	LOAD_FAST(arg=1, lineno=580)
          58	GET_ITER(arg=None, lineno=580)
>         60	FOR_ITER(arg=21, lineno=580)
          62	STORE_FAST(arg=3, lineno=580)
          64	LOAD_FAST(arg=3, lineno=581)
          66	LOAD_METHOD(arg=6, lineno=581)
          68	CALL_METHOD(arg=0, lineno=581)
          70	STORE_FAST(arg=4, lineno=581)
          72	LOAD_DEREF(arg=1, lineno=582)
          74	LOAD_FAST(arg=4, lineno=582)
          76	CALL_FUNCTION(arg=1, lineno=582)
          78	POP_JUMP_IF_FALSE(arg=45, lineno=582)
          80	LOAD_FAST(arg=4, lineno=583)
          82	ROT_TWO(arg=None, lineno=583)
          84	POP_TOP(arg=None, lineno=583)
          86	RETURN_VALUE(arg=None, lineno=583)
>         88	LOAD_DEREF(arg=0, lineno=584)
          90	LOAD_FAST(arg=4, lineno=584)
          92	LOAD_FAST(arg=2, lineno=584)
          94	CALL_FUNCTION(arg=2, lineno=584)
          96	POP_JUMP_IF_FALSE(arg=52, lineno=584)
          98	LOAD_FAST(arg=4, lineno=585)
         100	STORE_FAST(arg=2, lineno=585)
>        102	JUMP_ABSOLUTE(arg=31, lineno=585)
>        104	LOAD_FAST(arg=2, lineno=586)
         106	RETURN_VALUE(arg=None, lineno=586)
2024-09-04 18:31:45,570 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:45,570 - stack: []
2024-09-04 18:31:45,570 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:45,570 - dispatch pc=0, inst=NOP(arg=None, lineno=570)
2024-09-04 18:31:45,570 - stack []
2024-09-04 18:31:45,570 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=571)
2024-09-04 18:31:45,570 - stack []
2024-09-04 18:31:45,570 - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=571)
2024-09-04 18:31:45,570 - stack ['$a2.0']
2024-09-04 18:31:45,570 - dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=571)
2024-09-04 18:31:45,571 - stack ['$4load_attr.1']
2024-09-04 18:31:45,571 - dispatch pc=8, inst=COMPARE_OP(arg=2, lineno=571)
2024-09-04 18:31:45,571 - stack ['$4load_attr.1', '$const6.2']
2024-09-04 18:31:45,571 - dispatch pc=10, inst=POP_JUMP_IF_FALSE(arg=11, lineno=571)
2024-09-04 18:31:45,571 - stack ['$8compare_op.3']
2024-09-04 18:31:45,571 - end state. edges=[Edge(pc=12, stack=(), blockstack=(), npush=0), Edge(pc=20, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:45,571 - pending: deque([State(pc_initial=12 nstack_initial=0), State(pc_initial=20 nstack_initial=0)])
2024-09-04 18:31:45,571 - stack: []
2024-09-04 18:31:45,571 - state.pc_initial: State(pc_initial=12 nstack_initial=0)
2024-09-04 18:31:45,571 - dispatch pc=12, inst=LOAD_GLOBAL(arg=1, lineno=572)
2024-09-04 18:31:45,571 - stack []
2024-09-04 18:31:45,572 - dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=572)
2024-09-04 18:31:45,572 - stack ['$12load_global.0']
2024-09-04 18:31:45,572 - dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=572)
2024-09-04 18:31:45,572 - stack ['$12load_global.0', '$const14.1']
2024-09-04 18:31:45,572 - dispatch pc=18, inst=RAISE_VARARGS(arg=1, lineno=572)
2024-09-04 18:31:45,572 - stack ['$16call_function.2']
2024-09-04 18:31:45,572 - end state. edges=[]
2024-09-04 18:31:45,572 - pending: deque([State(pc_initial=20 nstack_initial=0)])
2024-09-04 18:31:45,572 - stack: []
2024-09-04 18:31:45,572 - state.pc_initial: State(pc_initial=20 nstack_initial=0)
2024-09-04 18:31:45,572 - dispatch pc=20, inst=LOAD_GLOBAL(arg=2, lineno=575)
2024-09-04 18:31:45,572 - stack []
2024-09-04 18:31:45,573 - dispatch pc=22, inst=LOAD_METHOD(arg=3, lineno=575)
2024-09-04 18:31:45,573 - stack ['$20load_global.0']
2024-09-04 18:31:45,573 - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=575)
2024-09-04 18:31:45,573 - stack ['$22load_method.1']
2024-09-04 18:31:45,573 - dispatch pc=26, inst=CALL_METHOD(arg=1, lineno=575)
2024-09-04 18:31:45,573 - stack ['$22load_method.1', '$a24.2']
2024-09-04 18:31:45,573 - dispatch pc=28, inst=STORE_FAST(arg=1, lineno=575)
2024-09-04 18:31:45,573 - stack ['$26call_method.3']
2024-09-04 18:31:45,573 - dispatch pc=30, inst=LOAD_GLOBAL(arg=4, lineno=576)
2024-09-04 18:31:45,573 - stack []
2024-09-04 18:31:45,573 - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=576)
2024-09-04 18:31:45,573 - stack ['$30load_global.4']
2024-09-04 18:31:45,574 - dispatch pc=34, inst=CALL_FUNCTION(arg=1, lineno=576)
2024-09-04 18:31:45,574 - stack ['$30load_global.4', '$it32.5']
2024-09-04 18:31:45,574 - dispatch pc=36, inst=LOAD_METHOD(arg=5, lineno=576)
2024-09-04 18:31:45,574 - stack ['$34call_function.6']
2024-09-04 18:31:45,574 - dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=576)
2024-09-04 18:31:45,574 - stack ['$36load_method.7']
2024-09-04 18:31:45,574 - dispatch pc=40, inst=CALL_METHOD(arg=1, lineno=576)
2024-09-04 18:31:45,574 - stack ['$36load_method.7', '$const38.8']
2024-09-04 18:31:45,574 - dispatch pc=42, inst=STORE_FAST(arg=2, lineno=576)
2024-09-04 18:31:45,574 - stack ['$40call_method.9']
2024-09-04 18:31:45,574 - dispatch pc=44, inst=LOAD_DEREF(arg=1, lineno=577)
2024-09-04 18:31:45,575 - stack []
2024-09-04 18:31:45,575 - dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=577)
2024-09-04 18:31:45,575 - stack ['$44load_deref.10']
2024-09-04 18:31:45,575 - dispatch pc=48, inst=CALL_FUNCTION(arg=1, lineno=577)
2024-09-04 18:31:45,575 - stack ['$44load_deref.10', '$max_value46.11']
2024-09-04 18:31:45,575 - dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=29, lineno=577)
2024-09-04 18:31:45,575 - stack ['$48call_function.12']
2024-09-04 18:31:45,575 - end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=56, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:45,575 - pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=56 nstack_initial=0)])
2024-09-04 18:31:45,575 - stack: []
2024-09-04 18:31:45,575 - state.pc_initial: State(pc_initial=52 nstack_initial=0)
2024-09-04 18:31:45,575 - dispatch pc=52, inst=LOAD_FAST(arg=2, lineno=578)
2024-09-04 18:31:45,576 - stack []
2024-09-04 18:31:45,576 - dispatch pc=54, inst=RETURN_VALUE(arg=None, lineno=578)
2024-09-04 18:31:45,576 - stack ['$max_value52.0']
2024-09-04 18:31:45,576 - end state. edges=[]
2024-09-04 18:31:45,576 - pending: deque([State(pc_initial=56 nstack_initial=0)])
2024-09-04 18:31:45,576 - stack: []
2024-09-04 18:31:45,576 - state.pc_initial: State(pc_initial=56 nstack_initial=0)
2024-09-04 18:31:45,576 - dispatch pc=56, inst=LOAD_FAST(arg=1, lineno=580)
2024-09-04 18:31:45,576 - stack []
2024-09-04 18:31:45,576 - dispatch pc=58, inst=GET_ITER(arg=None, lineno=580)
2024-09-04 18:31:45,576 - stack ['$it56.0']
2024-09-04 18:31:45,576 - end state. edges=[Edge(pc=60, stack=('$58get_iter.1',), blockstack=(), npush=0)]
2024-09-04 18:31:45,577 - pending: deque([State(pc_initial=60 nstack_initial=1)])
2024-09-04 18:31:45,577 - stack: ['$phi60.0']
2024-09-04 18:31:45,577 - state.pc_initial: State(pc_initial=60 nstack_initial=1)
2024-09-04 18:31:45,577 - dispatch pc=60, inst=FOR_ITER(arg=21, lineno=580)
2024-09-04 18:31:45,577 - stack ['$phi60.0']
2024-09-04 18:31:45,577 - end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=('$phi60.0', '$60for_iter.2'), blockstack=(), npush=0)]
2024-09-04 18:31:45,577 - pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=62 nstack_initial=2)])
2024-09-04 18:31:45,577 - stack: []
2024-09-04 18:31:45,577 - state.pc_initial: State(pc_initial=104 nstack_initial=0)
2024-09-04 18:31:45,577 - dispatch pc=104, inst=LOAD_FAST(arg=2, lineno=586)
2024-09-04 18:31:45,578 - stack []
2024-09-04 18:31:45,578 - dispatch pc=106, inst=RETURN_VALUE(arg=None, lineno=586)
2024-09-04 18:31:45,578 - stack ['$max_value104.0']
2024-09-04 18:31:45,578 - end state. edges=[]
2024-09-04 18:31:45,578 - pending: deque([State(pc_initial=62 nstack_initial=2)])
2024-09-04 18:31:45,578 - stack: ['$phi62.0', '$phi62.1']
2024-09-04 18:31:45,578 - state.pc_initial: State(pc_initial=62 nstack_initial=2)
2024-09-04 18:31:45,578 - dispatch pc=62, inst=STORE_FAST(arg=3, lineno=580)
2024-09-04 18:31:45,578 - stack ['$phi62.0', '$phi62.1']
2024-09-04 18:31:45,578 - dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=581)
2024-09-04 18:31:45,578 - stack ['$phi62.0']
2024-09-04 18:31:45,579 - dispatch pc=66, inst=LOAD_METHOD(arg=6, lineno=581)
2024-09-04 18:31:45,579 - stack ['$phi62.0', '$view64.2']
2024-09-04 18:31:45,579 - dispatch pc=68, inst=CALL_METHOD(arg=0, lineno=581)
2024-09-04 18:31:45,579 - stack ['$phi62.0', '$66load_method.3']
2024-09-04 18:31:45,579 - dispatch pc=70, inst=STORE_FAST(arg=4, lineno=581)
2024-09-04 18:31:45,579 - stack ['$phi62.0', '$68call_method.4']
2024-09-04 18:31:45,579 - dispatch pc=72, inst=LOAD_DEREF(arg=1, lineno=582)
2024-09-04 18:31:45,579 - stack ['$phi62.0']
2024-09-04 18:31:45,579 - dispatch pc=74, inst=LOAD_FAST(arg=4, lineno=582)
2024-09-04 18:31:45,579 - stack ['$phi62.0', '$72load_deref.5']
2024-09-04 18:31:45,579 - dispatch pc=76, inst=CALL_FUNCTION(arg=1, lineno=582)
2024-09-04 18:31:45,580 - stack ['$phi62.0', '$72load_deref.5', '$v74.6']
2024-09-04 18:31:45,580 - dispatch pc=78, inst=POP_JUMP_IF_FALSE(arg=45, lineno=582)
2024-09-04 18:31:45,580 - stack ['$phi62.0', '$76call_function.7']
2024-09-04 18:31:45,580 - end state. edges=[Edge(pc=80, stack=('$phi62.0',), blockstack=(), npush=0), Edge(pc=88, stack=('$phi62.0',), blockstack=(), npush=0)]
2024-09-04 18:31:45,580 - pending: deque([State(pc_initial=80 nstack_initial=1), State(pc_initial=88 nstack_initial=1)])
2024-09-04 18:31:45,580 - stack: ['$phi80.0']
2024-09-04 18:31:45,580 - state.pc_initial: State(pc_initial=80 nstack_initial=1)
2024-09-04 18:31:45,580 - dispatch pc=80, inst=LOAD_FAST(arg=4, lineno=583)
2024-09-04 18:31:45,580 - stack ['$phi80.0']
2024-09-04 18:31:45,580 - dispatch pc=82, inst=ROT_TWO(arg=None, lineno=583)
2024-09-04 18:31:45,580 - stack ['$phi80.0', '$v80.1']
2024-09-04 18:31:45,581 - dispatch pc=84, inst=POP_TOP(arg=None, lineno=583)
2024-09-04 18:31:45,581 - stack ['$v80.1', '$phi80.0']
2024-09-04 18:31:45,581 - dispatch pc=86, inst=RETURN_VALUE(arg=None, lineno=583)
2024-09-04 18:31:45,581 - stack ['$v80.1']
2024-09-04 18:31:45,581 - end state. edges=[]
2024-09-04 18:31:45,581 - pending: deque([State(pc_initial=88 nstack_initial=1)])
2024-09-04 18:31:45,581 - stack: ['$phi88.0']
2024-09-04 18:31:45,581 - state.pc_initial: State(pc_initial=88 nstack_initial=1)
2024-09-04 18:31:45,581 - dispatch pc=88, inst=LOAD_DEREF(arg=0, lineno=584)
2024-09-04 18:31:45,581 - stack ['$phi88.0']
2024-09-04 18:31:45,581 - dispatch pc=90, inst=LOAD_FAST(arg=4, lineno=584)
2024-09-04 18:31:45,581 - stack ['$phi88.0', '$88load_deref.1']
2024-09-04 18:31:45,582 - dispatch pc=92, inst=LOAD_FAST(arg=2, lineno=584)
2024-09-04 18:31:45,582 - stack ['$phi88.0', '$88load_deref.1', '$v90.2']
2024-09-04 18:31:45,582 - dispatch pc=94, inst=CALL_FUNCTION(arg=2, lineno=584)
2024-09-04 18:31:45,582 - stack ['$phi88.0', '$88load_deref.1', '$v90.2', '$max_value92.3']
2024-09-04 18:31:45,582 - dispatch pc=96, inst=POP_JUMP_IF_FALSE(arg=52, lineno=584)
2024-09-04 18:31:45,582 - stack ['$phi88.0', '$94call_function.4']
2024-09-04 18:31:45,582 - end state. edges=[Edge(pc=98, stack=('$phi88.0',), blockstack=(), npush=0), Edge(pc=102, stack=('$phi88.0',), blockstack=(), npush=0)]
2024-09-04 18:31:45,582 - pending: deque([State(pc_initial=98 nstack_initial=1), State(pc_initial=102 nstack_initial=1)])
2024-09-04 18:31:45,582 - stack: ['$phi98.0']
2024-09-04 18:31:45,582 - state.pc_initial: State(pc_initial=98 nstack_initial=1)
2024-09-04 18:31:45,582 - dispatch pc=98, inst=LOAD_FAST(arg=4, lineno=585)
2024-09-04 18:31:45,583 - stack ['$phi98.0']
2024-09-04 18:31:45,583 - dispatch pc=100, inst=STORE_FAST(arg=2, lineno=585)
2024-09-04 18:31:45,583 - stack ['$phi98.0', '$v98.1']
2024-09-04 18:31:45,583 - end state. edges=[Edge(pc=102, stack=('$phi98.0',), blockstack=(), npush=0)]
2024-09-04 18:31:45,583 - pending: deque([State(pc_initial=102 nstack_initial=1), State(pc_initial=102 nstack_initial=1)])
2024-09-04 18:31:45,583 - stack: ['$phi102.0']
2024-09-04 18:31:45,583 - state.pc_initial: State(pc_initial=102 nstack_initial=1)
2024-09-04 18:31:45,583 - dispatch pc=102, inst=JUMP_ABSOLUTE(arg=31, lineno=585)
2024-09-04 18:31:45,583 - stack ['$phi102.0']
2024-09-04 18:31:45,584 - end state. edges=[Edge(pc=60, stack=('$phi102.0',), blockstack=(), npush=0)]
2024-09-04 18:31:45,584 - pending: deque([State(pc_initial=102 nstack_initial=1), State(pc_initial=60 nstack_initial=1)])
2024-09-04 18:31:45,584 - pending: deque([State(pc_initial=60 nstack_initial=1)])
2024-09-04 18:31:45,584 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:45,584 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=56 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=1): {'$phi60.0'},
             State(pc_initial=62 nstack_initial=2): {'$phi62.1'},
             State(pc_initial=80 nstack_initial=1): set(),
             State(pc_initial=88 nstack_initial=1): set(),
             State(pc_initial=98 nstack_initial=1): set(),
             State(pc_initial=102 nstack_initial=1): set(),
             State(pc_initial=104 nstack_initial=0): set()})
2024-09-04 18:31:45,584 - defmap: {'$phi60.0': State(pc_initial=56 nstack_initial=0),
 '$phi62.1': State(pc_initial=60 nstack_initial=1)}
2024-09-04 18:31:45,585 - phismap: defaultdict(<class 'set'>,
            {'$phi102.0': {('$phi88.0', State(pc_initial=88 nstack_initial=1)),
                           ('$phi98.0', State(pc_initial=98 nstack_initial=1))},
             '$phi60.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0)),
                          ('$phi102.0',
                           State(pc_initial=102 nstack_initial=1))},
             '$phi62.0': {('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi80.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi88.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi98.0': {('$phi88.0', State(pc_initial=88 nstack_initial=1))}})
2024-09-04 18:31:45,585 - changing phismap: defaultdict(<class 'set'>,
            {'$phi102.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi60.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi80.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi88.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi98.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))}})
2024-09-04 18:31:45,586 - changing phismap: defaultdict(<class 'set'>,
            {'$phi102.0': {('$58get_iter.1',
                            State(pc_initial=56 nstack_initial=0))},
             '$phi60.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi80.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi88.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi98.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))}})
2024-09-04 18:31:45,586 - changing phismap: defaultdict(<class 'set'>,
            {'$phi102.0': {('$58get_iter.1',
                            State(pc_initial=56 nstack_initial=0))},
             '$phi60.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi80.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi88.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi98.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))}})
2024-09-04 18:31:45,586 - keep phismap: {'$phi60.0': {('$58get_iter.1', State(pc_initial=56 nstack_initial=0))},
 '$phi62.1': {('$60for_iter.2', State(pc_initial=60 nstack_initial=1))}}
2024-09-04 18:31:45,587 - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=56 nstack_initial=0): {'$phi60.0': '$58get_iter.1'},
             State(pc_initial=60 nstack_initial=1): {'$phi62.1': '$60for_iter.2'}})
2024-09-04 18:31:45,587 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:45,587 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'item': '$a2.0', 'res': '$4load_attr.1'}), (6, {'res': '$const6.2'}), (8, {'lhs': '$4load_attr.1', 'rhs': '$const6.2', 'res': '$8compare_op.3'}), (10, {'pred': '$8compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: (), 20: ()})
2024-09-04 18:31:45,587 - block_infos State(pc_initial=12 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$const14.1'}), (16, {'func': '$12load_global.0', 'args': ['$const14.1'], 'res': '$16call_function.2'}), (18, {'exc': '$16call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:45,587 - block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$20load_global.0'}), (22, {'item': '$20load_global.0', 'res': '$22load_method.1'}), (24, {'res': '$a24.2'}), (26, {'func': '$22load_method.1', 'args': ['$a24.2'], 'res': '$26call_method.3'}), (28, {'value': '$26call_method.3'}), (30, {'res': '$30load_global.4'}), (32, {'res': '$it32.5'}), (34, {'func': '$30load_global.4', 'args': ['$it32.5'], 'res': '$34call_function.6'}), (36, {'item': '$34call_function.6', 'res': '$36load_method.7'}), (38, {'res': '$const38.8'}), (40, {'func': '$36load_method.7', 'args': ['$const38.8'], 'res': '$40call_method.9'}), (42, {'value': '$40call_method.9'}), (44, {'res': '$44load_deref.10'}), (46, {'res': '$max_value46.11'}), (48, {'func': '$44load_deref.10', 'args': ['$max_value46.11'], 'res': '$48call_function.12'}), (50, {'pred': '$48call_function.12'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 56: ()})
2024-09-04 18:31:45,587 - block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$max_value52.0'}), (54, {'retval': '$max_value52.0', 'castval': '$54return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:45,587 - block_infos State(pc_initial=56 nstack_initial=0):
AdaptBlockInfo(insts=((56, {'res': '$it56.0'}), (58, {'value': '$it56.0', 'res': '$58get_iter.1'})), outgoing_phis={'$phi60.0': '$58get_iter.1'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$58get_iter.1',)})
2024-09-04 18:31:45,587 - block_infos State(pc_initial=60 nstack_initial=1):
AdaptBlockInfo(insts=((60, {'iterator': '$phi60.0', 'pair': '$60for_iter.1', 'indval': '$60for_iter.2', 'pred': '$60for_iter.3'}),), outgoing_phis={'$phi62.1': '$60for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 62: ('$phi60.0', '$60for_iter.2')})
2024-09-04 18:31:45,588 - block_infos State(pc_initial=62 nstack_initial=2):
AdaptBlockInfo(insts=((62, {'value': '$phi62.1'}), (64, {'res': '$view64.2'}), (66, {'item': '$view64.2', 'res': '$66load_method.3'}), (68, {'func': '$66load_method.3', 'args': [], 'res': '$68call_method.4'}), (70, {'value': '$68call_method.4'}), (72, {'res': '$72load_deref.5'}), (74, {'res': '$v74.6'}), (76, {'func': '$72load_deref.5', 'args': ['$v74.6'], 'res': '$76call_function.7'}), (78, {'pred': '$76call_function.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi62.0',), 88: ('$phi62.0',)})
2024-09-04 18:31:45,588 - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'res': '$v80.1'}), (86, {'retval': '$v80.1', 'castval': '$86return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:45,588 - block_infos State(pc_initial=88 nstack_initial=1):
AdaptBlockInfo(insts=((88, {'res': '$88load_deref.1'}), (90, {'res': '$v90.2'}), (92, {'res': '$max_value92.3'}), (94, {'func': '$88load_deref.1', 'args': ['$v90.2', '$max_value92.3'], 'res': '$94call_function.4'}), (96, {'pred': '$94call_function.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={98: ('$phi88.0',), 102: ('$phi88.0',)})
2024-09-04 18:31:45,588 - block_infos State(pc_initial=98 nstack_initial=1):
AdaptBlockInfo(insts=((98, {'res': '$v98.1'}), (100, {'value': '$v98.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={102: ('$phi98.0',)})
2024-09-04 18:31:45,588 - block_infos State(pc_initial=102 nstack_initial=1):
AdaptBlockInfo(insts=((102, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$phi102.0',)})
2024-09-04 18:31:45,588 - block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$max_value104.0'}), (106, {'retval': '$max_value104.0', 'castval': '$106return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:45,592 - label 0:
    a = arg(0, name=a)                       ['a']
    $4load_attr.1 = getattr(value=a, attr=size) ['$4load_attr.1', 'a']
    $const6.2 = const(int, 0)                ['$const6.2']
    $8compare_op.3 = $4load_attr.1 == $const6.2 ['$4load_attr.1', '$8compare_op.3', '$const6.2']
    bool10 = global(bool: <class 'bool'>)    ['bool10']
    $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:571),), kws=(), vararg=None, varkwarg=None, target=None) ['$10pred', '$8compare_op.3', 'bool10']
    branch $10pred, 12, 20                   ['$10pred']
label 12:
    $12load_global.0 = global(ValueError: <class 'ValueError'>) ['$12load_global.0']
    $const14.1 = const(str, zero-size array to reduction operation maximum which has no identity) ['$const14.1']
    $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:572)], kws=(), vararg=None, varkwarg=None, target=None) ['$12load_global.0', '$16call_function.2', '$const14.1']
    raise $16call_function.2                 ['$16call_function.2']
label 20:
    $20load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$20load_global.0']
    $22load_method.1 = getattr(value=$20load_global.0, attr=nditer) ['$20load_global.0', '$22load_method.1']
    it = call $22load_method.1(a, func=$22load_method.1, args=[Var(a, arraymath.py:570)], kws=(), vararg=None, varkwarg=None, target=None) ['$22load_method.1', 'a', 'it']
    $30load_global.4 = global(next: <built-in function next>) ['$30load_global.4']
    $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.4', '$34call_function.6', 'it']
    $36load_method.7 = getattr(value=$34call_function.6, attr=take) ['$34call_function.6', '$36load_method.7']
    $const38.8 = const(int, 0)               ['$const38.8']
    max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None) ['$36load_method.7', '$const38.8', 'max_value']
    $44load_deref.10 = freevar(pre_return_func: <ufunc 'isnan'>) ['$44load_deref.10']
    $48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None) ['$44load_deref.10', '$48call_function.12', 'max_value']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48call_function.12, func=bool50, args=(Var($48call_function.12, arraymath.py:577),), kws=(), vararg=None, varkwarg=None, target=None) ['$48call_function.12', '$50pred', 'bool50']
    branch $50pred, 52, 56                   ['$50pred']
label 52:
    $54return_value.1 = cast(value=max_value) ['$54return_value.1', 'max_value']
    return $54return_value.1                 ['$54return_value.1']
label 56:
    $58get_iter.1 = getiter(value=it)        ['$58get_iter.1', 'it']
    $phi60.0 = $58get_iter.1                 ['$58get_iter.1', '$phi60.0']
    jump 60                                  []
label 60:
    $60for_iter.1 = iternext(value=$phi60.0) ['$60for_iter.1', '$phi60.0']
    $60for_iter.2 = pair_first(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.2']
    $60for_iter.3 = pair_second(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.3']
    $phi62.1 = $60for_iter.2                 ['$60for_iter.2', '$phi62.1']
    branch $60for_iter.3, 62, 104            ['$60for_iter.3']
label 62:
    view = $phi62.1                          ['$phi62.1', 'view']
    $66load_method.3 = getattr(value=view, attr=item) ['$66load_method.3', 'view']
    v = call $66load_method.3(func=$66load_method.3, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_method.3', 'v']
    $72load_deref.5 = freevar(pre_return_func: <ufunc 'isnan'>) ['$72load_deref.5']
    $76call_function.7 = call $72load_deref.5(v, func=$72load_deref.5, args=[Var(v, arraymath.py:581)], kws=(), vararg=None, varkwarg=None, target=None) ['$72load_deref.5', '$76call_function.7', 'v']
    bool78 = global(bool: <class 'bool'>)    ['bool78']
    $78pred = call bool78($76call_function.7, func=bool78, args=(Var($76call_function.7, arraymath.py:582),), kws=(), vararg=None, varkwarg=None, target=None) ['$76call_function.7', '$78pred', 'bool78']
    branch $78pred, 80, 88                   ['$78pred']
label 80:
    $86return_value.2 = cast(value=v)        ['$86return_value.2', 'v']
    return $86return_value.2                 ['$86return_value.2']
label 88:
    $88load_deref.1 = freevar(comparator: <function max_comparator at 0x0000024317C80430>) ['$88load_deref.1']
    $94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None) ['$88load_deref.1', '$94call_function.4', 'max_value', 'v']
    bool96 = global(bool: <class 'bool'>)    ['bool96']
    $96pred = call bool96($94call_function.4, func=bool96, args=(Var($94call_function.4, arraymath.py:584),), kws=(), vararg=None, varkwarg=None, target=None) ['$94call_function.4', '$96pred', 'bool96']
    branch $96pred, 98, 102                  ['$96pred']
label 98:
    max_value = v                            ['max_value', 'v']
    jump 102                                 []
label 102:
    jump 60                                  []
label 104:
    $106return_value.1 = cast(value=max_value) ['$106return_value.1', 'max_value']
    return $106return_value.1                ['$106return_value.1']

2024-09-04 18:31:45,620 - ==== SSA block analysis pass on 0
2024-09-04 18:31:45,620 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313462FE0>
2024-09-04 18:31:45,620 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:45,621 - on stmt: $4load_attr.1 = getattr(value=a, attr=size)
2024-09-04 18:31:45,621 - on stmt: $const6.2 = const(int, 0)
2024-09-04 18:31:45,621 - on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2024-09-04 18:31:45,621 - on stmt: bool10 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,621 - on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:571),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,621 - on stmt: branch $10pred, 12, 20
2024-09-04 18:31:45,621 - ==== SSA block analysis pass on 12
2024-09-04 18:31:45,621 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313462FE0>
2024-09-04 18:31:45,621 - on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:45,621 - on stmt: $const14.1 = const(str, zero-size array to reduction operation maximum which has no identity)
2024-09-04 18:31:45,622 - on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:572)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,622 - on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
2024-09-04 18:31:45,622 - ==== SSA block analysis pass on 20
2024-09-04 18:31:45,622 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313462FE0>
2024-09-04 18:31:45,622 - on stmt: $20load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:45,622 - on stmt: $22load_method.1 = getattr(value=$20load_global.0, attr=nditer)
2024-09-04 18:31:45,622 - on stmt: it = call $22load_method.1(a, func=$22load_method.1, args=[Var(a, arraymath.py:570)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,622 - on stmt: $30load_global.4 = global(next: <built-in function next>)
2024-09-04 18:31:45,622 - on stmt: $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,623 - on stmt: $36load_method.7 = getattr(value=$34call_function.6, attr=take)
2024-09-04 18:31:45,623 - on stmt: $const38.8 = const(int, 0)
2024-09-04 18:31:45,623 - on stmt: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,623 - on stmt: $44load_deref.10 = freevar(pre_return_func: <ufunc 'isnan'>)
2024-09-04 18:31:45,623 - on stmt: $48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,623 - on stmt: bool50 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,623 - on stmt: $50pred = call bool50($48call_function.12, func=bool50, args=(Var($48call_function.12, arraymath.py:577),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,623 - on stmt: branch $50pred, 52, 56
2024-09-04 18:31:45,623 - ==== SSA block analysis pass on 52
2024-09-04 18:31:45,623 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313462FE0>
2024-09-04 18:31:45,623 - on stmt: $54return_value.1 = cast(value=max_value)
2024-09-04 18:31:45,624 - on stmt: return $54return_value.1
2024-09-04 18:31:45,624 - ==== SSA block analysis pass on 56
2024-09-04 18:31:45,624 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313462FE0>
2024-09-04 18:31:45,624 - on stmt: $58get_iter.1 = getiter(value=it)
2024-09-04 18:31:45,624 - on stmt: $phi60.0 = $58get_iter.1
2024-09-04 18:31:45,624 - on stmt: jump 60
2024-09-04 18:31:45,624 - ==== SSA block analysis pass on 60
2024-09-04 18:31:45,624 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313462FE0>
2024-09-04 18:31:45,624 - on stmt: $60for_iter.1 = iternext(value=$phi60.0)
2024-09-04 18:31:45,624 - on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
2024-09-04 18:31:45,624 - on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
2024-09-04 18:31:45,624 - on stmt: $phi62.1 = $60for_iter.2
2024-09-04 18:31:45,625 - on stmt: branch $60for_iter.3, 62, 104
2024-09-04 18:31:45,625 - ==== SSA block analysis pass on 62
2024-09-04 18:31:45,625 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313462FE0>
2024-09-04 18:31:45,625 - on stmt: view = $phi62.1
2024-09-04 18:31:45,625 - on stmt: $66load_method.3 = getattr(value=view, attr=item)
2024-09-04 18:31:45,625 - on stmt: v = call $66load_method.3(func=$66load_method.3, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,625 - on stmt: $72load_deref.5 = freevar(pre_return_func: <ufunc 'isnan'>)
2024-09-04 18:31:45,625 - on stmt: $76call_function.7 = call $72load_deref.5(v, func=$72load_deref.5, args=[Var(v, arraymath.py:581)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,625 - on stmt: bool78 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,625 - on stmt: $78pred = call bool78($76call_function.7, func=bool78, args=(Var($76call_function.7, arraymath.py:582),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,626 - on stmt: branch $78pred, 80, 88
2024-09-04 18:31:45,626 - ==== SSA block analysis pass on 80
2024-09-04 18:31:45,626 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313462FE0>
2024-09-04 18:31:45,626 - on stmt: $86return_value.2 = cast(value=v)
2024-09-04 18:31:45,626 - on stmt: return $86return_value.2
2024-09-04 18:31:45,626 - ==== SSA block analysis pass on 88
2024-09-04 18:31:45,626 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313462FE0>
2024-09-04 18:31:45,626 - on stmt: $88load_deref.1 = freevar(comparator: <function max_comparator at 0x0000024317C80430>)
2024-09-04 18:31:45,626 - on stmt: $94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,626 - on stmt: bool96 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,626 - on stmt: $96pred = call bool96($94call_function.4, func=bool96, args=(Var($94call_function.4, arraymath.py:584),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,626 - on stmt: branch $96pred, 98, 102
2024-09-04 18:31:45,627 - ==== SSA block analysis pass on 98
2024-09-04 18:31:45,627 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313462FE0>
2024-09-04 18:31:45,627 - on stmt: max_value = v
2024-09-04 18:31:45,627 - on stmt: jump 102
2024-09-04 18:31:45,627 - ==== SSA block analysis pass on 102
2024-09-04 18:31:45,627 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313462FE0>
2024-09-04 18:31:45,627 - on stmt: jump 60
2024-09-04 18:31:45,627 - ==== SSA block analysis pass on 104
2024-09-04 18:31:45,627 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313462FE0>
2024-09-04 18:31:45,627 - on stmt: $106return_value.1 = cast(value=max_value)
2024-09-04 18:31:45,627 - on stmt: return $106return_value.1
2024-09-04 18:31:45,630 - defs defaultdict(<class 'list'>,
            {'$106return_value.1': [(<numba.core.ir.Assign object at 0x0000024313461720>,
                                     104)],
             '$10pred': [(<numba.core.ir.Assign object at 0x00000243136BEB90>,
                          0)],
             '$12load_global.0': [(<numba.core.ir.Assign object at 0x00000243136BFA30>,
                                   12)],
             '$16call_function.2': [(<numba.core.ir.Assign object at 0x00000243136BC880>,
                                     12)],
             '$20load_global.0': [(<numba.core.ir.Assign object at 0x0000024312A72740>,
                                   20)],
             '$22load_method.1': [(<numba.core.ir.Assign object at 0x0000024312A725C0>,
                                   20)],
             '$30load_global.4': [(<numba.core.ir.Assign object at 0x0000024312A70E80>,
                                   20)],
             '$34call_function.6': [(<numba.core.ir.Assign object at 0x0000024312A70B50>,
                                     20)],
             '$36load_method.7': [(<numba.core.ir.Assign object at 0x0000024312A708E0>,
                                   20)],
             '$44load_deref.10': [(<numba.core.ir.Assign object at 0x0000024312A70190>,
                                   20)],
             '$48call_function.12': [(<numba.core.ir.Assign object at 0x0000024312A70250>,
                                      20)],
             '$4load_attr.1': [(<numba.core.ir.Assign object at 0x00000243136BDE10>,
                                0)],
             '$50pred': [(<numba.core.ir.Assign object at 0x0000024312A71660>,
                          20)],
             '$54return_value.1': [(<numba.core.ir.Assign object at 0x0000024312A717E0>,
                                    52)],
             '$58get_iter.1': [(<numba.core.ir.Assign object at 0x00000243136BD360>,
                                56)],
             '$60for_iter.1': [(<numba.core.ir.Assign object at 0x00000243136C6740>,
                                60)],
             '$60for_iter.2': [(<numba.core.ir.Assign object at 0x00000243136C6A10>,
                                60)],
             '$60for_iter.3': [(<numba.core.ir.Assign object at 0x00000243136C75E0>,
                                60)],
             '$66load_method.3': [(<numba.core.ir.Assign object at 0x0000024316C64A30>,
                                   62)],
             '$72load_deref.5': [(<numba.core.ir.Assign object at 0x0000024316C67700>,
                                  62)],
             '$76call_function.7': [(<numba.core.ir.Assign object at 0x0000024316C641C0>,
                                     62)],
             '$78pred': [(<numba.core.ir.Assign object at 0x0000024316C64BB0>,
                          62)],
             '$86return_value.2': [(<numba.core.ir.Assign object at 0x0000024316C64D00>,
                                    80)],
             '$88load_deref.1': [(<numba.core.ir.Assign object at 0x0000024316C64F40>,
                                  88)],
             '$8compare_op.3': [(<numba.core.ir.Assign object at 0x00000243136BDDB0>,
                                 0)],
             '$94call_function.4': [(<numba.core.ir.Assign object at 0x0000024317894CD0>,
                                     88)],
             '$96pred': [(<numba.core.ir.Assign object at 0x0000024313462950>,
                          88)],
             '$const14.1': [(<numba.core.ir.Assign object at 0x00000243136BDAE0>,
                             12)],
             '$const38.8': [(<numba.core.ir.Assign object at 0x0000024312A70790>,
                             20)],
             '$const6.2': [(<numba.core.ir.Assign object at 0x00000243136BC820>,
                            0)],
             '$phi60.0': [(<numba.core.ir.Assign object at 0x00000243136BC760>,
                           56)],
             '$phi62.1': [(<numba.core.ir.Assign object at 0x00000243133E62F0>,
                           60)],
             'a': [(<numba.core.ir.Assign object at 0x00000243136BEF80>, 0)],
             'bool10': [(<numba.core.ir.Assign object at 0x00000243136BF1F0>,
                         0)],
             'bool50': [(<numba.core.ir.Assign object at 0x0000024312A70070>,
                         20)],
             'bool78': [(<numba.core.ir.Assign object at 0x0000024316C678E0>,
                         62)],
             'bool96': [(<numba.core.ir.Assign object at 0x00000243178955A0>,
                         88)],
             'it': [(<numba.core.ir.Assign object at 0x0000024312A710C0>, 20)],
             'max_value': [(<numba.core.ir.Assign object at 0x0000024312A709D0>,
                            20),
                           (<numba.core.ir.Assign object at 0x0000024313460CA0>,
                            98)],
             'v': [(<numba.core.ir.Assign object at 0x0000024316C67E50>, 62)],
             'view': [(<numba.core.ir.Assign object at 0x0000024312A71090>,
                       62)]})
2024-09-04 18:31:45,630 - SSA violators <numba.core.utils.OrderedSet object at 0x0000024313462FE0>
2024-09-04 18:31:45,630 - Fix SSA violator on var max_value
2024-09-04 18:31:45,630 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:45,630 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243134602B0>
2024-09-04 18:31:45,630 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:45,630 - on stmt: $4load_attr.1 = getattr(value=a, attr=size)
2024-09-04 18:31:45,630 - on stmt: $const6.2 = const(int, 0)
2024-09-04 18:31:45,630 - on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2024-09-04 18:31:45,630 - on stmt: bool10 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,631 - on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:571),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,631 - on stmt: branch $10pred, 12, 20
2024-09-04 18:31:45,631 - ==== SSA block rewrite pass on 12
2024-09-04 18:31:45,631 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243134602B0>
2024-09-04 18:31:45,631 - on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:45,631 - on stmt: $const14.1 = const(str, zero-size array to reduction operation maximum which has no identity)
2024-09-04 18:31:45,631 - on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:572)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,631 - on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
2024-09-04 18:31:45,631 - ==== SSA block rewrite pass on 20
2024-09-04 18:31:45,631 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243134602B0>
2024-09-04 18:31:45,631 - on stmt: $20load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:45,631 - on stmt: $22load_method.1 = getattr(value=$20load_global.0, attr=nditer)
2024-09-04 18:31:45,632 - on stmt: it = call $22load_method.1(a, func=$22load_method.1, args=[Var(a, arraymath.py:570)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,632 - on stmt: $30load_global.4 = global(next: <built-in function next>)
2024-09-04 18:31:45,632 - on stmt: $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,632 - on stmt: $36load_method.7 = getattr(value=$34call_function.6, attr=take)
2024-09-04 18:31:45,632 - on stmt: $const38.8 = const(int, 0)
2024-09-04 18:31:45,632 - on stmt: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,632 - first assign: max_value
2024-09-04 18:31:45,632 - replaced with: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,632 - on stmt: $44load_deref.10 = freevar(pre_return_func: <ufunc 'isnan'>)
2024-09-04 18:31:45,632 - on stmt: $48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,633 - on stmt: bool50 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,633 - on stmt: $50pred = call bool50($48call_function.12, func=bool50, args=(Var($48call_function.12, arraymath.py:577),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,633 - on stmt: branch $50pred, 52, 56
2024-09-04 18:31:45,633 - ==== SSA block rewrite pass on 52
2024-09-04 18:31:45,633 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243134602B0>
2024-09-04 18:31:45,633 - on stmt: $54return_value.1 = cast(value=max_value)
2024-09-04 18:31:45,633 - on stmt: return $54return_value.1
2024-09-04 18:31:45,633 - ==== SSA block rewrite pass on 56
2024-09-04 18:31:45,633 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243134602B0>
2024-09-04 18:31:45,633 - on stmt: $58get_iter.1 = getiter(value=it)
2024-09-04 18:31:45,633 - on stmt: $phi60.0 = $58get_iter.1
2024-09-04 18:31:45,634 - on stmt: jump 60
2024-09-04 18:31:45,634 - ==== SSA block rewrite pass on 60
2024-09-04 18:31:45,634 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243134602B0>
2024-09-04 18:31:45,634 - on stmt: $60for_iter.1 = iternext(value=$phi60.0)
2024-09-04 18:31:45,634 - on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
2024-09-04 18:31:45,634 - on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
2024-09-04 18:31:45,634 - on stmt: $phi62.1 = $60for_iter.2
2024-09-04 18:31:45,634 - on stmt: branch $60for_iter.3, 62, 104
2024-09-04 18:31:45,634 - ==== SSA block rewrite pass on 62
2024-09-04 18:31:45,634 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243134602B0>
2024-09-04 18:31:45,634 - on stmt: view = $phi62.1
2024-09-04 18:31:45,634 - on stmt: $66load_method.3 = getattr(value=view, attr=item)
2024-09-04 18:31:45,634 - on stmt: v = call $66load_method.3(func=$66load_method.3, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,635 - on stmt: $72load_deref.5 = freevar(pre_return_func: <ufunc 'isnan'>)
2024-09-04 18:31:45,635 - on stmt: $76call_function.7 = call $72load_deref.5(v, func=$72load_deref.5, args=[Var(v, arraymath.py:581)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,635 - on stmt: bool78 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,635 - on stmt: $78pred = call bool78($76call_function.7, func=bool78, args=(Var($76call_function.7, arraymath.py:582),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,635 - on stmt: branch $78pred, 80, 88
2024-09-04 18:31:45,635 - ==== SSA block rewrite pass on 80
2024-09-04 18:31:45,635 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243134602B0>
2024-09-04 18:31:45,635 - on stmt: $86return_value.2 = cast(value=v)
2024-09-04 18:31:45,635 - on stmt: return $86return_value.2
2024-09-04 18:31:45,635 - ==== SSA block rewrite pass on 88
2024-09-04 18:31:45,635 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243134602B0>
2024-09-04 18:31:45,636 - on stmt: $88load_deref.1 = freevar(comparator: <function max_comparator at 0x0000024317C80430>)
2024-09-04 18:31:45,636 - on stmt: $94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,636 - on stmt: bool96 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,636 - on stmt: $96pred = call bool96($94call_function.4, func=bool96, args=(Var($94call_function.4, arraymath.py:584),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,636 - on stmt: branch $96pred, 98, 102
2024-09-04 18:31:45,636 - ==== SSA block rewrite pass on 98
2024-09-04 18:31:45,636 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243134602B0>
2024-09-04 18:31:45,636 - on stmt: max_value = v
2024-09-04 18:31:45,636 - replaced with: max_value.1 = v
2024-09-04 18:31:45,636 - on stmt: jump 102
2024-09-04 18:31:45,636 - ==== SSA block rewrite pass on 102
2024-09-04 18:31:45,636 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243134602B0>
2024-09-04 18:31:45,636 - on stmt: jump 60
2024-09-04 18:31:45,637 - ==== SSA block rewrite pass on 104
2024-09-04 18:31:45,637 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243134602B0>
2024-09-04 18:31:45,637 - on stmt: $106return_value.1 = cast(value=max_value)
2024-09-04 18:31:45,637 - on stmt: return $106return_value.1
2024-09-04 18:31:45,637 - Replaced assignments: defaultdict(<class 'list'>,
            {20: [<numba.core.ir.Assign object at 0x00000243134601C0>],
             98: [<numba.core.ir.Assign object at 0x0000024313462530>]})
2024-09-04 18:31:45,637 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:45,637 - Running <numba.core.ssa._FixSSAVars object at 0x00000243134602B0>
2024-09-04 18:31:45,637 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:45,637 - on stmt: $4load_attr.1 = getattr(value=a, attr=size)
2024-09-04 18:31:45,637 - on stmt: $const6.2 = const(int, 0)
2024-09-04 18:31:45,637 - on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2024-09-04 18:31:45,638 - on stmt: bool10 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,638 - on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:571),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,638 - on stmt: branch $10pred, 12, 20
2024-09-04 18:31:45,638 - ==== SSA block rewrite pass on 12
2024-09-04 18:31:45,638 - Running <numba.core.ssa._FixSSAVars object at 0x00000243134602B0>
2024-09-04 18:31:45,638 - on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:45,638 - on stmt: $const14.1 = const(str, zero-size array to reduction operation maximum which has no identity)
2024-09-04 18:31:45,638 - on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:572)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,638 - on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
2024-09-04 18:31:45,638 - ==== SSA block rewrite pass on 20
2024-09-04 18:31:45,638 - Running <numba.core.ssa._FixSSAVars object at 0x00000243134602B0>
2024-09-04 18:31:45,638 - on stmt: $20load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:45,639 - on stmt: $22load_method.1 = getattr(value=$20load_global.0, attr=nditer)
2024-09-04 18:31:45,639 - on stmt: it = call $22load_method.1(a, func=$22load_method.1, args=[Var(a, arraymath.py:570)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,639 - on stmt: $30load_global.4 = global(next: <built-in function next>)
2024-09-04 18:31:45,639 - on stmt: $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,639 - on stmt: $36load_method.7 = getattr(value=$34call_function.6, attr=take)
2024-09-04 18:31:45,639 - on stmt: $const38.8 = const(int, 0)
2024-09-04 18:31:45,639 - on stmt: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,639 - on stmt: $44load_deref.10 = freevar(pre_return_func: <ufunc 'isnan'>)
2024-09-04 18:31:45,639 - on stmt: $48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,639 - find_def var='max_value' stmt=$48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,640 - on stmt: bool50 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,640 - on stmt: $50pred = call bool50($48call_function.12, func=bool50, args=(Var($48call_function.12, arraymath.py:577),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,640 - on stmt: branch $50pred, 52, 56
2024-09-04 18:31:45,640 - ==== SSA block rewrite pass on 52
2024-09-04 18:31:45,640 - Running <numba.core.ssa._FixSSAVars object at 0x00000243134602B0>
2024-09-04 18:31:45,640 - on stmt: $54return_value.1 = cast(value=max_value)
2024-09-04 18:31:45,640 - find_def var='max_value' stmt=$54return_value.1 = cast(value=max_value)
2024-09-04 18:31:45,640 - find_def_from_top label 52
2024-09-04 18:31:45,640 - idom 20 from label 52
2024-09-04 18:31:45,640 - find_def_from_bottom label 20
2024-09-04 18:31:45,640 - on stmt: return $54return_value.1
2024-09-04 18:31:45,640 - ==== SSA block rewrite pass on 56
2024-09-04 18:31:45,641 - Running <numba.core.ssa._FixSSAVars object at 0x00000243134602B0>
2024-09-04 18:31:45,641 - on stmt: $58get_iter.1 = getiter(value=it)
2024-09-04 18:31:45,641 - on stmt: $phi60.0 = $58get_iter.1
2024-09-04 18:31:45,641 - on stmt: jump 60
2024-09-04 18:31:45,641 - ==== SSA block rewrite pass on 60
2024-09-04 18:31:45,641 - Running <numba.core.ssa._FixSSAVars object at 0x00000243134602B0>
2024-09-04 18:31:45,641 - on stmt: $60for_iter.1 = iternext(value=$phi60.0)
2024-09-04 18:31:45,641 - on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
2024-09-04 18:31:45,641 - on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
2024-09-04 18:31:45,641 - on stmt: $phi62.1 = $60for_iter.2
2024-09-04 18:31:45,641 - on stmt: branch $60for_iter.3, 62, 104
2024-09-04 18:31:45,641 - ==== SSA block rewrite pass on 62
2024-09-04 18:31:45,642 - Running <numba.core.ssa._FixSSAVars object at 0x00000243134602B0>
2024-09-04 18:31:45,642 - on stmt: view = $phi62.1
2024-09-04 18:31:45,642 - on stmt: $66load_method.3 = getattr(value=view, attr=item)
2024-09-04 18:31:45,642 - on stmt: v = call $66load_method.3(func=$66load_method.3, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,642 - on stmt: $72load_deref.5 = freevar(pre_return_func: <ufunc 'isnan'>)
2024-09-04 18:31:45,642 - on stmt: $76call_function.7 = call $72load_deref.5(v, func=$72load_deref.5, args=[Var(v, arraymath.py:581)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,642 - on stmt: bool78 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,642 - on stmt: $78pred = call bool78($76call_function.7, func=bool78, args=(Var($76call_function.7, arraymath.py:582),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,642 - on stmt: branch $78pred, 80, 88
2024-09-04 18:31:45,642 - ==== SSA block rewrite pass on 80
2024-09-04 18:31:45,642 - Running <numba.core.ssa._FixSSAVars object at 0x00000243134602B0>
2024-09-04 18:31:45,642 - on stmt: $86return_value.2 = cast(value=v)
2024-09-04 18:31:45,643 - on stmt: return $86return_value.2
2024-09-04 18:31:45,643 - ==== SSA block rewrite pass on 88
2024-09-04 18:31:45,643 - Running <numba.core.ssa._FixSSAVars object at 0x00000243134602B0>
2024-09-04 18:31:45,643 - on stmt: $88load_deref.1 = freevar(comparator: <function max_comparator at 0x0000024317C80430>)
2024-09-04 18:31:45,643 - on stmt: $94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,643 - find_def var='max_value' stmt=$94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,643 - find_def_from_top label 88
2024-09-04 18:31:45,643 - idom 62 from label 88
2024-09-04 18:31:45,643 - find_def_from_bottom label 62
2024-09-04 18:31:45,643 - find_def_from_top label 62
2024-09-04 18:31:45,643 - idom 60 from label 62
2024-09-04 18:31:45,643 - find_def_from_bottom label 60
2024-09-04 18:31:45,644 - find_def_from_top label 60
2024-09-04 18:31:45,644 - insert phi node max_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 60
2024-09-04 18:31:45,644 - find_def_from_bottom label 56
2024-09-04 18:31:45,644 - find_def_from_top label 56
2024-09-04 18:31:45,644 - idom 20 from label 56
2024-09-04 18:31:45,644 - find_def_from_bottom label 20
2024-09-04 18:31:45,644 - incoming_def max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,644 - find_def_from_bottom label 102
2024-09-04 18:31:45,644 - find_def_from_top label 102
2024-09-04 18:31:45,644 - insert phi node max_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 102
2024-09-04 18:31:45,644 - find_def_from_bottom label 88
2024-09-04 18:31:45,644 - find_def_from_top label 88
2024-09-04 18:31:45,644 - idom 62 from label 88
2024-09-04 18:31:45,645 - find_def_from_bottom label 62
2024-09-04 18:31:45,645 - find_def_from_top label 62
2024-09-04 18:31:45,645 - idom 60 from label 62
2024-09-04 18:31:45,645 - find_def_from_bottom label 60
2024-09-04 18:31:45,645 - incoming_def max_value.2 = phi(incoming_values=[Var(max_value, arraymath.py:576)], incoming_blocks=[56])
2024-09-04 18:31:45,645 - find_def_from_bottom label 98
2024-09-04 18:31:45,645 - incoming_def max_value.1 = v
2024-09-04 18:31:45,645 - incoming_def max_value.3 = phi(incoming_values=[Var(max_value.2, arraymath.py:584), Var(max_value.1, arraymath.py:585)], incoming_blocks=[88, 98])
2024-09-04 18:31:45,645 - replaced with: $94call_function.4 = call $88load_deref.1(v, max_value.2, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value.2, arraymath.py:584)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,645 - on stmt: bool96 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,645 - on stmt: $96pred = call bool96($94call_function.4, func=bool96, args=(Var($94call_function.4, arraymath.py:584),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,646 - on stmt: branch $96pred, 98, 102
2024-09-04 18:31:45,646 - ==== SSA block rewrite pass on 98
2024-09-04 18:31:45,646 - Running <numba.core.ssa._FixSSAVars object at 0x00000243134602B0>
2024-09-04 18:31:45,646 - on stmt: max_value.1 = v
2024-09-04 18:31:45,646 - on stmt: jump 102
2024-09-04 18:31:45,646 - ==== SSA block rewrite pass on 102
2024-09-04 18:31:45,646 - Running <numba.core.ssa._FixSSAVars object at 0x00000243134602B0>
2024-09-04 18:31:45,646 - on stmt: jump 60
2024-09-04 18:31:45,646 - ==== SSA block rewrite pass on 104
2024-09-04 18:31:45,646 - Running <numba.core.ssa._FixSSAVars object at 0x00000243134602B0>
2024-09-04 18:31:45,646 - on stmt: $106return_value.1 = cast(value=max_value)
2024-09-04 18:31:45,646 - find_def var='max_value' stmt=$106return_value.1 = cast(value=max_value)
2024-09-04 18:31:45,646 - find_def_from_top label 104
2024-09-04 18:31:45,647 - idom 60 from label 104
2024-09-04 18:31:45,647 - find_def_from_bottom label 60
2024-09-04 18:31:45,647 - replaced with: $106return_value.1 = cast(value=max_value.2)
2024-09-04 18:31:45,647 - on stmt: return $106return_value.1
2024-09-04 18:31:45,662 - bytecode dump:
>          0	NOP(arg=None, lineno=4691)
           2	LOAD_FAST(arg=1, lineno=4692)
           4	LOAD_FAST(arg=0, lineno=4692)
           6	LOAD_ATTR(arg=0, lineno=4692)
           8	LOAD_CONST(arg=1, lineno=4692)
          10	BINARY_SUBTRACT(arg=None, lineno=4692)
          12	COMPARE_OP(arg=4, lineno=4692)
          14	POP_JUMP_IF_TRUE(arg=15, lineno=4692)
          16	LOAD_FAST(arg=1, lineno=4692)
          18	LOAD_FAST(arg=0, lineno=4692)
          20	LOAD_ATTR(arg=0, lineno=4692)
          22	UNARY_NEGATIVE(arg=None, lineno=4692)
          24	COMPARE_OP(arg=0, lineno=4692)
          26	POP_JUMP_IF_FALSE(arg=19, lineno=4692)
>         28	LOAD_GLOBAL(arg=1, lineno=4693)
          30	LOAD_CONST(arg=2, lineno=4693)
          32	CALL_FUNCTION(arg=1, lineno=4693)
          34	RAISE_VARARGS(arg=1, lineno=4693)
>         36	LOAD_FAST(arg=0, lineno=4694)
          38	LOAD_METHOD(arg=2, lineno=4694)
          40	CALL_METHOD(arg=0, lineno=4694)
          42	LOAD_FAST(arg=1, lineno=4694)
          44	BINARY_SUBSCR(arg=None, lineno=4694)
          46	RETURN_VALUE(arg=None, lineno=4694)
2024-09-04 18:31:45,662 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:45,662 - stack: []
2024-09-04 18:31:45,662 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:45,662 - dispatch pc=0, inst=NOP(arg=None, lineno=4691)
2024-09-04 18:31:45,662 - stack []
2024-09-04 18:31:45,662 - dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=4692)
2024-09-04 18:31:45,662 - stack []
2024-09-04 18:31:45,662 - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4692)
2024-09-04 18:31:45,663 - stack ['$indices2.0']
2024-09-04 18:31:45,663 - dispatch pc=6, inst=LOAD_ATTR(arg=0, lineno=4692)
2024-09-04 18:31:45,663 - stack ['$indices2.0', '$a4.1']
2024-09-04 18:31:45,663 - dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=4692)
2024-09-04 18:31:45,663 - stack ['$indices2.0', '$6load_attr.2']
2024-09-04 18:31:45,663 - dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=4692)
2024-09-04 18:31:45,663 - stack ['$indices2.0', '$6load_attr.2', '$const8.3']
2024-09-04 18:31:45,663 - dispatch pc=12, inst=COMPARE_OP(arg=4, lineno=4692)
2024-09-04 18:31:45,663 - stack ['$indices2.0', '$10binary_subtract.4']
2024-09-04 18:31:45,663 - dispatch pc=14, inst=POP_JUMP_IF_TRUE(arg=15, lineno=4692)
2024-09-04 18:31:45,663 - stack ['$12compare_op.5']
2024-09-04 18:31:45,663 - end state. edges=[Edge(pc=16, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:45,664 - pending: deque([State(pc_initial=16 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
2024-09-04 18:31:45,664 - stack: []
2024-09-04 18:31:45,664 - state.pc_initial: State(pc_initial=16 nstack_initial=0)
2024-09-04 18:31:45,664 - dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=4692)
2024-09-04 18:31:45,664 - stack []
2024-09-04 18:31:45,664 - dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=4692)
2024-09-04 18:31:45,664 - stack ['$indices16.0']
2024-09-04 18:31:45,664 - dispatch pc=20, inst=LOAD_ATTR(arg=0, lineno=4692)
2024-09-04 18:31:45,664 - stack ['$indices16.0', '$a18.1']
2024-09-04 18:31:45,664 - dispatch pc=22, inst=UNARY_NEGATIVE(arg=None, lineno=4692)
2024-09-04 18:31:45,664 - stack ['$indices16.0', '$20load_attr.2']
2024-09-04 18:31:45,664 - dispatch pc=24, inst=COMPARE_OP(arg=0, lineno=4692)
2024-09-04 18:31:45,665 - stack ['$indices16.0', '$22unary_negative.3']
2024-09-04 18:31:45,665 - dispatch pc=26, inst=POP_JUMP_IF_FALSE(arg=19, lineno=4692)
2024-09-04 18:31:45,665 - stack ['$24compare_op.4']
2024-09-04 18:31:45,665 - end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:45,665 - pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2024-09-04 18:31:45,665 - stack: []
2024-09-04 18:31:45,665 - state.pc_initial: State(pc_initial=28 nstack_initial=0)
2024-09-04 18:31:45,665 - dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=4693)
2024-09-04 18:31:45,665 - stack []
2024-09-04 18:31:45,665 - dispatch pc=30, inst=LOAD_CONST(arg=2, lineno=4693)
2024-09-04 18:31:45,665 - stack ['$28load_global.0']
2024-09-04 18:31:45,665 - dispatch pc=32, inst=CALL_FUNCTION(arg=1, lineno=4693)
2024-09-04 18:31:45,666 - stack ['$28load_global.0', '$const30.1']
2024-09-04 18:31:45,666 - dispatch pc=34, inst=RAISE_VARARGS(arg=1, lineno=4693)
2024-09-04 18:31:45,666 - stack ['$32call_function.2']
2024-09-04 18:31:45,666 - end state. edges=[]
2024-09-04 18:31:45,666 - pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2024-09-04 18:31:45,666 - pending: deque([State(pc_initial=36 nstack_initial=0)])
2024-09-04 18:31:45,666 - stack: []
2024-09-04 18:31:45,666 - state.pc_initial: State(pc_initial=36 nstack_initial=0)
2024-09-04 18:31:45,666 - dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=4694)
2024-09-04 18:31:45,666 - stack []
2024-09-04 18:31:45,666 - dispatch pc=38, inst=LOAD_METHOD(arg=2, lineno=4694)
2024-09-04 18:31:45,667 - stack ['$a36.0']
2024-09-04 18:31:45,667 - dispatch pc=40, inst=CALL_METHOD(arg=0, lineno=4694)
2024-09-04 18:31:45,667 - stack ['$38load_method.1']
2024-09-04 18:31:45,667 - dispatch pc=42, inst=LOAD_FAST(arg=1, lineno=4694)
2024-09-04 18:31:45,667 - stack ['$40call_method.2']
2024-09-04 18:31:45,667 - dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=4694)
2024-09-04 18:31:45,667 - stack ['$40call_method.2', '$indices42.3']
2024-09-04 18:31:45,667 - dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=4694)
2024-09-04 18:31:45,667 - stack ['$44binary_subscr.4']
2024-09-04 18:31:45,667 - end state. edges=[]
2024-09-04 18:31:45,668 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:45,668 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
2024-09-04 18:31:45,668 - defmap: {}
2024-09-04 18:31:45,668 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:45,668 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:45,668 - keep phismap: {}
2024-09-04 18:31:45,668 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:45,668 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:45,668 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$indices2.0'}), (4, {'res': '$a4.1'}), (6, {'item': '$a4.1', 'res': '$6load_attr.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$6load_attr.2', 'rhs': '$const8.3', 'res': '$10binary_subtract.4'}), (12, {'lhs': '$indices2.0', 'rhs': '$10binary_subtract.4', 'res': '$12compare_op.5'}), (14, {'pred': '$12compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: (), 28: ()})
2024-09-04 18:31:45,669 - block_infos State(pc_initial=16 nstack_initial=0):
AdaptBlockInfo(insts=((16, {'res': '$indices16.0'}), (18, {'res': '$a18.1'}), (20, {'item': '$a18.1', 'res': '$20load_attr.2'}), (22, {'value': '$20load_attr.2', 'res': '$22unary_negative.3'}), (24, {'lhs': '$indices16.0', 'rhs': '$22unary_negative.3', 'res': '$24compare_op.4'}), (26, {'pred': '$24compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: (), 36: ()})
2024-09-04 18:31:45,669 - block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$28load_global.0'}), (30, {'res': '$const30.1'}), (32, {'func': '$28load_global.0', 'args': ['$const30.1'], 'res': '$32call_function.2'}), (34, {'exc': '$32call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:45,669 - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$a36.0'}), (38, {'item': '$a36.0', 'res': '$38load_method.1'}), (40, {'func': '$38load_method.1', 'args': [], 'res': '$40call_method.2'}), (42, {'res': '$indices42.3'}), (44, {'index': '$indices42.3', 'target': '$40call_method.2', 'res': '$44binary_subscr.4'}), (46, {'retval': '$44binary_subscr.4', 'castval': '$46return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:45,670 - label 0:
    a = arg(0, name=a)                       ['a']
    indices = arg(1, name=indices)           ['indices']
    $6load_attr.2 = getattr(value=a, attr=size) ['$6load_attr.2', 'a']
    $const8.3 = const(int, 1)                ['$const8.3']
    $10binary_subtract.4 = $6load_attr.2 - $const8.3 ['$10binary_subtract.4', '$6load_attr.2', '$const8.3']
    $12compare_op.5 = indices > $10binary_subtract.4 ['$10binary_subtract.4', '$12compare_op.5', 'indices']
    bool14 = global(bool: <class 'bool'>)    ['bool14']
    $14pred = call bool14($12compare_op.5, func=bool14, args=(Var($12compare_op.5, arrayobj.py:4692),), kws=(), vararg=None, varkwarg=None, target=None) ['$12compare_op.5', '$14pred', 'bool14']
    branch $14pred, 28, 16                   ['$14pred']
label 16:
    $20load_attr.2 = getattr(value=a, attr=size) ['$20load_attr.2', 'a']
    $22unary_negative.3 = unary(fn=<built-in function neg>, value=$20load_attr.2) ['$20load_attr.2', '$22unary_negative.3']
    $24compare_op.4 = indices < $22unary_negative.3 ['$22unary_negative.3', '$24compare_op.4', 'indices']
    bool26 = global(bool: <class 'bool'>)    ['bool26']
    $26pred = call bool26($24compare_op.4, func=bool26, args=(Var($24compare_op.4, arrayobj.py:4692),), kws=(), vararg=None, varkwarg=None, target=None) ['$24compare_op.4', '$26pred', 'bool26']
    branch $26pred, 28, 36                   ['$26pred']
label 28:
    $28load_global.0 = global(IndexError: <class 'IndexError'>) ['$28load_global.0']
    $const30.1 = const(str, Index out of bounds) ['$const30.1']
    $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, arrayobj.py:4693)], kws=(), vararg=None, varkwarg=None, target=None) ['$28load_global.0', '$32call_function.2', '$const30.1']
    raise $32call_function.2                 ['$32call_function.2']
label 36:
    $38load_method.1 = getattr(value=a, attr=ravel) ['$38load_method.1', 'a']
    $40call_method.2 = call $38load_method.1(func=$38load_method.1, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$38load_method.1', '$40call_method.2']
    $44binary_subscr.4 = getitem(value=$40call_method.2, index=indices, fn=<built-in function getitem>) ['$40call_method.2', '$44binary_subscr.4', 'indices']
    $46return_value.5 = cast(value=$44binary_subscr.4) ['$44binary_subscr.4', '$46return_value.5']
    return $46return_value.5                 ['$46return_value.5']

2024-09-04 18:31:45,685 - ==== SSA block analysis pass on 0
2024-09-04 18:31:45,686 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313A43E80>
2024-09-04 18:31:45,686 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:45,686 - on stmt: indices = arg(1, name=indices)
2024-09-04 18:31:45,686 - on stmt: $6load_attr.2 = getattr(value=a, attr=size)
2024-09-04 18:31:45,686 - on stmt: $const8.3 = const(int, 1)
2024-09-04 18:31:45,686 - on stmt: $10binary_subtract.4 = $6load_attr.2 - $const8.3
2024-09-04 18:31:45,686 - on stmt: $12compare_op.5 = indices > $10binary_subtract.4
2024-09-04 18:31:45,686 - on stmt: bool14 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,686 - on stmt: $14pred = call bool14($12compare_op.5, func=bool14, args=(Var($12compare_op.5, arrayobj.py:4692),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,686 - on stmt: branch $14pred, 28, 16
2024-09-04 18:31:45,687 - ==== SSA block analysis pass on 16
2024-09-04 18:31:45,687 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313A43E80>
2024-09-04 18:31:45,687 - on stmt: $20load_attr.2 = getattr(value=a, attr=size)
2024-09-04 18:31:45,687 - on stmt: $22unary_negative.3 = unary(fn=<built-in function neg>, value=$20load_attr.2)
2024-09-04 18:31:45,687 - on stmt: $24compare_op.4 = indices < $22unary_negative.3
2024-09-04 18:31:45,687 - on stmt: bool26 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,687 - on stmt: $26pred = call bool26($24compare_op.4, func=bool26, args=(Var($24compare_op.4, arrayobj.py:4692),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,687 - on stmt: branch $26pred, 28, 36
2024-09-04 18:31:45,687 - ==== SSA block analysis pass on 28
2024-09-04 18:31:45,687 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313A43E80>
2024-09-04 18:31:45,687 - on stmt: $28load_global.0 = global(IndexError: <class 'IndexError'>)
2024-09-04 18:31:45,687 - on stmt: $const30.1 = const(str, Index out of bounds)
2024-09-04 18:31:45,688 - on stmt: $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, arrayobj.py:4693)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,688 - on stmt: <static> raise <class 'IndexError'>('Index out of bounds')
2024-09-04 18:31:45,688 - ==== SSA block analysis pass on 36
2024-09-04 18:31:45,688 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313A43E80>
2024-09-04 18:31:45,688 - on stmt: $38load_method.1 = getattr(value=a, attr=ravel)
2024-09-04 18:31:45,688 - on stmt: $40call_method.2 = call $38load_method.1(func=$38load_method.1, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,688 - on stmt: $44binary_subscr.4 = getitem(value=$40call_method.2, index=indices, fn=<built-in function getitem>)
2024-09-04 18:31:45,688 - on stmt: $46return_value.5 = cast(value=$44binary_subscr.4)
2024-09-04 18:31:45,688 - on stmt: return $46return_value.5
2024-09-04 18:31:45,689 - defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [(<numba.core.ir.Assign object at 0x0000024313A43850>,
                                       0)],
             '$12compare_op.5': [(<numba.core.ir.Assign object at 0x0000024313A41780>,
                                  0)],
             '$14pred': [(<numba.core.ir.Assign object at 0x0000024313A41F90>,
                          0)],
             '$20load_attr.2': [(<numba.core.ir.Assign object at 0x0000024313A42890>,
                                 16)],
             '$22unary_negative.3': [(<numba.core.ir.Assign object at 0x0000024313A428C0>,
                                      16)],
             '$24compare_op.4': [(<numba.core.ir.Assign object at 0x0000024313A42260>,
                                  16)],
             '$26pred': [(<numba.core.ir.Assign object at 0x0000024313A416F0>,
                          16)],
             '$28load_global.0': [(<numba.core.ir.Assign object at 0x0000024313A41AE0>,
                                   28)],
             '$32call_function.2': [(<numba.core.ir.Assign object at 0x0000024313A433A0>,
                                     28)],
             '$38load_method.1': [(<numba.core.ir.Assign object at 0x0000024313A435E0>,
                                   36)],
             '$40call_method.2': [(<numba.core.ir.Assign object at 0x0000024313A431F0>,
                                   36)],
             '$44binary_subscr.4': [(<numba.core.ir.Assign object at 0x0000024313A42740>,
                                     36)],
             '$46return_value.5': [(<numba.core.ir.Assign object at 0x0000024313A43010>,
                                    36)],
             '$6load_attr.2': [(<numba.core.ir.Assign object at 0x0000024313A40A00>,
                                0)],
             '$const30.1': [(<numba.core.ir.Assign object at 0x0000024313A43940>,
                             28)],
             '$const8.3': [(<numba.core.ir.Assign object at 0x0000024313A41180>,
                            0)],
             'a': [(<numba.core.ir.Assign object at 0x0000024313A414E0>, 0)],
             'bool14': [(<numba.core.ir.Assign object at 0x0000024313A41FC0>,
                         0)],
             'bool26': [(<numba.core.ir.Assign object at 0x0000024313A43D60>,
                         16)],
             'indices': [(<numba.core.ir.Assign object at 0x0000024313A407C0>,
                          0)]})
2024-09-04 18:31:45,690 - SSA violators <numba.core.utils.OrderedSet object at 0x0000024313A43E80>
2024-09-04 18:31:45,732 - bytecode dump:
>          0	NOP(arg=None, lineno=2230)
           2	LOAD_FAST(arg=0, lineno=2232)
           4	LOAD_METHOD(arg=0, lineno=2232)
           6	LOAD_FAST(arg=0, lineno=2232)
           8	LOAD_ATTR(arg=1, lineno=2232)
          10	CALL_METHOD(arg=1, lineno=2232)
          12	RETURN_VALUE(arg=None, lineno=2232)
2024-09-04 18:31:45,732 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:45,732 - stack: []
2024-09-04 18:31:45,732 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:45,732 - dispatch pc=0, inst=NOP(arg=None, lineno=2230)
2024-09-04 18:31:45,732 - stack []
2024-09-04 18:31:45,732 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2232)
2024-09-04 18:31:45,732 - stack []
2024-09-04 18:31:45,732 - dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=2232)
2024-09-04 18:31:45,732 - stack ['$ary2.0']
2024-09-04 18:31:45,733 - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=2232)
2024-09-04 18:31:45,733 - stack ['$4load_method.1']
2024-09-04 18:31:45,733 - dispatch pc=8, inst=LOAD_ATTR(arg=1, lineno=2232)
2024-09-04 18:31:45,733 - stack ['$4load_method.1', '$ary6.2']
2024-09-04 18:31:45,733 - dispatch pc=10, inst=CALL_METHOD(arg=1, lineno=2232)
2024-09-04 18:31:45,733 - stack ['$4load_method.1', '$8load_attr.3']
2024-09-04 18:31:45,733 - dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=2232)
2024-09-04 18:31:45,733 - stack ['$10call_method.4']
2024-09-04 18:31:45,733 - end state. edges=[]
2024-09-04 18:31:45,733 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:45,733 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 18:31:45,734 - defmap: {}
2024-09-04 18:31:45,734 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:45,734 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:45,734 - keep phismap: {}
2024-09-04 18:31:45,734 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:45,734 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:45,734 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$ary2.0'}), (4, {'item': '$ary2.0', 'res': '$4load_method.1'}), (6, {'res': '$ary6.2'}), (8, {'item': '$ary6.2', 'res': '$8load_attr.3'}), (10, {'func': '$4load_method.1', 'args': ['$8load_attr.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:45,735 - label 0:
    ary = arg(0, name=ary)                   ['ary']
    $4load_method.1 = getattr(value=ary, attr=reshape) ['$4load_method.1', 'ary']
    $8load_attr.3 = getattr(value=ary, attr=size) ['$8load_attr.3', 'ary']
    $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arrayobj.py:2232)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_method.4', '$4load_method.1', '$8load_attr.3']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2024-09-04 18:31:45,745 - ==== SSA block analysis pass on 0
2024-09-04 18:31:45,745 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431321FAC0>
2024-09-04 18:31:45,745 - on stmt: ary = arg(0, name=ary)
2024-09-04 18:31:45,745 - on stmt: $4load_method.1 = getattr(value=ary, attr=reshape)
2024-09-04 18:31:45,745 - on stmt: $8load_attr.3 = getattr(value=ary, attr=size)
2024-09-04 18:31:45,745 - on stmt: $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arrayobj.py:2232)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,745 - on stmt: $12return_value.5 = cast(value=$10call_method.4)
2024-09-04 18:31:45,746 - on stmt: return $12return_value.5
2024-09-04 18:31:45,746 - defs defaultdict(<class 'list'>,
            {'$10call_method.4': [(<numba.core.ir.Assign object at 0x00000243134486A0>,
                                   0)],
             '$12return_value.5': [(<numba.core.ir.Assign object at 0x000002431344B9D0>,
                                    0)],
             '$4load_method.1': [(<numba.core.ir.Assign object at 0x000002431344BD00>,
                                  0)],
             '$8load_attr.3': [(<numba.core.ir.Assign object at 0x000002431344BFA0>,
                                0)],
             'ary': [(<numba.core.ir.Assign object at 0x0000024313449510>, 0)]})
2024-09-04 18:31:45,746 - SSA violators <numba.core.utils.OrderedSet object at 0x000002431321FAC0>
2024-09-04 18:31:45,766 - bytecode dump:
>          0	NOP(arg=None, lineno=2046)
           2	LOAD_CONST(arg=1, lineno=2047)
           4	STORE_FAST(arg=2, lineno=2047)
           6	LOAD_CONST(arg=2, lineno=2048)
           8	STORE_FAST(arg=3, lineno=2048)
          10	LOAD_GLOBAL(arg=0, lineno=2049)
          12	LOAD_FAST(arg=1, lineno=2049)
          14	CALL_FUNCTION(arg=1, lineno=2049)
          16	GET_ITER(arg=None, lineno=2049)
>         18	FOR_ITER(arg=19, lineno=2049)
          20	UNPACK_SEQUENCE(arg=2, lineno=2049)
          22	STORE_FAST(arg=4, lineno=2049)
          24	STORE_FAST(arg=5, lineno=2049)
          26	LOAD_FAST(arg=5, lineno=2050)
          28	LOAD_CONST(arg=1, lineno=2050)
          30	COMPARE_OP(arg=0, lineno=2050)
          32	POP_JUMP_IF_FALSE(arg=25, lineno=2050)
          34	LOAD_FAST(arg=2, lineno=2051)
          36	LOAD_CONST(arg=2, lineno=2051)
          38	INPLACE_ADD(arg=None, lineno=2051)
          40	STORE_FAST(arg=2, lineno=2051)
          42	LOAD_FAST(arg=4, lineno=2052)
          44	STORE_FAST(arg=6, lineno=2052)
          46	JUMP_ABSOLUTE(arg=10, lineno=2052)
>         48	LOAD_FAST(arg=3, lineno=2054)
          50	LOAD_FAST(arg=5, lineno=2054)
          52	INPLACE_MULTIPLY(arg=None, lineno=2054)
          54	STORE_FAST(arg=3, lineno=2054)
          56	JUMP_ABSOLUTE(arg=10, lineno=2054)
>         58	LOAD_FAST(arg=2, lineno=2056)
          60	LOAD_CONST(arg=1, lineno=2056)
          62	COMPARE_OP(arg=2, lineno=2056)
          64	POP_JUMP_IF_FALSE(arg=44, lineno=2056)
          66	LOAD_FAST(arg=0, lineno=2057)
          68	LOAD_FAST(arg=3, lineno=2057)
          70	COMPARE_OP(arg=3, lineno=2057)
          72	POP_JUMP_IF_FALSE(arg=42, lineno=2057)
          74	LOAD_GLOBAL(arg=1, lineno=2058)
          76	LOAD_CONST(arg=3, lineno=2058)
          78	CALL_FUNCTION(arg=1, lineno=2058)
          80	RAISE_VARARGS(arg=1, lineno=2058)
>         82	LOAD_CONST(arg=0, lineno=2057)
          84	RETURN_VALUE(arg=None, lineno=2057)
>         86	LOAD_FAST(arg=2, lineno=2060)
          88	LOAD_CONST(arg=2, lineno=2060)
          90	COMPARE_OP(arg=2, lineno=2060)
          92	POP_JUMP_IF_FALSE(arg=81, lineno=2060)
          94	LOAD_FAST(arg=3, lineno=2062)
          96	LOAD_CONST(arg=1, lineno=2062)
          98	COMPARE_OP(arg=2, lineno=2062)
         100	POP_JUMP_IF_FALSE(arg=59, lineno=2062)
         102	LOAD_CONST(arg=1, lineno=2063)
         104	STORE_FAST(arg=7, lineno=2063)
         106	LOAD_FAST(arg=0, lineno=2064)
         108	LOAD_CONST(arg=1, lineno=2064)
         110	COMPARE_OP(arg=2, lineno=2064)
         112	STORE_FAST(arg=8, lineno=2064)
         114	JUMP_FORWARD(arg=10, lineno=2064)
>        116	LOAD_FAST(arg=0, lineno=2066)
         118	LOAD_FAST(arg=3, lineno=2066)
         120	BINARY_FLOOR_DIVIDE(arg=None, lineno=2066)
         122	STORE_FAST(arg=7, lineno=2066)
         124	LOAD_FAST(arg=0, lineno=2067)
         126	LOAD_FAST(arg=3, lineno=2067)
         128	BINARY_MODULO(arg=None, lineno=2067)
         130	LOAD_CONST(arg=1, lineno=2067)
         132	COMPARE_OP(arg=2, lineno=2067)
         134	STORE_FAST(arg=8, lineno=2067)
>        136	LOAD_FAST(arg=8, lineno=2068)
         138	POP_JUMP_IF_TRUE(arg=75, lineno=2068)
         140	LOAD_GLOBAL(arg=1, lineno=2069)
         142	LOAD_CONST(arg=3, lineno=2069)
         144	CALL_FUNCTION(arg=1, lineno=2069)
         146	RAISE_VARARGS(arg=1, lineno=2069)
>        148	LOAD_FAST(arg=7, lineno=2070)
         150	LOAD_FAST(arg=1, lineno=2070)
         152	LOAD_FAST(arg=6, lineno=2070)
         154	STORE_SUBSCR(arg=None, lineno=2070)
         156	LOAD_CONST(arg=0, lineno=2070)
         158	RETURN_VALUE(arg=None, lineno=2070)
>        160	LOAD_GLOBAL(arg=1, lineno=2073)
         162	LOAD_CONST(arg=4, lineno=2073)
         164	CALL_FUNCTION(arg=1, lineno=2073)
         166	RAISE_VARARGS(arg=1, lineno=2073)
2024-09-04 18:31:45,766 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:45,766 - stack: []
2024-09-04 18:31:45,766 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:45,767 - dispatch pc=0, inst=NOP(arg=None, lineno=2046)
2024-09-04 18:31:45,767 - stack []
2024-09-04 18:31:45,767 - dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=2047)
2024-09-04 18:31:45,767 - stack []
2024-09-04 18:31:45,767 - dispatch pc=4, inst=STORE_FAST(arg=2, lineno=2047)
2024-09-04 18:31:45,767 - stack ['$const2.0']
2024-09-04 18:31:45,767 - dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=2048)
2024-09-04 18:31:45,767 - stack []
2024-09-04 18:31:45,768 - dispatch pc=8, inst=STORE_FAST(arg=3, lineno=2048)
2024-09-04 18:31:45,768 - stack ['$const6.1']
2024-09-04 18:31:45,768 - dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=2049)
2024-09-04 18:31:45,768 - stack []
2024-09-04 18:31:45,768 - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=2049)
2024-09-04 18:31:45,768 - stack ['$10load_global.2']
2024-09-04 18:31:45,768 - dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=2049)
2024-09-04 18:31:45,768 - stack ['$10load_global.2', '$shape12.3']
2024-09-04 18:31:45,768 - dispatch pc=16, inst=GET_ITER(arg=None, lineno=2049)
2024-09-04 18:31:45,768 - stack ['$14call_function.4']
2024-09-04 18:31:45,768 - end state. edges=[Edge(pc=18, stack=('$16get_iter.5',), blockstack=(), npush=0)]
2024-09-04 18:31:45,769 - pending: deque([State(pc_initial=18 nstack_initial=1)])
2024-09-04 18:31:45,769 - stack: ['$phi18.0']
2024-09-04 18:31:45,769 - state.pc_initial: State(pc_initial=18 nstack_initial=1)
2024-09-04 18:31:45,769 - dispatch pc=18, inst=FOR_ITER(arg=19, lineno=2049)
2024-09-04 18:31:45,769 - stack ['$phi18.0']
2024-09-04 18:31:45,769 - end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0), Edge(pc=20, stack=('$phi18.0', '$18for_iter.2'), blockstack=(), npush=0)]
2024-09-04 18:31:45,769 - pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=20 nstack_initial=2)])
2024-09-04 18:31:45,769 - stack: []
2024-09-04 18:31:45,769 - state.pc_initial: State(pc_initial=58 nstack_initial=0)
2024-09-04 18:31:45,769 - dispatch pc=58, inst=LOAD_FAST(arg=2, lineno=2056)
2024-09-04 18:31:45,769 - stack []
2024-09-04 18:31:45,770 - dispatch pc=60, inst=LOAD_CONST(arg=1, lineno=2056)
2024-09-04 18:31:45,770 - stack ['$num_neg_value58.0']
2024-09-04 18:31:45,770 - dispatch pc=62, inst=COMPARE_OP(arg=2, lineno=2056)
2024-09-04 18:31:45,770 - stack ['$num_neg_value58.0', '$const60.1']
2024-09-04 18:31:45,770 - dispatch pc=64, inst=POP_JUMP_IF_FALSE(arg=44, lineno=2056)
2024-09-04 18:31:45,770 - stack ['$62compare_op.2']
2024-09-04 18:31:45,770 - end state. edges=[Edge(pc=66, stack=(), blockstack=(), npush=0), Edge(pc=86, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:45,770 - pending: deque([State(pc_initial=20 nstack_initial=2), State(pc_initial=66 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
2024-09-04 18:31:45,770 - stack: ['$phi20.0', '$phi20.1']
2024-09-04 18:31:45,770 - state.pc_initial: State(pc_initial=20 nstack_initial=2)
2024-09-04 18:31:45,770 - dispatch pc=20, inst=UNPACK_SEQUENCE(arg=2, lineno=2049)
2024-09-04 18:31:45,770 - stack ['$phi20.0', '$phi20.1']
2024-09-04 18:31:45,771 - dispatch pc=22, inst=STORE_FAST(arg=4, lineno=2049)
2024-09-04 18:31:45,771 - stack ['$phi20.0', '$20unpack_sequence.3', '$20unpack_sequence.2']
2024-09-04 18:31:45,771 - dispatch pc=24, inst=STORE_FAST(arg=5, lineno=2049)
2024-09-04 18:31:45,771 - stack ['$phi20.0', '$20unpack_sequence.3']
2024-09-04 18:31:45,771 - dispatch pc=26, inst=LOAD_FAST(arg=5, lineno=2050)
2024-09-04 18:31:45,771 - stack ['$phi20.0']
2024-09-04 18:31:45,771 - dispatch pc=28, inst=LOAD_CONST(arg=1, lineno=2050)
2024-09-04 18:31:45,771 - stack ['$phi20.0', '$s26.5']
2024-09-04 18:31:45,771 - dispatch pc=30, inst=COMPARE_OP(arg=0, lineno=2050)
2024-09-04 18:31:45,771 - stack ['$phi20.0', '$s26.5', '$const28.6']
2024-09-04 18:31:45,771 - dispatch pc=32, inst=POP_JUMP_IF_FALSE(arg=25, lineno=2050)
2024-09-04 18:31:45,771 - stack ['$phi20.0', '$30compare_op.7']
2024-09-04 18:31:45,772 - end state. edges=[Edge(pc=34, stack=('$phi20.0',), blockstack=(), npush=0), Edge(pc=48, stack=('$phi20.0',), blockstack=(), npush=0)]
2024-09-04 18:31:45,772 - pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=86 nstack_initial=0), State(pc_initial=34 nstack_initial=1), State(pc_initial=48 nstack_initial=1)])
2024-09-04 18:31:45,772 - stack: []
2024-09-04 18:31:45,772 - state.pc_initial: State(pc_initial=66 nstack_initial=0)
2024-09-04 18:31:45,772 - dispatch pc=66, inst=LOAD_FAST(arg=0, lineno=2057)
2024-09-04 18:31:45,772 - stack []
2024-09-04 18:31:45,772 - dispatch pc=68, inst=LOAD_FAST(arg=3, lineno=2057)
2024-09-04 18:31:45,772 - stack ['$origsize66.0']
2024-09-04 18:31:45,772 - dispatch pc=70, inst=COMPARE_OP(arg=3, lineno=2057)
2024-09-04 18:31:45,772 - stack ['$origsize66.0', '$known_size68.1']
2024-09-04 18:31:45,772 - dispatch pc=72, inst=POP_JUMP_IF_FALSE(arg=42, lineno=2057)
2024-09-04 18:31:45,773 - stack ['$70compare_op.2']
2024-09-04 18:31:45,773 - end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:45,773 - pending: deque([State(pc_initial=86 nstack_initial=0), State(pc_initial=34 nstack_initial=1), State(pc_initial=48 nstack_initial=1), State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0)])
2024-09-04 18:31:45,773 - stack: []
2024-09-04 18:31:45,773 - state.pc_initial: State(pc_initial=86 nstack_initial=0)
2024-09-04 18:31:45,773 - dispatch pc=86, inst=LOAD_FAST(arg=2, lineno=2060)
2024-09-04 18:31:45,773 - stack []
2024-09-04 18:31:45,773 - dispatch pc=88, inst=LOAD_CONST(arg=2, lineno=2060)
2024-09-04 18:31:45,773 - stack ['$num_neg_value86.0']
2024-09-04 18:31:45,773 - dispatch pc=90, inst=COMPARE_OP(arg=2, lineno=2060)
2024-09-04 18:31:45,773 - stack ['$num_neg_value86.0', '$const88.1']
2024-09-04 18:31:45,773 - dispatch pc=92, inst=POP_JUMP_IF_FALSE(arg=81, lineno=2060)
2024-09-04 18:31:45,773 - stack ['$90compare_op.2']
2024-09-04 18:31:45,774 - end state. edges=[Edge(pc=94, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:45,774 - pending: deque([State(pc_initial=34 nstack_initial=1), State(pc_initial=48 nstack_initial=1), State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
2024-09-04 18:31:45,774 - stack: ['$phi34.0']
2024-09-04 18:31:45,774 - state.pc_initial: State(pc_initial=34 nstack_initial=1)
2024-09-04 18:31:45,774 - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=2051)
2024-09-04 18:31:45,774 - stack ['$phi34.0']
2024-09-04 18:31:45,774 - dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=2051)
2024-09-04 18:31:45,774 - stack ['$phi34.0', '$num_neg_value34.1']
2024-09-04 18:31:45,774 - dispatch pc=38, inst=INPLACE_ADD(arg=None, lineno=2051)
2024-09-04 18:31:45,774 - stack ['$phi34.0', '$num_neg_value34.1', '$const36.2']
2024-09-04 18:31:45,775 - dispatch pc=40, inst=STORE_FAST(arg=2, lineno=2051)
2024-09-04 18:31:45,775 - stack ['$phi34.0', '$38inplace_add.3']
2024-09-04 18:31:45,775 - dispatch pc=42, inst=LOAD_FAST(arg=4, lineno=2052)
2024-09-04 18:31:45,775 - stack ['$phi34.0']
2024-09-04 18:31:45,775 - dispatch pc=44, inst=STORE_FAST(arg=6, lineno=2052)
2024-09-04 18:31:45,775 - stack ['$phi34.0', '$ax42.4']
2024-09-04 18:31:45,775 - dispatch pc=46, inst=JUMP_ABSOLUTE(arg=10, lineno=2052)
2024-09-04 18:31:45,775 - stack ['$phi34.0']
2024-09-04 18:31:45,775 - end state. edges=[Edge(pc=18, stack=('$phi34.0',), blockstack=(), npush=0)]
2024-09-04 18:31:45,775 - pending: deque([State(pc_initial=48 nstack_initial=1), State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=160 nstack_initial=0), State(pc_initial=18 nstack_initial=1)])
2024-09-04 18:31:45,775 - stack: ['$phi48.0']
2024-09-04 18:31:45,775 - state.pc_initial: State(pc_initial=48 nstack_initial=1)
2024-09-04 18:31:45,775 - dispatch pc=48, inst=LOAD_FAST(arg=3, lineno=2054)
2024-09-04 18:31:45,775 - stack ['$phi48.0']
2024-09-04 18:31:45,775 - dispatch pc=50, inst=LOAD_FAST(arg=5, lineno=2054)
2024-09-04 18:31:45,775 - stack ['$phi48.0', '$known_size48.1']
2024-09-04 18:31:45,775 - dispatch pc=52, inst=INPLACE_MULTIPLY(arg=None, lineno=2054)
2024-09-04 18:31:45,775 - stack ['$phi48.0', '$known_size48.1', '$s50.2']
2024-09-04 18:31:45,775 - dispatch pc=54, inst=STORE_FAST(arg=3, lineno=2054)
2024-09-04 18:31:45,775 - stack ['$phi48.0', '$52inplace_multiply.3']
2024-09-04 18:31:45,775 - dispatch pc=56, inst=JUMP_ABSOLUTE(arg=10, lineno=2054)
2024-09-04 18:31:45,775 - stack ['$phi48.0']
2024-09-04 18:31:45,775 - end state. edges=[Edge(pc=18, stack=('$phi48.0',), blockstack=(), npush=0)]
2024-09-04 18:31:45,775 - pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=160 nstack_initial=0), State(pc_initial=18 nstack_initial=1), State(pc_initial=18 nstack_initial=1)])
2024-09-04 18:31:45,775 - stack: []
2024-09-04 18:31:45,775 - state.pc_initial: State(pc_initial=74 nstack_initial=0)
2024-09-04 18:31:45,775 - dispatch pc=74, inst=LOAD_GLOBAL(arg=1, lineno=2058)
2024-09-04 18:31:45,775 - stack []
2024-09-04 18:31:45,775 - dispatch pc=76, inst=LOAD_CONST(arg=3, lineno=2058)
2024-09-04 18:31:45,775 - stack ['$74load_global.0']
2024-09-04 18:31:45,775 - dispatch pc=78, inst=CALL_FUNCTION(arg=1, lineno=2058)
2024-09-04 18:31:45,775 - stack ['$74load_global.0', '$const76.1']
2024-09-04 18:31:45,775 - dispatch pc=80, inst=RAISE_VARARGS(arg=1, lineno=2058)
2024-09-04 18:31:45,775 - stack ['$78call_function.2']
2024-09-04 18:31:45,775 - end state. edges=[]
2024-09-04 18:31:45,775 - pending: deque([State(pc_initial=82 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=160 nstack_initial=0), State(pc_initial=18 nstack_initial=1), State(pc_initial=18 nstack_initial=1)])
2024-09-04 18:31:45,778 - stack: []
2024-09-04 18:31:45,778 - state.pc_initial: State(pc_initial=82 nstack_initial=0)
2024-09-04 18:31:45,778 - dispatch pc=82, inst=LOAD_CONST(arg=0, lineno=2057)
2024-09-04 18:31:45,778 - stack []
2024-09-04 18:31:45,778 - dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=2057)
2024-09-04 18:31:45,778 - stack ['$const82.0']
2024-09-04 18:31:45,778 - end state. edges=[]
2024-09-04 18:31:45,778 - pending: deque([State(pc_initial=94 nstack_initial=0), State(pc_initial=160 nstack_initial=0), State(pc_initial=18 nstack_initial=1), State(pc_initial=18 nstack_initial=1)])
2024-09-04 18:31:45,778 - stack: []
2024-09-04 18:31:45,778 - state.pc_initial: State(pc_initial=94 nstack_initial=0)
2024-09-04 18:31:45,778 - dispatch pc=94, inst=LOAD_FAST(arg=3, lineno=2062)
2024-09-04 18:31:45,779 - stack []
2024-09-04 18:31:45,779 - dispatch pc=96, inst=LOAD_CONST(arg=1, lineno=2062)
2024-09-04 18:31:45,779 - stack ['$known_size94.0']
2024-09-04 18:31:45,779 - dispatch pc=98, inst=COMPARE_OP(arg=2, lineno=2062)
2024-09-04 18:31:45,779 - stack ['$known_size94.0', '$const96.1']
2024-09-04 18:31:45,779 - dispatch pc=100, inst=POP_JUMP_IF_FALSE(arg=59, lineno=2062)
2024-09-04 18:31:45,779 - stack ['$98compare_op.2']
2024-09-04 18:31:45,779 - end state. edges=[Edge(pc=102, stack=(), blockstack=(), npush=0), Edge(pc=116, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:45,779 - pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=18 nstack_initial=1), State(pc_initial=18 nstack_initial=1), State(pc_initial=102 nstack_initial=0), State(pc_initial=116 nstack_initial=0)])
2024-09-04 18:31:45,779 - stack: []
2024-09-04 18:31:45,779 - state.pc_initial: State(pc_initial=160 nstack_initial=0)
2024-09-04 18:31:45,779 - dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=2073)
2024-09-04 18:31:45,780 - stack []
2024-09-04 18:31:45,780 - dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=2073)
2024-09-04 18:31:45,780 - stack ['$160load_global.0']
2024-09-04 18:31:45,780 - dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=2073)
2024-09-04 18:31:45,780 - stack ['$160load_global.0', '$const162.1']
2024-09-04 18:31:45,780 - dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=2073)
2024-09-04 18:31:45,780 - stack ['$164call_function.2']
2024-09-04 18:31:45,780 - end state. edges=[]
2024-09-04 18:31:45,780 - pending: deque([State(pc_initial=18 nstack_initial=1), State(pc_initial=18 nstack_initial=1), State(pc_initial=102 nstack_initial=0), State(pc_initial=116 nstack_initial=0)])
2024-09-04 18:31:45,780 - pending: deque([State(pc_initial=18 nstack_initial=1), State(pc_initial=102 nstack_initial=0), State(pc_initial=116 nstack_initial=0)])
2024-09-04 18:31:45,780 - pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=116 nstack_initial=0)])
2024-09-04 18:31:45,780 - stack: []
2024-09-04 18:31:45,781 - state.pc_initial: State(pc_initial=102 nstack_initial=0)
2024-09-04 18:31:45,781 - dispatch pc=102, inst=LOAD_CONST(arg=1, lineno=2063)
2024-09-04 18:31:45,781 - stack []
2024-09-04 18:31:45,781 - dispatch pc=104, inst=STORE_FAST(arg=7, lineno=2063)
2024-09-04 18:31:45,781 - stack ['$const102.0']
2024-09-04 18:31:45,781 - dispatch pc=106, inst=LOAD_FAST(arg=0, lineno=2064)
2024-09-04 18:31:45,781 - stack []
2024-09-04 18:31:45,781 - dispatch pc=108, inst=LOAD_CONST(arg=1, lineno=2064)
2024-09-04 18:31:45,781 - stack ['$origsize106.1']
2024-09-04 18:31:45,781 - dispatch pc=110, inst=COMPARE_OP(arg=2, lineno=2064)
2024-09-04 18:31:45,781 - stack ['$origsize106.1', '$const108.2']
2024-09-04 18:31:45,781 - dispatch pc=112, inst=STORE_FAST(arg=8, lineno=2064)
2024-09-04 18:31:45,782 - stack ['$110compare_op.3']
2024-09-04 18:31:45,782 - dispatch pc=114, inst=JUMP_FORWARD(arg=10, lineno=2064)
2024-09-04 18:31:45,782 - stack []
2024-09-04 18:31:45,782 - end state. edges=[Edge(pc=136, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:45,782 - pending: deque([State(pc_initial=116 nstack_initial=0), State(pc_initial=136 nstack_initial=0)])
2024-09-04 18:31:45,782 - stack: []
2024-09-04 18:31:45,782 - state.pc_initial: State(pc_initial=116 nstack_initial=0)
2024-09-04 18:31:45,782 - dispatch pc=116, inst=LOAD_FAST(arg=0, lineno=2066)
2024-09-04 18:31:45,782 - stack []
2024-09-04 18:31:45,782 - dispatch pc=118, inst=LOAD_FAST(arg=3, lineno=2066)
2024-09-04 18:31:45,782 - stack ['$origsize116.0']
2024-09-04 18:31:45,782 - dispatch pc=120, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=2066)
2024-09-04 18:31:45,783 - stack ['$origsize116.0', '$known_size118.1']
2024-09-04 18:31:45,783 - dispatch pc=122, inst=STORE_FAST(arg=7, lineno=2066)
2024-09-04 18:31:45,783 - stack ['$120binary_floor_divide.2']
2024-09-04 18:31:45,783 - dispatch pc=124, inst=LOAD_FAST(arg=0, lineno=2067)
2024-09-04 18:31:45,783 - stack []
2024-09-04 18:31:45,783 - dispatch pc=126, inst=LOAD_FAST(arg=3, lineno=2067)
2024-09-04 18:31:45,783 - stack ['$origsize124.3']
2024-09-04 18:31:45,784 - dispatch pc=128, inst=BINARY_MODULO(arg=None, lineno=2067)
2024-09-04 18:31:45,784 - stack ['$origsize124.3', '$known_size126.4']
2024-09-04 18:31:45,784 - dispatch pc=130, inst=LOAD_CONST(arg=1, lineno=2067)
2024-09-04 18:31:45,784 - stack ['$128binary_modulo.5']
2024-09-04 18:31:45,784 - dispatch pc=132, inst=COMPARE_OP(arg=2, lineno=2067)
2024-09-04 18:31:45,784 - stack ['$128binary_modulo.5', '$const130.6']
2024-09-04 18:31:45,784 - dispatch pc=134, inst=STORE_FAST(arg=8, lineno=2067)
2024-09-04 18:31:45,784 - stack ['$132compare_op.7']
2024-09-04 18:31:45,785 - end state. edges=[Edge(pc=136, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:45,785 - pending: deque([State(pc_initial=136 nstack_initial=0), State(pc_initial=136 nstack_initial=0)])
2024-09-04 18:31:45,785 - stack: []
2024-09-04 18:31:45,785 - state.pc_initial: State(pc_initial=136 nstack_initial=0)
2024-09-04 18:31:45,785 - dispatch pc=136, inst=LOAD_FAST(arg=8, lineno=2068)
2024-09-04 18:31:45,785 - stack []
2024-09-04 18:31:45,785 - dispatch pc=138, inst=POP_JUMP_IF_TRUE(arg=75, lineno=2068)
2024-09-04 18:31:45,786 - stack ['$ok136.0']
2024-09-04 18:31:45,786 - end state. edges=[Edge(pc=140, stack=(), blockstack=(), npush=0), Edge(pc=148, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:45,786 - pending: deque([State(pc_initial=136 nstack_initial=0), State(pc_initial=140 nstack_initial=0), State(pc_initial=148 nstack_initial=0)])
2024-09-04 18:31:45,786 - pending: deque([State(pc_initial=140 nstack_initial=0), State(pc_initial=148 nstack_initial=0)])
2024-09-04 18:31:45,786 - stack: []
2024-09-04 18:31:45,786 - state.pc_initial: State(pc_initial=140 nstack_initial=0)
2024-09-04 18:31:45,786 - dispatch pc=140, inst=LOAD_GLOBAL(arg=1, lineno=2069)
2024-09-04 18:31:45,786 - stack []
2024-09-04 18:31:45,787 - dispatch pc=142, inst=LOAD_CONST(arg=3, lineno=2069)
2024-09-04 18:31:45,787 - stack ['$140load_global.0']
2024-09-04 18:31:45,787 - dispatch pc=144, inst=CALL_FUNCTION(arg=1, lineno=2069)
2024-09-04 18:31:45,787 - stack ['$140load_global.0', '$const142.1']
2024-09-04 18:31:45,787 - dispatch pc=146, inst=RAISE_VARARGS(arg=1, lineno=2069)
2024-09-04 18:31:45,787 - stack ['$144call_function.2']
2024-09-04 18:31:45,787 - end state. edges=[]
2024-09-04 18:31:45,787 - pending: deque([State(pc_initial=148 nstack_initial=0)])
2024-09-04 18:31:45,788 - stack: []
2024-09-04 18:31:45,788 - state.pc_initial: State(pc_initial=148 nstack_initial=0)
2024-09-04 18:31:45,788 - dispatch pc=148, inst=LOAD_FAST(arg=7, lineno=2070)
2024-09-04 18:31:45,788 - stack []
2024-09-04 18:31:45,788 - dispatch pc=150, inst=LOAD_FAST(arg=1, lineno=2070)
2024-09-04 18:31:45,788 - stack ['$inferred148.0']
2024-09-04 18:31:45,788 - dispatch pc=152, inst=LOAD_FAST(arg=6, lineno=2070)
2024-09-04 18:31:45,788 - stack ['$inferred148.0', '$shape150.1']
2024-09-04 18:31:45,789 - dispatch pc=154, inst=STORE_SUBSCR(arg=None, lineno=2070)
2024-09-04 18:31:45,789 - stack ['$inferred148.0', '$shape150.1', '$neg_ax152.2']
2024-09-04 18:31:45,789 - dispatch pc=156, inst=LOAD_CONST(arg=0, lineno=2070)
2024-09-04 18:31:45,789 - stack []
2024-09-04 18:31:45,789 - dispatch pc=158, inst=RETURN_VALUE(arg=None, lineno=2070)
2024-09-04 18:31:45,789 - stack ['$const156.3']
2024-09-04 18:31:45,789 - end state. edges=[]
2024-09-04 18:31:45,790 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:45,790 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=1): {'$phi18.0'},
             State(pc_initial=20 nstack_initial=2): {'$phi20.1'},
             State(pc_initial=34 nstack_initial=1): set(),
             State(pc_initial=48 nstack_initial=1): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=66 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=82 nstack_initial=0): set(),
             State(pc_initial=86 nstack_initial=0): set(),
             State(pc_initial=94 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set(),
             State(pc_initial=116 nstack_initial=0): set(),
             State(pc_initial=136 nstack_initial=0): set(),
             State(pc_initial=140 nstack_initial=0): set(),
             State(pc_initial=148 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set()})
2024-09-04 18:31:45,790 - defmap: {'$phi18.0': State(pc_initial=0 nstack_initial=0),
 '$phi20.1': State(pc_initial=18 nstack_initial=1)}
2024-09-04 18:31:45,791 - phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi34.0', State(pc_initial=34 nstack_initial=1)),
                          ('$phi48.0', State(pc_initial=48 nstack_initial=1))},
             '$phi20.0': {('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi34.0': {('$phi20.0', State(pc_initial=20 nstack_initial=2))},
             '$phi48.0': {('$phi20.0', State(pc_initial=20 nstack_initial=2))}})
2024-09-04 18:31:45,791 - changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=2))},
             '$phi20.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=2))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi34.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
2024-09-04 18:31:45,792 - changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi34.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
2024-09-04 18:31:45,792 - changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi34.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
2024-09-04 18:31:45,793 - keep phismap: {'$phi18.0': {('$16get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi20.1': {('$18for_iter.2', State(pc_initial=18 nstack_initial=1))}}
2024-09-04 18:31:45,793 - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi18.0': '$16get_iter.5'},
             State(pc_initial=18 nstack_initial=1): {'$phi20.1': '$18for_iter.2'}})
2024-09-04 18:31:45,793 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:45,794 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'}), (10, {'res': '$10load_global.2'}), (12, {'res': '$shape12.3'}), (14, {'func': '$10load_global.2', 'args': ['$shape12.3'], 'res': '$14call_function.4'}), (16, {'value': '$14call_function.4', 'res': '$16get_iter.5'})), outgoing_phis={'$phi18.0': '$16get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ('$16get_iter.5',)})
2024-09-04 18:31:45,794 - block_infos State(pc_initial=18 nstack_initial=1):
AdaptBlockInfo(insts=((18, {'iterator': '$phi18.0', 'pair': '$18for_iter.1', 'indval': '$18for_iter.2', 'pred': '$18for_iter.3'}),), outgoing_phis={'$phi20.1': '$18for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: (), 20: ('$phi18.0', '$18for_iter.2')})
2024-09-04 18:31:45,794 - block_infos State(pc_initial=20 nstack_initial=2):
AdaptBlockInfo(insts=((20, {'iterable': '$phi20.1', 'stores': ['$20unpack_sequence.2', '$20unpack_sequence.3'], 'tupleobj': '$20unpack_sequence.4'}), (22, {'value': '$20unpack_sequence.2'}), (24, {'value': '$20unpack_sequence.3'}), (26, {'res': '$s26.5'}), (28, {'res': '$const28.6'}), (30, {'lhs': '$s26.5', 'rhs': '$const28.6', 'res': '$30compare_op.7'}), (32, {'pred': '$30compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: ('$phi20.0',), 48: ('$phi20.0',)})
2024-09-04 18:31:45,794 - block_infos State(pc_initial=34 nstack_initial=1):
AdaptBlockInfo(insts=((34, {'res': '$num_neg_value34.1'}), (36, {'res': '$const36.2'}), (38, {'lhs': '$num_neg_value34.1', 'rhs': '$const36.2', 'res': '$38inplace_add.3'}), (40, {'value': '$38inplace_add.3'}), (42, {'res': '$ax42.4'}), (44, {'value': '$ax42.4'}), (46, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ('$phi34.0',)})
2024-09-04 18:31:45,794 - block_infos State(pc_initial=48 nstack_initial=1):
AdaptBlockInfo(insts=((48, {'res': '$known_size48.1'}), (50, {'res': '$s50.2'}), (52, {'lhs': '$known_size48.1', 'rhs': '$s50.2', 'res': '$52inplace_multiply.3'}), (54, {'value': '$52inplace_multiply.3'}), (56, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ('$phi48.0',)})
2024-09-04 18:31:45,795 - block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$num_neg_value58.0'}), (60, {'res': '$const60.1'}), (62, {'lhs': '$num_neg_value58.0', 'rhs': '$const60.1', 'res': '$62compare_op.2'}), (64, {'pred': '$62compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={66: (), 86: ()})
2024-09-04 18:31:45,795 - block_infos State(pc_initial=66 nstack_initial=0):
AdaptBlockInfo(insts=((66, {'res': '$origsize66.0'}), (68, {'res': '$known_size68.1'}), (70, {'lhs': '$origsize66.0', 'rhs': '$known_size68.1', 'res': '$70compare_op.2'}), (72, {'pred': '$70compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: (), 82: ()})
2024-09-04 18:31:45,795 - block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$74load_global.0'}), (76, {'res': '$const76.1'}), (78, {'func': '$74load_global.0', 'args': ['$const76.1'], 'res': '$78call_function.2'}), (80, {'exc': '$78call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:45,795 - block_infos State(pc_initial=82 nstack_initial=0):
AdaptBlockInfo(insts=((82, {'res': '$const82.0'}), (84, {'retval': '$const82.0', 'castval': '$84return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:45,795 - block_infos State(pc_initial=86 nstack_initial=0):
AdaptBlockInfo(insts=((86, {'res': '$num_neg_value86.0'}), (88, {'res': '$const88.1'}), (90, {'lhs': '$num_neg_value86.0', 'rhs': '$const88.1', 'res': '$90compare_op.2'}), (92, {'pred': '$90compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={94: (), 160: ()})
2024-09-04 18:31:45,795 - block_infos State(pc_initial=94 nstack_initial=0):
AdaptBlockInfo(insts=((94, {'res': '$known_size94.0'}), (96, {'res': '$const96.1'}), (98, {'lhs': '$known_size94.0', 'rhs': '$const96.1', 'res': '$98compare_op.2'}), (100, {'pred': '$98compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={102: (), 116: ()})
2024-09-04 18:31:45,795 - block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$const102.0'}), (104, {'value': '$const102.0'}), (106, {'res': '$origsize106.1'}), (108, {'res': '$const108.2'}), (110, {'lhs': '$origsize106.1', 'rhs': '$const108.2', 'res': '$110compare_op.3'}), (112, {'value': '$110compare_op.3'}), (114, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={136: ()})
2024-09-04 18:31:45,795 - block_infos State(pc_initial=116 nstack_initial=0):
AdaptBlockInfo(insts=((116, {'res': '$origsize116.0'}), (118, {'res': '$known_size118.1'}), (120, {'lhs': '$origsize116.0', 'rhs': '$known_size118.1', 'res': '$120binary_floor_divide.2'}), (122, {'value': '$120binary_floor_divide.2'}), (124, {'res': '$origsize124.3'}), (126, {'res': '$known_size126.4'}), (128, {'lhs': '$origsize124.3', 'rhs': '$known_size126.4', 'res': '$128binary_modulo.5'}), (130, {'res': '$const130.6'}), (132, {'lhs': '$128binary_modulo.5', 'rhs': '$const130.6', 'res': '$132compare_op.7'}), (134, {'value': '$132compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={136: ()})
2024-09-04 18:31:45,796 - block_infos State(pc_initial=136 nstack_initial=0):
AdaptBlockInfo(insts=((136, {'res': '$ok136.0'}), (138, {'pred': '$ok136.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={140: (), 148: ()})
2024-09-04 18:31:45,796 - block_infos State(pc_initial=140 nstack_initial=0):
AdaptBlockInfo(insts=((140, {'res': '$140load_global.0'}), (142, {'res': '$const142.1'}), (144, {'func': '$140load_global.0', 'args': ['$const142.1'], 'res': '$144call_function.2'}), (146, {'exc': '$144call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:45,887 - block_infos State(pc_initial=148 nstack_initial=0):
AdaptBlockInfo(insts=((148, {'res': '$inferred148.0'}), (150, {'res': '$shape150.1'}), (152, {'res': '$neg_ax152.2'}), (154, {'target': '$shape150.1', 'index': '$neg_ax152.2', 'value': '$inferred148.0'}), (156, {'res': '$const156.3'}), (158, {'retval': '$const156.3', 'castval': '$158return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:45,893 - block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:45,894 - label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    $10load_global.2 = global(enumerate: <class 'enumerate'>) ['$10load_global.2']
    $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:2046)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_global.2', '$14call_function.4', 'shape']
    $16get_iter.5 = getiter(value=$14call_function.4) ['$14call_function.4', '$16get_iter.5']
    $phi18.0 = $16get_iter.5                 ['$16get_iter.5', '$phi18.0']
    jump 18                                  []
label 18:
    $18for_iter.1 = iternext(value=$phi18.0) ['$18for_iter.1', '$phi18.0']
    $18for_iter.2 = pair_first(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.2']
    $18for_iter.3 = pair_second(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.3']
    $phi20.1 = $18for_iter.2                 ['$18for_iter.2', '$phi20.1']
    branch $18for_iter.3, 20, 58             ['$18for_iter.3']
label 20:
    $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2) ['$20unpack_sequence.4', '$phi20.1']
    $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$20unpack_sequence.2', '$20unpack_sequence.4']
    $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$20unpack_sequence.3', '$20unpack_sequence.4']
    ax = $20unpack_sequence.2                ['$20unpack_sequence.2', 'ax']
    s = $20unpack_sequence.3                 ['$20unpack_sequence.3', 's']
    $const28.6 = const(int, 0)               ['$const28.6']
    $30compare_op.7 = s < $const28.6         ['$30compare_op.7', '$const28.6', 's']
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:2050),), kws=(), vararg=None, varkwarg=None, target=None) ['$30compare_op.7', '$32pred', 'bool32']
    branch $32pred, 34, 48                   ['$32pred']
label 34:
    $const36.2 = const(int, 1)               ['$const36.2']
    $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined) ['$38inplace_add.3', '$const36.2', 'num_neg_value']
    num_neg_value = $38inplace_add.3         ['$38inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 18                                  []
label 48:
    $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$52inplace_multiply.3', 'known_size', 's']
    known_size = $52inplace_multiply.3       ['$52inplace_multiply.3', 'known_size']
    jump 18                                  []
label 58:
    $const60.1 = const(int, 0)               ['$const60.1']
    $62compare_op.2 = num_neg_value == $const60.1 ['$62compare_op.2', '$const60.1', 'num_neg_value']
    bool64 = global(bool: <class 'bool'>)    ['bool64']
    $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:2056),), kws=(), vararg=None, varkwarg=None, target=None) ['$62compare_op.2', '$64pred', 'bool64']
    branch $64pred, 66, 86                   ['$64pred']
label 66:
    $70compare_op.2 = origsize != known_size ['$70compare_op.2', 'known_size', 'origsize']
    bool72 = global(bool: <class 'bool'>)    ['bool72']
    $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:2057),), kws=(), vararg=None, varkwarg=None, target=None) ['$70compare_op.2', '$72pred', 'bool72']
    branch $72pred, 74, 82                   ['$72pred']
label 74:
    $74load_global.0 = global(ValueError: <class 'ValueError'>) ['$74load_global.0']
    $const76.1 = const(str, total size of new array must be unchanged) ['$const76.1']
    $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:2058)], kws=(), vararg=None, varkwarg=None, target=None) ['$74load_global.0', '$78call_function.2', '$const76.1']
    raise $78call_function.2                 ['$78call_function.2']
label 82:
    $const82.0 = const(NoneType, None)       ['$const82.0']
    $84return_value.1 = cast(value=$const82.0) ['$84return_value.1', '$const82.0']
    return $84return_value.1                 ['$84return_value.1']
label 86:
    $const88.1 = const(int, 1)               ['$const88.1']
    $90compare_op.2 = num_neg_value == $const88.1 ['$90compare_op.2', '$const88.1', 'num_neg_value']
    bool92 = global(bool: <class 'bool'>)    ['bool92']
    $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, arrayobj.py:2060),), kws=(), vararg=None, varkwarg=None, target=None) ['$90compare_op.2', '$92pred', 'bool92']
    branch $92pred, 94, 160                  ['$92pred']
label 94:
    $const96.1 = const(int, 0)               ['$const96.1']
    $98compare_op.2 = known_size == $const96.1 ['$98compare_op.2', '$const96.1', 'known_size']
    bool100 = global(bool: <class 'bool'>)   ['bool100']
    $100pred = call bool100($98compare_op.2, func=bool100, args=(Var($98compare_op.2, arrayobj.py:2062),), kws=(), vararg=None, varkwarg=None, target=None) ['$100pred', '$98compare_op.2', 'bool100']
    branch $100pred, 102, 116                ['$100pred']
label 102:
    inferred = const(int, 0)                 ['inferred']
    $const108.2 = const(int, 0)              ['$const108.2']
    ok = origsize == $const108.2             ['$const108.2', 'ok', 'origsize']
    jump 136                                 []
label 116:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $128binary_modulo.5 = origsize % known_size ['$128binary_modulo.5', 'known_size', 'origsize']
    $const130.6 = const(int, 0)              ['$const130.6']
    ok = $128binary_modulo.5 == $const130.6  ['$128binary_modulo.5', '$const130.6', 'ok']
    jump 136                                 []
label 136:
    bool138 = global(bool: <class 'bool'>)   ['bool138']
    $138pred = call bool138(ok, func=bool138, args=(Var(ok, arrayobj.py:2064),), kws=(), vararg=None, varkwarg=None, target=None) ['$138pred', 'bool138', 'ok']
    branch $138pred, 148, 140                ['$138pred']
label 140:
    $140load_global.0 = global(ValueError: <class 'ValueError'>) ['$140load_global.0']
    $const142.1 = const(str, total size of new array must be unchanged) ['$const142.1']
    $144call_function.2 = call $140load_global.0($const142.1, func=$140load_global.0, args=[Var($const142.1, arrayobj.py:2069)], kws=(), vararg=None, varkwarg=None, target=None) ['$140load_global.0', '$144call_function.2', '$const142.1']
    raise $144call_function.2                ['$144call_function.2']
label 148:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    $const156.3 = const(NoneType, None)      ['$const156.3']
    $158return_value.4 = cast(value=$const156.3) ['$158return_value.4', '$const156.3']
    return $158return_value.4                ['$158return_value.4']
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:2073)], kws=(), vararg=None, varkwarg=None, target=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']

2024-09-04 18:31:45,919 - ==== SSA block analysis pass on 0
2024-09-04 18:31:45,919 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243133D8BE0>
2024-09-04 18:31:45,919 - on stmt: origsize = arg(0, name=origsize)
2024-09-04 18:31:45,919 - on stmt: shape = arg(1, name=shape)
2024-09-04 18:31:45,919 - on stmt: num_neg_value = const(int, 0)
2024-09-04 18:31:45,919 - on stmt: known_size = const(int, 1)
2024-09-04 18:31:45,919 - on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
2024-09-04 18:31:45,919 - on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:2046)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,919 - on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
2024-09-04 18:31:45,919 - on stmt: $phi18.0 = $16get_iter.5
2024-09-04 18:31:45,919 - on stmt: jump 18
2024-09-04 18:31:45,919 - ==== SSA block analysis pass on 18
2024-09-04 18:31:45,919 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243133D8BE0>
2024-09-04 18:31:45,919 - on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2024-09-04 18:31:45,919 - on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2024-09-04 18:31:45,919 - on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2024-09-04 18:31:45,919 - on stmt: $phi20.1 = $18for_iter.2
2024-09-04 18:31:45,919 - on stmt: branch $18for_iter.3, 20, 58
2024-09-04 18:31:45,919 - ==== SSA block analysis pass on 20
2024-09-04 18:31:45,919 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243133D8BE0>
2024-09-04 18:31:45,919 - on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
2024-09-04 18:31:45,919 - on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2024-09-04 18:31:45,919 - on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2024-09-04 18:31:45,919 - on stmt: ax = $20unpack_sequence.2
2024-09-04 18:31:45,919 - on stmt: s = $20unpack_sequence.3
2024-09-04 18:31:45,919 - on stmt: $const28.6 = const(int, 0)
2024-09-04 18:31:45,919 - on stmt: $30compare_op.7 = s < $const28.6
2024-09-04 18:31:45,919 - on stmt: bool32 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,919 - on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:2050),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,919 - on stmt: branch $32pred, 34, 48
2024-09-04 18:31:45,919 - ==== SSA block analysis pass on 34
2024-09-04 18:31:45,919 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243133D8BE0>
2024-09-04 18:31:45,919 - on stmt: $const36.2 = const(int, 1)
2024-09-04 18:31:45,919 - on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:45,919 - on stmt: num_neg_value = $38inplace_add.3
2024-09-04 18:31:45,919 - on stmt: neg_ax = ax
2024-09-04 18:31:45,919 - on stmt: jump 161
2024-09-04 18:31:45,919 - ==== SSA block analysis pass on 48
2024-09-04 18:31:45,919 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243133D8BE0>
2024-09-04 18:31:45,919 - on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:45,919 - on stmt: known_size = $52inplace_multiply.3
2024-09-04 18:31:45,919 - on stmt: jump 161
2024-09-04 18:31:45,919 - ==== SSA block analysis pass on 58
2024-09-04 18:31:45,919 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243133D8BE0>
2024-09-04 18:31:45,919 - on stmt: $const60.1 = const(int, 0)
2024-09-04 18:31:45,919 - on stmt: $62compare_op.2 = num_neg_value == $const60.1
2024-09-04 18:31:45,919 - on stmt: bool64 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,919 - on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:2056),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,919 - on stmt: branch $64pred, 66, 86
2024-09-04 18:31:45,919 - ==== SSA block analysis pass on 66
2024-09-04 18:31:45,919 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243133D8BE0>
2024-09-04 18:31:45,934 - on stmt: $70compare_op.2 = origsize != known_size
2024-09-04 18:31:45,934 - on stmt: bool72 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,934 - on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:2057),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,934 - on stmt: branch $72pred, 74, 82
2024-09-04 18:31:45,934 - ==== SSA block analysis pass on 74
2024-09-04 18:31:45,934 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243133D8BE0>
2024-09-04 18:31:45,934 - on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:45,934 - on stmt: $const76.1 = const(str, total size of new array must be unchanged)
2024-09-04 18:31:45,934 - on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:2058)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,934 - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-09-04 18:31:45,934 - ==== SSA block analysis pass on 82
2024-09-04 18:31:45,934 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243133D8BE0>
2024-09-04 18:31:45,934 - on stmt: $const82.0 = const(NoneType, None)
2024-09-04 18:31:45,934 - on stmt: $84return_value.1 = cast(value=$const82.0)
2024-09-04 18:31:45,934 - on stmt: return $84return_value.1
2024-09-04 18:31:45,934 - ==== SSA block analysis pass on 86
2024-09-04 18:31:45,934 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243133D8BE0>
2024-09-04 18:31:45,934 - on stmt: $const88.1 = const(int, 1)
2024-09-04 18:31:45,934 - on stmt: $90compare_op.2 = num_neg_value == $const88.1
2024-09-04 18:31:45,934 - on stmt: bool92 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,934 - on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, arrayobj.py:2060),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,934 - on stmt: branch $92pred, 94, 160
2024-09-04 18:31:45,934 - ==== SSA block analysis pass on 94
2024-09-04 18:31:45,934 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243133D8BE0>
2024-09-04 18:31:45,934 - on stmt: $const96.1 = const(int, 0)
2024-09-04 18:31:45,934 - on stmt: $98compare_op.2 = known_size == $const96.1
2024-09-04 18:31:45,934 - on stmt: bool100 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,934 - on stmt: $100pred = call bool100($98compare_op.2, func=bool100, args=(Var($98compare_op.2, arrayobj.py:2062),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,934 - on stmt: branch $100pred, 102, 116
2024-09-04 18:31:45,934 - ==== SSA block analysis pass on 102
2024-09-04 18:31:45,934 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243133D8BE0>
2024-09-04 18:31:45,934 - on stmt: inferred = const(int, 0)
2024-09-04 18:31:45,934 - on stmt: $const108.2 = const(int, 0)
2024-09-04 18:31:45,934 - on stmt: ok = origsize == $const108.2
2024-09-04 18:31:45,934 - on stmt: jump 136
2024-09-04 18:31:45,934 - ==== SSA block analysis pass on 116
2024-09-04 18:31:45,934 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243133D8BE0>
2024-09-04 18:31:45,934 - on stmt: inferred = origsize // known_size
2024-09-04 18:31:45,934 - on stmt: $128binary_modulo.5 = origsize % known_size
2024-09-04 18:31:45,934 - on stmt: $const130.6 = const(int, 0)
2024-09-04 18:31:45,934 - on stmt: ok = $128binary_modulo.5 == $const130.6
2024-09-04 18:31:45,934 - on stmt: jump 136
2024-09-04 18:31:45,934 - ==== SSA block analysis pass on 136
2024-09-04 18:31:45,934 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243133D8BE0>
2024-09-04 18:31:45,934 - on stmt: bool138 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,934 - on stmt: $138pred = call bool138(ok, func=bool138, args=(Var(ok, arrayobj.py:2064),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,934 - on stmt: branch $138pred, 148, 140
2024-09-04 18:31:45,934 - ==== SSA block analysis pass on 140
2024-09-04 18:31:45,934 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243133D8BE0>
2024-09-04 18:31:45,934 - on stmt: $140load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:45,934 - on stmt: $const142.1 = const(str, total size of new array must be unchanged)
2024-09-04 18:31:45,934 - on stmt: $144call_function.2 = call $140load_global.0($const142.1, func=$140load_global.0, args=[Var($const142.1, arrayobj.py:2069)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,934 - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-09-04 18:31:45,934 - ==== SSA block analysis pass on 148
2024-09-04 18:31:45,934 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243133D8BE0>
2024-09-04 18:31:45,934 - on stmt: shape[neg_ax] = inferred
2024-09-04 18:31:45,934 - on stmt: $const156.3 = const(NoneType, None)
2024-09-04 18:31:45,934 - on stmt: $158return_value.4 = cast(value=$const156.3)
2024-09-04 18:31:45,934 - on stmt: return $158return_value.4
2024-09-04 18:31:45,934 - ==== SSA block analysis pass on 160
2024-09-04 18:31:45,934 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243133D8BE0>
2024-09-04 18:31:45,934 - on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:45,934 - on stmt: $const162.1 = const(str, multiple negative shape values)
2024-09-04 18:31:45,934 - on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:2073)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,934 - on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2024-09-04 18:31:45,934 - ==== SSA block analysis pass on 161
2024-09-04 18:31:45,934 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243133D8BE0>
2024-09-04 18:31:45,934 - on stmt: jump 18
2024-09-04 18:31:45,950 - defs defaultdict(<class 'list'>,
            {'$100pred': [(<numba.core.ir.Assign object at 0x00000243133DB250>,
                           94)],
             '$10load_global.2': [(<numba.core.ir.Assign object at 0x00000243132F22F0>,
                                   0)],
             '$128binary_modulo.5': [(<numba.core.ir.Assign object at 0x00000243135BC400>,
                                      116)],
             '$138pred': [(<numba.core.ir.Assign object at 0x00000243135BC970>,
                           136)],
             '$140load_global.0': [(<numba.core.ir.Assign object at 0x00000243135BCBB0>,
                                    140)],
             '$144call_function.2': [(<numba.core.ir.Assign object at 0x00000243135BCF10>,
                                      140)],
             '$14call_function.4': [(<numba.core.ir.Assign object at 0x0000024313273CA0>,
                                     0)],
             '$158return_value.4': [(<numba.core.ir.Assign object at 0x00000243135BD750>,
                                     148)],
             '$160load_global.0': [(<numba.core.ir.Assign object at 0x00000243135BD8D0>,
                                    160)],
             '$164call_function.2': [(<numba.core.ir.Assign object at 0x00000243135BDC30>,
                                      160)],
             '$16get_iter.5': [(<numba.core.ir.Assign object at 0x0000024313273D90>,
                                0)],
             '$18for_iter.1': [(<numba.core.ir.Assign object at 0x0000024313270B50>,
                                18)],
             '$18for_iter.2': [(<numba.core.ir.Assign object at 0x00000243132704C0>,
                                18)],
             '$18for_iter.3': [(<numba.core.ir.Assign object at 0x0000024313270B80>,
                                18)],
             '$20unpack_sequence.2': [(<numba.core.ir.Assign object at 0x0000024313270F70>,
                                       20)],
             '$20unpack_sequence.3': [(<numba.core.ir.Assign object at 0x0000024313273CD0>,
                                       20)],
             '$20unpack_sequence.4': [(<numba.core.ir.Assign object at 0x00000243132739D0>,
                                       20)],
             '$30compare_op.7': [(<numba.core.ir.Assign object at 0x0000024313270CA0>,
                                  20)],
             '$32pred': [(<numba.core.ir.Assign object at 0x0000024313270C10>,
                          20)],
             '$38inplace_add.3': [(<numba.core.ir.Assign object at 0x000002431D1D1B40>,
                                   34)],
             '$52inplace_multiply.3': [(<numba.core.ir.Assign object at 0x00000243133D8A60>,
                                        48)],
             '$62compare_op.2': [(<numba.core.ir.Assign object at 0x00000243133D9000>,
                                  58)],
             '$64pred': [(<numba.core.ir.Assign object at 0x00000243133D9270>,
                          58)],
             '$70compare_op.2': [(<numba.core.ir.Assign object at 0x00000243133D9720>,
                                  66)],
             '$72pred': [(<numba.core.ir.Assign object at 0x00000243133D9990>,
                          66)],
             '$74load_global.0': [(<numba.core.ir.Assign object at 0x00000243133D9B70>,
                                   74)],
             '$78call_function.2': [(<numba.core.ir.Assign object at 0x00000243133D9ED0>,
                                     74)],
             '$84return_value.1': [(<numba.core.ir.Assign object at 0x00000243133DA2F0>,
                                    82)],
             '$90compare_op.2': [(<numba.core.ir.Assign object at 0x00000243133DA860>,
                                  86)],
             '$92pred': [(<numba.core.ir.Assign object at 0x00000243133DAAD0>,
                          86)],
             '$98compare_op.2': [(<numba.core.ir.Assign object at 0x00000243133DAFE0>,
                                  94)],
             '$const108.2': [(<numba.core.ir.Assign object at 0x00000243133DB850>,
                              102)],
             '$const130.6': [(<numba.core.ir.Assign object at 0x00000243135BC550>,
                              116)],
             '$const142.1': [(<numba.core.ir.Assign object at 0x00000243135BCD30>,
                              140)],
             '$const156.3': [(<numba.core.ir.Assign object at 0x00000243135BD5D0>,
                              148)],
             '$const162.1': [(<numba.core.ir.Assign object at 0x00000243135BDA50>,
                              160)],
             '$const28.6': [(<numba.core.ir.Assign object at 0x0000024313270760>,
                             20)],
             '$const36.2': [(<numba.core.ir.Assign object at 0x0000024313272BC0>,
                             34)],
             '$const60.1': [(<numba.core.ir.Assign object at 0x00000243133D8E50>,
                             58)],
             '$const76.1': [(<numba.core.ir.Assign object at 0x00000243133D9CF0>,
                             74)],
             '$const82.0': [(<numba.core.ir.Assign object at 0x00000243133DA170>,
                             82)],
             '$const88.1': [(<numba.core.ir.Assign object at 0x00000243133DA6B0>,
                             86)],
             '$const96.1': [(<numba.core.ir.Assign object at 0x00000243133DAE30>,
                             94)],
             '$phi18.0': [(<numba.core.ir.Assign object at 0x00000243132F2CE0>,
                           0)],
             '$phi20.1': [(<numba.core.ir.Assign object at 0x0000024313270A30>,
                           18)],
             'ax': [(<numba.core.ir.Assign object at 0x0000024313270D60>, 20)],
             'bool100': [(<numba.core.ir.Assign object at 0x00000243133DB130>,
                          94)],
             'bool138': [(<numba.core.ir.Assign object at 0x00000243135BC850>,
                          136)],
             'bool32': [(<numba.core.ir.Assign object at 0x0000024313270520>,
                         20)],
             'bool64': [(<numba.core.ir.Assign object at 0x00000243133D9150>,
                         58)],
             'bool72': [(<numba.core.ir.Assign object at 0x00000243133D9870>,
                         66)],
             'bool92': [(<numba.core.ir.Assign object at 0x00000243133DA9B0>,
                         86)],
             'inferred': [(<numba.core.ir.Assign object at 0x00000243133DB490>,
                           102),
                          (<numba.core.ir.Assign object at 0x00000243133DBF40>,
                           116)],
             'known_size': [(<numba.core.ir.Assign object at 0x00000243132F0BE0>,
                             0),
                            (<numba.core.ir.Assign object at 0x00000243133D8B20>,
                             48)],
             'neg_ax': [(<numba.core.ir.Assign object at 0x00000243133D8700>,
                         34)],
             'num_neg_value': [(<numba.core.ir.Assign object at 0x00000243132F2B60>,
                                0),
                               (<numba.core.ir.Assign object at 0x00000243133D85E0>,
                                34)],
             'ok': [(<numba.core.ir.Assign object at 0x00000243133DBA00>, 102),
                    (<numba.core.ir.Assign object at 0x00000243135BC700>, 116)],
             'origsize': [(<numba.core.ir.Assign object at 0x00000243132F2980>,
                           0)],
             's': [(<numba.core.ir.Assign object at 0x0000024313273070>, 20)],
             'shape': [(<numba.core.ir.Assign object at 0x00000243132F2C50>,
                        0)]})
2024-09-04 18:31:45,952 - SSA violators <numba.core.utils.OrderedSet object at 0x00000243133D8BE0>
2024-09-04 18:31:45,952 - Fix SSA violator on var num_neg_value
2024-09-04 18:31:45,952 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:45,952 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F0070>
2024-09-04 18:31:45,952 - on stmt: origsize = arg(0, name=origsize)
2024-09-04 18:31:45,952 - on stmt: shape = arg(1, name=shape)
2024-09-04 18:31:45,952 - on stmt: num_neg_value = const(int, 0)
2024-09-04 18:31:45,952 - first assign: num_neg_value
2024-09-04 18:31:45,953 - replaced with: num_neg_value = const(int, 0)
2024-09-04 18:31:45,953 - on stmt: known_size = const(int, 1)
2024-09-04 18:31:45,953 - on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
2024-09-04 18:31:45,953 - on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:2046)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,953 - on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
2024-09-04 18:31:45,953 - on stmt: $phi18.0 = $16get_iter.5
2024-09-04 18:31:45,953 - on stmt: jump 18
2024-09-04 18:31:45,953 - ==== SSA block rewrite pass on 18
2024-09-04 18:31:45,953 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F0070>
2024-09-04 18:31:45,953 - on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2024-09-04 18:31:45,953 - on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2024-09-04 18:31:45,953 - on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2024-09-04 18:31:45,953 - on stmt: $phi20.1 = $18for_iter.2
2024-09-04 18:31:45,953 - on stmt: branch $18for_iter.3, 20, 58
2024-09-04 18:31:45,953 - ==== SSA block rewrite pass on 20
2024-09-04 18:31:45,953 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F0070>
2024-09-04 18:31:45,953 - on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
2024-09-04 18:31:45,953 - on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2024-09-04 18:31:45,953 - on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2024-09-04 18:31:45,953 - on stmt: ax = $20unpack_sequence.2
2024-09-04 18:31:45,954 - on stmt: s = $20unpack_sequence.3
2024-09-04 18:31:45,954 - on stmt: $const28.6 = const(int, 0)
2024-09-04 18:31:45,954 - on stmt: $30compare_op.7 = s < $const28.6
2024-09-04 18:31:45,954 - on stmt: bool32 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,954 - on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:2050),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,954 - on stmt: branch $32pred, 34, 48
2024-09-04 18:31:45,954 - ==== SSA block rewrite pass on 34
2024-09-04 18:31:45,954 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F0070>
2024-09-04 18:31:45,954 - on stmt: $const36.2 = const(int, 1)
2024-09-04 18:31:45,954 - on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:45,954 - on stmt: num_neg_value = $38inplace_add.3
2024-09-04 18:31:45,954 - replaced with: num_neg_value.1 = $38inplace_add.3
2024-09-04 18:31:45,955 - on stmt: neg_ax = ax
2024-09-04 18:31:45,955 - on stmt: jump 161
2024-09-04 18:31:45,955 - ==== SSA block rewrite pass on 48
2024-09-04 18:31:45,955 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F0070>
2024-09-04 18:31:45,955 - on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:45,955 - on stmt: known_size = $52inplace_multiply.3
2024-09-04 18:31:45,955 - on stmt: jump 161
2024-09-04 18:31:45,955 - ==== SSA block rewrite pass on 58
2024-09-04 18:31:45,955 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F0070>
2024-09-04 18:31:45,955 - on stmt: $const60.1 = const(int, 0)
2024-09-04 18:31:45,955 - on stmt: $62compare_op.2 = num_neg_value == $const60.1
2024-09-04 18:31:45,955 - on stmt: bool64 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,955 - on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:2056),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,956 - on stmt: branch $64pred, 66, 86
2024-09-04 18:31:45,956 - ==== SSA block rewrite pass on 66
2024-09-04 18:31:45,957 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F0070>
2024-09-04 18:31:45,957 - on stmt: $70compare_op.2 = origsize != known_size
2024-09-04 18:31:45,957 - on stmt: bool72 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,957 - on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:2057),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,957 - on stmt: branch $72pred, 74, 82
2024-09-04 18:31:45,957 - ==== SSA block rewrite pass on 74
2024-09-04 18:31:45,957 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F0070>
2024-09-04 18:31:45,957 - on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:45,957 - on stmt: $const76.1 = const(str, total size of new array must be unchanged)
2024-09-04 18:31:45,957 - on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:2058)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,957 - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-09-04 18:31:45,957 - ==== SSA block rewrite pass on 82
2024-09-04 18:31:45,957 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F0070>
2024-09-04 18:31:45,957 - on stmt: $const82.0 = const(NoneType, None)
2024-09-04 18:31:45,957 - on stmt: $84return_value.1 = cast(value=$const82.0)
2024-09-04 18:31:45,957 - on stmt: return $84return_value.1
2024-09-04 18:31:45,957 - ==== SSA block rewrite pass on 86
2024-09-04 18:31:45,957 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F0070>
2024-09-04 18:31:45,957 - on stmt: $const88.1 = const(int, 1)
2024-09-04 18:31:45,957 - on stmt: $90compare_op.2 = num_neg_value == $const88.1
2024-09-04 18:31:45,957 - on stmt: bool92 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,957 - on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, arrayobj.py:2060),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,957 - on stmt: branch $92pred, 94, 160
2024-09-04 18:31:45,957 - ==== SSA block rewrite pass on 94
2024-09-04 18:31:45,957 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F0070>
2024-09-04 18:31:45,957 - on stmt: $const96.1 = const(int, 0)
2024-09-04 18:31:45,957 - on stmt: $98compare_op.2 = known_size == $const96.1
2024-09-04 18:31:45,957 - on stmt: bool100 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,957 - on stmt: $100pred = call bool100($98compare_op.2, func=bool100, args=(Var($98compare_op.2, arrayobj.py:2062),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,957 - on stmt: branch $100pred, 102, 116
2024-09-04 18:31:45,957 - ==== SSA block rewrite pass on 102
2024-09-04 18:31:45,957 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F0070>
2024-09-04 18:31:45,957 - on stmt: inferred = const(int, 0)
2024-09-04 18:31:45,957 - on stmt: $const108.2 = const(int, 0)
2024-09-04 18:31:45,957 - on stmt: ok = origsize == $const108.2
2024-09-04 18:31:45,957 - on stmt: jump 136
2024-09-04 18:31:45,957 - ==== SSA block rewrite pass on 116
2024-09-04 18:31:45,957 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F0070>
2024-09-04 18:31:45,957 - on stmt: inferred = origsize // known_size
2024-09-04 18:31:45,957 - on stmt: $128binary_modulo.5 = origsize % known_size
2024-09-04 18:31:45,957 - on stmt: $const130.6 = const(int, 0)
2024-09-04 18:31:45,957 - on stmt: ok = $128binary_modulo.5 == $const130.6
2024-09-04 18:31:45,957 - on stmt: jump 136
2024-09-04 18:31:45,957 - ==== SSA block rewrite pass on 136
2024-09-04 18:31:45,957 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F0070>
2024-09-04 18:31:45,957 - on stmt: bool138 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,957 - on stmt: $138pred = call bool138(ok, func=bool138, args=(Var(ok, arrayobj.py:2064),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,957 - on stmt: branch $138pred, 148, 140
2024-09-04 18:31:45,957 - ==== SSA block rewrite pass on 140
2024-09-04 18:31:45,957 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F0070>
2024-09-04 18:31:45,957 - on stmt: $140load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:45,957 - on stmt: $const142.1 = const(str, total size of new array must be unchanged)
2024-09-04 18:31:45,957 - on stmt: $144call_function.2 = call $140load_global.0($const142.1, func=$140load_global.0, args=[Var($const142.1, arrayobj.py:2069)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,957 - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-09-04 18:31:45,957 - ==== SSA block rewrite pass on 148
2024-09-04 18:31:45,957 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F0070>
2024-09-04 18:31:45,957 - on stmt: shape[neg_ax] = inferred
2024-09-04 18:31:45,957 - on stmt: $const156.3 = const(NoneType, None)
2024-09-04 18:31:45,957 - on stmt: $158return_value.4 = cast(value=$const156.3)
2024-09-04 18:31:45,957 - on stmt: return $158return_value.4
2024-09-04 18:31:45,957 - ==== SSA block rewrite pass on 160
2024-09-04 18:31:45,957 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F0070>
2024-09-04 18:31:45,957 - on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:45,957 - on stmt: $const162.1 = const(str, multiple negative shape values)
2024-09-04 18:31:45,957 - on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:2073)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,957 - on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2024-09-04 18:31:45,957 - ==== SSA block rewrite pass on 161
2024-09-04 18:31:45,957 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F0070>
2024-09-04 18:31:45,957 - on stmt: jump 18
2024-09-04 18:31:45,957 - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x00000243132F1DE0>],
             34: [<numba.core.ir.Assign object at 0x00000243132F0D00>]})
2024-09-04 18:31:45,957 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:45,957 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F0070>
2024-09-04 18:31:45,957 - on stmt: origsize = arg(0, name=origsize)
2024-09-04 18:31:45,957 - on stmt: shape = arg(1, name=shape)
2024-09-04 18:31:45,957 - on stmt: num_neg_value = const(int, 0)
2024-09-04 18:31:45,957 - on stmt: known_size = const(int, 1)
2024-09-04 18:31:45,957 - on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
2024-09-04 18:31:45,957 - on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:2046)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,957 - on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
2024-09-04 18:31:45,957 - on stmt: $phi18.0 = $16get_iter.5
2024-09-04 18:31:45,957 - on stmt: jump 18
2024-09-04 18:31:45,957 - ==== SSA block rewrite pass on 18
2024-09-04 18:31:45,957 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F0070>
2024-09-04 18:31:45,957 - on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2024-09-04 18:31:45,957 - on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2024-09-04 18:31:45,957 - on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2024-09-04 18:31:45,957 - on stmt: $phi20.1 = $18for_iter.2
2024-09-04 18:31:45,957 - on stmt: branch $18for_iter.3, 20, 58
2024-09-04 18:31:45,957 - ==== SSA block rewrite pass on 20
2024-09-04 18:31:45,957 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F0070>
2024-09-04 18:31:45,957 - on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
2024-09-04 18:31:45,957 - on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2024-09-04 18:31:45,957 - on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2024-09-04 18:31:45,957 - on stmt: ax = $20unpack_sequence.2
2024-09-04 18:31:45,957 - on stmt: s = $20unpack_sequence.3
2024-09-04 18:31:45,957 - on stmt: $const28.6 = const(int, 0)
2024-09-04 18:31:45,957 - on stmt: $30compare_op.7 = s < $const28.6
2024-09-04 18:31:45,957 - on stmt: bool32 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,957 - on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:2050),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,957 - on stmt: branch $32pred, 34, 48
2024-09-04 18:31:45,957 - ==== SSA block rewrite pass on 34
2024-09-04 18:31:45,957 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F0070>
2024-09-04 18:31:45,957 - on stmt: $const36.2 = const(int, 1)
2024-09-04 18:31:45,957 - on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:45,957 - find_def var='num_neg_value' stmt=$38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:45,957 - find_def_from_top label 34
2024-09-04 18:31:45,957 - idom 20 from label 34
2024-09-04 18:31:45,957 - find_def_from_bottom label 20
2024-09-04 18:31:45,957 - find_def_from_top label 20
2024-09-04 18:31:45,957 - idom 18 from label 20
2024-09-04 18:31:45,957 - find_def_from_bottom label 18
2024-09-04 18:31:45,957 - find_def_from_top label 18
2024-09-04 18:31:45,957 - insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 18
2024-09-04 18:31:45,957 - find_def_from_bottom label 0
2024-09-04 18:31:45,957 - incoming_def num_neg_value = const(int, 0)
2024-09-04 18:31:45,957 - find_def_from_bottom label 161
2024-09-04 18:31:45,957 - find_def_from_top label 161
2024-09-04 18:31:45,966 - insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 161
2024-09-04 18:31:45,966 - find_def_from_bottom label 48
2024-09-04 18:31:45,967 - find_def_from_top label 48
2024-09-04 18:31:45,967 - idom 20 from label 48
2024-09-04 18:31:45,967 - find_def_from_bottom label 20
2024-09-04 18:31:45,967 - find_def_from_top label 20
2024-09-04 18:31:45,967 - idom 18 from label 20
2024-09-04 18:31:45,967 - find_def_from_bottom label 18
2024-09-04 18:31:45,967 - incoming_def num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:2047)], incoming_blocks=[0])
2024-09-04 18:31:45,967 - find_def_from_bottom label 34
2024-09-04 18:31:45,967 - incoming_def num_neg_value.1 = $38inplace_add.3
2024-09-04 18:31:45,967 - incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:2051), Var(num_neg_value.1, arrayobj.py:2051)], incoming_blocks=[48, 34])
2024-09-04 18:31:45,967 - replaced with: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:45,967 - on stmt: num_neg_value.1 = $38inplace_add.3
2024-09-04 18:31:45,968 - on stmt: neg_ax = ax
2024-09-04 18:31:45,968 - on stmt: jump 161
2024-09-04 18:31:45,968 - ==== SSA block rewrite pass on 48
2024-09-04 18:31:45,968 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F0070>
2024-09-04 18:31:45,968 - on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:45,968 - on stmt: known_size = $52inplace_multiply.3
2024-09-04 18:31:45,968 - on stmt: jump 161
2024-09-04 18:31:45,968 - ==== SSA block rewrite pass on 58
2024-09-04 18:31:45,968 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F0070>
2024-09-04 18:31:45,968 - on stmt: $const60.1 = const(int, 0)
2024-09-04 18:31:45,968 - on stmt: $62compare_op.2 = num_neg_value == $const60.1
2024-09-04 18:31:45,968 - find_def var='num_neg_value' stmt=$62compare_op.2 = num_neg_value == $const60.1
2024-09-04 18:31:45,969 - find_def_from_top label 58
2024-09-04 18:31:45,969 - idom 18 from label 58
2024-09-04 18:31:45,969 - find_def_from_bottom label 18
2024-09-04 18:31:45,969 - replaced with: $62compare_op.2 = num_neg_value.2 == $const60.1
2024-09-04 18:31:45,969 - on stmt: bool64 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,969 - on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:2056),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,969 - on stmt: branch $64pred, 66, 86
2024-09-04 18:31:45,969 - ==== SSA block rewrite pass on 66
2024-09-04 18:31:45,969 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F0070>
2024-09-04 18:31:45,969 - on stmt: $70compare_op.2 = origsize != known_size
2024-09-04 18:31:45,969 - on stmt: bool72 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,970 - on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:2057),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,970 - on stmt: branch $72pred, 74, 82
2024-09-04 18:31:45,970 - ==== SSA block rewrite pass on 74
2024-09-04 18:31:45,970 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F0070>
2024-09-04 18:31:45,970 - on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:45,970 - on stmt: $const76.1 = const(str, total size of new array must be unchanged)
2024-09-04 18:31:45,970 - on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:2058)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,970 - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-09-04 18:31:45,970 - ==== SSA block rewrite pass on 82
2024-09-04 18:31:45,970 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F0070>
2024-09-04 18:31:45,970 - on stmt: $const82.0 = const(NoneType, None)
2024-09-04 18:31:45,970 - on stmt: $84return_value.1 = cast(value=$const82.0)
2024-09-04 18:31:45,971 - on stmt: return $84return_value.1
2024-09-04 18:31:45,971 - ==== SSA block rewrite pass on 86
2024-09-04 18:31:45,971 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F0070>
2024-09-04 18:31:45,971 - on stmt: $const88.1 = const(int, 1)
2024-09-04 18:31:45,971 - on stmt: $90compare_op.2 = num_neg_value == $const88.1
2024-09-04 18:31:45,971 - find_def var='num_neg_value' stmt=$90compare_op.2 = num_neg_value == $const88.1
2024-09-04 18:31:45,971 - find_def_from_top label 86
2024-09-04 18:31:45,971 - idom 58 from label 86
2024-09-04 18:31:45,971 - find_def_from_bottom label 58
2024-09-04 18:31:45,971 - find_def_from_top label 58
2024-09-04 18:31:45,971 - idom 18 from label 58
2024-09-04 18:31:45,971 - find_def_from_bottom label 18
2024-09-04 18:31:45,972 - replaced with: $90compare_op.2 = num_neg_value.2 == $const88.1
2024-09-04 18:31:45,972 - on stmt: bool92 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,972 - on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, arrayobj.py:2060),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,972 - on stmt: branch $92pred, 94, 160
2024-09-04 18:31:45,972 - ==== SSA block rewrite pass on 94
2024-09-04 18:31:45,972 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F0070>
2024-09-04 18:31:45,972 - on stmt: $const96.1 = const(int, 0)
2024-09-04 18:31:45,972 - on stmt: $98compare_op.2 = known_size == $const96.1
2024-09-04 18:31:45,972 - on stmt: bool100 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,972 - on stmt: $100pred = call bool100($98compare_op.2, func=bool100, args=(Var($98compare_op.2, arrayobj.py:2062),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,972 - on stmt: branch $100pred, 102, 116
2024-09-04 18:31:45,972 - ==== SSA block rewrite pass on 102
2024-09-04 18:31:45,972 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F0070>
2024-09-04 18:31:45,972 - on stmt: inferred = const(int, 0)
2024-09-04 18:31:45,973 - on stmt: $const108.2 = const(int, 0)
2024-09-04 18:31:45,973 - on stmt: ok = origsize == $const108.2
2024-09-04 18:31:45,973 - on stmt: jump 136
2024-09-04 18:31:45,973 - ==== SSA block rewrite pass on 116
2024-09-04 18:31:45,973 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F0070>
2024-09-04 18:31:45,973 - on stmt: inferred = origsize // known_size
2024-09-04 18:31:45,973 - on stmt: $128binary_modulo.5 = origsize % known_size
2024-09-04 18:31:45,973 - on stmt: $const130.6 = const(int, 0)
2024-09-04 18:31:45,973 - on stmt: ok = $128binary_modulo.5 == $const130.6
2024-09-04 18:31:45,973 - on stmt: jump 136
2024-09-04 18:31:45,973 - ==== SSA block rewrite pass on 136
2024-09-04 18:31:45,973 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F0070>
2024-09-04 18:31:45,974 - on stmt: bool138 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,974 - on stmt: $138pred = call bool138(ok, func=bool138, args=(Var(ok, arrayobj.py:2064),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,974 - on stmt: branch $138pred, 148, 140
2024-09-04 18:31:45,974 - ==== SSA block rewrite pass on 140
2024-09-04 18:31:45,974 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F0070>
2024-09-04 18:31:45,974 - on stmt: $140load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:45,974 - on stmt: $const142.1 = const(str, total size of new array must be unchanged)
2024-09-04 18:31:45,974 - on stmt: $144call_function.2 = call $140load_global.0($const142.1, func=$140load_global.0, args=[Var($const142.1, arrayobj.py:2069)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,974 - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-09-04 18:31:45,974 - ==== SSA block rewrite pass on 148
2024-09-04 18:31:45,974 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F0070>
2024-09-04 18:31:45,974 - on stmt: shape[neg_ax] = inferred
2024-09-04 18:31:45,975 - on stmt: $const156.3 = const(NoneType, None)
2024-09-04 18:31:45,975 - on stmt: $158return_value.4 = cast(value=$const156.3)
2024-09-04 18:31:45,975 - on stmt: return $158return_value.4
2024-09-04 18:31:45,975 - ==== SSA block rewrite pass on 160
2024-09-04 18:31:45,975 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F0070>
2024-09-04 18:31:45,975 - on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:45,975 - on stmt: $const162.1 = const(str, multiple negative shape values)
2024-09-04 18:31:45,975 - on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:2073)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,975 - on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2024-09-04 18:31:45,975 - ==== SSA block rewrite pass on 161
2024-09-04 18:31:45,975 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F0070>
2024-09-04 18:31:45,975 - on stmt: jump 18
2024-09-04 18:31:45,975 - Fix SSA violator on var known_size
2024-09-04 18:31:45,975 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:45,976 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F13C0>
2024-09-04 18:31:45,976 - on stmt: origsize = arg(0, name=origsize)
2024-09-04 18:31:45,976 - on stmt: shape = arg(1, name=shape)
2024-09-04 18:31:45,976 - on stmt: num_neg_value = const(int, 0)
2024-09-04 18:31:45,976 - on stmt: known_size = const(int, 1)
2024-09-04 18:31:45,976 - first assign: known_size
2024-09-04 18:31:45,976 - replaced with: known_size = const(int, 1)
2024-09-04 18:31:45,976 - on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
2024-09-04 18:31:45,976 - on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:2046)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,976 - on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
2024-09-04 18:31:45,976 - on stmt: $phi18.0 = $16get_iter.5
2024-09-04 18:31:45,976 - on stmt: jump 18
2024-09-04 18:31:45,976 - ==== SSA block rewrite pass on 18
2024-09-04 18:31:45,976 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F13C0>
2024-09-04 18:31:45,977 - on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:2047), Var(num_neg_value.3, arrayobj.py:2051)], incoming_blocks=[0, 161])
2024-09-04 18:31:45,977 - on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2024-09-04 18:31:45,977 - on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2024-09-04 18:31:45,977 - on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2024-09-04 18:31:45,977 - on stmt: $phi20.1 = $18for_iter.2
2024-09-04 18:31:45,977 - on stmt: branch $18for_iter.3, 20, 58
2024-09-04 18:31:45,977 - ==== SSA block rewrite pass on 20
2024-09-04 18:31:45,977 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F13C0>
2024-09-04 18:31:45,977 - on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
2024-09-04 18:31:45,977 - on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2024-09-04 18:31:45,977 - on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2024-09-04 18:31:45,977 - on stmt: ax = $20unpack_sequence.2
2024-09-04 18:31:45,977 - on stmt: s = $20unpack_sequence.3
2024-09-04 18:31:45,978 - on stmt: $const28.6 = const(int, 0)
2024-09-04 18:31:45,978 - on stmt: $30compare_op.7 = s < $const28.6
2024-09-04 18:31:45,978 - on stmt: bool32 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,978 - on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:2050),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,978 - on stmt: branch $32pred, 34, 48
2024-09-04 18:31:45,978 - ==== SSA block rewrite pass on 34
2024-09-04 18:31:45,978 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F13C0>
2024-09-04 18:31:45,978 - on stmt: $const36.2 = const(int, 1)
2024-09-04 18:31:45,978 - on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:45,978 - on stmt: num_neg_value.1 = $38inplace_add.3
2024-09-04 18:31:45,978 - on stmt: neg_ax = ax
2024-09-04 18:31:45,978 - on stmt: jump 161
2024-09-04 18:31:45,978 - ==== SSA block rewrite pass on 48
2024-09-04 18:31:45,979 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F13C0>
2024-09-04 18:31:45,979 - on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:45,979 - on stmt: known_size = $52inplace_multiply.3
2024-09-04 18:31:45,979 - replaced with: known_size.1 = $52inplace_multiply.3
2024-09-04 18:31:45,979 - on stmt: jump 161
2024-09-04 18:31:45,979 - ==== SSA block rewrite pass on 58
2024-09-04 18:31:45,979 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F13C0>
2024-09-04 18:31:45,979 - on stmt: $const60.1 = const(int, 0)
2024-09-04 18:31:45,979 - on stmt: $62compare_op.2 = num_neg_value.2 == $const60.1
2024-09-04 18:31:45,979 - on stmt: bool64 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,979 - on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:2056),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,979 - on stmt: branch $64pred, 66, 86
2024-09-04 18:31:45,979 - ==== SSA block rewrite pass on 66
2024-09-04 18:31:45,980 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F13C0>
2024-09-04 18:31:45,980 - on stmt: $70compare_op.2 = origsize != known_size
2024-09-04 18:31:45,980 - on stmt: bool72 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,980 - on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:2057),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,980 - on stmt: branch $72pred, 74, 82
2024-09-04 18:31:45,980 - ==== SSA block rewrite pass on 74
2024-09-04 18:31:45,980 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F13C0>
2024-09-04 18:31:45,980 - on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:45,980 - on stmt: $const76.1 = const(str, total size of new array must be unchanged)
2024-09-04 18:31:45,980 - on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:2058)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,980 - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-09-04 18:31:45,980 - ==== SSA block rewrite pass on 82
2024-09-04 18:31:45,981 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F13C0>
2024-09-04 18:31:45,981 - on stmt: $const82.0 = const(NoneType, None)
2024-09-04 18:31:45,981 - on stmt: $84return_value.1 = cast(value=$const82.0)
2024-09-04 18:31:45,981 - on stmt: return $84return_value.1
2024-09-04 18:31:45,981 - ==== SSA block rewrite pass on 86
2024-09-04 18:31:45,981 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F13C0>
2024-09-04 18:31:45,981 - on stmt: $const88.1 = const(int, 1)
2024-09-04 18:31:45,981 - on stmt: $90compare_op.2 = num_neg_value.2 == $const88.1
2024-09-04 18:31:45,981 - on stmt: bool92 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,981 - on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, arrayobj.py:2060),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,981 - on stmt: branch $92pred, 94, 160
2024-09-04 18:31:45,981 - ==== SSA block rewrite pass on 94
2024-09-04 18:31:45,981 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F13C0>
2024-09-04 18:31:45,982 - on stmt: $const96.1 = const(int, 0)
2024-09-04 18:31:45,982 - on stmt: $98compare_op.2 = known_size == $const96.1
2024-09-04 18:31:45,982 - on stmt: bool100 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,982 - on stmt: $100pred = call bool100($98compare_op.2, func=bool100, args=(Var($98compare_op.2, arrayobj.py:2062),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,982 - on stmt: branch $100pred, 102, 116
2024-09-04 18:31:45,982 - ==== SSA block rewrite pass on 102
2024-09-04 18:31:45,982 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F13C0>
2024-09-04 18:31:45,982 - on stmt: inferred = const(int, 0)
2024-09-04 18:31:45,982 - on stmt: $const108.2 = const(int, 0)
2024-09-04 18:31:45,982 - on stmt: ok = origsize == $const108.2
2024-09-04 18:31:45,982 - on stmt: jump 136
2024-09-04 18:31:45,982 - ==== SSA block rewrite pass on 116
2024-09-04 18:31:45,983 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F13C0>
2024-09-04 18:31:45,983 - on stmt: inferred = origsize // known_size
2024-09-04 18:31:45,983 - on stmt: $128binary_modulo.5 = origsize % known_size
2024-09-04 18:31:45,983 - on stmt: $const130.6 = const(int, 0)
2024-09-04 18:31:45,983 - on stmt: ok = $128binary_modulo.5 == $const130.6
2024-09-04 18:31:45,983 - on stmt: jump 136
2024-09-04 18:31:45,983 - ==== SSA block rewrite pass on 136
2024-09-04 18:31:45,983 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F13C0>
2024-09-04 18:31:45,983 - on stmt: bool138 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,983 - on stmt: $138pred = call bool138(ok, func=bool138, args=(Var(ok, arrayobj.py:2064),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,983 - on stmt: branch $138pred, 148, 140
2024-09-04 18:31:45,983 - ==== SSA block rewrite pass on 140
2024-09-04 18:31:45,984 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F13C0>
2024-09-04 18:31:45,984 - on stmt: $140load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:45,984 - on stmt: $const142.1 = const(str, total size of new array must be unchanged)
2024-09-04 18:31:45,984 - on stmt: $144call_function.2 = call $140load_global.0($const142.1, func=$140load_global.0, args=[Var($const142.1, arrayobj.py:2069)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,984 - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-09-04 18:31:45,984 - ==== SSA block rewrite pass on 148
2024-09-04 18:31:45,984 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F13C0>
2024-09-04 18:31:45,984 - on stmt: shape[neg_ax] = inferred
2024-09-04 18:31:45,984 - on stmt: $const156.3 = const(NoneType, None)
2024-09-04 18:31:45,984 - on stmt: $158return_value.4 = cast(value=$const156.3)
2024-09-04 18:31:45,984 - on stmt: return $158return_value.4
2024-09-04 18:31:45,984 - ==== SSA block rewrite pass on 160
2024-09-04 18:31:45,984 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F13C0>
2024-09-04 18:31:45,985 - on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:45,985 - on stmt: $const162.1 = const(str, multiple negative shape values)
2024-09-04 18:31:45,985 - on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:2073)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,985 - on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2024-09-04 18:31:45,985 - ==== SSA block rewrite pass on 161
2024-09-04 18:31:45,985 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F13C0>
2024-09-04 18:31:45,985 - on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:2051), Var(num_neg_value.1, arrayobj.py:2051)], incoming_blocks=[48, 34])
2024-09-04 18:31:45,985 - on stmt: jump 18
2024-09-04 18:31:45,985 - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x00000243132F2D70>],
             48: [<numba.core.ir.Assign object at 0x00000243135BEFE0>]})
2024-09-04 18:31:45,985 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:45,985 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F0070>
2024-09-04 18:31:45,986 - on stmt: origsize = arg(0, name=origsize)
2024-09-04 18:31:45,986 - on stmt: shape = arg(1, name=shape)
2024-09-04 18:31:45,986 - on stmt: num_neg_value = const(int, 0)
2024-09-04 18:31:45,986 - on stmt: known_size = const(int, 1)
2024-09-04 18:31:45,986 - on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
2024-09-04 18:31:45,986 - on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:2046)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,986 - on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
2024-09-04 18:31:45,986 - on stmt: $phi18.0 = $16get_iter.5
2024-09-04 18:31:45,986 - on stmt: jump 18
2024-09-04 18:31:45,986 - ==== SSA block rewrite pass on 18
2024-09-04 18:31:45,986 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F0070>
2024-09-04 18:31:45,986 - on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:2047), Var(num_neg_value.3, arrayobj.py:2051)], incoming_blocks=[0, 161])
2024-09-04 18:31:45,986 - on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2024-09-04 18:31:45,987 - on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2024-09-04 18:31:45,987 - on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2024-09-04 18:31:45,987 - on stmt: $phi20.1 = $18for_iter.2
2024-09-04 18:31:45,987 - on stmt: branch $18for_iter.3, 20, 58
2024-09-04 18:31:45,987 - ==== SSA block rewrite pass on 20
2024-09-04 18:31:45,987 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F0070>
2024-09-04 18:31:45,987 - on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
2024-09-04 18:31:45,987 - on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2024-09-04 18:31:45,987 - on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2024-09-04 18:31:45,987 - on stmt: ax = $20unpack_sequence.2
2024-09-04 18:31:45,987 - on stmt: s = $20unpack_sequence.3
2024-09-04 18:31:45,987 - on stmt: $const28.6 = const(int, 0)
2024-09-04 18:31:45,988 - on stmt: $30compare_op.7 = s < $const28.6
2024-09-04 18:31:45,988 - on stmt: bool32 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,988 - on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:2050),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,988 - on stmt: branch $32pred, 34, 48
2024-09-04 18:31:45,988 - ==== SSA block rewrite pass on 34
2024-09-04 18:31:45,988 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F0070>
2024-09-04 18:31:45,988 - on stmt: $const36.2 = const(int, 1)
2024-09-04 18:31:45,988 - on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:45,988 - on stmt: num_neg_value.1 = $38inplace_add.3
2024-09-04 18:31:45,988 - on stmt: neg_ax = ax
2024-09-04 18:31:45,988 - on stmt: jump 161
2024-09-04 18:31:45,988 - ==== SSA block rewrite pass on 48
2024-09-04 18:31:45,988 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F0070>
2024-09-04 18:31:45,989 - on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:45,989 - find_def var='known_size' stmt=$52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:45,989 - find_def_from_top label 48
2024-09-04 18:31:45,989 - idom 20 from label 48
2024-09-04 18:31:45,989 - find_def_from_bottom label 20
2024-09-04 18:31:45,989 - find_def_from_top label 20
2024-09-04 18:31:45,989 - idom 18 from label 20
2024-09-04 18:31:45,989 - find_def_from_bottom label 18
2024-09-04 18:31:45,989 - find_def_from_top label 18
2024-09-04 18:31:45,989 - insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 18
2024-09-04 18:31:45,989 - find_def_from_bottom label 0
2024-09-04 18:31:45,989 - incoming_def known_size = const(int, 1)
2024-09-04 18:31:45,989 - find_def_from_bottom label 161
2024-09-04 18:31:45,990 - find_def_from_top label 161
2024-09-04 18:31:45,990 - insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 161
2024-09-04 18:31:45,990 - find_def_from_bottom label 48
2024-09-04 18:31:45,990 - incoming_def known_size.1 = $52inplace_multiply.3
2024-09-04 18:31:45,990 - find_def_from_bottom label 34
2024-09-04 18:31:45,990 - find_def_from_top label 34
2024-09-04 18:31:45,990 - idom 20 from label 34
2024-09-04 18:31:45,990 - find_def_from_bottom label 20
2024-09-04 18:31:45,990 - find_def_from_top label 20
2024-09-04 18:31:45,990 - idom 18 from label 20
2024-09-04 18:31:45,990 - find_def_from_bottom label 18
2024-09-04 18:31:45,990 - incoming_def known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:2048)], incoming_blocks=[0])
2024-09-04 18:31:45,990 - incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:2054), Var(known_size.2, arrayobj.py:2054)], incoming_blocks=[48, 34])
2024-09-04 18:31:45,991 - replaced with: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:45,991 - on stmt: known_size.1 = $52inplace_multiply.3
2024-09-04 18:31:45,991 - on stmt: jump 161
2024-09-04 18:31:45,991 - ==== SSA block rewrite pass on 58
2024-09-04 18:31:45,991 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F0070>
2024-09-04 18:31:45,991 - on stmt: $const60.1 = const(int, 0)
2024-09-04 18:31:45,991 - on stmt: $62compare_op.2 = num_neg_value.2 == $const60.1
2024-09-04 18:31:45,991 - on stmt: bool64 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,991 - on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:2056),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,991 - on stmt: branch $64pred, 66, 86
2024-09-04 18:31:45,991 - ==== SSA block rewrite pass on 66
2024-09-04 18:31:45,992 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F0070>
2024-09-04 18:31:45,992 - on stmt: $70compare_op.2 = origsize != known_size
2024-09-04 18:31:45,992 - find_def var='known_size' stmt=$70compare_op.2 = origsize != known_size
2024-09-04 18:31:45,992 - find_def_from_top label 66
2024-09-04 18:31:45,992 - idom 58 from label 66
2024-09-04 18:31:45,992 - find_def_from_bottom label 58
2024-09-04 18:31:45,992 - find_def_from_top label 58
2024-09-04 18:31:45,992 - idom 18 from label 58
2024-09-04 18:31:45,992 - find_def_from_bottom label 18
2024-09-04 18:31:45,992 - replaced with: $70compare_op.2 = origsize != known_size.2
2024-09-04 18:31:45,992 - on stmt: bool72 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,992 - on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:2057),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,992 - on stmt: branch $72pred, 74, 82
2024-09-04 18:31:45,993 - ==== SSA block rewrite pass on 74
2024-09-04 18:31:45,993 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F0070>
2024-09-04 18:31:45,993 - on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:45,993 - on stmt: $const76.1 = const(str, total size of new array must be unchanged)
2024-09-04 18:31:45,993 - on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:2058)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,993 - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-09-04 18:31:45,993 - ==== SSA block rewrite pass on 82
2024-09-04 18:31:45,993 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F0070>
2024-09-04 18:31:45,993 - on stmt: $const82.0 = const(NoneType, None)
2024-09-04 18:31:45,993 - on stmt: $84return_value.1 = cast(value=$const82.0)
2024-09-04 18:31:45,993 - on stmt: return $84return_value.1
2024-09-04 18:31:45,993 - ==== SSA block rewrite pass on 86
2024-09-04 18:31:45,994 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F0070>
2024-09-04 18:31:45,994 - on stmt: $const88.1 = const(int, 1)
2024-09-04 18:31:45,994 - on stmt: $90compare_op.2 = num_neg_value.2 == $const88.1
2024-09-04 18:31:45,994 - on stmt: bool92 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,994 - on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, arrayobj.py:2060),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,994 - on stmt: branch $92pred, 94, 160
2024-09-04 18:31:45,994 - ==== SSA block rewrite pass on 94
2024-09-04 18:31:45,994 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F0070>
2024-09-04 18:31:45,994 - on stmt: $const96.1 = const(int, 0)
2024-09-04 18:31:45,994 - on stmt: $98compare_op.2 = known_size == $const96.1
2024-09-04 18:31:45,994 - find_def var='known_size' stmt=$98compare_op.2 = known_size == $const96.1
2024-09-04 18:31:45,994 - find_def_from_top label 94
2024-09-04 18:31:45,994 - idom 86 from label 94
2024-09-04 18:31:45,995 - find_def_from_bottom label 86
2024-09-04 18:31:45,995 - find_def_from_top label 86
2024-09-04 18:31:45,995 - idom 58 from label 86
2024-09-04 18:31:45,995 - find_def_from_bottom label 58
2024-09-04 18:31:45,995 - find_def_from_top label 58
2024-09-04 18:31:45,995 - idom 18 from label 58
2024-09-04 18:31:45,995 - find_def_from_bottom label 18
2024-09-04 18:31:45,995 - replaced with: $98compare_op.2 = known_size.2 == $const96.1
2024-09-04 18:31:45,995 - on stmt: bool100 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,995 - on stmt: $100pred = call bool100($98compare_op.2, func=bool100, args=(Var($98compare_op.2, arrayobj.py:2062),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,995 - on stmt: branch $100pred, 102, 116
2024-09-04 18:31:45,995 - ==== SSA block rewrite pass on 102
2024-09-04 18:31:45,995 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F0070>
2024-09-04 18:31:45,996 - on stmt: inferred = const(int, 0)
2024-09-04 18:31:45,996 - on stmt: $const108.2 = const(int, 0)
2024-09-04 18:31:45,996 - on stmt: ok = origsize == $const108.2
2024-09-04 18:31:45,996 - on stmt: jump 136
2024-09-04 18:31:45,996 - ==== SSA block rewrite pass on 116
2024-09-04 18:31:45,996 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F0070>
2024-09-04 18:31:45,996 - on stmt: inferred = origsize // known_size
2024-09-04 18:31:45,996 - find_def var='known_size' stmt=inferred = origsize // known_size
2024-09-04 18:31:45,996 - find_def_from_top label 116
2024-09-04 18:31:45,996 - idom 94 from label 116
2024-09-04 18:31:45,996 - find_def_from_bottom label 94
2024-09-04 18:31:45,996 - find_def_from_top label 94
2024-09-04 18:31:45,996 - idom 86 from label 94
2024-09-04 18:31:45,997 - find_def_from_bottom label 86
2024-09-04 18:31:45,997 - find_def_from_top label 86
2024-09-04 18:31:45,997 - idom 58 from label 86
2024-09-04 18:31:45,997 - find_def_from_bottom label 58
2024-09-04 18:31:45,997 - find_def_from_top label 58
2024-09-04 18:31:45,997 - idom 18 from label 58
2024-09-04 18:31:45,997 - find_def_from_bottom label 18
2024-09-04 18:31:45,997 - replaced with: inferred = origsize // known_size.2
2024-09-04 18:31:45,997 - on stmt: $128binary_modulo.5 = origsize % known_size
2024-09-04 18:31:45,997 - find_def var='known_size' stmt=$128binary_modulo.5 = origsize % known_size
2024-09-04 18:31:45,997 - find_def_from_top label 116
2024-09-04 18:31:45,997 - idom 94 from label 116
2024-09-04 18:31:45,997 - find_def_from_bottom label 94
2024-09-04 18:31:45,997 - find_def_from_top label 94
2024-09-04 18:31:45,997 - idom 86 from label 94
2024-09-04 18:31:45,998 - find_def_from_bottom label 86
2024-09-04 18:31:45,998 - find_def_from_top label 86
2024-09-04 18:31:45,998 - idom 58 from label 86
2024-09-04 18:31:45,998 - find_def_from_bottom label 58
2024-09-04 18:31:45,998 - find_def_from_top label 58
2024-09-04 18:31:45,998 - idom 18 from label 58
2024-09-04 18:31:45,998 - find_def_from_bottom label 18
2024-09-04 18:31:45,998 - replaced with: $128binary_modulo.5 = origsize % known_size.2
2024-09-04 18:31:45,998 - on stmt: $const130.6 = const(int, 0)
2024-09-04 18:31:45,998 - on stmt: ok = $128binary_modulo.5 == $const130.6
2024-09-04 18:31:45,998 - on stmt: jump 136
2024-09-04 18:31:45,998 - ==== SSA block rewrite pass on 136
2024-09-04 18:31:45,998 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F0070>
2024-09-04 18:31:45,999 - on stmt: bool138 = global(bool: <class 'bool'>)
2024-09-04 18:31:45,999 - on stmt: $138pred = call bool138(ok, func=bool138, args=(Var(ok, arrayobj.py:2064),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,999 - on stmt: branch $138pred, 148, 140
2024-09-04 18:31:45,999 - ==== SSA block rewrite pass on 140
2024-09-04 18:31:45,999 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F0070>
2024-09-04 18:31:45,999 - on stmt: $140load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:45,999 - on stmt: $const142.1 = const(str, total size of new array must be unchanged)
2024-09-04 18:31:45,999 - on stmt: $144call_function.2 = call $140load_global.0($const142.1, func=$140load_global.0, args=[Var($const142.1, arrayobj.py:2069)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:45,999 - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-09-04 18:31:45,999 - ==== SSA block rewrite pass on 148
2024-09-04 18:31:45,999 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F0070>
2024-09-04 18:31:46,000 - on stmt: shape[neg_ax] = inferred
2024-09-04 18:31:46,000 - on stmt: $const156.3 = const(NoneType, None)
2024-09-04 18:31:46,001 - on stmt: $158return_value.4 = cast(value=$const156.3)
2024-09-04 18:31:46,001 - on stmt: return $158return_value.4
2024-09-04 18:31:46,001 - ==== SSA block rewrite pass on 160
2024-09-04 18:31:46,001 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F0070>
2024-09-04 18:31:46,001 - on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:46,001 - on stmt: $const162.1 = const(str, multiple negative shape values)
2024-09-04 18:31:46,001 - on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:2073)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,001 - on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2024-09-04 18:31:46,001 - ==== SSA block rewrite pass on 161
2024-09-04 18:31:46,001 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F0070>
2024-09-04 18:31:46,001 - on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:2051), Var(num_neg_value.1, arrayobj.py:2051)], incoming_blocks=[48, 34])
2024-09-04 18:31:46,002 - on stmt: jump 18
2024-09-04 18:31:46,002 - Fix SSA violator on var inferred
2024-09-04 18:31:46,002 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:46,002 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F2F80>
2024-09-04 18:31:46,002 - on stmt: origsize = arg(0, name=origsize)
2024-09-04 18:31:46,002 - on stmt: shape = arg(1, name=shape)
2024-09-04 18:31:46,002 - on stmt: num_neg_value = const(int, 0)
2024-09-04 18:31:46,002 - on stmt: known_size = const(int, 1)
2024-09-04 18:31:46,002 - on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
2024-09-04 18:31:46,002 - on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:2046)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,002 - on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
2024-09-04 18:31:46,002 - on stmt: $phi18.0 = $16get_iter.5
2024-09-04 18:31:46,003 - on stmt: jump 18
2024-09-04 18:31:46,003 - ==== SSA block rewrite pass on 18
2024-09-04 18:31:46,003 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F2F80>
2024-09-04 18:31:46,003 - on stmt: known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:2048), Var(known_size.3, arrayobj.py:2054)], incoming_blocks=[0, 161])
2024-09-04 18:31:46,003 - on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:2047), Var(num_neg_value.3, arrayobj.py:2051)], incoming_blocks=[0, 161])
2024-09-04 18:31:46,003 - on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2024-09-04 18:31:46,003 - on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2024-09-04 18:31:46,003 - on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2024-09-04 18:31:46,003 - on stmt: $phi20.1 = $18for_iter.2
2024-09-04 18:31:46,003 - on stmt: branch $18for_iter.3, 20, 58
2024-09-04 18:31:46,003 - ==== SSA block rewrite pass on 20
2024-09-04 18:31:46,003 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F2F80>
2024-09-04 18:31:46,003 - on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
2024-09-04 18:31:46,004 - on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2024-09-04 18:31:46,004 - on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2024-09-04 18:31:46,004 - on stmt: ax = $20unpack_sequence.2
2024-09-04 18:31:46,004 - on stmt: s = $20unpack_sequence.3
2024-09-04 18:31:46,004 - on stmt: $const28.6 = const(int, 0)
2024-09-04 18:31:46,004 - on stmt: $30compare_op.7 = s < $const28.6
2024-09-04 18:31:46,004 - on stmt: bool32 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,004 - on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:2050),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,004 - on stmt: branch $32pred, 34, 48
2024-09-04 18:31:46,004 - ==== SSA block rewrite pass on 34
2024-09-04 18:31:46,004 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F2F80>
2024-09-04 18:31:46,004 - on stmt: $const36.2 = const(int, 1)
2024-09-04 18:31:46,004 - on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:46,005 - on stmt: num_neg_value.1 = $38inplace_add.3
2024-09-04 18:31:46,005 - on stmt: neg_ax = ax
2024-09-04 18:31:46,005 - on stmt: jump 161
2024-09-04 18:31:46,005 - ==== SSA block rewrite pass on 48
2024-09-04 18:31:46,005 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F2F80>
2024-09-04 18:31:46,005 - on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:46,005 - on stmt: known_size.1 = $52inplace_multiply.3
2024-09-04 18:31:46,005 - on stmt: jump 161
2024-09-04 18:31:46,005 - ==== SSA block rewrite pass on 58
2024-09-04 18:31:46,005 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F2F80>
2024-09-04 18:31:46,005 - on stmt: $const60.1 = const(int, 0)
2024-09-04 18:31:46,005 - on stmt: $62compare_op.2 = num_neg_value.2 == $const60.1
2024-09-04 18:31:46,005 - on stmt: bool64 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,006 - on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:2056),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,006 - on stmt: branch $64pred, 66, 86
2024-09-04 18:31:46,006 - ==== SSA block rewrite pass on 66
2024-09-04 18:31:46,006 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F2F80>
2024-09-04 18:31:46,006 - on stmt: $70compare_op.2 = origsize != known_size.2
2024-09-04 18:31:46,006 - on stmt: bool72 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,006 - on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:2057),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,006 - on stmt: branch $72pred, 74, 82
2024-09-04 18:31:46,006 - ==== SSA block rewrite pass on 74
2024-09-04 18:31:46,006 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F2F80>
2024-09-04 18:31:46,006 - on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:46,006 - on stmt: $const76.1 = const(str, total size of new array must be unchanged)
2024-09-04 18:31:46,007 - on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:2058)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,007 - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-09-04 18:31:46,007 - ==== SSA block rewrite pass on 82
2024-09-04 18:31:46,007 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F2F80>
2024-09-04 18:31:46,007 - on stmt: $const82.0 = const(NoneType, None)
2024-09-04 18:31:46,007 - on stmt: $84return_value.1 = cast(value=$const82.0)
2024-09-04 18:31:46,007 - on stmt: return $84return_value.1
2024-09-04 18:31:46,007 - ==== SSA block rewrite pass on 86
2024-09-04 18:31:46,007 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F2F80>
2024-09-04 18:31:46,007 - on stmt: $const88.1 = const(int, 1)
2024-09-04 18:31:46,007 - on stmt: $90compare_op.2 = num_neg_value.2 == $const88.1
2024-09-04 18:31:46,007 - on stmt: bool92 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,007 - on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, arrayobj.py:2060),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,008 - on stmt: branch $92pred, 94, 160
2024-09-04 18:31:46,008 - ==== SSA block rewrite pass on 94
2024-09-04 18:31:46,008 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F2F80>
2024-09-04 18:31:46,008 - on stmt: $const96.1 = const(int, 0)
2024-09-04 18:31:46,008 - on stmt: $98compare_op.2 = known_size.2 == $const96.1
2024-09-04 18:31:46,008 - on stmt: bool100 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,008 - on stmt: $100pred = call bool100($98compare_op.2, func=bool100, args=(Var($98compare_op.2, arrayobj.py:2062),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,008 - on stmt: branch $100pred, 102, 116
2024-09-04 18:31:46,008 - ==== SSA block rewrite pass on 102
2024-09-04 18:31:46,008 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F2F80>
2024-09-04 18:31:46,008 - on stmt: inferred = const(int, 0)
2024-09-04 18:31:46,008 - first assign: inferred
2024-09-04 18:31:46,008 - replaced with: inferred = const(int, 0)
2024-09-04 18:31:46,009 - on stmt: $const108.2 = const(int, 0)
2024-09-04 18:31:46,009 - on stmt: ok = origsize == $const108.2
2024-09-04 18:31:46,009 - on stmt: jump 136
2024-09-04 18:31:46,009 - ==== SSA block rewrite pass on 116
2024-09-04 18:31:46,009 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F2F80>
2024-09-04 18:31:46,009 - on stmt: inferred = origsize // known_size.2
2024-09-04 18:31:46,009 - replaced with: inferred.1 = origsize // known_size.2
2024-09-04 18:31:46,009 - on stmt: $128binary_modulo.5 = origsize % known_size.2
2024-09-04 18:31:46,009 - on stmt: $const130.6 = const(int, 0)
2024-09-04 18:31:46,009 - on stmt: ok = $128binary_modulo.5 == $const130.6
2024-09-04 18:31:46,009 - on stmt: jump 136
2024-09-04 18:31:46,009 - ==== SSA block rewrite pass on 136
2024-09-04 18:31:46,009 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F2F80>
2024-09-04 18:31:46,010 - on stmt: bool138 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,010 - on stmt: $138pred = call bool138(ok, func=bool138, args=(Var(ok, arrayobj.py:2064),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,010 - on stmt: branch $138pred, 148, 140
2024-09-04 18:31:46,010 - ==== SSA block rewrite pass on 140
2024-09-04 18:31:46,010 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F2F80>
2024-09-04 18:31:46,010 - on stmt: $140load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:46,010 - on stmt: $const142.1 = const(str, total size of new array must be unchanged)
2024-09-04 18:31:46,010 - on stmt: $144call_function.2 = call $140load_global.0($const142.1, func=$140load_global.0, args=[Var($const142.1, arrayobj.py:2069)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,010 - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-09-04 18:31:46,010 - ==== SSA block rewrite pass on 148
2024-09-04 18:31:46,010 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F2F80>
2024-09-04 18:31:46,010 - on stmt: shape[neg_ax] = inferred
2024-09-04 18:31:46,011 - on stmt: $const156.3 = const(NoneType, None)
2024-09-04 18:31:46,011 - on stmt: $158return_value.4 = cast(value=$const156.3)
2024-09-04 18:31:46,011 - on stmt: return $158return_value.4
2024-09-04 18:31:46,011 - ==== SSA block rewrite pass on 160
2024-09-04 18:31:46,011 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F2F80>
2024-09-04 18:31:46,011 - on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:46,011 - on stmt: $const162.1 = const(str, multiple negative shape values)
2024-09-04 18:31:46,011 - on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:2073)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,011 - on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2024-09-04 18:31:46,011 - ==== SSA block rewrite pass on 161
2024-09-04 18:31:46,011 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F2F80>
2024-09-04 18:31:46,011 - on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:2054), Var(known_size.2, arrayobj.py:2054)], incoming_blocks=[48, 34])
2024-09-04 18:31:46,011 - on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:2051), Var(num_neg_value.1, arrayobj.py:2051)], incoming_blocks=[48, 34])
2024-09-04 18:31:46,012 - on stmt: jump 18
2024-09-04 18:31:46,012 - Replaced assignments: defaultdict(<class 'list'>,
            {102: [<numba.core.ir.Assign object at 0x00000243135BE770>],
             116: [<numba.core.ir.Assign object at 0x00000243135BE620>]})
2024-09-04 18:31:46,012 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:46,012 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F13C0>
2024-09-04 18:31:46,012 - on stmt: origsize = arg(0, name=origsize)
2024-09-04 18:31:46,012 - on stmt: shape = arg(1, name=shape)
2024-09-04 18:31:46,012 - on stmt: num_neg_value = const(int, 0)
2024-09-04 18:31:46,012 - on stmt: known_size = const(int, 1)
2024-09-04 18:31:46,012 - on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
2024-09-04 18:31:46,012 - on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:2046)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,012 - on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
2024-09-04 18:31:46,013 - on stmt: $phi18.0 = $16get_iter.5
2024-09-04 18:31:46,013 - on stmt: jump 18
2024-09-04 18:31:46,013 - ==== SSA block rewrite pass on 18
2024-09-04 18:31:46,013 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F13C0>
2024-09-04 18:31:46,013 - on stmt: known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:2048), Var(known_size.3, arrayobj.py:2054)], incoming_blocks=[0, 161])
2024-09-04 18:31:46,013 - on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:2047), Var(num_neg_value.3, arrayobj.py:2051)], incoming_blocks=[0, 161])
2024-09-04 18:31:46,013 - on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2024-09-04 18:31:46,013 - on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2024-09-04 18:31:46,013 - on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2024-09-04 18:31:46,013 - on stmt: $phi20.1 = $18for_iter.2
2024-09-04 18:31:46,013 - on stmt: branch $18for_iter.3, 20, 58
2024-09-04 18:31:46,013 - ==== SSA block rewrite pass on 20
2024-09-04 18:31:46,013 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F13C0>
2024-09-04 18:31:46,014 - on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
2024-09-04 18:31:46,014 - on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2024-09-04 18:31:46,014 - on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2024-09-04 18:31:46,014 - on stmt: ax = $20unpack_sequence.2
2024-09-04 18:31:46,014 - on stmt: s = $20unpack_sequence.3
2024-09-04 18:31:46,014 - on stmt: $const28.6 = const(int, 0)
2024-09-04 18:31:46,014 - on stmt: $30compare_op.7 = s < $const28.6
2024-09-04 18:31:46,014 - on stmt: bool32 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,014 - on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:2050),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,014 - on stmt: branch $32pred, 34, 48
2024-09-04 18:31:46,014 - ==== SSA block rewrite pass on 34
2024-09-04 18:31:46,014 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F13C0>
2024-09-04 18:31:46,015 - on stmt: $const36.2 = const(int, 1)
2024-09-04 18:31:46,015 - on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:46,015 - on stmt: num_neg_value.1 = $38inplace_add.3
2024-09-04 18:31:46,015 - on stmt: neg_ax = ax
2024-09-04 18:31:46,015 - on stmt: jump 161
2024-09-04 18:31:46,015 - ==== SSA block rewrite pass on 48
2024-09-04 18:31:46,015 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F13C0>
2024-09-04 18:31:46,015 - on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:46,015 - on stmt: known_size.1 = $52inplace_multiply.3
2024-09-04 18:31:46,015 - on stmt: jump 161
2024-09-04 18:31:46,015 - ==== SSA block rewrite pass on 58
2024-09-04 18:31:46,015 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F13C0>
2024-09-04 18:31:46,015 - on stmt: $const60.1 = const(int, 0)
2024-09-04 18:31:46,016 - on stmt: $62compare_op.2 = num_neg_value.2 == $const60.1
2024-09-04 18:31:46,016 - on stmt: bool64 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,016 - on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:2056),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,016 - on stmt: branch $64pred, 66, 86
2024-09-04 18:31:46,016 - ==== SSA block rewrite pass on 66
2024-09-04 18:31:46,016 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F13C0>
2024-09-04 18:31:46,016 - on stmt: $70compare_op.2 = origsize != known_size.2
2024-09-04 18:31:46,016 - on stmt: bool72 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,016 - on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:2057),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,016 - on stmt: branch $72pred, 74, 82
2024-09-04 18:31:46,017 - ==== SSA block rewrite pass on 74
2024-09-04 18:31:46,017 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F13C0>
2024-09-04 18:31:46,017 - on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:46,017 - on stmt: $const76.1 = const(str, total size of new array must be unchanged)
2024-09-04 18:31:46,017 - on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:2058)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,017 - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-09-04 18:31:46,018 - ==== SSA block rewrite pass on 82
2024-09-04 18:31:46,018 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F13C0>
2024-09-04 18:31:46,018 - on stmt: $const82.0 = const(NoneType, None)
2024-09-04 18:31:46,018 - on stmt: $84return_value.1 = cast(value=$const82.0)
2024-09-04 18:31:46,018 - on stmt: return $84return_value.1
2024-09-04 18:31:46,018 - ==== SSA block rewrite pass on 86
2024-09-04 18:31:46,018 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F13C0>
2024-09-04 18:31:46,018 - on stmt: $const88.1 = const(int, 1)
2024-09-04 18:31:46,019 - on stmt: $90compare_op.2 = num_neg_value.2 == $const88.1
2024-09-04 18:31:46,019 - on stmt: bool92 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,019 - on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, arrayobj.py:2060),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,019 - on stmt: branch $92pred, 94, 160
2024-09-04 18:31:46,019 - ==== SSA block rewrite pass on 94
2024-09-04 18:31:46,019 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F13C0>
2024-09-04 18:31:46,019 - on stmt: $const96.1 = const(int, 0)
2024-09-04 18:31:46,019 - on stmt: $98compare_op.2 = known_size.2 == $const96.1
2024-09-04 18:31:46,019 - on stmt: bool100 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,020 - on stmt: $100pred = call bool100($98compare_op.2, func=bool100, args=(Var($98compare_op.2, arrayobj.py:2062),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,020 - on stmt: branch $100pred, 102, 116
2024-09-04 18:31:46,020 - ==== SSA block rewrite pass on 102
2024-09-04 18:31:46,020 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F13C0>
2024-09-04 18:31:46,020 - on stmt: inferred = const(int, 0)
2024-09-04 18:31:46,020 - on stmt: $const108.2 = const(int, 0)
2024-09-04 18:31:46,020 - on stmt: ok = origsize == $const108.2
2024-09-04 18:31:46,020 - on stmt: jump 136
2024-09-04 18:31:46,020 - ==== SSA block rewrite pass on 116
2024-09-04 18:31:46,021 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F13C0>
2024-09-04 18:31:46,021 - on stmt: inferred.1 = origsize // known_size.2
2024-09-04 18:31:46,021 - on stmt: $128binary_modulo.5 = origsize % known_size.2
2024-09-04 18:31:46,021 - on stmt: $const130.6 = const(int, 0)
2024-09-04 18:31:46,021 - on stmt: ok = $128binary_modulo.5 == $const130.6
2024-09-04 18:31:46,021 - on stmt: jump 136
2024-09-04 18:31:46,021 - ==== SSA block rewrite pass on 136
2024-09-04 18:31:46,021 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F13C0>
2024-09-04 18:31:46,021 - on stmt: bool138 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,021 - on stmt: $138pred = call bool138(ok, func=bool138, args=(Var(ok, arrayobj.py:2064),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,021 - on stmt: branch $138pred, 148, 140
2024-09-04 18:31:46,021 - ==== SSA block rewrite pass on 140
2024-09-04 18:31:46,021 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F13C0>
2024-09-04 18:31:46,021 - on stmt: $140load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:46,021 - on stmt: $const142.1 = const(str, total size of new array must be unchanged)
2024-09-04 18:31:46,021 - on stmt: $144call_function.2 = call $140load_global.0($const142.1, func=$140load_global.0, args=[Var($const142.1, arrayobj.py:2069)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,021 - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-09-04 18:31:46,021 - ==== SSA block rewrite pass on 148
2024-09-04 18:31:46,021 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F13C0>
2024-09-04 18:31:46,021 - on stmt: shape[neg_ax] = inferred
2024-09-04 18:31:46,021 - find_def var='inferred' stmt=shape[neg_ax] = inferred
2024-09-04 18:31:46,021 - find_def_from_top label 148
2024-09-04 18:31:46,021 - idom 136 from label 148
2024-09-04 18:31:46,021 - find_def_from_bottom label 136
2024-09-04 18:31:46,021 - find_def_from_top label 136
2024-09-04 18:31:46,021 - insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 136
2024-09-04 18:31:46,021 - find_def_from_bottom label 116
2024-09-04 18:31:46,021 - incoming_def inferred.1 = origsize // known_size.2
2024-09-04 18:31:46,021 - find_def_from_bottom label 102
2024-09-04 18:31:46,021 - incoming_def inferred = const(int, 0)
2024-09-04 18:31:46,021 - replaced with: shape[neg_ax] = inferred.2
2024-09-04 18:31:46,021 - on stmt: $const156.3 = const(NoneType, None)
2024-09-04 18:31:46,021 - on stmt: $158return_value.4 = cast(value=$const156.3)
2024-09-04 18:31:46,021 - on stmt: return $158return_value.4
2024-09-04 18:31:46,021 - ==== SSA block rewrite pass on 160
2024-09-04 18:31:46,021 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F13C0>
2024-09-04 18:31:46,021 - on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:46,021 - on stmt: $const162.1 = const(str, multiple negative shape values)
2024-09-04 18:31:46,021 - on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:2073)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,021 - on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2024-09-04 18:31:46,021 - ==== SSA block rewrite pass on 161
2024-09-04 18:31:46,021 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F13C0>
2024-09-04 18:31:46,021 - on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:2054), Var(known_size.2, arrayobj.py:2054)], incoming_blocks=[48, 34])
2024-09-04 18:31:46,021 - on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:2051), Var(num_neg_value.1, arrayobj.py:2051)], incoming_blocks=[48, 34])
2024-09-04 18:31:46,021 - on stmt: jump 18
2024-09-04 18:31:46,021 - Fix SSA violator on var ok
2024-09-04 18:31:46,021 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:46,021 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F1AE0>
2024-09-04 18:31:46,021 - on stmt: origsize = arg(0, name=origsize)
2024-09-04 18:31:46,021 - on stmt: shape = arg(1, name=shape)
2024-09-04 18:31:46,021 - on stmt: num_neg_value = const(int, 0)
2024-09-04 18:31:46,021 - on stmt: known_size = const(int, 1)
2024-09-04 18:31:46,021 - on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
2024-09-04 18:31:46,021 - on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:2046)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,021 - on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
2024-09-04 18:31:46,021 - on stmt: $phi18.0 = $16get_iter.5
2024-09-04 18:31:46,021 - on stmt: jump 18
2024-09-04 18:31:46,021 - ==== SSA block rewrite pass on 18
2024-09-04 18:31:46,021 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F1AE0>
2024-09-04 18:31:46,021 - on stmt: known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:2048), Var(known_size.3, arrayobj.py:2054)], incoming_blocks=[0, 161])
2024-09-04 18:31:46,021 - on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:2047), Var(num_neg_value.3, arrayobj.py:2051)], incoming_blocks=[0, 161])
2024-09-04 18:31:46,021 - on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2024-09-04 18:31:46,021 - on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2024-09-04 18:31:46,021 - on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2024-09-04 18:31:46,021 - on stmt: $phi20.1 = $18for_iter.2
2024-09-04 18:31:46,021 - on stmt: branch $18for_iter.3, 20, 58
2024-09-04 18:31:46,021 - ==== SSA block rewrite pass on 20
2024-09-04 18:31:46,021 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F1AE0>
2024-09-04 18:31:46,021 - on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
2024-09-04 18:31:46,021 - on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2024-09-04 18:31:46,021 - on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2024-09-04 18:31:46,021 - on stmt: ax = $20unpack_sequence.2
2024-09-04 18:31:46,021 - on stmt: s = $20unpack_sequence.3
2024-09-04 18:31:46,021 - on stmt: $const28.6 = const(int, 0)
2024-09-04 18:31:46,021 - on stmt: $30compare_op.7 = s < $const28.6
2024-09-04 18:31:46,021 - on stmt: bool32 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,021 - on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:2050),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,021 - on stmt: branch $32pred, 34, 48
2024-09-04 18:31:46,021 - ==== SSA block rewrite pass on 34
2024-09-04 18:31:46,021 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F1AE0>
2024-09-04 18:31:46,021 - on stmt: $const36.2 = const(int, 1)
2024-09-04 18:31:46,021 - on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:46,021 - on stmt: num_neg_value.1 = $38inplace_add.3
2024-09-04 18:31:46,021 - on stmt: neg_ax = ax
2024-09-04 18:31:46,021 - on stmt: jump 161
2024-09-04 18:31:46,021 - ==== SSA block rewrite pass on 48
2024-09-04 18:31:46,021 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F1AE0>
2024-09-04 18:31:46,021 - on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:46,021 - on stmt: known_size.1 = $52inplace_multiply.3
2024-09-04 18:31:46,021 - on stmt: jump 161
2024-09-04 18:31:46,021 - ==== SSA block rewrite pass on 58
2024-09-04 18:31:46,021 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F1AE0>
2024-09-04 18:31:46,021 - on stmt: $const60.1 = const(int, 0)
2024-09-04 18:31:46,021 - on stmt: $62compare_op.2 = num_neg_value.2 == $const60.1
2024-09-04 18:31:46,021 - on stmt: bool64 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,021 - on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:2056),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,021 - on stmt: branch $64pred, 66, 86
2024-09-04 18:31:46,021 - ==== SSA block rewrite pass on 66
2024-09-04 18:31:46,021 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F1AE0>
2024-09-04 18:31:46,021 - on stmt: $70compare_op.2 = origsize != known_size.2
2024-09-04 18:31:46,021 - on stmt: bool72 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,021 - on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:2057),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,021 - on stmt: branch $72pred, 74, 82
2024-09-04 18:31:46,021 - ==== SSA block rewrite pass on 74
2024-09-04 18:31:46,021 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F1AE0>
2024-09-04 18:31:46,021 - on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:46,021 - on stmt: $const76.1 = const(str, total size of new array must be unchanged)
2024-09-04 18:31:46,021 - on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:2058)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,021 - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-09-04 18:31:46,021 - ==== SSA block rewrite pass on 82
2024-09-04 18:31:46,021 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F1AE0>
2024-09-04 18:31:46,021 - on stmt: $const82.0 = const(NoneType, None)
2024-09-04 18:31:46,021 - on stmt: $84return_value.1 = cast(value=$const82.0)
2024-09-04 18:31:46,021 - on stmt: return $84return_value.1
2024-09-04 18:31:46,021 - ==== SSA block rewrite pass on 86
2024-09-04 18:31:46,021 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F1AE0>
2024-09-04 18:31:46,021 - on stmt: $const88.1 = const(int, 1)
2024-09-04 18:31:46,021 - on stmt: $90compare_op.2 = num_neg_value.2 == $const88.1
2024-09-04 18:31:46,021 - on stmt: bool92 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,021 - on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, arrayobj.py:2060),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,021 - on stmt: branch $92pred, 94, 160
2024-09-04 18:31:46,021 - ==== SSA block rewrite pass on 94
2024-09-04 18:31:46,021 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F1AE0>
2024-09-04 18:31:46,021 - on stmt: $const96.1 = const(int, 0)
2024-09-04 18:31:46,021 - on stmt: $98compare_op.2 = known_size.2 == $const96.1
2024-09-04 18:31:46,021 - on stmt: bool100 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,021 - on stmt: $100pred = call bool100($98compare_op.2, func=bool100, args=(Var($98compare_op.2, arrayobj.py:2062),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,021 - on stmt: branch $100pred, 102, 116
2024-09-04 18:31:46,021 - ==== SSA block rewrite pass on 102
2024-09-04 18:31:46,021 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F1AE0>
2024-09-04 18:31:46,021 - on stmt: inferred = const(int, 0)
2024-09-04 18:31:46,021 - on stmt: $const108.2 = const(int, 0)
2024-09-04 18:31:46,021 - on stmt: ok = origsize == $const108.2
2024-09-04 18:31:46,021 - first assign: ok
2024-09-04 18:31:46,021 - replaced with: ok = origsize == $const108.2
2024-09-04 18:31:46,021 - on stmt: jump 136
2024-09-04 18:31:46,021 - ==== SSA block rewrite pass on 116
2024-09-04 18:31:46,021 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F1AE0>
2024-09-04 18:31:46,021 - on stmt: inferred.1 = origsize // known_size.2
2024-09-04 18:31:46,021 - on stmt: $128binary_modulo.5 = origsize % known_size.2
2024-09-04 18:31:46,021 - on stmt: $const130.6 = const(int, 0)
2024-09-04 18:31:46,021 - on stmt: ok = $128binary_modulo.5 == $const130.6
2024-09-04 18:31:46,021 - replaced with: ok.1 = $128binary_modulo.5 == $const130.6
2024-09-04 18:31:46,021 - on stmt: jump 136
2024-09-04 18:31:46,021 - ==== SSA block rewrite pass on 136
2024-09-04 18:31:46,021 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F1AE0>
2024-09-04 18:31:46,021 - on stmt: inferred.2 = phi(incoming_values=[Var(inferred.1, arrayobj.py:2066), Var(inferred, arrayobj.py:2063)], incoming_blocks=[116, 102])
2024-09-04 18:31:46,021 - on stmt: bool138 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,021 - on stmt: $138pred = call bool138(ok, func=bool138, args=(Var(ok, arrayobj.py:2064),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,021 - on stmt: branch $138pred, 148, 140
2024-09-04 18:31:46,021 - ==== SSA block rewrite pass on 140
2024-09-04 18:31:46,021 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F1AE0>
2024-09-04 18:31:46,021 - on stmt: $140load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:46,021 - on stmt: $const142.1 = const(str, total size of new array must be unchanged)
2024-09-04 18:31:46,021 - on stmt: $144call_function.2 = call $140load_global.0($const142.1, func=$140load_global.0, args=[Var($const142.1, arrayobj.py:2069)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,021 - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-09-04 18:31:46,021 - ==== SSA block rewrite pass on 148
2024-09-04 18:31:46,021 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F1AE0>
2024-09-04 18:31:46,021 - on stmt: shape[neg_ax] = inferred.2
2024-09-04 18:31:46,021 - on stmt: $const156.3 = const(NoneType, None)
2024-09-04 18:31:46,021 - on stmt: $158return_value.4 = cast(value=$const156.3)
2024-09-04 18:31:46,021 - on stmt: return $158return_value.4
2024-09-04 18:31:46,021 - ==== SSA block rewrite pass on 160
2024-09-04 18:31:46,021 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F1AE0>
2024-09-04 18:31:46,021 - on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:46,021 - on stmt: $const162.1 = const(str, multiple negative shape values)
2024-09-04 18:31:46,021 - on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:2073)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,021 - on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2024-09-04 18:31:46,021 - ==== SSA block rewrite pass on 161
2024-09-04 18:31:46,021 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F1AE0>
2024-09-04 18:31:46,021 - on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:2054), Var(known_size.2, arrayobj.py:2054)], incoming_blocks=[48, 34])
2024-09-04 18:31:46,021 - on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:2051), Var(num_neg_value.1, arrayobj.py:2051)], incoming_blocks=[48, 34])
2024-09-04 18:31:46,021 - on stmt: jump 18
2024-09-04 18:31:46,021 - Replaced assignments: defaultdict(<class 'list'>,
            {102: [<numba.core.ir.Assign object at 0x00000243135BE410>],
             116: [<numba.core.ir.Assign object at 0x00000243135BD390>]})
2024-09-04 18:31:46,021 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:46,021 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F2F80>
2024-09-04 18:31:46,021 - on stmt: origsize = arg(0, name=origsize)
2024-09-04 18:31:46,021 - on stmt: shape = arg(1, name=shape)
2024-09-04 18:31:46,021 - on stmt: num_neg_value = const(int, 0)
2024-09-04 18:31:46,021 - on stmt: known_size = const(int, 1)
2024-09-04 18:31:46,021 - on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
2024-09-04 18:31:46,021 - on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:2046)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,021 - on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
2024-09-04 18:31:46,021 - on stmt: $phi18.0 = $16get_iter.5
2024-09-04 18:31:46,021 - on stmt: jump 18
2024-09-04 18:31:46,021 - ==== SSA block rewrite pass on 18
2024-09-04 18:31:46,021 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F2F80>
2024-09-04 18:31:46,037 - on stmt: known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:2048), Var(known_size.3, arrayobj.py:2054)], incoming_blocks=[0, 161])
2024-09-04 18:31:46,037 - on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:2047), Var(num_neg_value.3, arrayobj.py:2051)], incoming_blocks=[0, 161])
2024-09-04 18:31:46,037 - on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2024-09-04 18:31:46,037 - on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2024-09-04 18:31:46,037 - on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2024-09-04 18:31:46,037 - on stmt: $phi20.1 = $18for_iter.2
2024-09-04 18:31:46,037 - on stmt: branch $18for_iter.3, 20, 58
2024-09-04 18:31:46,037 - ==== SSA block rewrite pass on 20
2024-09-04 18:31:46,037 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F2F80>
2024-09-04 18:31:46,037 - on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
2024-09-04 18:31:46,037 - on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2024-09-04 18:31:46,037 - on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2024-09-04 18:31:46,037 - on stmt: ax = $20unpack_sequence.2
2024-09-04 18:31:46,037 - on stmt: s = $20unpack_sequence.3
2024-09-04 18:31:46,037 - on stmt: $const28.6 = const(int, 0)
2024-09-04 18:31:46,037 - on stmt: $30compare_op.7 = s < $const28.6
2024-09-04 18:31:46,037 - on stmt: bool32 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,037 - on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:2050),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,037 - on stmt: branch $32pred, 34, 48
2024-09-04 18:31:46,037 - ==== SSA block rewrite pass on 34
2024-09-04 18:31:46,037 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F2F80>
2024-09-04 18:31:46,037 - on stmt: $const36.2 = const(int, 1)
2024-09-04 18:31:46,037 - on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:46,037 - on stmt: num_neg_value.1 = $38inplace_add.3
2024-09-04 18:31:46,037 - on stmt: neg_ax = ax
2024-09-04 18:31:46,037 - on stmt: jump 161
2024-09-04 18:31:46,037 - ==== SSA block rewrite pass on 48
2024-09-04 18:31:46,037 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F2F80>
2024-09-04 18:31:46,037 - on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:46,037 - on stmt: known_size.1 = $52inplace_multiply.3
2024-09-04 18:31:46,037 - on stmt: jump 161
2024-09-04 18:31:46,037 - ==== SSA block rewrite pass on 58
2024-09-04 18:31:46,037 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F2F80>
2024-09-04 18:31:46,037 - on stmt: $const60.1 = const(int, 0)
2024-09-04 18:31:46,037 - on stmt: $62compare_op.2 = num_neg_value.2 == $const60.1
2024-09-04 18:31:46,037 - on stmt: bool64 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,037 - on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:2056),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,037 - on stmt: branch $64pred, 66, 86
2024-09-04 18:31:46,037 - ==== SSA block rewrite pass on 66
2024-09-04 18:31:46,037 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F2F80>
2024-09-04 18:31:46,037 - on stmt: $70compare_op.2 = origsize != known_size.2
2024-09-04 18:31:46,037 - on stmt: bool72 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,037 - on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:2057),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,037 - on stmt: branch $72pred, 74, 82
2024-09-04 18:31:46,037 - ==== SSA block rewrite pass on 74
2024-09-04 18:31:46,037 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F2F80>
2024-09-04 18:31:46,037 - on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:46,037 - on stmt: $const76.1 = const(str, total size of new array must be unchanged)
2024-09-04 18:31:46,037 - on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:2058)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,037 - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-09-04 18:31:46,037 - ==== SSA block rewrite pass on 82
2024-09-04 18:31:46,037 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F2F80>
2024-09-04 18:31:46,037 - on stmt: $const82.0 = const(NoneType, None)
2024-09-04 18:31:46,037 - on stmt: $84return_value.1 = cast(value=$const82.0)
2024-09-04 18:31:46,037 - on stmt: return $84return_value.1
2024-09-04 18:31:46,037 - ==== SSA block rewrite pass on 86
2024-09-04 18:31:46,037 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F2F80>
2024-09-04 18:31:46,037 - on stmt: $const88.1 = const(int, 1)
2024-09-04 18:31:46,037 - on stmt: $90compare_op.2 = num_neg_value.2 == $const88.1
2024-09-04 18:31:46,037 - on stmt: bool92 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,037 - on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, arrayobj.py:2060),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,037 - on stmt: branch $92pred, 94, 160
2024-09-04 18:31:46,037 - ==== SSA block rewrite pass on 94
2024-09-04 18:31:46,037 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F2F80>
2024-09-04 18:31:46,037 - on stmt: $const96.1 = const(int, 0)
2024-09-04 18:31:46,037 - on stmt: $98compare_op.2 = known_size.2 == $const96.1
2024-09-04 18:31:46,037 - on stmt: bool100 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,037 - on stmt: $100pred = call bool100($98compare_op.2, func=bool100, args=(Var($98compare_op.2, arrayobj.py:2062),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,037 - on stmt: branch $100pred, 102, 116
2024-09-04 18:31:46,037 - ==== SSA block rewrite pass on 102
2024-09-04 18:31:46,037 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F2F80>
2024-09-04 18:31:46,037 - on stmt: inferred = const(int, 0)
2024-09-04 18:31:46,037 - on stmt: $const108.2 = const(int, 0)
2024-09-04 18:31:46,037 - on stmt: ok = origsize == $const108.2
2024-09-04 18:31:46,037 - on stmt: jump 136
2024-09-04 18:31:46,037 - ==== SSA block rewrite pass on 116
2024-09-04 18:31:46,037 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F2F80>
2024-09-04 18:31:46,037 - on stmt: inferred.1 = origsize // known_size.2
2024-09-04 18:31:46,037 - on stmt: $128binary_modulo.5 = origsize % known_size.2
2024-09-04 18:31:46,037 - on stmt: $const130.6 = const(int, 0)
2024-09-04 18:31:46,037 - on stmt: ok.1 = $128binary_modulo.5 == $const130.6
2024-09-04 18:31:46,037 - on stmt: jump 136
2024-09-04 18:31:46,037 - ==== SSA block rewrite pass on 136
2024-09-04 18:31:46,037 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F2F80>
2024-09-04 18:31:46,037 - on stmt: inferred.2 = phi(incoming_values=[Var(inferred.1, arrayobj.py:2066), Var(inferred, arrayobj.py:2063)], incoming_blocks=[116, 102])
2024-09-04 18:31:46,037 - on stmt: bool138 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,037 - on stmt: $138pred = call bool138(ok, func=bool138, args=(Var(ok, arrayobj.py:2064),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,037 - find_def var='ok' stmt=$138pred = call bool138(ok, func=bool138, args=(Var(ok, arrayobj.py:2064),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,037 - find_def_from_top label 136
2024-09-04 18:31:46,037 - insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 136
2024-09-04 18:31:46,037 - find_def_from_bottom label 116
2024-09-04 18:31:46,037 - incoming_def ok.1 = $128binary_modulo.5 == $const130.6
2024-09-04 18:31:46,037 - find_def_from_bottom label 102
2024-09-04 18:31:46,037 - incoming_def ok = origsize == $const108.2
2024-09-04 18:31:46,037 - replaced with: $138pred = call bool138(ok.2, func=bool138, args=(Var(ok.2, arrayobj.py:2068),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,037 - on stmt: branch $138pred, 148, 140
2024-09-04 18:31:46,037 - ==== SSA block rewrite pass on 140
2024-09-04 18:31:46,037 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F2F80>
2024-09-04 18:31:46,037 - on stmt: $140load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:46,037 - on stmt: $const142.1 = const(str, total size of new array must be unchanged)
2024-09-04 18:31:46,037 - on stmt: $144call_function.2 = call $140load_global.0($const142.1, func=$140load_global.0, args=[Var($const142.1, arrayobj.py:2069)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,037 - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-09-04 18:31:46,037 - ==== SSA block rewrite pass on 148
2024-09-04 18:31:46,037 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F2F80>
2024-09-04 18:31:46,037 - on stmt: shape[neg_ax] = inferred.2
2024-09-04 18:31:46,037 - on stmt: $const156.3 = const(NoneType, None)
2024-09-04 18:31:46,037 - on stmt: $158return_value.4 = cast(value=$const156.3)
2024-09-04 18:31:46,037 - on stmt: return $158return_value.4
2024-09-04 18:31:46,037 - ==== SSA block rewrite pass on 160
2024-09-04 18:31:46,037 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F2F80>
2024-09-04 18:31:46,037 - on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:46,037 - on stmt: $const162.1 = const(str, multiple negative shape values)
2024-09-04 18:31:46,037 - on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:2073)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,037 - on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2024-09-04 18:31:46,037 - ==== SSA block rewrite pass on 161
2024-09-04 18:31:46,037 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F2F80>
2024-09-04 18:31:46,037 - on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:2054), Var(known_size.2, arrayobj.py:2054)], incoming_blocks=[48, 34])
2024-09-04 18:31:46,037 - on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:2051), Var(num_neg_value.1, arrayobj.py:2051)], incoming_blocks=[48, 34])
2024-09-04 18:31:46,037 - on stmt: jump 18
2024-09-04 18:31:46,037 - Fix SSA violator on var neg_ax
2024-09-04 18:31:46,037 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:46,037 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F0070>
2024-09-04 18:31:46,037 - on stmt: origsize = arg(0, name=origsize)
2024-09-04 18:31:46,037 - on stmt: shape = arg(1, name=shape)
2024-09-04 18:31:46,037 - on stmt: num_neg_value = const(int, 0)
2024-09-04 18:31:46,037 - on stmt: known_size = const(int, 1)
2024-09-04 18:31:46,037 - on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
2024-09-04 18:31:46,037 - on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:2046)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,047 - on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
2024-09-04 18:31:46,047 - on stmt: $phi18.0 = $16get_iter.5
2024-09-04 18:31:46,047 - on stmt: jump 18
2024-09-04 18:31:46,047 - ==== SSA block rewrite pass on 18
2024-09-04 18:31:46,047 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F0070>
2024-09-04 18:31:46,047 - on stmt: known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:2048), Var(known_size.3, arrayobj.py:2054)], incoming_blocks=[0, 161])
2024-09-04 18:31:46,047 - on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:2047), Var(num_neg_value.3, arrayobj.py:2051)], incoming_blocks=[0, 161])
2024-09-04 18:31:46,047 - on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2024-09-04 18:31:46,048 - on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2024-09-04 18:31:46,048 - on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2024-09-04 18:31:46,048 - on stmt: $phi20.1 = $18for_iter.2
2024-09-04 18:31:46,048 - on stmt: branch $18for_iter.3, 20, 58
2024-09-04 18:31:46,048 - ==== SSA block rewrite pass on 20
2024-09-04 18:31:46,048 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F0070>
2024-09-04 18:31:46,048 - on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
2024-09-04 18:31:46,048 - on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2024-09-04 18:31:46,048 - on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2024-09-04 18:31:46,048 - on stmt: ax = $20unpack_sequence.2
2024-09-04 18:31:46,049 - on stmt: s = $20unpack_sequence.3
2024-09-04 18:31:46,049 - on stmt: $const28.6 = const(int, 0)
2024-09-04 18:31:46,049 - on stmt: $30compare_op.7 = s < $const28.6
2024-09-04 18:31:46,049 - on stmt: bool32 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,049 - on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:2050),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,049 - on stmt: branch $32pred, 34, 48
2024-09-04 18:31:46,049 - ==== SSA block rewrite pass on 34
2024-09-04 18:31:46,049 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F0070>
2024-09-04 18:31:46,049 - on stmt: $const36.2 = const(int, 1)
2024-09-04 18:31:46,049 - on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:46,050 - on stmt: num_neg_value.1 = $38inplace_add.3
2024-09-04 18:31:46,050 - on stmt: neg_ax = ax
2024-09-04 18:31:46,050 - first assign: neg_ax
2024-09-04 18:31:46,050 - replaced with: neg_ax = ax
2024-09-04 18:31:46,050 - on stmt: jump 161
2024-09-04 18:31:46,050 - ==== SSA block rewrite pass on 48
2024-09-04 18:31:46,050 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F0070>
2024-09-04 18:31:46,050 - on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:46,050 - on stmt: known_size.1 = $52inplace_multiply.3
2024-09-04 18:31:46,051 - on stmt: jump 161
2024-09-04 18:31:46,051 - ==== SSA block rewrite pass on 58
2024-09-04 18:31:46,051 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F0070>
2024-09-04 18:31:46,051 - on stmt: $const60.1 = const(int, 0)
2024-09-04 18:31:46,051 - on stmt: $62compare_op.2 = num_neg_value.2 == $const60.1
2024-09-04 18:31:46,051 - on stmt: bool64 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,051 - on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:2056),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,051 - on stmt: branch $64pred, 66, 86
2024-09-04 18:31:46,051 - ==== SSA block rewrite pass on 66
2024-09-04 18:31:46,051 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F0070>
2024-09-04 18:31:46,051 - on stmt: $70compare_op.2 = origsize != known_size.2
2024-09-04 18:31:46,052 - on stmt: bool72 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,052 - on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:2057),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,052 - on stmt: branch $72pred, 74, 82
2024-09-04 18:31:46,052 - ==== SSA block rewrite pass on 74
2024-09-04 18:31:46,052 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F0070>
2024-09-04 18:31:46,052 - on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:46,052 - on stmt: $const76.1 = const(str, total size of new array must be unchanged)
2024-09-04 18:31:46,052 - on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:2058)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,052 - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-09-04 18:31:46,052 - ==== SSA block rewrite pass on 82
2024-09-04 18:31:46,052 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F0070>
2024-09-04 18:31:46,053 - on stmt: $const82.0 = const(NoneType, None)
2024-09-04 18:31:46,053 - on stmt: $84return_value.1 = cast(value=$const82.0)
2024-09-04 18:31:46,053 - on stmt: return $84return_value.1
2024-09-04 18:31:46,053 - ==== SSA block rewrite pass on 86
2024-09-04 18:31:46,053 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F0070>
2024-09-04 18:31:46,053 - on stmt: $const88.1 = const(int, 1)
2024-09-04 18:31:46,053 - on stmt: $90compare_op.2 = num_neg_value.2 == $const88.1
2024-09-04 18:31:46,053 - on stmt: bool92 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,053 - on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, arrayobj.py:2060),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,053 - on stmt: branch $92pred, 94, 160
2024-09-04 18:31:46,053 - ==== SSA block rewrite pass on 94
2024-09-04 18:31:46,053 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F0070>
2024-09-04 18:31:46,053 - on stmt: $const96.1 = const(int, 0)
2024-09-04 18:31:46,053 - on stmt: $98compare_op.2 = known_size.2 == $const96.1
2024-09-04 18:31:46,054 - on stmt: bool100 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,054 - on stmt: $100pred = call bool100($98compare_op.2, func=bool100, args=(Var($98compare_op.2, arrayobj.py:2062),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,054 - on stmt: branch $100pred, 102, 116
2024-09-04 18:31:46,054 - ==== SSA block rewrite pass on 102
2024-09-04 18:31:46,054 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F0070>
2024-09-04 18:31:46,054 - on stmt: inferred = const(int, 0)
2024-09-04 18:31:46,054 - on stmt: $const108.2 = const(int, 0)
2024-09-04 18:31:46,054 - on stmt: ok = origsize == $const108.2
2024-09-04 18:31:46,054 - on stmt: jump 136
2024-09-04 18:31:46,054 - ==== SSA block rewrite pass on 116
2024-09-04 18:31:46,054 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F0070>
2024-09-04 18:31:46,054 - on stmt: inferred.1 = origsize // known_size.2
2024-09-04 18:31:46,054 - on stmt: $128binary_modulo.5 = origsize % known_size.2
2024-09-04 18:31:46,054 - on stmt: $const130.6 = const(int, 0)
2024-09-04 18:31:46,054 - on stmt: ok.1 = $128binary_modulo.5 == $const130.6
2024-09-04 18:31:46,055 - on stmt: jump 136
2024-09-04 18:31:46,055 - ==== SSA block rewrite pass on 136
2024-09-04 18:31:46,055 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F0070>
2024-09-04 18:31:46,055 - on stmt: ok.2 = phi(incoming_values=[Var(ok.1, arrayobj.py:2067), Var(ok, arrayobj.py:2064)], incoming_blocks=[116, 102])
2024-09-04 18:31:46,055 - on stmt: inferred.2 = phi(incoming_values=[Var(inferred.1, arrayobj.py:2066), Var(inferred, arrayobj.py:2063)], incoming_blocks=[116, 102])
2024-09-04 18:31:46,055 - on stmt: bool138 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,055 - on stmt: $138pred = call bool138(ok.2, func=bool138, args=(Var(ok.2, arrayobj.py:2068),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,055 - on stmt: branch $138pred, 148, 140
2024-09-04 18:31:46,055 - ==== SSA block rewrite pass on 140
2024-09-04 18:31:46,055 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F0070>
2024-09-04 18:31:46,055 - on stmt: $140load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:46,055 - on stmt: $const142.1 = const(str, total size of new array must be unchanged)
2024-09-04 18:31:46,055 - on stmt: $144call_function.2 = call $140load_global.0($const142.1, func=$140load_global.0, args=[Var($const142.1, arrayobj.py:2069)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,056 - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-09-04 18:31:46,056 - ==== SSA block rewrite pass on 148
2024-09-04 18:31:46,056 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F0070>
2024-09-04 18:31:46,056 - on stmt: shape[neg_ax] = inferred.2
2024-09-04 18:31:46,056 - on stmt: $const156.3 = const(NoneType, None)
2024-09-04 18:31:46,056 - on stmt: $158return_value.4 = cast(value=$const156.3)
2024-09-04 18:31:46,056 - on stmt: return $158return_value.4
2024-09-04 18:31:46,056 - ==== SSA block rewrite pass on 160
2024-09-04 18:31:46,056 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F0070>
2024-09-04 18:31:46,056 - on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:46,056 - on stmt: $const162.1 = const(str, multiple negative shape values)
2024-09-04 18:31:46,056 - on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:2073)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,056 - on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2024-09-04 18:31:46,056 - ==== SSA block rewrite pass on 161
2024-09-04 18:31:46,056 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132F0070>
2024-09-04 18:31:46,057 - on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:2054), Var(known_size.2, arrayobj.py:2054)], incoming_blocks=[48, 34])
2024-09-04 18:31:46,057 - on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:2051), Var(num_neg_value.1, arrayobj.py:2051)], incoming_blocks=[48, 34])
2024-09-04 18:31:46,057 - on stmt: jump 18
2024-09-04 18:31:46,057 - Replaced assignments: defaultdict(<class 'list'>,
            {34: [<numba.core.ir.Assign object at 0x00000243132F0190>]})
2024-09-04 18:31:46,057 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:46,057 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F2F80>
2024-09-04 18:31:46,057 - on stmt: origsize = arg(0, name=origsize)
2024-09-04 18:31:46,057 - on stmt: shape = arg(1, name=shape)
2024-09-04 18:31:46,057 - on stmt: num_neg_value = const(int, 0)
2024-09-04 18:31:46,057 - on stmt: known_size = const(int, 1)
2024-09-04 18:31:46,057 - on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
2024-09-04 18:31:46,057 - on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:2046)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,057 - on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
2024-09-04 18:31:46,058 - on stmt: $phi18.0 = $16get_iter.5
2024-09-04 18:31:46,058 - on stmt: jump 18
2024-09-04 18:31:46,058 - ==== SSA block rewrite pass on 18
2024-09-04 18:31:46,058 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F2F80>
2024-09-04 18:31:46,058 - on stmt: known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:2048), Var(known_size.3, arrayobj.py:2054)], incoming_blocks=[0, 161])
2024-09-04 18:31:46,058 - on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:2047), Var(num_neg_value.3, arrayobj.py:2051)], incoming_blocks=[0, 161])
2024-09-04 18:31:46,058 - on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2024-09-04 18:31:46,058 - on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2024-09-04 18:31:46,058 - on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2024-09-04 18:31:46,058 - on stmt: $phi20.1 = $18for_iter.2
2024-09-04 18:31:46,058 - on stmt: branch $18for_iter.3, 20, 58
2024-09-04 18:31:46,058 - ==== SSA block rewrite pass on 20
2024-09-04 18:31:46,059 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F2F80>
2024-09-04 18:31:46,059 - on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
2024-09-04 18:31:46,059 - on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2024-09-04 18:31:46,059 - on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2024-09-04 18:31:46,059 - on stmt: ax = $20unpack_sequence.2
2024-09-04 18:31:46,059 - on stmt: s = $20unpack_sequence.3
2024-09-04 18:31:46,059 - on stmt: $const28.6 = const(int, 0)
2024-09-04 18:31:46,059 - on stmt: $30compare_op.7 = s < $const28.6
2024-09-04 18:31:46,059 - on stmt: bool32 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,059 - on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:2050),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,059 - on stmt: branch $32pred, 34, 48
2024-09-04 18:31:46,060 - ==== SSA block rewrite pass on 34
2024-09-04 18:31:46,060 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F2F80>
2024-09-04 18:31:46,060 - on stmt: $const36.2 = const(int, 1)
2024-09-04 18:31:46,060 - on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:46,060 - on stmt: num_neg_value.1 = $38inplace_add.3
2024-09-04 18:31:46,060 - on stmt: neg_ax = ax
2024-09-04 18:31:46,060 - on stmt: jump 161
2024-09-04 18:31:46,060 - ==== SSA block rewrite pass on 48
2024-09-04 18:31:46,060 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F2F80>
2024-09-04 18:31:46,060 - on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:46,060 - on stmt: known_size.1 = $52inplace_multiply.3
2024-09-04 18:31:46,060 - on stmt: jump 161
2024-09-04 18:31:46,060 - ==== SSA block rewrite pass on 58
2024-09-04 18:31:46,060 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F2F80>
2024-09-04 18:31:46,061 - on stmt: $const60.1 = const(int, 0)
2024-09-04 18:31:46,061 - on stmt: $62compare_op.2 = num_neg_value.2 == $const60.1
2024-09-04 18:31:46,061 - on stmt: bool64 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,061 - on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:2056),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,061 - on stmt: branch $64pred, 66, 86
2024-09-04 18:31:46,061 - ==== SSA block rewrite pass on 66
2024-09-04 18:31:46,061 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F2F80>
2024-09-04 18:31:46,061 - on stmt: $70compare_op.2 = origsize != known_size.2
2024-09-04 18:31:46,061 - on stmt: bool72 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,061 - on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:2057),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,061 - on stmt: branch $72pred, 74, 82
2024-09-04 18:31:46,061 - ==== SSA block rewrite pass on 74
2024-09-04 18:31:46,061 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F2F80>
2024-09-04 18:31:46,061 - on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:46,062 - on stmt: $const76.1 = const(str, total size of new array must be unchanged)
2024-09-04 18:31:46,062 - on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:2058)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,062 - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-09-04 18:31:46,062 - ==== SSA block rewrite pass on 82
2024-09-04 18:31:46,062 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F2F80>
2024-09-04 18:31:46,062 - on stmt: $const82.0 = const(NoneType, None)
2024-09-04 18:31:46,062 - on stmt: $84return_value.1 = cast(value=$const82.0)
2024-09-04 18:31:46,062 - on stmt: return $84return_value.1
2024-09-04 18:31:46,062 - ==== SSA block rewrite pass on 86
2024-09-04 18:31:46,062 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F2F80>
2024-09-04 18:31:46,062 - on stmt: $const88.1 = const(int, 1)
2024-09-04 18:31:46,062 - on stmt: $90compare_op.2 = num_neg_value.2 == $const88.1
2024-09-04 18:31:46,062 - on stmt: bool92 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,062 - on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, arrayobj.py:2060),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,063 - on stmt: branch $92pred, 94, 160
2024-09-04 18:31:46,063 - ==== SSA block rewrite pass on 94
2024-09-04 18:31:46,063 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F2F80>
2024-09-04 18:31:46,063 - on stmt: $const96.1 = const(int, 0)
2024-09-04 18:31:46,063 - on stmt: $98compare_op.2 = known_size.2 == $const96.1
2024-09-04 18:31:46,063 - on stmt: bool100 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,063 - on stmt: $100pred = call bool100($98compare_op.2, func=bool100, args=(Var($98compare_op.2, arrayobj.py:2062),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,063 - on stmt: branch $100pred, 102, 116
2024-09-04 18:31:46,063 - ==== SSA block rewrite pass on 102
2024-09-04 18:31:46,063 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F2F80>
2024-09-04 18:31:46,063 - on stmt: inferred = const(int, 0)
2024-09-04 18:31:46,063 - on stmt: $const108.2 = const(int, 0)
2024-09-04 18:31:46,063 - on stmt: ok = origsize == $const108.2
2024-09-04 18:31:46,063 - on stmt: jump 136
2024-09-04 18:31:46,063 - ==== SSA block rewrite pass on 116
2024-09-04 18:31:46,064 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F2F80>
2024-09-04 18:31:46,064 - on stmt: inferred.1 = origsize // known_size.2
2024-09-04 18:31:46,064 - on stmt: $128binary_modulo.5 = origsize % known_size.2
2024-09-04 18:31:46,064 - on stmt: $const130.6 = const(int, 0)
2024-09-04 18:31:46,064 - on stmt: ok.1 = $128binary_modulo.5 == $const130.6
2024-09-04 18:31:46,064 - on stmt: jump 136
2024-09-04 18:31:46,064 - ==== SSA block rewrite pass on 136
2024-09-04 18:31:46,064 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F2F80>
2024-09-04 18:31:46,064 - on stmt: ok.2 = phi(incoming_values=[Var(ok.1, arrayobj.py:2067), Var(ok, arrayobj.py:2064)], incoming_blocks=[116, 102])
2024-09-04 18:31:46,064 - on stmt: inferred.2 = phi(incoming_values=[Var(inferred.1, arrayobj.py:2066), Var(inferred, arrayobj.py:2063)], incoming_blocks=[116, 102])
2024-09-04 18:31:46,064 - on stmt: bool138 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,064 - on stmt: $138pred = call bool138(ok.2, func=bool138, args=(Var(ok.2, arrayobj.py:2068),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,064 - on stmt: branch $138pred, 148, 140
2024-09-04 18:31:46,065 - ==== SSA block rewrite pass on 140
2024-09-04 18:31:46,065 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F2F80>
2024-09-04 18:31:46,065 - on stmt: $140load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:46,065 - on stmt: $const142.1 = const(str, total size of new array must be unchanged)
2024-09-04 18:31:46,065 - on stmt: $144call_function.2 = call $140load_global.0($const142.1, func=$140load_global.0, args=[Var($const142.1, arrayobj.py:2069)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,065 - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2024-09-04 18:31:46,065 - ==== SSA block rewrite pass on 148
2024-09-04 18:31:46,065 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F2F80>
2024-09-04 18:31:46,065 - on stmt: shape[neg_ax] = inferred.2
2024-09-04 18:31:46,065 - find_def var='neg_ax' stmt=shape[neg_ax] = inferred.2
2024-09-04 18:31:46,065 - find_def_from_top label 148
2024-09-04 18:31:46,065 - idom 136 from label 148
2024-09-04 18:31:46,065 - find_def_from_bottom label 136
2024-09-04 18:31:46,065 - find_def_from_top label 136
2024-09-04 18:31:46,065 - idom 94 from label 136
2024-09-04 18:31:46,066 - find_def_from_bottom label 94
2024-09-04 18:31:46,066 - find_def_from_top label 94
2024-09-04 18:31:46,066 - idom 86 from label 94
2024-09-04 18:31:46,066 - find_def_from_bottom label 86
2024-09-04 18:31:46,066 - find_def_from_top label 86
2024-09-04 18:31:46,066 - idom 58 from label 86
2024-09-04 18:31:46,066 - find_def_from_bottom label 58
2024-09-04 18:31:46,066 - find_def_from_top label 58
2024-09-04 18:31:46,066 - idom 18 from label 58
2024-09-04 18:31:46,066 - find_def_from_bottom label 18
2024-09-04 18:31:46,066 - find_def_from_top label 18
2024-09-04 18:31:46,066 - insert phi node neg_ax.1 = phi(incoming_values=[], incoming_blocks=[]) at 18
2024-09-04 18:31:46,066 - find_def_from_bottom label 0
2024-09-04 18:31:46,066 - find_def_from_top label 0
2024-09-04 18:31:46,066 - incoming_def <class 'numba.core.ssa.UndefinedVariable'>
2024-09-04 18:31:46,067 - find_def_from_bottom label 161
2024-09-04 18:31:46,067 - find_def_from_top label 161
2024-09-04 18:31:46,067 - insert phi node neg_ax.2 = phi(incoming_values=[], incoming_blocks=[]) at 161
2024-09-04 18:31:46,067 - find_def_from_bottom label 48
2024-09-04 18:31:46,067 - find_def_from_top label 48
2024-09-04 18:31:46,067 - idom 20 from label 48
2024-09-04 18:31:46,067 - find_def_from_bottom label 20
2024-09-04 18:31:46,067 - find_def_from_top label 20
2024-09-04 18:31:46,067 - idom 18 from label 20
2024-09-04 18:31:46,067 - find_def_from_bottom label 18
2024-09-04 18:31:46,067 - incoming_def neg_ax.1 = phi(incoming_values=[Undefined], incoming_blocks=[0])
2024-09-04 18:31:46,068 - find_def_from_bottom label 34
2024-09-04 18:31:46,068 - incoming_def neg_ax = ax
2024-09-04 18:31:46,068 - incoming_def neg_ax.2 = phi(incoming_values=[Var(neg_ax.1, arrayobj.py:2070), Var(neg_ax, arrayobj.py:2052)], incoming_blocks=[48, 34])
2024-09-04 18:31:46,068 - replaced with: shape[neg_ax.1] = inferred.2
2024-09-04 18:31:46,068 - on stmt: $const156.3 = const(NoneType, None)
2024-09-04 18:31:46,068 - on stmt: $158return_value.4 = cast(value=$const156.3)
2024-09-04 18:31:46,068 - on stmt: return $158return_value.4
2024-09-04 18:31:46,068 - ==== SSA block rewrite pass on 160
2024-09-04 18:31:46,068 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F2F80>
2024-09-04 18:31:46,068 - on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:46,068 - on stmt: $const162.1 = const(str, multiple negative shape values)
2024-09-04 18:31:46,068 - on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:2073)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,069 - on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2024-09-04 18:31:46,069 - ==== SSA block rewrite pass on 161
2024-09-04 18:31:46,069 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132F2F80>
2024-09-04 18:31:46,069 - on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:2054), Var(known_size.2, arrayobj.py:2054)], incoming_blocks=[48, 34])
2024-09-04 18:31:46,069 - on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:2051), Var(num_neg_value.1, arrayobj.py:2051)], incoming_blocks=[48, 34])
2024-09-04 18:31:46,069 - on stmt: jump 18
2024-09-04 18:31:46,441 - bytecode dump:
>          0	NOP(arg=None, lineno=481)
           2	LOAD_FAST(arg=0, lineno=483)
           4	LOAD_FAST(arg=1, lineno=483)
           6	COMPARE_OP(arg=4, lineno=483)
           8	RETURN_VALUE(arg=None, lineno=483)
2024-09-04 18:31:46,441 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:46,441 - stack: []
2024-09-04 18:31:46,441 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:46,441 - dispatch pc=0, inst=NOP(arg=None, lineno=481)
2024-09-04 18:31:46,441 - stack []
2024-09-04 18:31:46,441 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=483)
2024-09-04 18:31:46,441 - stack []
2024-09-04 18:31:46,441 - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=483)
2024-09-04 18:31:46,441 - stack ['$a2.0']
2024-09-04 18:31:46,441 - dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=483)
2024-09-04 18:31:46,443 - stack ['$a2.0', '$min_val4.1']
2024-09-04 18:31:46,443 - dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=483)
2024-09-04 18:31:46,443 - stack ['$6compare_op.2']
2024-09-04 18:31:46,443 - end state. edges=[]
2024-09-04 18:31:46,443 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:46,443 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 18:31:46,443 - defmap: {}
2024-09-04 18:31:46,443 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:46,443 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:46,443 - keep phismap: {}
2024-09-04 18:31:46,443 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:46,443 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:46,443 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'res': '$min_val4.1'}), (6, {'lhs': '$a2.0', 'rhs': '$min_val4.1', 'res': '$6compare_op.2'}), (8, {'retval': '$6compare_op.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:46,443 - label 0:
    a = arg(0, name=a)                       ['a']
    min_val = arg(1, name=min_val)           ['min_val']
    $6compare_op.2 = a > min_val             ['$6compare_op.2', 'a', 'min_val']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2024-09-04 18:31:46,451 - ==== SSA block analysis pass on 0
2024-09-04 18:31:46,451 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243134EE7A0>
2024-09-04 18:31:46,451 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:46,451 - on stmt: min_val = arg(1, name=min_val)
2024-09-04 18:31:46,451 - on stmt: $6compare_op.2 = a > min_val
2024-09-04 18:31:46,451 - on stmt: $8return_value.3 = cast(value=$6compare_op.2)
2024-09-04 18:31:46,451 - on stmt: return $8return_value.3
2024-09-04 18:31:46,451 - defs defaultdict(<class 'list'>,
            {'$6compare_op.2': [(<numba.core.ir.Assign object at 0x00000243134EDF60>,
                                 0)],
             '$8return_value.3': [(<numba.core.ir.Assign object at 0x00000243134EE0B0>,
                                   0)],
             'a': [(<numba.core.ir.Assign object at 0x00000243134ED240>, 0)],
             'min_val': [(<numba.core.ir.Assign object at 0x00000243134ECD60>,
                          0)]})
2024-09-04 18:31:46,451 - SSA violators <numba.core.utils.OrderedSet object at 0x00000243134EE7A0>
2024-09-04 18:31:46,521 - bytecode dump:
>          0	NOP(arg=None, lineno=3535)
           2	LOAD_GLOBAL(arg=0, lineno=3536)
           4	LOAD_FAST(arg=0, lineno=3536)
           6	CALL_FUNCTION(arg=1, lineno=3536)
           8	STORE_FAST(arg=2, lineno=3536)
          10	LOAD_GLOBAL(arg=1, lineno=3537)
          12	LOAD_FAST(arg=2, lineno=3537)
          14	CALL_FUNCTION(arg=1, lineno=3537)
          16	GET_ITER(arg=None, lineno=3537)
>         18	FOR_ITER(arg=20, lineno=3537)
          20	STORE_FAST(arg=3, lineno=3537)
          22	LOAD_FAST(arg=0, lineno=3538)
          24	LOAD_FAST(arg=3, lineno=3538)
          26	BINARY_SUBSCR(arg=None, lineno=3538)
          28	LOAD_FAST(arg=1, lineno=3538)
          30	LOAD_GLOBAL(arg=0, lineno=3538)
          32	LOAD_FAST(arg=1, lineno=3538)
          34	CALL_FUNCTION(arg=1, lineno=3538)
          36	LOAD_FAST(arg=2, lineno=3538)
          38	BINARY_SUBTRACT(arg=None, lineno=3538)
          40	LOAD_FAST(arg=3, lineno=3538)
          42	BINARY_ADD(arg=None, lineno=3538)
          44	BINARY_SUBSCR(arg=None, lineno=3538)
          46	COMPARE_OP(arg=3, lineno=3538)
          48	POP_JUMP_IF_FALSE(arg=30, lineno=3538)
          50	LOAD_GLOBAL(arg=2, lineno=3539)
          52	LOAD_CONST(arg=1, lineno=3539)
          54	CALL_FUNCTION(arg=1, lineno=3539)
          56	RAISE_VARARGS(arg=1, lineno=3539)
>         58	JUMP_ABSOLUTE(arg=10, lineno=3538)
>         60	LOAD_CONST(arg=0, lineno=3537)
          62	RETURN_VALUE(arg=None, lineno=3537)
2024-09-04 18:31:46,521 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:46,521 - stack: []
2024-09-04 18:31:46,521 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:46,521 - dispatch pc=0, inst=NOP(arg=None, lineno=3535)
2024-09-04 18:31:46,521 - stack []
2024-09-04 18:31:46,521 - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3536)
2024-09-04 18:31:46,521 - stack []
2024-09-04 18:31:46,521 - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3536)
2024-09-04 18:31:46,521 - stack ['$2load_global.0']
2024-09-04 18:31:46,521 - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=3536)
2024-09-04 18:31:46,521 - stack ['$2load_global.0', '$shape4.1']
2024-09-04 18:31:46,521 - dispatch pc=8, inst=STORE_FAST(arg=2, lineno=3536)
2024-09-04 18:31:46,521 - stack ['$6call_function.2']
2024-09-04 18:31:46,521 - dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=3537)
2024-09-04 18:31:46,521 - stack []
2024-09-04 18:31:46,521 - dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=3537)
2024-09-04 18:31:46,521 - stack ['$10load_global.3']
2024-09-04 18:31:46,521 - dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=3537)
2024-09-04 18:31:46,521 - stack ['$10load_global.3', '$n12.4']
2024-09-04 18:31:46,521 - dispatch pc=16, inst=GET_ITER(arg=None, lineno=3537)
2024-09-04 18:31:46,521 - stack ['$14call_function.5']
2024-09-04 18:31:46,521 - end state. edges=[Edge(pc=18, stack=('$16get_iter.6',), blockstack=(), npush=0)]
2024-09-04 18:31:46,523 - pending: deque([State(pc_initial=18 nstack_initial=1)])
2024-09-04 18:31:46,523 - stack: ['$phi18.0']
2024-09-04 18:31:46,523 - state.pc_initial: State(pc_initial=18 nstack_initial=1)
2024-09-04 18:31:46,523 - dispatch pc=18, inst=FOR_ITER(arg=20, lineno=3537)
2024-09-04 18:31:46,523 - stack ['$phi18.0']
2024-09-04 18:31:46,523 - end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=20, stack=('$phi18.0', '$18for_iter.2'), blockstack=(), npush=0)]
2024-09-04 18:31:46,523 - pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=20 nstack_initial=2)])
2024-09-04 18:31:46,523 - stack: []
2024-09-04 18:31:46,523 - state.pc_initial: State(pc_initial=60 nstack_initial=0)
2024-09-04 18:31:46,523 - dispatch pc=60, inst=LOAD_CONST(arg=0, lineno=3537)
2024-09-04 18:31:46,523 - stack []
2024-09-04 18:31:46,523 - dispatch pc=62, inst=RETURN_VALUE(arg=None, lineno=3537)
2024-09-04 18:31:46,523 - stack ['$const60.0']
2024-09-04 18:31:46,523 - end state. edges=[]
2024-09-04 18:31:46,523 - pending: deque([State(pc_initial=20 nstack_initial=2)])
2024-09-04 18:31:46,523 - stack: ['$phi20.0', '$phi20.1']
2024-09-04 18:31:46,523 - state.pc_initial: State(pc_initial=20 nstack_initial=2)
2024-09-04 18:31:46,523 - dispatch pc=20, inst=STORE_FAST(arg=3, lineno=3537)
2024-09-04 18:31:46,523 - stack ['$phi20.0', '$phi20.1']
2024-09-04 18:31:46,523 - dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=3538)
2024-09-04 18:31:46,523 - stack ['$phi20.0']
2024-09-04 18:31:46,523 - dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=3538)
2024-09-04 18:31:46,523 - stack ['$phi20.0', '$shape22.2']
2024-09-04 18:31:46,523 - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=3538)
2024-09-04 18:31:46,523 - stack ['$phi20.0', '$shape22.2', '$i24.3']
2024-09-04 18:31:46,523 - dispatch pc=28, inst=LOAD_FAST(arg=1, lineno=3538)
2024-09-04 18:31:46,523 - stack ['$phi20.0', '$26binary_subscr.4']
2024-09-04 18:31:46,523 - dispatch pc=30, inst=LOAD_GLOBAL(arg=0, lineno=3538)
2024-09-04 18:31:46,523 - stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5']
2024-09-04 18:31:46,523 - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=3538)
2024-09-04 18:31:46,523 - stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$30load_global.6']
2024-09-04 18:31:46,523 - dispatch pc=34, inst=CALL_FUNCTION(arg=1, lineno=3538)
2024-09-04 18:31:46,523 - stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$30load_global.6', '$main_shape32.7']
2024-09-04 18:31:46,523 - dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=3538)
2024-09-04 18:31:46,523 - stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$34call_function.8']
2024-09-04 18:31:46,523 - dispatch pc=38, inst=BINARY_SUBTRACT(arg=None, lineno=3538)
2024-09-04 18:31:46,523 - stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$34call_function.8', '$n36.9']
2024-09-04 18:31:46,523 - dispatch pc=40, inst=LOAD_FAST(arg=3, lineno=3538)
2024-09-04 18:31:46,523 - stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$38binary_subtract.10']
2024-09-04 18:31:46,523 - dispatch pc=42, inst=BINARY_ADD(arg=None, lineno=3538)
2024-09-04 18:31:46,523 - stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$38binary_subtract.10', '$i40.11']
2024-09-04 18:31:46,523 - dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=3538)
2024-09-04 18:31:46,523 - stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$42binary_add.12']
2024-09-04 18:31:46,523 - dispatch pc=46, inst=COMPARE_OP(arg=3, lineno=3538)
2024-09-04 18:31:46,523 - stack ['$phi20.0', '$26binary_subscr.4', '$44binary_subscr.13']
2024-09-04 18:31:46,523 - dispatch pc=48, inst=POP_JUMP_IF_FALSE(arg=30, lineno=3538)
2024-09-04 18:31:46,523 - stack ['$phi20.0', '$46compare_op.14']
2024-09-04 18:31:46,523 - end state. edges=[Edge(pc=50, stack=('$phi20.0',), blockstack=(), npush=0), Edge(pc=58, stack=('$phi20.0',), blockstack=(), npush=0)]
2024-09-04 18:31:46,523 - pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=58 nstack_initial=1)])
2024-09-04 18:31:46,523 - stack: ['$phi50.0']
2024-09-04 18:31:46,523 - state.pc_initial: State(pc_initial=50 nstack_initial=1)
2024-09-04 18:31:46,523 - dispatch pc=50, inst=LOAD_GLOBAL(arg=2, lineno=3539)
2024-09-04 18:31:46,523 - stack ['$phi50.0']
2024-09-04 18:31:46,523 - dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=3539)
2024-09-04 18:31:46,523 - stack ['$phi50.0', '$50load_global.1']
2024-09-04 18:31:46,523 - dispatch pc=54, inst=CALL_FUNCTION(arg=1, lineno=3539)
2024-09-04 18:31:46,523 - stack ['$phi50.0', '$50load_global.1', '$const52.2']
2024-09-04 18:31:46,523 - dispatch pc=56, inst=RAISE_VARARGS(arg=1, lineno=3539)
2024-09-04 18:31:46,523 - stack ['$phi50.0', '$54call_function.3']
2024-09-04 18:31:46,523 - end state. edges=[]
2024-09-04 18:31:46,523 - pending: deque([State(pc_initial=58 nstack_initial=1)])
2024-09-04 18:31:46,523 - stack: ['$phi58.0']
2024-09-04 18:31:46,523 - state.pc_initial: State(pc_initial=58 nstack_initial=1)
2024-09-04 18:31:46,523 - dispatch pc=58, inst=JUMP_ABSOLUTE(arg=10, lineno=3538)
2024-09-04 18:31:46,523 - stack ['$phi58.0']
2024-09-04 18:31:46,523 - end state. edges=[Edge(pc=18, stack=('$phi58.0',), blockstack=(), npush=0)]
2024-09-04 18:31:46,523 - pending: deque([State(pc_initial=18 nstack_initial=1)])
2024-09-04 18:31:46,523 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:46,523 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=1): {'$phi18.0'},
             State(pc_initial=20 nstack_initial=2): {'$phi20.1'},
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=58 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set()})
2024-09-04 18:31:46,523 - defmap: {'$phi18.0': State(pc_initial=0 nstack_initial=0),
 '$phi20.1': State(pc_initial=18 nstack_initial=1)}
2024-09-04 18:31:46,523 - phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi58.0', State(pc_initial=58 nstack_initial=1))},
             '$phi20.0': {('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$phi20.0', State(pc_initial=20 nstack_initial=2))},
             '$phi58.0': {('$phi20.0', State(pc_initial=20 nstack_initial=2))}})
2024-09-04 18:31:46,523 - changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=2))},
             '$phi20.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=2))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi58.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
2024-09-04 18:31:46,523 - changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi58.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
2024-09-04 18:31:46,523 - changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi58.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
2024-09-04 18:31:46,523 - keep phismap: {'$phi18.0': {('$16get_iter.6', State(pc_initial=0 nstack_initial=0))},
 '$phi20.1': {('$18for_iter.2', State(pc_initial=18 nstack_initial=1))}}
2024-09-04 18:31:46,523 - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi18.0': '$16get_iter.6'},
             State(pc_initial=18 nstack_initial=1): {'$phi20.1': '$18for_iter.2'}})
2024-09-04 18:31:46,523 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:46,523 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'func': '$2load_global.0', 'args': ['$shape4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_global.3'}), (12, {'res': '$n12.4'}), (14, {'func': '$10load_global.3', 'args': ['$n12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5', 'res': '$16get_iter.6'})), outgoing_phis={'$phi18.0': '$16get_iter.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ('$16get_iter.6',)})
2024-09-04 18:31:46,523 - block_infos State(pc_initial=18 nstack_initial=1):
AdaptBlockInfo(insts=((18, {'iterator': '$phi18.0', 'pair': '$18for_iter.1', 'indval': '$18for_iter.2', 'pred': '$18for_iter.3'}),), outgoing_phis={'$phi20.1': '$18for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 20: ('$phi18.0', '$18for_iter.2')})
2024-09-04 18:31:46,523 - block_infos State(pc_initial=20 nstack_initial=2):
AdaptBlockInfo(insts=((20, {'value': '$phi20.1'}), (22, {'res': '$shape22.2'}), (24, {'res': '$i24.3'}), (26, {'index': '$i24.3', 'target': '$shape22.2', 'res': '$26binary_subscr.4'}), (28, {'res': '$main_shape28.5'}), (30, {'res': '$30load_global.6'}), (32, {'res': '$main_shape32.7'}), (34, {'func': '$30load_global.6', 'args': ['$main_shape32.7'], 'res': '$34call_function.8'}), (36, {'res': '$n36.9'}), (38, {'lhs': '$34call_function.8', 'rhs': '$n36.9', 'res': '$38binary_subtract.10'}), (40, {'res': '$i40.11'}), (42, {'lhs': '$38binary_subtract.10', 'rhs': '$i40.11', 'res': '$42binary_add.12'}), (44, {'index': '$42binary_add.12', 'target': '$main_shape28.5', 'res': '$44binary_subscr.13'}), (46, {'lhs': '$26binary_subscr.4', 'rhs': '$44binary_subscr.13', 'res': '$46compare_op.14'}), (48, {'pred': '$46compare_op.14'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: ('$phi20.0',), 58: ('$phi20.0',)})
2024-09-04 18:31:46,523 - block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$50load_global.1'}), (52, {'res': '$const52.2'}), (54, {'func': '$50load_global.1', 'args': ['$const52.2'], 'res': '$54call_function.3'}), (56, {'exc': '$54call_function.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:46,523 - block_infos State(pc_initial=58 nstack_initial=1):
AdaptBlockInfo(insts=((58, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ('$phi58.0',)})
2024-09-04 18:31:46,523 - block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$const60.0'}), (62, {'retval': '$const60.0', 'castval': '$62return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:46,532 - label 0:
    shape = arg(0, name=shape)               ['shape']
    main_shape = arg(1, name=main_shape)     ['main_shape']
    $2load_global.0 = global(len: <built-in function len>) ['$2load_global.0']
    n = call $2load_global.0(shape, func=$2load_global.0, args=[Var(shape, arrayobj.py:3535)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', 'n', 'shape']
    $10load_global.3 = global(range: <class 'range'>) ['$10load_global.3']
    $14call_function.5 = call $10load_global.3(n, func=$10load_global.3, args=[Var(n, arrayobj.py:3536)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_global.3', '$14call_function.5', 'n']
    $16get_iter.6 = getiter(value=$14call_function.5) ['$14call_function.5', '$16get_iter.6']
    $phi18.0 = $16get_iter.6                 ['$16get_iter.6', '$phi18.0']
    jump 18                                  []
label 18:
    $18for_iter.1 = iternext(value=$phi18.0) ['$18for_iter.1', '$phi18.0']
    $18for_iter.2 = pair_first(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.2']
    $18for_iter.3 = pair_second(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.3']
    $phi20.1 = $18for_iter.2                 ['$18for_iter.2', '$phi20.1']
    branch $18for_iter.3, 20, 60             ['$18for_iter.3']
label 20:
    i = $phi20.1                             ['$phi20.1', 'i']
    $26binary_subscr.4 = getitem(value=shape, index=i, fn=<built-in function getitem>) ['$26binary_subscr.4', 'i', 'shape']
    $30load_global.6 = global(len: <built-in function len>) ['$30load_global.6']
    $34call_function.8 = call $30load_global.6(main_shape, func=$30load_global.6, args=[Var(main_shape, arrayobj.py:3535)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.6', '$34call_function.8', 'main_shape']
    $38binary_subtract.10 = $34call_function.8 - n ['$34call_function.8', '$38binary_subtract.10', 'n']
    $42binary_add.12 = $38binary_subtract.10 + i ['$38binary_subtract.10', '$42binary_add.12', 'i']
    $44binary_subscr.13 = getitem(value=main_shape, index=$42binary_add.12, fn=<built-in function getitem>) ['$42binary_add.12', '$44binary_subscr.13', 'main_shape']
    $46compare_op.14 = $26binary_subscr.4 != $44binary_subscr.13 ['$26binary_subscr.4', '$44binary_subscr.13', '$46compare_op.14']
    bool48 = global(bool: <class 'bool'>)    ['bool48']
    $48pred = call bool48($46compare_op.14, func=bool48, args=(Var($46compare_op.14, arrayobj.py:3538),), kws=(), vararg=None, varkwarg=None, target=None) ['$46compare_op.14', '$48pred', 'bool48']
    branch $48pred, 50, 58                   ['$48pred']
label 50:
    $50load_global.1 = global(ValueError: <class 'ValueError'>) ['$50load_global.1']
    $const52.2 = const(str, nditer(): operands could not be broadcast together) ['$const52.2']
    $54call_function.3 = call $50load_global.1($const52.2, func=$50load_global.1, args=[Var($const52.2, arrayobj.py:3539)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.1', '$54call_function.3', '$const52.2']
    raise $54call_function.3                 ['$54call_function.3']
label 58:
    jump 18                                  []
label 60:
    $const60.0 = const(NoneType, None)       ['$const60.0']
    $62return_value.1 = cast(value=$const60.0) ['$62return_value.1', '$const60.0']
    return $62return_value.1                 ['$62return_value.1']

2024-09-04 18:31:46,544 - ==== SSA block analysis pass on 0
2024-09-04 18:31:46,544 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243134DB8E0>
2024-09-04 18:31:46,544 - on stmt: shape = arg(0, name=shape)
2024-09-04 18:31:46,544 - on stmt: main_shape = arg(1, name=main_shape)
2024-09-04 18:31:46,544 - on stmt: $2load_global.0 = global(len: <built-in function len>)
2024-09-04 18:31:46,544 - on stmt: n = const(int, 1)
2024-09-04 18:31:46,544 - on stmt: $10load_global.3 = global(range: <class 'range'>)
2024-09-04 18:31:46,544 - on stmt: $14call_function.5 = call $10load_global.3(n, func=$10load_global.3, args=[Var(n, arrayobj.py:3536)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,544 - on stmt: $16get_iter.6 = getiter(value=$14call_function.5)
2024-09-04 18:31:46,544 - on stmt: $phi18.0 = $16get_iter.6
2024-09-04 18:31:46,544 - on stmt: jump 18
2024-09-04 18:31:46,544 - ==== SSA block analysis pass on 18
2024-09-04 18:31:46,544 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243134DB8E0>
2024-09-04 18:31:46,544 - on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2024-09-04 18:31:46,544 - on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2024-09-04 18:31:46,544 - on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2024-09-04 18:31:46,544 - on stmt: $phi20.1 = $18for_iter.2
2024-09-04 18:31:46,544 - on stmt: branch $18for_iter.3, 20, 60
2024-09-04 18:31:46,544 - ==== SSA block analysis pass on 20
2024-09-04 18:31:46,544 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243134DB8E0>
2024-09-04 18:31:46,544 - on stmt: i = $phi20.1
2024-09-04 18:31:46,544 - on stmt: $26binary_subscr.4 = getitem(value=shape, index=i, fn=<built-in function getitem>)
2024-09-04 18:31:46,544 - on stmt: $30load_global.6 = global(len: <built-in function len>)
2024-09-04 18:31:46,544 - on stmt: $34call_function.8 = const(int, 1)
2024-09-04 18:31:46,544 - on stmt: $38binary_subtract.10 = $34call_function.8 - n
2024-09-04 18:31:46,544 - on stmt: $42binary_add.12 = $38binary_subtract.10 + i
2024-09-04 18:31:46,544 - on stmt: $44binary_subscr.13 = getitem(value=main_shape, index=$42binary_add.12, fn=<built-in function getitem>)
2024-09-04 18:31:46,544 - on stmt: $46compare_op.14 = $26binary_subscr.4 != $44binary_subscr.13
2024-09-04 18:31:46,544 - on stmt: bool48 = global(bool: <class 'bool'>)
2024-09-04 18:31:46,552 - on stmt: $48pred = call bool48($46compare_op.14, func=bool48, args=(Var($46compare_op.14, arrayobj.py:3538),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,552 - on stmt: branch $48pred, 50, 58
2024-09-04 18:31:46,552 - ==== SSA block analysis pass on 50
2024-09-04 18:31:46,552 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243134DB8E0>
2024-09-04 18:31:46,552 - on stmt: $50load_global.1 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:46,552 - on stmt: $const52.2 = const(str, nditer(): operands could not be broadcast together)
2024-09-04 18:31:46,552 - on stmt: $54call_function.3 = call $50load_global.1($const52.2, func=$50load_global.1, args=[Var($const52.2, arrayobj.py:3539)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:46,552 - on stmt: <static> raise <class 'ValueError'>('nditer(): operands could not be broadcast together')
2024-09-04 18:31:46,552 - ==== SSA block analysis pass on 58
2024-09-04 18:31:46,552 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243134DB8E0>
2024-09-04 18:31:46,552 - on stmt: jump 18
2024-09-04 18:31:46,552 - ==== SSA block analysis pass on 60
2024-09-04 18:31:46,552 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243134DB8E0>
2024-09-04 18:31:46,552 - on stmt: $const60.0 = const(NoneType, None)
2024-09-04 18:31:46,552 - on stmt: $62return_value.1 = cast(value=$const60.0)
2024-09-04 18:31:46,552 - on stmt: return $62return_value.1
2024-09-04 18:31:46,554 - defs defaultdict(<class 'list'>,
            {'$10load_global.3': [(<numba.core.ir.Assign object at 0x000002431350C550>,
                                   0)],
             '$14call_function.5': [(<numba.core.ir.Assign object at 0x000002431350C850>,
                                     0)],
             '$16get_iter.6': [(<numba.core.ir.Assign object at 0x000002431350C970>,
                                0)],
             '$18for_iter.1': [(<numba.core.ir.Assign object at 0x000002431350CBE0>,
                                18)],
             '$18for_iter.2': [(<numba.core.ir.Assign object at 0x000002431350CD00>,
                                18)],
             '$18for_iter.3': [(<numba.core.ir.Assign object at 0x000002431350CE20>,
                                18)],
             '$26binary_subscr.4': [(<numba.core.ir.Assign object at 0x000002431350D4E0>,
                                     20)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x00000243134DBFD0>,
                                  0)],
             '$30load_global.6': [(<numba.core.ir.Assign object at 0x000002431350D750>,
                                   20)],
             '$34call_function.8': [(<numba.core.ir.Assign object at 0x000002431350DA50>,
                                     20)],
             '$38binary_subtract.10': [(<numba.core.ir.Assign object at 0x000002431350DCC0>,
                                        20)],
             '$42binary_add.12': [(<numba.core.ir.Assign object at 0x000002431350DF60>,
                                   20)],
             '$44binary_subscr.13': [(<numba.core.ir.Assign object at 0x000002431350E0E0>,
                                      20)],
             '$46compare_op.14': [(<numba.core.ir.Assign object at 0x000002431350E260>,
                                   20)],
             '$48pred': [(<numba.core.ir.Assign object at 0x000002431350E4D0>,
                          20)],
             '$50load_global.1': [(<numba.core.ir.Assign object at 0x000002431350DDB0>,
                                   50)],
             '$54call_function.3': [(<numba.core.ir.Assign object at 0x000002431350E890>,
                                     50)],
             '$62return_value.1': [(<numba.core.ir.Assign object at 0x000002431350EE30>,
                                    60)],
             '$const52.2': [(<numba.core.ir.Assign object at 0x000002431350E6B0>,
                             50)],
             '$const60.0': [(<numba.core.ir.Assign object at 0x000002431350ECB0>,
                             60)],
             '$phi18.0': [(<numba.core.ir.Assign object at 0x000002431350C130>,
                           0)],
             '$phi20.1': [(<numba.core.ir.Assign object at 0x000002431350CB20>,
                           18)],
             'bool48': [(<numba.core.ir.Assign object at 0x000002431350E3B0>,
                         20)],
             'i': [(<numba.core.ir.Assign object at 0x000002431350D0F0>, 20)],
             'main_shape': [(<numba.core.ir.Assign object at 0x00000243134DBE50>,
                             0)],
             'n': [(<numba.core.ir.Assign object at 0x000002431350C310>, 0)],
             'shape': [(<numba.core.ir.Assign object at 0x00000243134DBD30>,
                        0)]})
2024-09-04 18:31:46,554 - SSA violators <numba.core.utils.OrderedSet object at 0x00000243134DB8E0>
2024-09-04 18:31:47,168 - bytecode dump:
>          0	NOP(arg=None, lineno=437)
           2	LOAD_DEREF(arg=0, lineno=440)
           4	STORE_FAST(arg=1, lineno=440)
           6	LOAD_GLOBAL(arg=0, lineno=441)
           8	LOAD_METHOD(arg=1, lineno=441)
          10	LOAD_FAST(arg=0, lineno=441)
          12	CALL_METHOD(arg=1, lineno=441)
          14	GET_ITER(arg=None, lineno=441)
>         16	FOR_ITER(arg=8, lineno=441)
          18	STORE_FAST(arg=2, lineno=441)
          20	LOAD_FAST(arg=1, lineno=442)
          22	LOAD_FAST(arg=2, lineno=442)
          24	LOAD_METHOD(arg=2, lineno=442)
          26	CALL_METHOD(arg=0, lineno=442)
          28	INPLACE_ADD(arg=None, lineno=442)
          30	STORE_FAST(arg=1, lineno=442)
          32	JUMP_ABSOLUTE(arg=9, lineno=442)
>         34	LOAD_FAST(arg=1, lineno=443)
          36	LOAD_FAST(arg=0, lineno=443)
          38	LOAD_ATTR(arg=3, lineno=443)
          40	BINARY_TRUE_DIVIDE(arg=None, lineno=443)
          42	RETURN_VALUE(arg=None, lineno=443)
2024-09-04 18:31:47,168 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:47,168 - stack: []
2024-09-04 18:31:47,168 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:47,168 - dispatch pc=0, inst=NOP(arg=None, lineno=437)
2024-09-04 18:31:47,168 - stack []
2024-09-04 18:31:47,168 - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=440)
2024-09-04 18:31:47,168 - stack []
2024-09-04 18:31:47,168 - dispatch pc=4, inst=STORE_FAST(arg=1, lineno=440)
2024-09-04 18:31:47,168 - stack ['$2load_deref.0']
2024-09-04 18:31:47,168 - dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=441)
2024-09-04 18:31:47,168 - stack []
2024-09-04 18:31:47,168 - dispatch pc=8, inst=LOAD_METHOD(arg=1, lineno=441)
2024-09-04 18:31:47,168 - stack ['$6load_global.1']
2024-09-04 18:31:47,168 - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=441)
2024-09-04 18:31:47,168 - stack ['$8load_method.2']
2024-09-04 18:31:47,168 - dispatch pc=12, inst=CALL_METHOD(arg=1, lineno=441)
2024-09-04 18:31:47,168 - stack ['$8load_method.2', '$a10.3']
2024-09-04 18:31:47,168 - dispatch pc=14, inst=GET_ITER(arg=None, lineno=441)
2024-09-04 18:31:47,168 - stack ['$12call_method.4']
2024-09-04 18:31:47,171 - end state. edges=[Edge(pc=16, stack=('$14get_iter.5',), blockstack=(), npush=0)]
2024-09-04 18:31:47,171 - pending: deque([State(pc_initial=16 nstack_initial=1)])
2024-09-04 18:31:47,171 - stack: ['$phi16.0']
2024-09-04 18:31:47,171 - state.pc_initial: State(pc_initial=16 nstack_initial=1)
2024-09-04 18:31:47,171 - dispatch pc=16, inst=FOR_ITER(arg=8, lineno=441)
2024-09-04 18:31:47,171 - stack ['$phi16.0']
2024-09-04 18:31:47,171 - end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=18, stack=('$phi16.0', '$16for_iter.2'), blockstack=(), npush=0)]
2024-09-04 18:31:47,171 - pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=18 nstack_initial=2)])
2024-09-04 18:31:47,171 - stack: []
2024-09-04 18:31:47,171 - state.pc_initial: State(pc_initial=34 nstack_initial=0)
2024-09-04 18:31:47,171 - dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=443)
2024-09-04 18:31:47,171 - stack []
2024-09-04 18:31:47,172 - dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=443)
2024-09-04 18:31:47,172 - stack ['$c34.0']
2024-09-04 18:31:47,172 - dispatch pc=38, inst=LOAD_ATTR(arg=3, lineno=443)
2024-09-04 18:31:47,172 - stack ['$c34.0', '$a36.1']
2024-09-04 18:31:47,172 - dispatch pc=40, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=443)
2024-09-04 18:31:47,172 - stack ['$c34.0', '$38load_attr.2']
2024-09-04 18:31:47,172 - dispatch pc=42, inst=RETURN_VALUE(arg=None, lineno=443)
2024-09-04 18:31:47,172 - stack ['$40binary_true_divide.3']
2024-09-04 18:31:47,172 - end state. edges=[]
2024-09-04 18:31:47,172 - pending: deque([State(pc_initial=18 nstack_initial=2)])
2024-09-04 18:31:47,172 - stack: ['$phi18.0', '$phi18.1']
2024-09-04 18:31:47,172 - state.pc_initial: State(pc_initial=18 nstack_initial=2)
2024-09-04 18:31:47,172 - dispatch pc=18, inst=STORE_FAST(arg=2, lineno=441)
2024-09-04 18:31:47,172 - stack ['$phi18.0', '$phi18.1']
2024-09-04 18:31:47,172 - dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=442)
2024-09-04 18:31:47,172 - stack ['$phi18.0']
2024-09-04 18:31:47,172 - dispatch pc=22, inst=LOAD_FAST(arg=2, lineno=442)
2024-09-04 18:31:47,172 - stack ['$phi18.0', '$c20.2']
2024-09-04 18:31:47,172 - dispatch pc=24, inst=LOAD_METHOD(arg=2, lineno=442)
2024-09-04 18:31:47,172 - stack ['$phi18.0', '$c20.2', '$v22.3']
2024-09-04 18:31:47,172 - dispatch pc=26, inst=CALL_METHOD(arg=0, lineno=442)
2024-09-04 18:31:47,172 - stack ['$phi18.0', '$c20.2', '$24load_method.4']
2024-09-04 18:31:47,172 - dispatch pc=28, inst=INPLACE_ADD(arg=None, lineno=442)
2024-09-04 18:31:47,172 - stack ['$phi18.0', '$c20.2', '$26call_method.5']
2024-09-04 18:31:47,172 - dispatch pc=30, inst=STORE_FAST(arg=1, lineno=442)
2024-09-04 18:31:47,172 - stack ['$phi18.0', '$28inplace_add.6']
2024-09-04 18:31:47,172 - dispatch pc=32, inst=JUMP_ABSOLUTE(arg=9, lineno=442)
2024-09-04 18:31:47,172 - stack ['$phi18.0']
2024-09-04 18:31:47,172 - end state. edges=[Edge(pc=16, stack=('$phi18.0',), blockstack=(), npush=0)]
2024-09-04 18:31:47,172 - pending: deque([State(pc_initial=16 nstack_initial=1)])
2024-09-04 18:31:47,172 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:47,172 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=1): {'$phi16.0'},
             State(pc_initial=18 nstack_initial=2): {'$phi18.1'},
             State(pc_initial=34 nstack_initial=0): set()})
2024-09-04 18:31:47,172 - defmap: {'$phi16.0': State(pc_initial=0 nstack_initial=0),
 '$phi18.1': State(pc_initial=16 nstack_initial=1)}
2024-09-04 18:31:47,172 - phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi18.0', State(pc_initial=18 nstack_initial=2))},
             '$phi18.0': {('$phi16.0', State(pc_initial=16 nstack_initial=1))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
2024-09-04 18:31:47,172 - changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=1))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
2024-09-04 18:31:47,172 - changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
2024-09-04 18:31:47,172 - changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
2024-09-04 18:31:47,172 - keep phismap: {'$phi16.0': {('$14get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi18.1': {('$16for_iter.2', State(pc_initial=16 nstack_initial=1))}}
2024-09-04 18:31:47,176 - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi16.0': '$14get_iter.5'},
             State(pc_initial=16 nstack_initial=1): {'$phi18.1': '$16for_iter.2'}})
2024-09-04 18:31:47,176 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:47,176 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'value': '$2load_deref.0'}), (6, {'res': '$6load_global.1'}), (8, {'item': '$6load_global.1', 'res': '$8load_method.2'}), (10, {'res': '$a10.3'}), (12, {'func': '$8load_method.2', 'args': ['$a10.3'], 'res': '$12call_method.4'}), (14, {'value': '$12call_method.4', 'res': '$14get_iter.5'})), outgoing_phis={'$phi16.0': '$14get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$14get_iter.5',)})
2024-09-04 18:31:47,176 - block_infos State(pc_initial=16 nstack_initial=1):
AdaptBlockInfo(insts=((16, {'iterator': '$phi16.0', 'pair': '$16for_iter.1', 'indval': '$16for_iter.2', 'pred': '$16for_iter.3'}),), outgoing_phis={'$phi18.1': '$16for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 18: ('$phi16.0', '$16for_iter.2')})
2024-09-04 18:31:47,176 - block_infos State(pc_initial=18 nstack_initial=2):
AdaptBlockInfo(insts=((18, {'value': '$phi18.1'}), (20, {'res': '$c20.2'}), (22, {'res': '$v22.3'}), (24, {'item': '$v22.3', 'res': '$24load_method.4'}), (26, {'func': '$24load_method.4', 'args': [], 'res': '$26call_method.5'}), (28, {'lhs': '$c20.2', 'rhs': '$26call_method.5', 'res': '$28inplace_add.6'}), (30, {'value': '$28inplace_add.6'}), (32, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$phi18.0',)})
2024-09-04 18:31:47,176 - block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$c34.0'}), (36, {'res': '$a36.1'}), (38, {'item': '$a36.1', 'res': '$38load_attr.2'}), (40, {'lhs': '$c34.0', 'rhs': '$38load_attr.2', 'res': '$40binary_true_divide.3'}), (42, {'retval': '$40binary_true_divide.3', 'castval': '$42return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:47,176 - label 0:
    a = arg(0, name=a)                       ['a']
    c = freevar(acc_init: 0.0)               ['c']
    $6load_global.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$6load_global.1']
    $8load_method.2 = getattr(value=$6load_global.1, attr=nditer) ['$6load_global.1', '$8load_method.2']
    $12call_method.4 = call $8load_method.2(a, func=$8load_method.2, args=[Var(a, arraymath.py:437)], kws=(), vararg=None, varkwarg=None, target=None) ['$12call_method.4', '$8load_method.2', 'a']
    $14get_iter.5 = getiter(value=$12call_method.4) ['$12call_method.4', '$14get_iter.5']
    $phi16.0 = $14get_iter.5                 ['$14get_iter.5', '$phi16.0']
    jump 16                                  []
label 16:
    $16for_iter.1 = iternext(value=$phi16.0) ['$16for_iter.1', '$phi16.0']
    $16for_iter.2 = pair_first(value=$16for_iter.1) ['$16for_iter.1', '$16for_iter.2']
    $16for_iter.3 = pair_second(value=$16for_iter.1) ['$16for_iter.1', '$16for_iter.3']
    $phi18.1 = $16for_iter.2                 ['$16for_iter.2', '$phi18.1']
    branch $16for_iter.3, 18, 34             ['$16for_iter.3']
label 18:
    v = $phi18.1                             ['$phi18.1', 'v']
    $24load_method.4 = getattr(value=v, attr=item) ['$24load_method.4', 'v']
    $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$24load_method.4', '$26call_method.5']
    $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined) ['$26call_method.5', '$28inplace_add.6', 'c']
    c = $28inplace_add.6                     ['$28inplace_add.6', 'c']
    jump 16                                  []
label 34:
    $38load_attr.2 = getattr(value=a, attr=size) ['$38load_attr.2', 'a']
    $40binary_true_divide.3 = c / $38load_attr.2 ['$38load_attr.2', '$40binary_true_divide.3', 'c']
    $42return_value.4 = cast(value=$40binary_true_divide.3) ['$40binary_true_divide.3', '$42return_value.4']
    return $42return_value.4                 ['$42return_value.4']

2024-09-04 18:31:47,192 - ==== SSA block analysis pass on 0
2024-09-04 18:31:47,192 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243135967A0>
2024-09-04 18:31:47,192 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:47,192 - on stmt: c = freevar(acc_init: 0.0)
2024-09-04 18:31:47,192 - on stmt: $6load_global.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:47,192 - on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
2024-09-04 18:31:47,192 - on stmt: $12call_method.4 = call $8load_method.2(a, func=$8load_method.2, args=[Var(a, arraymath.py:437)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,192 - on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
2024-09-04 18:31:47,192 - on stmt: $phi16.0 = $14get_iter.5
2024-09-04 18:31:47,192 - on stmt: jump 16
2024-09-04 18:31:47,192 - ==== SSA block analysis pass on 16
2024-09-04 18:31:47,192 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243135967A0>
2024-09-04 18:31:47,192 - on stmt: $16for_iter.1 = iternext(value=$phi16.0)
2024-09-04 18:31:47,192 - on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
2024-09-04 18:31:47,192 - on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
2024-09-04 18:31:47,192 - on stmt: $phi18.1 = $16for_iter.2
2024-09-04 18:31:47,192 - on stmt: branch $16for_iter.3, 18, 34
2024-09-04 18:31:47,192 - ==== SSA block analysis pass on 18
2024-09-04 18:31:47,192 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243135967A0>
2024-09-04 18:31:47,192 - on stmt: v = $phi18.1
2024-09-04 18:31:47,192 - on stmt: $24load_method.4 = getattr(value=v, attr=item)
2024-09-04 18:31:47,192 - on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,192 - on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:47,192 - on stmt: c = $28inplace_add.6
2024-09-04 18:31:47,192 - on stmt: jump 16
2024-09-04 18:31:47,192 - ==== SSA block analysis pass on 34
2024-09-04 18:31:47,192 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243135967A0>
2024-09-04 18:31:47,192 - on stmt: $38load_attr.2 = getattr(value=a, attr=size)
2024-09-04 18:31:47,192 - on stmt: $40binary_true_divide.3 = c / $38load_attr.2
2024-09-04 18:31:47,192 - on stmt: $42return_value.4 = cast(value=$40binary_true_divide.3)
2024-09-04 18:31:47,192 - on stmt: return $42return_value.4
2024-09-04 18:31:47,192 - defs defaultdict(<class 'list'>,
            {'$12call_method.4': [(<numba.core.ir.Assign object at 0x00000243135E1CF0>,
                                   0)],
             '$14get_iter.5': [(<numba.core.ir.Assign object at 0x00000243135E1F00>,
                                0)],
             '$16for_iter.1': [(<numba.core.ir.Assign object at 0x00000243135E2CB0>,
                                16)],
             '$16for_iter.2': [(<numba.core.ir.Assign object at 0x00000243135E03A0>,
                                16)],
             '$16for_iter.3': [(<numba.core.ir.Assign object at 0x00000243135E0130>,
                                16)],
             '$24load_method.4': [(<numba.core.ir.Assign object at 0x00000243135E2650>,
                                   18)],
             '$26call_method.5': [(<numba.core.ir.Assign object at 0x00000243135E1060>,
                                   18)],
             '$28inplace_add.6': [(<numba.core.ir.Assign object at 0x00000243135E1C00>,
                                   18)],
             '$38load_attr.2': [(<numba.core.ir.Assign object at 0x00000243135E2110>,
                                 34)],
             '$40binary_true_divide.3': [(<numba.core.ir.Assign object at 0x00000243135E0430>,
                                          34)],
             '$42return_value.4': [(<numba.core.ir.Assign object at 0x00000243135E0A00>,
                                    34)],
             '$6load_global.1': [(<numba.core.ir.Assign object at 0x00000243135E1450>,
                                  0)],
             '$8load_method.2': [(<numba.core.ir.Assign object at 0x00000243135E15A0>,
                                  0)],
             '$phi16.0': [(<numba.core.ir.Assign object at 0x00000243135E0C10>,
                           0)],
             '$phi18.1': [(<numba.core.ir.Assign object at 0x00000243135E2500>,
                           16)],
             'a': [(<numba.core.ir.Assign object at 0x00000243135E2620>, 0)],
             'c': [(<numba.core.ir.Assign object at 0x00000243135E0880>, 0),
                   (<numba.core.ir.Assign object at 0x00000243135E2800>, 18)],
             'v': [(<numba.core.ir.Assign object at 0x00000243135E05B0>, 18)]})
2024-09-04 18:31:47,192 - SSA violators <numba.core.utils.OrderedSet object at 0x00000243135967A0>
2024-09-04 18:31:47,192 - Fix SSA violator on var c
2024-09-04 18:31:47,192 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:47,192 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313596920>
2024-09-04 18:31:47,192 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:47,192 - on stmt: c = freevar(acc_init: 0.0)
2024-09-04 18:31:47,192 - first assign: c
2024-09-04 18:31:47,192 - replaced with: c = freevar(acc_init: 0.0)
2024-09-04 18:31:47,192 - on stmt: $6load_global.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:47,192 - on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
2024-09-04 18:31:47,192 - on stmt: $12call_method.4 = call $8load_method.2(a, func=$8load_method.2, args=[Var(a, arraymath.py:437)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,192 - on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
2024-09-04 18:31:47,192 - on stmt: $phi16.0 = $14get_iter.5
2024-09-04 18:31:47,192 - on stmt: jump 16
2024-09-04 18:31:47,192 - ==== SSA block rewrite pass on 16
2024-09-04 18:31:47,192 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313596920>
2024-09-04 18:31:47,192 - on stmt: $16for_iter.1 = iternext(value=$phi16.0)
2024-09-04 18:31:47,192 - on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
2024-09-04 18:31:47,200 - on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
2024-09-04 18:31:47,200 - on stmt: $phi18.1 = $16for_iter.2
2024-09-04 18:31:47,200 - on stmt: branch $16for_iter.3, 18, 34
2024-09-04 18:31:47,200 - ==== SSA block rewrite pass on 18
2024-09-04 18:31:47,200 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313596920>
2024-09-04 18:31:47,200 - on stmt: v = $phi18.1
2024-09-04 18:31:47,200 - on stmt: $24load_method.4 = getattr(value=v, attr=item)
2024-09-04 18:31:47,200 - on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,200 - on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:47,200 - on stmt: c = $28inplace_add.6
2024-09-04 18:31:47,200 - replaced with: c.1 = $28inplace_add.6
2024-09-04 18:31:47,200 - on stmt: jump 16
2024-09-04 18:31:47,200 - ==== SSA block rewrite pass on 34
2024-09-04 18:31:47,200 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313596920>
2024-09-04 18:31:47,200 - on stmt: $38load_attr.2 = getattr(value=a, attr=size)
2024-09-04 18:31:47,200 - on stmt: $40binary_true_divide.3 = c / $38load_attr.2
2024-09-04 18:31:47,200 - on stmt: $42return_value.4 = cast(value=$40binary_true_divide.3)
2024-09-04 18:31:47,200 - on stmt: return $42return_value.4
2024-09-04 18:31:47,200 - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000024313596B60>],
             18: [<numba.core.ir.Assign object at 0x0000024313595510>]})
2024-09-04 18:31:47,200 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:47,200 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313596920>
2024-09-04 18:31:47,200 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:47,200 - on stmt: c = freevar(acc_init: 0.0)
2024-09-04 18:31:47,202 - on stmt: $6load_global.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:47,202 - on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
2024-09-04 18:31:47,202 - on stmt: $12call_method.4 = call $8load_method.2(a, func=$8load_method.2, args=[Var(a, arraymath.py:437)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,202 - on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
2024-09-04 18:31:47,202 - on stmt: $phi16.0 = $14get_iter.5
2024-09-04 18:31:47,202 - on stmt: jump 16
2024-09-04 18:31:47,202 - ==== SSA block rewrite pass on 16
2024-09-04 18:31:47,202 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313596920>
2024-09-04 18:31:47,202 - on stmt: $16for_iter.1 = iternext(value=$phi16.0)
2024-09-04 18:31:47,202 - on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
2024-09-04 18:31:47,202 - on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
2024-09-04 18:31:47,202 - on stmt: $phi18.1 = $16for_iter.2
2024-09-04 18:31:47,202 - on stmt: branch $16for_iter.3, 18, 34
2024-09-04 18:31:47,202 - ==== SSA block rewrite pass on 18
2024-09-04 18:31:47,202 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313596920>
2024-09-04 18:31:47,202 - on stmt: v = $phi18.1
2024-09-04 18:31:47,202 - on stmt: $24load_method.4 = getattr(value=v, attr=item)
2024-09-04 18:31:47,202 - on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,202 - on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:47,202 - find_def var='c' stmt=$28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:47,202 - find_def_from_top label 18
2024-09-04 18:31:47,202 - idom 16 from label 18
2024-09-04 18:31:47,202 - find_def_from_bottom label 16
2024-09-04 18:31:47,202 - find_def_from_top label 16
2024-09-04 18:31:47,202 - insert phi node c.2 = phi(incoming_values=[], incoming_blocks=[]) at 16
2024-09-04 18:31:47,202 - find_def_from_bottom label 0
2024-09-04 18:31:47,202 - incoming_def c = freevar(acc_init: 0.0)
2024-09-04 18:31:47,202 - find_def_from_bottom label 18
2024-09-04 18:31:47,202 - incoming_def c.1 = $28inplace_add.6
2024-09-04 18:31:47,202 - replaced with: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c.2, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:47,202 - on stmt: c.1 = $28inplace_add.6
2024-09-04 18:31:47,202 - on stmt: jump 16
2024-09-04 18:31:47,202 - ==== SSA block rewrite pass on 34
2024-09-04 18:31:47,202 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313596920>
2024-09-04 18:31:47,202 - on stmt: $38load_attr.2 = getattr(value=a, attr=size)
2024-09-04 18:31:47,202 - on stmt: $40binary_true_divide.3 = c / $38load_attr.2
2024-09-04 18:31:47,202 - find_def var='c' stmt=$40binary_true_divide.3 = c / $38load_attr.2
2024-09-04 18:31:47,202 - find_def_from_top label 34
2024-09-04 18:31:47,202 - idom 16 from label 34
2024-09-04 18:31:47,202 - find_def_from_bottom label 16
2024-09-04 18:31:47,202 - replaced with: $40binary_true_divide.3 = c.2 / $38load_attr.2
2024-09-04 18:31:47,202 - on stmt: $42return_value.4 = cast(value=$40binary_true_divide.3)
2024-09-04 18:31:47,202 - on stmt: return $42return_value.4
2024-09-04 18:31:47,825 - bytecode dump:
>          0	NOP(arg=None, lineno=1209)
           2	LOAD_FAST(arg=0, lineno=1221)
           4	LOAD_CONST(arg=1, lineno=1221)
           6	BINARY_SUBSCR(arg=None, lineno=1221)
           8	LOAD_GLOBAL(arg=0, lineno=1221)
          10	LOAD_METHOD(arg=1, lineno=1221)
          12	LOAD_FAST(arg=0, lineno=1221)
          14	LOAD_CONST(arg=2, lineno=1221)
          16	LOAD_GLOBAL(arg=2, lineno=1221)
          18	LOAD_FAST(arg=2, lineno=1221)
          20	LOAD_FAST(arg=0, lineno=1221)
          22	LOAD_ATTR(arg=3, lineno=1221)
          24	LOAD_CONST(arg=1, lineno=1221)
          26	BINARY_SUBSCR(arg=None, lineno=1221)
          28	CALL_FUNCTION(arg=2, lineno=1221)
          30	BUILD_SLICE(arg=2, lineno=1221)
          32	BINARY_SUBSCR(arg=None, lineno=1221)
          34	CALL_METHOD(arg=1, lineno=1221)
          36	COMPARE_OP(arg=5, lineno=1221)
          38	LOAD_FAST(arg=7, lineno=1221)
          40	LOAD_CONST(arg=1, lineno=1221)
          42	STORE_SUBSCR(arg=None, lineno=1221)
          44	LOAD_FAST(arg=7, lineno=1222)
          46	LOAD_CONST(arg=1, lineno=1222)
          48	DUP_TOP_TWO(arg=None, lineno=1222)
          50	BINARY_SUBSCR(arg=None, lineno=1222)
          52	LOAD_FAST(arg=0, lineno=1222)
          54	LOAD_CONST(arg=1, lineno=1222)
          56	BINARY_SUBSCR(arg=None, lineno=1222)
          58	LOAD_GLOBAL(arg=0, lineno=1222)
          60	LOAD_METHOD(arg=4, lineno=1222)
          62	LOAD_FAST(arg=0, lineno=1222)
          64	LOAD_CONST(arg=2, lineno=1222)
          66	LOAD_GLOBAL(arg=2, lineno=1222)
          68	LOAD_FAST(arg=4, lineno=1222)
          70	LOAD_FAST(arg=0, lineno=1222)
          72	LOAD_ATTR(arg=3, lineno=1222)
          74	LOAD_CONST(arg=1, lineno=1222)
          76	BINARY_SUBSCR(arg=None, lineno=1222)
          78	CALL_FUNCTION(arg=2, lineno=1222)
          80	BUILD_SLICE(arg=2, lineno=1222)
          82	BINARY_SUBSCR(arg=None, lineno=1222)
          84	CALL_METHOD(arg=1, lineno=1222)
          86	LOAD_FAST(arg=5, lineno=1222)
          88	BINARY_ADD(arg=None, lineno=1222)
          90	COMPARE_OP(arg=5, lineno=1222)
          92	INPLACE_AND(arg=None, lineno=1222)
          94	ROT_THREE(arg=None, lineno=1222)
          96	STORE_SUBSCR(arg=None, lineno=1222)
          98	LOAD_FAST(arg=7, lineno=1224)
         100	LOAD_CONST(arg=1, lineno=1224)
         102	BINARY_SUBSCR(arg=None, lineno=1224)
         104	POP_JUMP_IF_FALSE(arg=59, lineno=1224)
         106	LOAD_FAST(arg=6, lineno=1225)
         108	LOAD_CONST(arg=3, lineno=1225)
         110	BINARY_ADD(arg=None, lineno=1225)
         112	STORE_FAST(arg=8, lineno=1225)
         114	JUMP_FORWARD(arg=2, lineno=1225)
>        116	LOAD_CONST(arg=3, lineno=1227)
         118	STORE_FAST(arg=8, lineno=1227)
>        120	LOAD_FAST(arg=8, lineno=1229)
         122	LOAD_FAST(arg=0, lineno=1229)
         124	LOAD_ATTR(arg=3, lineno=1229)
         126	LOAD_CONST(arg=1, lineno=1229)
         128	BINARY_SUBSCR(arg=None, lineno=1229)
         130	COMPARE_OP(arg=0, lineno=1229)
         132	POP_JUMP_IF_FALSE(arg=167, lineno=1229)
>        134	LOAD_GLOBAL(arg=0, lineno=1230)
         136	LOAD_METHOD(arg=1, lineno=1230)
         138	LOAD_FAST(arg=0, lineno=1230)
         140	LOAD_GLOBAL(arg=1, lineno=1230)
         142	LOAD_CONST(arg=1, lineno=1230)
         144	LOAD_FAST(arg=8, lineno=1230)
         146	LOAD_FAST(arg=1, lineno=1230)
         148	BINARY_SUBTRACT(arg=None, lineno=1230)
         150	CALL_FUNCTION(arg=2, lineno=1230)
         152	LOAD_GLOBAL(arg=2, lineno=1230)
         154	LOAD_FAST(arg=8, lineno=1230)
         156	LOAD_FAST(arg=2, lineno=1230)
         158	BINARY_ADD(arg=None, lineno=1230)
         160	LOAD_FAST(arg=0, lineno=1230)
         162	LOAD_ATTR(arg=3, lineno=1230)
         164	LOAD_CONST(arg=1, lineno=1230)
         166	BINARY_SUBSCR(arg=None, lineno=1230)
         168	CALL_FUNCTION(arg=2, lineno=1230)
         170	BUILD_SLICE(arg=2, lineno=1230)
         172	BINARY_SUBSCR(arg=None, lineno=1230)
         174	CALL_METHOD(arg=1, lineno=1230)
         176	STORE_FAST(arg=9, lineno=1230)
         178	LOAD_FAST(arg=0, lineno=1233)
         180	LOAD_FAST(arg=8, lineno=1233)
         182	BINARY_SUBSCR(arg=None, lineno=1233)
         184	LOAD_FAST(arg=9, lineno=1233)
         186	COMPARE_OP(arg=2, lineno=1233)
         188	LOAD_FAST(arg=7, lineno=1233)
         190	LOAD_FAST(arg=8, lineno=1233)
         192	STORE_SUBSCR(arg=None, lineno=1233)
         194	LOAD_FAST(arg=7, lineno=1235)
         196	LOAD_FAST(arg=8, lineno=1235)
         198	BINARY_SUBSCR(arg=None, lineno=1235)
         200	POP_JUMP_IF_TRUE(arg=107, lineno=1235)
         202	LOAD_FAST(arg=8, lineno=1236)
         204	LOAD_CONST(arg=3, lineno=1236)
         206	INPLACE_ADD(arg=None, lineno=1236)
         208	STORE_FAST(arg=8, lineno=1236)
         210	JUMP_ABSOLUTE(arg=61, lineno=1237)
>        212	LOAD_GLOBAL(arg=0, lineno=1239)
         214	LOAD_METHOD(arg=4, lineno=1239)
         216	LOAD_FAST(arg=0, lineno=1239)
         218	LOAD_GLOBAL(arg=1, lineno=1239)
         220	LOAD_CONST(arg=1, lineno=1239)
         222	LOAD_FAST(arg=8, lineno=1239)
         224	LOAD_FAST(arg=3, lineno=1239)
         226	BINARY_SUBTRACT(arg=None, lineno=1239)
         228	CALL_FUNCTION(arg=2, lineno=1239)
         230	LOAD_GLOBAL(arg=2, lineno=1239)
         232	LOAD_FAST(arg=8, lineno=1239)
         234	LOAD_FAST(arg=4, lineno=1239)
         236	BINARY_ADD(arg=None, lineno=1239)
         238	LOAD_FAST(arg=0, lineno=1239)
         240	LOAD_ATTR(arg=3, lineno=1239)
         242	LOAD_CONST(arg=1, lineno=1239)
         244	BINARY_SUBSCR(arg=None, lineno=1239)
         246	CALL_FUNCTION(arg=2, lineno=1239)
         248	BUILD_SLICE(arg=2, lineno=1239)
         250	BINARY_SUBSCR(arg=None, lineno=1239)
         252	CALL_METHOD(arg=1, lineno=1239)
         254	STORE_FAST(arg=10, lineno=1239)
         256	LOAD_FAST(arg=7, lineno=1240)
         258	LOAD_FAST(arg=8, lineno=1240)
         260	DUP_TOP_TWO(arg=None, lineno=1240)
         262	BINARY_SUBSCR(arg=None, lineno=1240)
         264	LOAD_FAST(arg=0, lineno=1240)
         266	LOAD_FAST(arg=8, lineno=1240)
         268	BINARY_SUBSCR(arg=None, lineno=1240)
         270	LOAD_FAST(arg=10, lineno=1240)
         272	LOAD_FAST(arg=5, lineno=1240)
         274	BINARY_ADD(arg=None, lineno=1240)
         276	COMPARE_OP(arg=5, lineno=1240)
         278	INPLACE_AND(arg=None, lineno=1240)
         280	ROT_THREE(arg=None, lineno=1240)
         282	STORE_SUBSCR(arg=None, lineno=1240)
         284	LOAD_FAST(arg=7, lineno=1242)
         286	LOAD_FAST(arg=8, lineno=1242)
         288	BINARY_SUBSCR(arg=None, lineno=1242)
         290	POP_JUMP_IF_TRUE(arg=152, lineno=1242)
         292	LOAD_FAST(arg=8, lineno=1243)
         294	LOAD_CONST(arg=3, lineno=1243)
         296	INPLACE_ADD(arg=None, lineno=1243)
         298	STORE_FAST(arg=8, lineno=1243)
         300	JUMP_ABSOLUTE(arg=61, lineno=1244)
>        302	LOAD_FAST(arg=8, lineno=1247)
         304	LOAD_FAST(arg=6, lineno=1247)
         306	LOAD_CONST(arg=3, lineno=1247)
         308	BINARY_ADD(arg=None, lineno=1247)
         310	INPLACE_ADD(arg=None, lineno=1247)
         312	STORE_FAST(arg=8, lineno=1247)
         314	LOAD_FAST(arg=8, lineno=1229)
         316	LOAD_FAST(arg=0, lineno=1229)
         318	LOAD_ATTR(arg=3, lineno=1229)
         320	LOAD_CONST(arg=1, lineno=1229)
         322	BINARY_SUBSCR(arg=None, lineno=1229)
         324	COMPARE_OP(arg=0, lineno=1229)
         326	POP_JUMP_IF_TRUE(arg=68, lineno=1229)
         328	LOAD_CONST(arg=2, lineno=1229)
         330	RETURN_VALUE(arg=None, lineno=1229)
>        332	LOAD_CONST(arg=2, lineno=1229)
         334	RETURN_VALUE(arg=None, lineno=1229)
2024-09-04 18:31:47,826 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:47,826 - stack: []
2024-09-04 18:31:47,826 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:47,826 - dispatch pc=0, inst=NOP(arg=None, lineno=1209)
2024-09-04 18:31:47,826 - stack []
2024-09-04 18:31:47,826 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1221)
2024-09-04 18:31:47,826 - stack []
2024-09-04 18:31:47,826 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1221)
2024-09-04 18:31:47,826 - stack ['$x2.0']
2024-09-04 18:31:47,826 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1221)
2024-09-04 18:31:47,827 - stack ['$x2.0', '$const4.1']
2024-09-04 18:31:47,827 - dispatch pc=8, inst=LOAD_GLOBAL(arg=0, lineno=1221)
2024-09-04 18:31:47,827 - stack ['$6binary_subscr.2']
2024-09-04 18:31:47,827 - dispatch pc=10, inst=LOAD_METHOD(arg=1, lineno=1221)
2024-09-04 18:31:47,827 - stack ['$6binary_subscr.2', '$8load_global.3']
2024-09-04 18:31:47,827 - dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=1221)
2024-09-04 18:31:47,827 - stack ['$6binary_subscr.2', '$10load_method.4']
2024-09-04 18:31:47,827 - dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=1221)
2024-09-04 18:31:47,827 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5']
2024-09-04 18:31:47,827 - dispatch pc=16, inst=LOAD_GLOBAL(arg=2, lineno=1221)
2024-09-04 18:31:47,827 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6']
2024-09-04 18:31:47,827 - dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=1221)
2024-09-04 18:31:47,828 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7']
2024-09-04 18:31:47,828 - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=1221)
2024-09-04 18:31:47,828 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8']
2024-09-04 18:31:47,828 - dispatch pc=22, inst=LOAD_ATTR(arg=3, lineno=1221)
2024-09-04 18:31:47,828 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8', '$x20.9']
2024-09-04 18:31:47,828 - dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=1221)
2024-09-04 18:31:47,828 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8', '$22load_attr.10']
2024-09-04 18:31:47,828 - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1221)
2024-09-04 18:31:47,828 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8', '$22load_attr.10', '$const24.11']
2024-09-04 18:31:47,828 - dispatch pc=28, inst=CALL_FUNCTION(arg=2, lineno=1221)
2024-09-04 18:31:47,828 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8', '$26binary_subscr.12']
2024-09-04 18:31:47,829 - dispatch pc=30, inst=BUILD_SLICE(arg=2, lineno=1221)
2024-09-04 18:31:47,829 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$28call_function.13']
2024-09-04 18:31:47,829 - dispatch pc=32, inst=BINARY_SUBSCR(arg=None, lineno=1221)
2024-09-04 18:31:47,829 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$30build_slice.15']
2024-09-04 18:31:47,829 - dispatch pc=34, inst=CALL_METHOD(arg=1, lineno=1221)
2024-09-04 18:31:47,829 - stack ['$6binary_subscr.2', '$10load_method.4', '$32binary_subscr.16']
2024-09-04 18:31:47,829 - dispatch pc=36, inst=COMPARE_OP(arg=5, lineno=1221)
2024-09-04 18:31:47,829 - stack ['$6binary_subscr.2', '$34call_method.17']
2024-09-04 18:31:47,829 - dispatch pc=38, inst=LOAD_FAST(arg=7, lineno=1221)
2024-09-04 18:31:47,829 - stack ['$36compare_op.18']
2024-09-04 18:31:47,829 - dispatch pc=40, inst=LOAD_CONST(arg=1, lineno=1221)
2024-09-04 18:31:47,830 - stack ['$36compare_op.18', '$peaks38.19']
2024-09-04 18:31:47,830 - dispatch pc=42, inst=STORE_SUBSCR(arg=None, lineno=1221)
2024-09-04 18:31:47,830 - stack ['$36compare_op.18', '$peaks38.19', '$const40.20']
2024-09-04 18:31:47,830 - dispatch pc=44, inst=LOAD_FAST(arg=7, lineno=1222)
2024-09-04 18:31:47,830 - stack []
2024-09-04 18:31:47,830 - dispatch pc=46, inst=LOAD_CONST(arg=1, lineno=1222)
2024-09-04 18:31:47,830 - stack ['$peaks44.21']
2024-09-04 18:31:47,830 - dispatch pc=48, inst=DUP_TOP_TWO(arg=None, lineno=1222)
2024-09-04 18:31:47,830 - stack ['$peaks44.21', '$const46.22']
2024-09-04 18:31:47,830 - dispatch pc=50, inst=BINARY_SUBSCR(arg=None, lineno=1222)
2024-09-04 18:31:47,830 - stack ['$peaks44.21', '$const46.22', '$48dup_top_two.23', '$48dup_top_two.24']
2024-09-04 18:31:47,831 - dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=1222)
2024-09-04 18:31:47,831 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25']
2024-09-04 18:31:47,831 - dispatch pc=54, inst=LOAD_CONST(arg=1, lineno=1222)
2024-09-04 18:31:47,831 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$x52.26']
2024-09-04 18:31:47,831 - dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=1222)
2024-09-04 18:31:47,831 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$x52.26', '$const54.27']
2024-09-04 18:31:47,831 - dispatch pc=58, inst=LOAD_GLOBAL(arg=0, lineno=1222)
2024-09-04 18:31:47,831 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28']
2024-09-04 18:31:47,831 - dispatch pc=60, inst=LOAD_METHOD(arg=4, lineno=1222)
2024-09-04 18:31:47,831 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$58load_global.29']
2024-09-04 18:31:47,831 - dispatch pc=62, inst=LOAD_FAST(arg=0, lineno=1222)
2024-09-04 18:31:47,831 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30']
2024-09-04 18:31:47,832 - dispatch pc=64, inst=LOAD_CONST(arg=2, lineno=1222)
2024-09-04 18:31:47,832 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31']
2024-09-04 18:31:47,832 - dispatch pc=66, inst=LOAD_GLOBAL(arg=2, lineno=1222)
2024-09-04 18:31:47,832 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32']
2024-09-04 18:31:47,832 - dispatch pc=68, inst=LOAD_FAST(arg=4, lineno=1222)
2024-09-04 18:31:47,832 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33']
2024-09-04 18:31:47,832 - dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1222)
2024-09-04 18:31:47,832 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34']
2024-09-04 18:31:47,832 - dispatch pc=72, inst=LOAD_ATTR(arg=3, lineno=1222)
2024-09-04 18:31:47,832 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34', '$x70.35']
2024-09-04 18:31:47,832 - dispatch pc=74, inst=LOAD_CONST(arg=1, lineno=1222)
2024-09-04 18:31:47,833 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34', '$72load_attr.36']
2024-09-04 18:31:47,833 - dispatch pc=76, inst=BINARY_SUBSCR(arg=None, lineno=1222)
2024-09-04 18:31:47,833 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34', '$72load_attr.36', '$const74.37']
2024-09-04 18:31:47,833 - dispatch pc=78, inst=CALL_FUNCTION(arg=2, lineno=1222)
2024-09-04 18:31:47,833 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34', '$76binary_subscr.38']
2024-09-04 18:31:47,833 - dispatch pc=80, inst=BUILD_SLICE(arg=2, lineno=1222)
2024-09-04 18:31:47,833 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$78call_function.39']
2024-09-04 18:31:47,833 - dispatch pc=82, inst=BINARY_SUBSCR(arg=None, lineno=1222)
2024-09-04 18:31:47,833 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$80build_slice.41']
2024-09-04 18:31:47,834 - dispatch pc=84, inst=CALL_METHOD(arg=1, lineno=1222)
2024-09-04 18:31:47,834 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$82binary_subscr.42']
2024-09-04 18:31:47,834 - dispatch pc=86, inst=LOAD_FAST(arg=5, lineno=1222)
2024-09-04 18:31:47,834 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$84call_method.43']
2024-09-04 18:31:47,834 - dispatch pc=88, inst=BINARY_ADD(arg=None, lineno=1222)
2024-09-04 18:31:47,834 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$84call_method.43', '$delta86.44']
2024-09-04 18:31:47,834 - dispatch pc=90, inst=COMPARE_OP(arg=5, lineno=1222)
2024-09-04 18:31:47,834 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$88binary_add.45']
2024-09-04 18:31:47,834 - dispatch pc=92, inst=INPLACE_AND(arg=None, lineno=1222)
2024-09-04 18:31:47,834 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$90compare_op.46']
2024-09-04 18:31:47,834 - dispatch pc=94, inst=ROT_THREE(arg=None, lineno=1222)
2024-09-04 18:31:47,835 - stack ['$peaks44.21', '$const46.22', '$92inplace_and.47']
2024-09-04 18:31:47,835 - dispatch pc=96, inst=STORE_SUBSCR(arg=None, lineno=1222)
2024-09-04 18:31:47,835 - stack ['$92inplace_and.47', '$peaks44.21', '$const46.22']
2024-09-04 18:31:47,835 - dispatch pc=98, inst=LOAD_FAST(arg=7, lineno=1224)
2024-09-04 18:31:47,835 - stack []
2024-09-04 18:31:47,835 - dispatch pc=100, inst=LOAD_CONST(arg=1, lineno=1224)
2024-09-04 18:31:47,835 - stack ['$peaks98.48']
2024-09-04 18:31:47,835 - dispatch pc=102, inst=BINARY_SUBSCR(arg=None, lineno=1224)
2024-09-04 18:31:47,835 - stack ['$peaks98.48', '$const100.49']
2024-09-04 18:31:47,835 - dispatch pc=104, inst=POP_JUMP_IF_FALSE(arg=59, lineno=1224)
2024-09-04 18:31:47,835 - stack ['$102binary_subscr.50']
2024-09-04 18:31:47,836 - end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0), Edge(pc=116, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:47,836 - pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=116 nstack_initial=0)])
2024-09-04 18:31:47,836 - stack: []
2024-09-04 18:31:47,836 - state.pc_initial: State(pc_initial=106 nstack_initial=0)
2024-09-04 18:31:47,836 - dispatch pc=106, inst=LOAD_FAST(arg=6, lineno=1225)
2024-09-04 18:31:47,836 - stack []
2024-09-04 18:31:47,836 - dispatch pc=108, inst=LOAD_CONST(arg=3, lineno=1225)
2024-09-04 18:31:47,836 - stack ['$wait106.0']
2024-09-04 18:31:47,836 - dispatch pc=110, inst=BINARY_ADD(arg=None, lineno=1225)
2024-09-04 18:31:47,836 - stack ['$wait106.0', '$const108.1']
2024-09-04 18:31:47,836 - dispatch pc=112, inst=STORE_FAST(arg=8, lineno=1225)
2024-09-04 18:31:47,836 - stack ['$110binary_add.2']
2024-09-04 18:31:47,837 - dispatch pc=114, inst=JUMP_FORWARD(arg=2, lineno=1225)
2024-09-04 18:31:47,837 - stack []
2024-09-04 18:31:47,837 - end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:47,837 - pending: deque([State(pc_initial=116 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
2024-09-04 18:31:47,837 - stack: []
2024-09-04 18:31:47,837 - state.pc_initial: State(pc_initial=116 nstack_initial=0)
2024-09-04 18:31:47,837 - dispatch pc=116, inst=LOAD_CONST(arg=3, lineno=1227)
2024-09-04 18:31:47,837 - stack []
2024-09-04 18:31:47,837 - dispatch pc=118, inst=STORE_FAST(arg=8, lineno=1227)
2024-09-04 18:31:47,837 - stack ['$const116.0']
2024-09-04 18:31:47,837 - end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:47,838 - pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
2024-09-04 18:31:47,838 - stack: []
2024-09-04 18:31:47,838 - state.pc_initial: State(pc_initial=120 nstack_initial=0)
2024-09-04 18:31:47,838 - dispatch pc=120, inst=LOAD_FAST(arg=8, lineno=1229)
2024-09-04 18:31:47,838 - stack []
2024-09-04 18:31:47,838 - dispatch pc=122, inst=LOAD_FAST(arg=0, lineno=1229)
2024-09-04 18:31:47,838 - stack ['$n120.0']
2024-09-04 18:31:47,838 - dispatch pc=124, inst=LOAD_ATTR(arg=3, lineno=1229)
2024-09-04 18:31:47,838 - stack ['$n120.0', '$x122.1']
2024-09-04 18:31:47,838 - dispatch pc=126, inst=LOAD_CONST(arg=1, lineno=1229)
2024-09-04 18:31:47,838 - stack ['$n120.0', '$124load_attr.2']
2024-09-04 18:31:47,838 - dispatch pc=128, inst=BINARY_SUBSCR(arg=None, lineno=1229)
2024-09-04 18:31:47,839 - stack ['$n120.0', '$124load_attr.2', '$const126.3']
2024-09-04 18:31:47,839 - dispatch pc=130, inst=COMPARE_OP(arg=0, lineno=1229)
2024-09-04 18:31:47,839 - stack ['$n120.0', '$128binary_subscr.4']
2024-09-04 18:31:47,839 - dispatch pc=132, inst=POP_JUMP_IF_FALSE(arg=167, lineno=1229)
2024-09-04 18:31:47,839 - stack ['$130compare_op.5']
2024-09-04 18:31:47,839 - end state. edges=[Edge(pc=134, stack=(), blockstack=(), npush=0), Edge(pc=332, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:47,839 - pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=134 nstack_initial=0), State(pc_initial=332 nstack_initial=0)])
2024-09-04 18:31:47,839 - pending: deque([State(pc_initial=134 nstack_initial=0), State(pc_initial=332 nstack_initial=0)])
2024-09-04 18:31:47,839 - stack: []
2024-09-04 18:31:47,839 - state.pc_initial: State(pc_initial=134 nstack_initial=0)
2024-09-04 18:31:47,839 - dispatch pc=134, inst=LOAD_GLOBAL(arg=0, lineno=1230)
2024-09-04 18:31:47,840 - stack []
2024-09-04 18:31:47,840 - dispatch pc=136, inst=LOAD_METHOD(arg=1, lineno=1230)
2024-09-04 18:31:47,840 - stack ['$134load_global.0']
2024-09-04 18:31:47,840 - dispatch pc=138, inst=LOAD_FAST(arg=0, lineno=1230)
2024-09-04 18:31:47,840 - stack ['$136load_method.1']
2024-09-04 18:31:47,840 - dispatch pc=140, inst=LOAD_GLOBAL(arg=1, lineno=1230)
2024-09-04 18:31:47,840 - stack ['$136load_method.1', '$x138.2']
2024-09-04 18:31:47,840 - dispatch pc=142, inst=LOAD_CONST(arg=1, lineno=1230)
2024-09-04 18:31:47,840 - stack ['$136load_method.1', '$x138.2', '$140load_global.3']
2024-09-04 18:31:47,840 - dispatch pc=144, inst=LOAD_FAST(arg=8, lineno=1230)
2024-09-04 18:31:47,841 - stack ['$136load_method.1', '$x138.2', '$140load_global.3', '$const142.4']
2024-09-04 18:31:47,841 - dispatch pc=146, inst=LOAD_FAST(arg=1, lineno=1230)
2024-09-04 18:31:47,841 - stack ['$136load_method.1', '$x138.2', '$140load_global.3', '$const142.4', '$n144.5']
2024-09-04 18:31:47,841 - dispatch pc=148, inst=BINARY_SUBTRACT(arg=None, lineno=1230)
2024-09-04 18:31:47,841 - stack ['$136load_method.1', '$x138.2', '$140load_global.3', '$const142.4', '$n144.5', '$pre_max146.6']
2024-09-04 18:31:47,841 - dispatch pc=150, inst=CALL_FUNCTION(arg=2, lineno=1230)
2024-09-04 18:31:47,841 - stack ['$136load_method.1', '$x138.2', '$140load_global.3', '$const142.4', '$148binary_subtract.7']
2024-09-04 18:31:47,841 - dispatch pc=152, inst=LOAD_GLOBAL(arg=2, lineno=1230)
2024-09-04 18:31:47,841 - stack ['$136load_method.1', '$x138.2', '$150call_function.8']
2024-09-04 18:31:47,841 - dispatch pc=154, inst=LOAD_FAST(arg=8, lineno=1230)
2024-09-04 18:31:47,841 - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9']
2024-09-04 18:31:47,841 - dispatch pc=156, inst=LOAD_FAST(arg=2, lineno=1230)
2024-09-04 18:31:47,841 - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$n154.10']
2024-09-04 18:31:47,842 - dispatch pc=158, inst=BINARY_ADD(arg=None, lineno=1230)
2024-09-04 18:31:47,842 - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$n154.10', '$post_max156.11']
2024-09-04 18:31:47,842 - dispatch pc=160, inst=LOAD_FAST(arg=0, lineno=1230)
2024-09-04 18:31:47,842 - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12']
2024-09-04 18:31:47,842 - dispatch pc=162, inst=LOAD_ATTR(arg=3, lineno=1230)
2024-09-04 18:31:47,842 - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12', '$x160.13']
2024-09-04 18:31:47,842 - dispatch pc=164, inst=LOAD_CONST(arg=1, lineno=1230)
2024-09-04 18:31:47,842 - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12', '$162load_attr.14']
2024-09-04 18:31:47,842 - dispatch pc=166, inst=BINARY_SUBSCR(arg=None, lineno=1230)
2024-09-04 18:31:47,842 - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12', '$162load_attr.14', '$const164.15']
2024-09-04 18:31:47,842 - dispatch pc=168, inst=CALL_FUNCTION(arg=2, lineno=1230)
2024-09-04 18:31:47,843 - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12', '$166binary_subscr.16']
2024-09-04 18:31:47,843 - dispatch pc=170, inst=BUILD_SLICE(arg=2, lineno=1230)
2024-09-04 18:31:47,843 - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$168call_function.17']
2024-09-04 18:31:47,843 - dispatch pc=172, inst=BINARY_SUBSCR(arg=None, lineno=1230)
2024-09-04 18:31:47,843 - stack ['$136load_method.1', '$x138.2', '$170build_slice.19']
2024-09-04 18:31:47,843 - dispatch pc=174, inst=CALL_METHOD(arg=1, lineno=1230)
2024-09-04 18:31:47,843 - stack ['$136load_method.1', '$172binary_subscr.20']
2024-09-04 18:31:47,843 - dispatch pc=176, inst=STORE_FAST(arg=9, lineno=1230)
2024-09-04 18:31:47,843 - stack ['$174call_method.21']
2024-09-04 18:31:47,843 - dispatch pc=178, inst=LOAD_FAST(arg=0, lineno=1233)
2024-09-04 18:31:47,843 - stack []
2024-09-04 18:31:47,844 - dispatch pc=180, inst=LOAD_FAST(arg=8, lineno=1233)
2024-09-04 18:31:47,844 - stack ['$x178.22']
2024-09-04 18:31:47,844 - dispatch pc=182, inst=BINARY_SUBSCR(arg=None, lineno=1233)
2024-09-04 18:31:47,844 - stack ['$x178.22', '$n180.23']
2024-09-04 18:31:47,844 - dispatch pc=184, inst=LOAD_FAST(arg=9, lineno=1233)
2024-09-04 18:31:47,844 - stack ['$182binary_subscr.24']
2024-09-04 18:31:47,844 - dispatch pc=186, inst=COMPARE_OP(arg=2, lineno=1233)
2024-09-04 18:31:47,844 - stack ['$182binary_subscr.24', '$maxn184.25']
2024-09-04 18:31:47,844 - dispatch pc=188, inst=LOAD_FAST(arg=7, lineno=1233)
2024-09-04 18:31:47,844 - stack ['$186compare_op.26']
2024-09-04 18:31:47,844 - dispatch pc=190, inst=LOAD_FAST(arg=8, lineno=1233)
2024-09-04 18:31:47,844 - stack ['$186compare_op.26', '$peaks188.27']
2024-09-04 18:31:47,845 - dispatch pc=192, inst=STORE_SUBSCR(arg=None, lineno=1233)
2024-09-04 18:31:47,845 - stack ['$186compare_op.26', '$peaks188.27', '$n190.28']
2024-09-04 18:31:47,845 - dispatch pc=194, inst=LOAD_FAST(arg=7, lineno=1235)
2024-09-04 18:31:47,845 - stack []
2024-09-04 18:31:47,845 - dispatch pc=196, inst=LOAD_FAST(arg=8, lineno=1235)
2024-09-04 18:31:47,845 - stack ['$peaks194.29']
2024-09-04 18:31:47,845 - dispatch pc=198, inst=BINARY_SUBSCR(arg=None, lineno=1235)
2024-09-04 18:31:47,845 - stack ['$peaks194.29', '$n196.30']
2024-09-04 18:31:47,845 - dispatch pc=200, inst=POP_JUMP_IF_TRUE(arg=107, lineno=1235)
2024-09-04 18:31:47,845 - stack ['$198binary_subscr.31']
2024-09-04 18:31:47,845 - end state. edges=[Edge(pc=202, stack=(), blockstack=(), npush=0), Edge(pc=212, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:47,846 - pending: deque([State(pc_initial=332 nstack_initial=0), State(pc_initial=202 nstack_initial=0), State(pc_initial=212 nstack_initial=0)])
2024-09-04 18:31:47,846 - stack: []
2024-09-04 18:31:47,846 - state.pc_initial: State(pc_initial=332 nstack_initial=0)
2024-09-04 18:31:47,846 - dispatch pc=332, inst=LOAD_CONST(arg=2, lineno=1229)
2024-09-04 18:31:47,846 - stack []
2024-09-04 18:31:47,846 - dispatch pc=334, inst=RETURN_VALUE(arg=None, lineno=1229)
2024-09-04 18:31:47,846 - stack ['$const332.0']
2024-09-04 18:31:47,846 - end state. edges=[]
2024-09-04 18:31:47,846 - pending: deque([State(pc_initial=202 nstack_initial=0), State(pc_initial=212 nstack_initial=0)])
2024-09-04 18:31:47,846 - stack: []
2024-09-04 18:31:47,846 - state.pc_initial: State(pc_initial=202 nstack_initial=0)
2024-09-04 18:31:47,846 - dispatch pc=202, inst=LOAD_FAST(arg=8, lineno=1236)
2024-09-04 18:31:47,847 - stack []
2024-09-04 18:31:47,848 - dispatch pc=204, inst=LOAD_CONST(arg=3, lineno=1236)
2024-09-04 18:31:47,848 - stack ['$n202.0']
2024-09-04 18:31:47,848 - dispatch pc=206, inst=INPLACE_ADD(arg=None, lineno=1236)
2024-09-04 18:31:47,848 - stack ['$n202.0', '$const204.1']
2024-09-04 18:31:47,848 - dispatch pc=208, inst=STORE_FAST(arg=8, lineno=1236)
2024-09-04 18:31:47,848 - stack ['$206inplace_add.2']
2024-09-04 18:31:47,848 - dispatch pc=210, inst=JUMP_ABSOLUTE(arg=61, lineno=1237)
2024-09-04 18:31:47,848 - stack []
2024-09-04 18:31:47,848 - end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:47,848 - pending: deque([State(pc_initial=212 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
2024-09-04 18:31:47,848 - stack: []
2024-09-04 18:31:47,848 - state.pc_initial: State(pc_initial=212 nstack_initial=0)
2024-09-04 18:31:47,849 - dispatch pc=212, inst=LOAD_GLOBAL(arg=0, lineno=1239)
2024-09-04 18:31:47,849 - stack []
2024-09-04 18:31:47,849 - dispatch pc=214, inst=LOAD_METHOD(arg=4, lineno=1239)
2024-09-04 18:31:47,849 - stack ['$212load_global.0']
2024-09-04 18:31:47,849 - dispatch pc=216, inst=LOAD_FAST(arg=0, lineno=1239)
2024-09-04 18:31:47,849 - stack ['$214load_method.1']
2024-09-04 18:31:47,849 - dispatch pc=218, inst=LOAD_GLOBAL(arg=1, lineno=1239)
2024-09-04 18:31:47,849 - stack ['$214load_method.1', '$x216.2']
2024-09-04 18:31:47,849 - dispatch pc=220, inst=LOAD_CONST(arg=1, lineno=1239)
2024-09-04 18:31:47,849 - stack ['$214load_method.1', '$x216.2', '$218load_global.3']
2024-09-04 18:31:47,849 - dispatch pc=222, inst=LOAD_FAST(arg=8, lineno=1239)
2024-09-04 18:31:47,849 - stack ['$214load_method.1', '$x216.2', '$218load_global.3', '$const220.4']
2024-09-04 18:31:47,850 - dispatch pc=224, inst=LOAD_FAST(arg=3, lineno=1239)
2024-09-04 18:31:47,850 - stack ['$214load_method.1', '$x216.2', '$218load_global.3', '$const220.4', '$n222.5']
2024-09-04 18:31:47,850 - dispatch pc=226, inst=BINARY_SUBTRACT(arg=None, lineno=1239)
2024-09-04 18:31:47,850 - stack ['$214load_method.1', '$x216.2', '$218load_global.3', '$const220.4', '$n222.5', '$pre_avg224.6']
2024-09-04 18:31:47,850 - dispatch pc=228, inst=CALL_FUNCTION(arg=2, lineno=1239)
2024-09-04 18:31:47,850 - stack ['$214load_method.1', '$x216.2', '$218load_global.3', '$const220.4', '$226binary_subtract.7']
2024-09-04 18:31:47,850 - dispatch pc=230, inst=LOAD_GLOBAL(arg=2, lineno=1239)
2024-09-04 18:31:47,850 - stack ['$214load_method.1', '$x216.2', '$228call_function.8']
2024-09-04 18:31:47,850 - dispatch pc=232, inst=LOAD_FAST(arg=8, lineno=1239)
2024-09-04 18:31:47,851 - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9']
2024-09-04 18:31:47,851 - dispatch pc=234, inst=LOAD_FAST(arg=4, lineno=1239)
2024-09-04 18:31:47,851 - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$n232.10']
2024-09-04 18:31:47,851 - dispatch pc=236, inst=BINARY_ADD(arg=None, lineno=1239)
2024-09-04 18:31:47,851 - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$n232.10', '$post_avg234.11']
2024-09-04 18:31:47,851 - dispatch pc=238, inst=LOAD_FAST(arg=0, lineno=1239)
2024-09-04 18:31:47,851 - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12']
2024-09-04 18:31:47,851 - dispatch pc=240, inst=LOAD_ATTR(arg=3, lineno=1239)
2024-09-04 18:31:47,851 - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12', '$x238.13']
2024-09-04 18:31:47,851 - dispatch pc=242, inst=LOAD_CONST(arg=1, lineno=1239)
2024-09-04 18:31:47,851 - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12', '$240load_attr.14']
2024-09-04 18:31:47,851 - dispatch pc=244, inst=BINARY_SUBSCR(arg=None, lineno=1239)
2024-09-04 18:31:47,851 - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12', '$240load_attr.14', '$const242.15']
2024-09-04 18:31:47,851 - dispatch pc=246, inst=CALL_FUNCTION(arg=2, lineno=1239)
2024-09-04 18:31:47,851 - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12', '$244binary_subscr.16']
2024-09-04 18:31:47,851 - dispatch pc=248, inst=BUILD_SLICE(arg=2, lineno=1239)
2024-09-04 18:31:47,851 - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$246call_function.17']
2024-09-04 18:31:47,851 - dispatch pc=250, inst=BINARY_SUBSCR(arg=None, lineno=1239)
2024-09-04 18:31:47,851 - stack ['$214load_method.1', '$x216.2', '$248build_slice.19']
2024-09-04 18:31:47,851 - dispatch pc=252, inst=CALL_METHOD(arg=1, lineno=1239)
2024-09-04 18:31:47,851 - stack ['$214load_method.1', '$250binary_subscr.20']
2024-09-04 18:31:47,851 - dispatch pc=254, inst=STORE_FAST(arg=10, lineno=1239)
2024-09-04 18:31:47,851 - stack ['$252call_method.21']
2024-09-04 18:31:47,851 - dispatch pc=256, inst=LOAD_FAST(arg=7, lineno=1240)
2024-09-04 18:31:47,851 - stack []
2024-09-04 18:31:47,851 - dispatch pc=258, inst=LOAD_FAST(arg=8, lineno=1240)
2024-09-04 18:31:47,851 - stack ['$peaks256.22']
2024-09-04 18:31:47,851 - dispatch pc=260, inst=DUP_TOP_TWO(arg=None, lineno=1240)
2024-09-04 18:31:47,851 - stack ['$peaks256.22', '$n258.23']
2024-09-04 18:31:47,851 - dispatch pc=262, inst=BINARY_SUBSCR(arg=None, lineno=1240)
2024-09-04 18:31:47,851 - stack ['$peaks256.22', '$n258.23', '$260dup_top_two.24', '$260dup_top_two.25']
2024-09-04 18:31:47,851 - dispatch pc=264, inst=LOAD_FAST(arg=0, lineno=1240)
2024-09-04 18:31:47,851 - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26']
2024-09-04 18:31:47,851 - dispatch pc=266, inst=LOAD_FAST(arg=8, lineno=1240)
2024-09-04 18:31:47,851 - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$x264.27']
2024-09-04 18:31:47,851 - dispatch pc=268, inst=BINARY_SUBSCR(arg=None, lineno=1240)
2024-09-04 18:31:47,851 - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$x264.27', '$n266.28']
2024-09-04 18:31:47,851 - dispatch pc=270, inst=LOAD_FAST(arg=10, lineno=1240)
2024-09-04 18:31:47,851 - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$268binary_subscr.29']
2024-09-04 18:31:47,851 - dispatch pc=272, inst=LOAD_FAST(arg=5, lineno=1240)
2024-09-04 18:31:47,851 - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$268binary_subscr.29', '$avgn270.30']
2024-09-04 18:31:47,851 - dispatch pc=274, inst=BINARY_ADD(arg=None, lineno=1240)
2024-09-04 18:31:47,851 - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$268binary_subscr.29', '$avgn270.30', '$delta272.31']
2024-09-04 18:31:47,851 - dispatch pc=276, inst=COMPARE_OP(arg=5, lineno=1240)
2024-09-04 18:31:47,851 - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$268binary_subscr.29', '$274binary_add.32']
2024-09-04 18:31:47,851 - dispatch pc=278, inst=INPLACE_AND(arg=None, lineno=1240)
2024-09-04 18:31:47,851 - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$276compare_op.33']
2024-09-04 18:31:47,851 - dispatch pc=280, inst=ROT_THREE(arg=None, lineno=1240)
2024-09-04 18:31:47,851 - stack ['$peaks256.22', '$n258.23', '$278inplace_and.34']
2024-09-04 18:31:47,851 - dispatch pc=282, inst=STORE_SUBSCR(arg=None, lineno=1240)
2024-09-04 18:31:47,851 - stack ['$278inplace_and.34', '$peaks256.22', '$n258.23']
2024-09-04 18:31:47,851 - dispatch pc=284, inst=LOAD_FAST(arg=7, lineno=1242)
2024-09-04 18:31:47,851 - stack []
2024-09-04 18:31:47,851 - dispatch pc=286, inst=LOAD_FAST(arg=8, lineno=1242)
2024-09-04 18:31:47,851 - stack ['$peaks284.35']
2024-09-04 18:31:47,851 - dispatch pc=288, inst=BINARY_SUBSCR(arg=None, lineno=1242)
2024-09-04 18:31:47,851 - stack ['$peaks284.35', '$n286.36']
2024-09-04 18:31:47,851 - dispatch pc=290, inst=POP_JUMP_IF_TRUE(arg=152, lineno=1242)
2024-09-04 18:31:47,851 - stack ['$288binary_subscr.37']
2024-09-04 18:31:47,851 - end state. edges=[Edge(pc=292, stack=(), blockstack=(), npush=0), Edge(pc=302, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:47,851 - pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0)])
2024-09-04 18:31:47,851 - pending: deque([State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0)])
2024-09-04 18:31:47,851 - stack: []
2024-09-04 18:31:47,851 - state.pc_initial: State(pc_initial=292 nstack_initial=0)
2024-09-04 18:31:47,851 - dispatch pc=292, inst=LOAD_FAST(arg=8, lineno=1243)
2024-09-04 18:31:47,851 - stack []
2024-09-04 18:31:47,851 - dispatch pc=294, inst=LOAD_CONST(arg=3, lineno=1243)
2024-09-04 18:31:47,851 - stack ['$n292.0']
2024-09-04 18:31:47,851 - dispatch pc=296, inst=INPLACE_ADD(arg=None, lineno=1243)
2024-09-04 18:31:47,851 - stack ['$n292.0', '$const294.1']
2024-09-04 18:31:47,851 - dispatch pc=298, inst=STORE_FAST(arg=8, lineno=1243)
2024-09-04 18:31:47,851 - stack ['$296inplace_add.2']
2024-09-04 18:31:47,851 - dispatch pc=300, inst=JUMP_ABSOLUTE(arg=61, lineno=1244)
2024-09-04 18:31:47,851 - stack []
2024-09-04 18:31:47,851 - end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:47,851 - pending: deque([State(pc_initial=302 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
2024-09-04 18:31:47,851 - stack: []
2024-09-04 18:31:47,851 - state.pc_initial: State(pc_initial=302 nstack_initial=0)
2024-09-04 18:31:47,851 - dispatch pc=302, inst=LOAD_FAST(arg=8, lineno=1247)
2024-09-04 18:31:47,851 - stack []
2024-09-04 18:31:47,851 - dispatch pc=304, inst=LOAD_FAST(arg=6, lineno=1247)
2024-09-04 18:31:47,851 - stack ['$n302.0']
2024-09-04 18:31:47,851 - dispatch pc=306, inst=LOAD_CONST(arg=3, lineno=1247)
2024-09-04 18:31:47,851 - stack ['$n302.0', '$wait304.1']
2024-09-04 18:31:47,851 - dispatch pc=308, inst=BINARY_ADD(arg=None, lineno=1247)
2024-09-04 18:31:47,851 - stack ['$n302.0', '$wait304.1', '$const306.2']
2024-09-04 18:31:47,851 - dispatch pc=310, inst=INPLACE_ADD(arg=None, lineno=1247)
2024-09-04 18:31:47,851 - stack ['$n302.0', '$308binary_add.3']
2024-09-04 18:31:47,851 - dispatch pc=312, inst=STORE_FAST(arg=8, lineno=1247)
2024-09-04 18:31:47,851 - stack ['$310inplace_add.4']
2024-09-04 18:31:47,851 - dispatch pc=314, inst=LOAD_FAST(arg=8, lineno=1229)
2024-09-04 18:31:47,851 - stack []
2024-09-04 18:31:47,851 - dispatch pc=316, inst=LOAD_FAST(arg=0, lineno=1229)
2024-09-04 18:31:47,851 - stack ['$n314.5']
2024-09-04 18:31:47,851 - dispatch pc=318, inst=LOAD_ATTR(arg=3, lineno=1229)
2024-09-04 18:31:47,851 - stack ['$n314.5', '$x316.6']
2024-09-04 18:31:47,851 - dispatch pc=320, inst=LOAD_CONST(arg=1, lineno=1229)
2024-09-04 18:31:47,851 - stack ['$n314.5', '$318load_attr.7']
2024-09-04 18:31:47,851 - dispatch pc=322, inst=BINARY_SUBSCR(arg=None, lineno=1229)
2024-09-04 18:31:47,851 - stack ['$n314.5', '$318load_attr.7', '$const320.8']
2024-09-04 18:31:47,851 - dispatch pc=324, inst=COMPARE_OP(arg=0, lineno=1229)
2024-09-04 18:31:47,851 - stack ['$n314.5', '$322binary_subscr.9']
2024-09-04 18:31:47,851 - dispatch pc=326, inst=POP_JUMP_IF_TRUE(arg=68, lineno=1229)
2024-09-04 18:31:47,851 - stack ['$324compare_op.10']
2024-09-04 18:31:47,851 - end state. edges=[Edge(pc=328, stack=(), blockstack=(), npush=0), Edge(pc=134, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:47,851 - pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=328 nstack_initial=0), State(pc_initial=134 nstack_initial=0)])
2024-09-04 18:31:47,851 - pending: deque([State(pc_initial=328 nstack_initial=0), State(pc_initial=134 nstack_initial=0)])
2024-09-04 18:31:47,851 - stack: []
2024-09-04 18:31:47,851 - state.pc_initial: State(pc_initial=328 nstack_initial=0)
2024-09-04 18:31:47,851 - dispatch pc=328, inst=LOAD_CONST(arg=2, lineno=1229)
2024-09-04 18:31:47,860 - stack []
2024-09-04 18:31:47,860 - dispatch pc=330, inst=RETURN_VALUE(arg=None, lineno=1229)
2024-09-04 18:31:47,861 - stack ['$const328.0']
2024-09-04 18:31:47,861 - end state. edges=[]
2024-09-04 18:31:47,861 - pending: deque([State(pc_initial=134 nstack_initial=0)])
2024-09-04 18:31:47,861 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:47,861 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=116 nstack_initial=0): set(),
             State(pc_initial=120 nstack_initial=0): set(),
             State(pc_initial=134 nstack_initial=0): set(),
             State(pc_initial=202 nstack_initial=0): set(),
             State(pc_initial=212 nstack_initial=0): set(),
             State(pc_initial=292 nstack_initial=0): set(),
             State(pc_initial=302 nstack_initial=0): set(),
             State(pc_initial=328 nstack_initial=0): set(),
             State(pc_initial=332 nstack_initial=0): set()})
2024-09-04 18:31:47,862 - defmap: {}
2024-09-04 18:31:47,862 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:47,862 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:47,862 - keep phismap: {}
2024-09-04 18:31:47,862 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:47,862 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:47,862 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$8load_global.3'}), (10, {'item': '$8load_global.3', 'res': '$10load_method.4'}), (12, {'res': '$x12.5'}), (14, {'res': '$const14.6'}), (16, {'res': '$16load_global.7'}), (18, {'res': '$post_max18.8'}), (20, {'res': '$x20.9'}), (22, {'item': '$x20.9', 'res': '$22load_attr.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$22load_attr.10', 'res': '$26binary_subscr.12'}), (28, {'func': '$16load_global.7', 'args': ['$post_max18.8', '$26binary_subscr.12'], 'res': '$28call_function.13'}), (30, {'start': '$const14.6', 'stop': '$28call_function.13', 'step': None, 'res': '$30build_slice.15', 'slicevar': '$30build_slice.14'}), (32, {'index': '$30build_slice.15', 'target': '$x12.5', 'res': '$32binary_subscr.16'}), (34, {'func': '$10load_method.4', 'args': ['$32binary_subscr.16'], 'res': '$34call_method.17'}), (36, {'lhs': '$6binary_subscr.2', 'rhs': '$34call_method.17', 'res': '$36compare_op.18'}), (38, {'res': '$peaks38.19'}), (40, {'res': '$const40.20'}), (42, {'target': '$peaks38.19', 'index': '$const40.20', 'value': '$36compare_op.18'}), (44, {'res': '$peaks44.21'}), (46, {'res': '$const46.22'}), (48, {'orig': ['$peaks44.21', '$const46.22'], 'duped': ['$48dup_top_two.23', '$48dup_top_two.24']}), (50, {'index': '$48dup_top_two.24', 'target': '$48dup_top_two.23', 'res': '$50binary_subscr.25'}), (52, {'res': '$x52.26'}), (54, {'res': '$const54.27'}), (56, {'index': '$const54.27', 'target': '$x52.26', 'res': '$56binary_subscr.28'}), (58, {'res': '$58load_global.29'}), (60, {'item': '$58load_global.29', 'res': '$60load_method.30'}), (62, {'res': '$x62.31'}), (64, {'res': '$const64.32'}), (66, {'res': '$66load_global.33'}), (68, {'res': '$post_avg68.34'}), (70, {'res': '$x70.35'}), (72, {'item': '$x70.35', 'res': '$72load_attr.36'}), (74, {'res': '$const74.37'}), (76, {'index': '$const74.37', 'target': '$72load_attr.36', 'res': '$76binary_subscr.38'}), (78, {'func': '$66load_global.33', 'args': ['$post_avg68.34', '$76binary_subscr.38'], 'res': '$78call_function.39'}), (80, {'start': '$const64.32', 'stop': '$78call_function.39', 'step': None, 'res': '$80build_slice.41', 'slicevar': '$80build_slice.40'}), (82, {'index': '$80build_slice.41', 'target': '$x62.31', 'res': '$82binary_subscr.42'}), (84, {'func': '$60load_method.30', 'args': ['$82binary_subscr.42'], 'res': '$84call_method.43'}), (86, {'res': '$delta86.44'}), (88, {'lhs': '$84call_method.43', 'rhs': '$delta86.44', 'res': '$88binary_add.45'}), (90, {'lhs': '$56binary_subscr.28', 'rhs': '$88binary_add.45', 'res': '$90compare_op.46'}), (92, {'lhs': '$50binary_subscr.25', 'rhs': '$90compare_op.46', 'res': '$92inplace_and.47'}), (96, {'target': '$peaks44.21', 'index': '$const46.22', 'value': '$92inplace_and.47'}), (98, {'res': '$peaks98.48'}), (100, {'res': '$const100.49'}), (102, {'index': '$const100.49', 'target': '$peaks98.48', 'res': '$102binary_subscr.50'}), (104, {'pred': '$102binary_subscr.50'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: (), 116: ()})
2024-09-04 18:31:47,863 - block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$wait106.0'}), (108, {'res': '$const108.1'}), (110, {'lhs': '$wait106.0', 'rhs': '$const108.1', 'res': '$110binary_add.2'}), (112, {'value': '$110binary_add.2'}), (114, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ()})
2024-09-04 18:31:47,863 - block_infos State(pc_initial=116 nstack_initial=0):
AdaptBlockInfo(insts=((116, {'res': '$const116.0'}), (118, {'value': '$const116.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ()})
2024-09-04 18:31:47,863 - block_infos State(pc_initial=120 nstack_initial=0):
AdaptBlockInfo(insts=((120, {'res': '$n120.0'}), (122, {'res': '$x122.1'}), (124, {'item': '$x122.1', 'res': '$124load_attr.2'}), (126, {'res': '$const126.3'}), (128, {'index': '$const126.3', 'target': '$124load_attr.2', 'res': '$128binary_subscr.4'}), (130, {'lhs': '$n120.0', 'rhs': '$128binary_subscr.4', 'res': '$130compare_op.5'}), (132, {'pred': '$130compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={134: (), 332: ()})
2024-09-04 18:31:47,863 - block_infos State(pc_initial=134 nstack_initial=0):
AdaptBlockInfo(insts=((134, {'res': '$134load_global.0'}), (136, {'item': '$134load_global.0', 'res': '$136load_method.1'}), (138, {'res': '$x138.2'}), (140, {'res': '$140load_global.3'}), (142, {'res': '$const142.4'}), (144, {'res': '$n144.5'}), (146, {'res': '$pre_max146.6'}), (148, {'lhs': '$n144.5', 'rhs': '$pre_max146.6', 'res': '$148binary_subtract.7'}), (150, {'func': '$140load_global.3', 'args': ['$const142.4', '$148binary_subtract.7'], 'res': '$150call_function.8'}), (152, {'res': '$152load_global.9'}), (154, {'res': '$n154.10'}), (156, {'res': '$post_max156.11'}), (158, {'lhs': '$n154.10', 'rhs': '$post_max156.11', 'res': '$158binary_add.12'}), (160, {'res': '$x160.13'}), (162, {'item': '$x160.13', 'res': '$162load_attr.14'}), (164, {'res': '$const164.15'}), (166, {'index': '$const164.15', 'target': '$162load_attr.14', 'res': '$166binary_subscr.16'}), (168, {'func': '$152load_global.9', 'args': ['$158binary_add.12', '$166binary_subscr.16'], 'res': '$168call_function.17'}), (170, {'start': '$150call_function.8', 'stop': '$168call_function.17', 'step': None, 'res': '$170build_slice.19', 'slicevar': '$170build_slice.18'}), (172, {'index': '$170build_slice.19', 'target': '$x138.2', 'res': '$172binary_subscr.20'}), (174, {'func': '$136load_method.1', 'args': ['$172binary_subscr.20'], 'res': '$174call_method.21'}), (176, {'value': '$174call_method.21'}), (178, {'res': '$x178.22'}), (180, {'res': '$n180.23'}), (182, {'index': '$n180.23', 'target': '$x178.22', 'res': '$182binary_subscr.24'}), (184, {'res': '$maxn184.25'}), (186, {'lhs': '$182binary_subscr.24', 'rhs': '$maxn184.25', 'res': '$186compare_op.26'}), (188, {'res': '$peaks188.27'}), (190, {'res': '$n190.28'}), (192, {'target': '$peaks188.27', 'index': '$n190.28', 'value': '$186compare_op.26'}), (194, {'res': '$peaks194.29'}), (196, {'res': '$n196.30'}), (198, {'index': '$n196.30', 'target': '$peaks194.29', 'res': '$198binary_subscr.31'}), (200, {'pred': '$198binary_subscr.31'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={202: (), 212: ()})
2024-09-04 18:31:47,863 - block_infos State(pc_initial=202 nstack_initial=0):
AdaptBlockInfo(insts=((202, {'res': '$n202.0'}), (204, {'res': '$const204.1'}), (206, {'lhs': '$n202.0', 'rhs': '$const204.1', 'res': '$206inplace_add.2'}), (208, {'value': '$206inplace_add.2'}), (210, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ()})
2024-09-04 18:31:47,863 - block_infos State(pc_initial=212 nstack_initial=0):
AdaptBlockInfo(insts=((212, {'res': '$212load_global.0'}), (214, {'item': '$212load_global.0', 'res': '$214load_method.1'}), (216, {'res': '$x216.2'}), (218, {'res': '$218load_global.3'}), (220, {'res': '$const220.4'}), (222, {'res': '$n222.5'}), (224, {'res': '$pre_avg224.6'}), (226, {'lhs': '$n222.5', 'rhs': '$pre_avg224.6', 'res': '$226binary_subtract.7'}), (228, {'func': '$218load_global.3', 'args': ['$const220.4', '$226binary_subtract.7'], 'res': '$228call_function.8'}), (230, {'res': '$230load_global.9'}), (232, {'res': '$n232.10'}), (234, {'res': '$post_avg234.11'}), (236, {'lhs': '$n232.10', 'rhs': '$post_avg234.11', 'res': '$236binary_add.12'}), (238, {'res': '$x238.13'}), (240, {'item': '$x238.13', 'res': '$240load_attr.14'}), (242, {'res': '$const242.15'}), (244, {'index': '$const242.15', 'target': '$240load_attr.14', 'res': '$244binary_subscr.16'}), (246, {'func': '$230load_global.9', 'args': ['$236binary_add.12', '$244binary_subscr.16'], 'res': '$246call_function.17'}), (248, {'start': '$228call_function.8', 'stop': '$246call_function.17', 'step': None, 'res': '$248build_slice.19', 'slicevar': '$248build_slice.18'}), (250, {'index': '$248build_slice.19', 'target': '$x216.2', 'res': '$250binary_subscr.20'}), (252, {'func': '$214load_method.1', 'args': ['$250binary_subscr.20'], 'res': '$252call_method.21'}), (254, {'value': '$252call_method.21'}), (256, {'res': '$peaks256.22'}), (258, {'res': '$n258.23'}), (260, {'orig': ['$peaks256.22', '$n258.23'], 'duped': ['$260dup_top_two.24', '$260dup_top_two.25']}), (262, {'index': '$260dup_top_two.25', 'target': '$260dup_top_two.24', 'res': '$262binary_subscr.26'}), (264, {'res': '$x264.27'}), (266, {'res': '$n266.28'}), (268, {'index': '$n266.28', 'target': '$x264.27', 'res': '$268binary_subscr.29'}), (270, {'res': '$avgn270.30'}), (272, {'res': '$delta272.31'}), (274, {'lhs': '$avgn270.30', 'rhs': '$delta272.31', 'res': '$274binary_add.32'}), (276, {'lhs': '$268binary_subscr.29', 'rhs': '$274binary_add.32', 'res': '$276compare_op.33'}), (278, {'lhs': '$262binary_subscr.26', 'rhs': '$276compare_op.33', 'res': '$278inplace_and.34'}), (282, {'target': '$peaks256.22', 'index': '$n258.23', 'value': '$278inplace_and.34'}), (284, {'res': '$peaks284.35'}), (286, {'res': '$n286.36'}), (288, {'index': '$n286.36', 'target': '$peaks284.35', 'res': '$288binary_subscr.37'}), (290, {'pred': '$288binary_subscr.37'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={292: (), 302: ()})
2024-09-04 18:31:47,863 - block_infos State(pc_initial=292 nstack_initial=0):
AdaptBlockInfo(insts=((292, {'res': '$n292.0'}), (294, {'res': '$const294.1'}), (296, {'lhs': '$n292.0', 'rhs': '$const294.1', 'res': '$296inplace_add.2'}), (298, {'value': '$296inplace_add.2'}), (300, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ()})
2024-09-04 18:31:47,863 - block_infos State(pc_initial=302 nstack_initial=0):
AdaptBlockInfo(insts=((302, {'res': '$n302.0'}), (304, {'res': '$wait304.1'}), (306, {'res': '$const306.2'}), (308, {'lhs': '$wait304.1', 'rhs': '$const306.2', 'res': '$308binary_add.3'}), (310, {'lhs': '$n302.0', 'rhs': '$308binary_add.3', 'res': '$310inplace_add.4'}), (312, {'value': '$310inplace_add.4'}), (314, {'res': '$n314.5'}), (316, {'res': '$x316.6'}), (318, {'item': '$x316.6', 'res': '$318load_attr.7'}), (320, {'res': '$const320.8'}), (322, {'index': '$const320.8', 'target': '$318load_attr.7', 'res': '$322binary_subscr.9'}), (324, {'lhs': '$n314.5', 'rhs': '$322binary_subscr.9', 'res': '$324compare_op.10'}), (326, {'pred': '$324compare_op.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={328: (), 134: ()})
2024-09-04 18:31:47,864 - block_infos State(pc_initial=328 nstack_initial=0):
AdaptBlockInfo(insts=((328, {'res': '$const328.0'}), (330, {'retval': '$const328.0', 'castval': '$330return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:47,864 - block_infos State(pc_initial=332 nstack_initial=0):
AdaptBlockInfo(insts=((332, {'res': '$const332.0'}), (334, {'retval': '$const332.0', 'castval': '$334return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:47,874 - label 0:
    x = arg(0, name=x)                       ['x']
    pre_max = arg(1, name=pre_max)           ['pre_max']
    post_max = arg(2, name=post_max)         ['post_max']
    pre_avg = arg(3, name=pre_avg)           ['pre_avg']
    post_avg = arg(4, name=post_avg)         ['post_avg']
    delta = arg(5, name=delta)               ['delta']
    wait = arg(6, name=wait)                 ['wait']
    peaks = arg(7, name=peaks)               ['peaks']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $8load_global.3 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$8load_global.3']
    $10load_method.4 = getattr(value=$8load_global.3, attr=max) ['$10load_method.4', '$8load_global.3']
    $const14.6 = const(NoneType, None)       ['$const14.6']
    $16load_global.7 = global(min: <built-in function min>) ['$16load_global.7']
    $22load_attr.10 = getattr(value=x, attr=shape) ['$22load_attr.10', 'x']
    $const24.11 = const(int, 0)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=$22load_attr.10, index=$const24.11, fn=<built-in function getitem>) ['$22load_attr.10', '$26binary_subscr.12', '$const24.11']
    $28call_function.13 = call $16load_global.7(post_max, $26binary_subscr.12, func=$16load_global.7, args=[Var(post_max, utils.py:1209), Var($26binary_subscr.12, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None) ['$16load_global.7', '$26binary_subscr.12', '$28call_function.13', 'post_max']
    $30build_slice.14 = global(slice: <class 'slice'>) ['$30build_slice.14']
    $30build_slice.15 = call $30build_slice.14($const14.6, $28call_function.13, func=$30build_slice.14, args=(Var($const14.6, utils.py:1221), Var($28call_function.13, utils.py:1221)), kws=(), vararg=None, varkwarg=None, target=None) ['$28call_function.13', '$30build_slice.14', '$30build_slice.15', '$const14.6']
    $32binary_subscr.16 = getitem(value=x, index=$30build_slice.15, fn=<built-in function getitem>) ['$30build_slice.15', '$32binary_subscr.16', 'x']
    $34call_method.17 = call $10load_method.4($32binary_subscr.16, func=$10load_method.4, args=[Var($32binary_subscr.16, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_method.4', '$32binary_subscr.16', '$34call_method.17']
    $36compare_op.18 = $6binary_subscr.2 >= $34call_method.17 ['$34call_method.17', '$36compare_op.18', '$6binary_subscr.2']
    $const40.20 = const(int, 0)              ['$const40.20']
    peaks[$const40.20] = $36compare_op.18    ['$36compare_op.18', '$const40.20', 'peaks']
    $const46.22 = const(int, 0)              ['$const46.22']
    $50binary_subscr.25 = getitem(value=peaks, index=$const46.22, fn=<built-in function getitem>) ['$50binary_subscr.25', '$const46.22', 'peaks']
    $const54.27 = const(int, 0)              ['$const54.27']
    $56binary_subscr.28 = getitem(value=x, index=$const54.27, fn=<built-in function getitem>) ['$56binary_subscr.28', '$const54.27', 'x']
    $58load_global.29 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$58load_global.29']
    $60load_method.30 = getattr(value=$58load_global.29, attr=mean) ['$58load_global.29', '$60load_method.30']
    $const64.32 = const(NoneType, None)      ['$const64.32']
    $66load_global.33 = global(min: <built-in function min>) ['$66load_global.33']
    $72load_attr.36 = getattr(value=x, attr=shape) ['$72load_attr.36', 'x']
    $const74.37 = const(int, 0)              ['$const74.37']
    $76binary_subscr.38 = getitem(value=$72load_attr.36, index=$const74.37, fn=<built-in function getitem>) ['$72load_attr.36', '$76binary_subscr.38', '$const74.37']
    $78call_function.39 = call $66load_global.33(post_avg, $76binary_subscr.38, func=$66load_global.33, args=[Var(post_avg, utils.py:1209), Var($76binary_subscr.38, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.33', '$76binary_subscr.38', '$78call_function.39', 'post_avg']
    $80build_slice.40 = global(slice: <class 'slice'>) ['$80build_slice.40']
    $80build_slice.41 = call $80build_slice.40($const64.32, $78call_function.39, func=$80build_slice.40, args=(Var($const64.32, utils.py:1222), Var($78call_function.39, utils.py:1222)), kws=(), vararg=None, varkwarg=None, target=None) ['$78call_function.39', '$80build_slice.40', '$80build_slice.41', '$const64.32']
    $82binary_subscr.42 = getitem(value=x, index=$80build_slice.41, fn=<built-in function getitem>) ['$80build_slice.41', '$82binary_subscr.42', 'x']
    $84call_method.43 = call $60load_method.30($82binary_subscr.42, func=$60load_method.30, args=[Var($82binary_subscr.42, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None) ['$60load_method.30', '$82binary_subscr.42', '$84call_method.43']
    $88binary_add.45 = $84call_method.43 + delta ['$84call_method.43', '$88binary_add.45', 'delta']
    $90compare_op.46 = $56binary_subscr.28 >= $88binary_add.45 ['$56binary_subscr.28', '$88binary_add.45', '$90compare_op.46']
    $92inplace_and.47 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$50binary_subscr.25, rhs=$90compare_op.46, static_lhs=Undefined, static_rhs=Undefined) ['$50binary_subscr.25', '$90compare_op.46', '$92inplace_and.47']
    peaks[$const46.22] = $92inplace_and.47   ['$92inplace_and.47', '$const46.22', 'peaks']
    $const100.49 = const(int, 0)             ['$const100.49']
    $102binary_subscr.50 = getitem(value=peaks, index=$const100.49, fn=<built-in function getitem>) ['$102binary_subscr.50', '$const100.49', 'peaks']
    bool104 = global(bool: <class 'bool'>)   ['bool104']
    $104pred = call bool104($102binary_subscr.50, func=bool104, args=(Var($102binary_subscr.50, utils.py:1224),), kws=(), vararg=None, varkwarg=None, target=None) ['$102binary_subscr.50', '$104pred', 'bool104']
    branch $104pred, 106, 116                ['$104pred']
label 106:
    $const108.1 = const(int, 1)              ['$const108.1']
    n = wait + $const108.1                   ['$const108.1', 'n', 'wait']
    jump 120                                 []
label 116:
    n = const(int, 1)                        ['n']
    jump 120                                 []
label 120:
    $124load_attr.2 = getattr(value=x, attr=shape) ['$124load_attr.2', 'x']
    $const126.3 = const(int, 0)              ['$const126.3']
    $128binary_subscr.4 = getitem(value=$124load_attr.2, index=$const126.3, fn=<built-in function getitem>) ['$124load_attr.2', '$128binary_subscr.4', '$const126.3']
    $130compare_op.5 = n < $128binary_subscr.4 ['$128binary_subscr.4', '$130compare_op.5', 'n']
    bool132 = global(bool: <class 'bool'>)   ['bool132']
    $132pred = call bool132($130compare_op.5, func=bool132, args=(Var($130compare_op.5, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None) ['$130compare_op.5', '$132pred', 'bool132']
    branch $132pred, 134, 332                ['$132pred']
label 134:
    $134load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$134load_global.0']
    $136load_method.1 = getattr(value=$134load_global.0, attr=max) ['$134load_global.0', '$136load_method.1']
    $140load_global.3 = global(max: <built-in function max>) ['$140load_global.3']
    $const142.4 = const(int, 0)              ['$const142.4']
    $148binary_subtract.7 = n - pre_max      ['$148binary_subtract.7', 'n', 'pre_max']
    $150call_function.8 = call $140load_global.3($const142.4, $148binary_subtract.7, func=$140load_global.3, args=[Var($const142.4, utils.py:1230), Var($148binary_subtract.7, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None) ['$140load_global.3', '$148binary_subtract.7', '$150call_function.8', '$const142.4']
    $152load_global.9 = global(min: <built-in function min>) ['$152load_global.9']
    $158binary_add.12 = n + post_max         ['$158binary_add.12', 'n', 'post_max']
    $162load_attr.14 = getattr(value=x, attr=shape) ['$162load_attr.14', 'x']
    $const164.15 = const(int, 0)             ['$const164.15']
    $166binary_subscr.16 = getitem(value=$162load_attr.14, index=$const164.15, fn=<built-in function getitem>) ['$162load_attr.14', '$166binary_subscr.16', '$const164.15']
    $168call_function.17 = call $152load_global.9($158binary_add.12, $166binary_subscr.16, func=$152load_global.9, args=[Var($158binary_add.12, utils.py:1230), Var($166binary_subscr.16, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None) ['$152load_global.9', '$158binary_add.12', '$166binary_subscr.16', '$168call_function.17']
    $170build_slice.18 = global(slice: <class 'slice'>) ['$170build_slice.18']
    $170build_slice.19 = call $170build_slice.18($150call_function.8, $168call_function.17, func=$170build_slice.18, args=(Var($150call_function.8, utils.py:1230), Var($168call_function.17, utils.py:1230)), kws=(), vararg=None, varkwarg=None, target=None) ['$150call_function.8', '$168call_function.17', '$170build_slice.18', '$170build_slice.19']
    $172binary_subscr.20 = getitem(value=x, index=$170build_slice.19, fn=<built-in function getitem>) ['$170build_slice.19', '$172binary_subscr.20', 'x']
    maxn = call $136load_method.1($172binary_subscr.20, func=$136load_method.1, args=[Var($172binary_subscr.20, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None) ['$136load_method.1', '$172binary_subscr.20', 'maxn']
    $182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>) ['$182binary_subscr.24', 'n', 'x']
    $186compare_op.26 = $182binary_subscr.24 == maxn ['$182binary_subscr.24', '$186compare_op.26', 'maxn']
    peaks[n] = $186compare_op.26             ['$186compare_op.26', 'n', 'peaks']
    $198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>) ['$198binary_subscr.31', 'n', 'peaks']
    bool200 = global(bool: <class 'bool'>)   ['bool200']
    $200pred = call bool200($198binary_subscr.31, func=bool200, args=(Var($198binary_subscr.31, utils.py:1235),), kws=(), vararg=None, varkwarg=None, target=None) ['$198binary_subscr.31', '$200pred', 'bool200']
    branch $200pred, 212, 202                ['$200pred']
label 202:
    $const204.1 = const(int, 1)              ['$const204.1']
    $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined) ['$206inplace_add.2', '$const204.1', 'n']
    n = $206inplace_add.2                    ['$206inplace_add.2', 'n']
    jump 120                                 []
label 212:
    $212load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$212load_global.0']
    $214load_method.1 = getattr(value=$212load_global.0, attr=mean) ['$212load_global.0', '$214load_method.1']
    $218load_global.3 = global(max: <built-in function max>) ['$218load_global.3']
    $const220.4 = const(int, 0)              ['$const220.4']
    $226binary_subtract.7 = n - pre_avg      ['$226binary_subtract.7', 'n', 'pre_avg']
    $228call_function.8 = call $218load_global.3($const220.4, $226binary_subtract.7, func=$218load_global.3, args=[Var($const220.4, utils.py:1239), Var($226binary_subtract.7, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None) ['$218load_global.3', '$226binary_subtract.7', '$228call_function.8', '$const220.4']
    $230load_global.9 = global(min: <built-in function min>) ['$230load_global.9']
    $236binary_add.12 = n + post_avg         ['$236binary_add.12', 'n', 'post_avg']
    $240load_attr.14 = getattr(value=x, attr=shape) ['$240load_attr.14', 'x']
    $const242.15 = const(int, 0)             ['$const242.15']
    $244binary_subscr.16 = getitem(value=$240load_attr.14, index=$const242.15, fn=<built-in function getitem>) ['$240load_attr.14', '$244binary_subscr.16', '$const242.15']
    $246call_function.17 = call $230load_global.9($236binary_add.12, $244binary_subscr.16, func=$230load_global.9, args=[Var($236binary_add.12, utils.py:1239), Var($244binary_subscr.16, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None) ['$230load_global.9', '$236binary_add.12', '$244binary_subscr.16', '$246call_function.17']
    $248build_slice.18 = global(slice: <class 'slice'>) ['$248build_slice.18']
    $248build_slice.19 = call $248build_slice.18($228call_function.8, $246call_function.17, func=$248build_slice.18, args=(Var($228call_function.8, utils.py:1239), Var($246call_function.17, utils.py:1239)), kws=(), vararg=None, varkwarg=None, target=None) ['$228call_function.8', '$246call_function.17', '$248build_slice.18', '$248build_slice.19']
    $250binary_subscr.20 = getitem(value=x, index=$248build_slice.19, fn=<built-in function getitem>) ['$248build_slice.19', '$250binary_subscr.20', 'x']
    avgn = call $214load_method.1($250binary_subscr.20, func=$214load_method.1, args=[Var($250binary_subscr.20, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None) ['$214load_method.1', '$250binary_subscr.20', 'avgn']
    $262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>) ['$262binary_subscr.26', 'n', 'peaks']
    $268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>) ['$268binary_subscr.29', 'n', 'x']
    $274binary_add.32 = avgn + delta         ['$274binary_add.32', 'avgn', 'delta']
    $276compare_op.33 = $268binary_subscr.29 >= $274binary_add.32 ['$268binary_subscr.29', '$274binary_add.32', '$276compare_op.33']
    $278inplace_and.34 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$262binary_subscr.26, rhs=$276compare_op.33, static_lhs=Undefined, static_rhs=Undefined) ['$262binary_subscr.26', '$276compare_op.33', '$278inplace_and.34']
    peaks[n] = $278inplace_and.34            ['$278inplace_and.34', 'n', 'peaks']
    $288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>) ['$288binary_subscr.37', 'n', 'peaks']
    bool290 = global(bool: <class 'bool'>)   ['bool290']
    $290pred = call bool290($288binary_subscr.37, func=bool290, args=(Var($288binary_subscr.37, utils.py:1242),), kws=(), vararg=None, varkwarg=None, target=None) ['$288binary_subscr.37', '$290pred', 'bool290']
    branch $290pred, 302, 292                ['$290pred']
label 292:
    $const294.1 = const(int, 1)              ['$const294.1']
    $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined) ['$296inplace_add.2', '$const294.1', 'n']
    n = $296inplace_add.2                    ['$296inplace_add.2', 'n']
    jump 120                                 []
label 302:
    $const306.2 = const(int, 1)              ['$const306.2']
    $308binary_add.3 = wait + $const306.2    ['$308binary_add.3', '$const306.2', 'wait']
    $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined) ['$308binary_add.3', '$310inplace_add.4', 'n']
    n = $310inplace_add.4                    ['$310inplace_add.4', 'n']
    $318load_attr.7 = getattr(value=x, attr=shape) ['$318load_attr.7', 'x']
    $const320.8 = const(int, 0)              ['$const320.8']
    $322binary_subscr.9 = getitem(value=$318load_attr.7, index=$const320.8, fn=<built-in function getitem>) ['$318load_attr.7', '$322binary_subscr.9', '$const320.8']
    $324compare_op.10 = n < $322binary_subscr.9 ['$322binary_subscr.9', '$324compare_op.10', 'n']
    bool326 = global(bool: <class 'bool'>)   ['bool326']
    $326pred = call bool326($324compare_op.10, func=bool326, args=(Var($324compare_op.10, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None) ['$324compare_op.10', '$326pred', 'bool326']
    branch $326pred, 134, 328                ['$326pred']
label 328:
    $const328.0 = const(NoneType, None)      ['$const328.0']
    $330return_value.1 = cast(value=$const328.0) ['$330return_value.1', '$const328.0']
    return $330return_value.1                ['$330return_value.1']
label 332:
    $const332.0 = const(NoneType, None)      ['$const332.0']
    $334return_value.1 = cast(value=$const332.0) ['$334return_value.1', '$const332.0']
    return $334return_value.1                ['$334return_value.1']

2024-09-04 18:31:47,939 - ==== SSA block analysis pass on 0
2024-09-04 18:31:47,939 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431342ADD0>
2024-09-04 18:31:47,939 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:47,939 - on stmt: pre_max = arg(1, name=pre_max)
2024-09-04 18:31:47,939 - on stmt: post_max = arg(2, name=post_max)
2024-09-04 18:31:47,940 - on stmt: pre_avg = arg(3, name=pre_avg)
2024-09-04 18:31:47,940 - on stmt: post_avg = arg(4, name=post_avg)
2024-09-04 18:31:47,940 - on stmt: delta = arg(5, name=delta)
2024-09-04 18:31:47,940 - on stmt: wait = arg(6, name=wait)
2024-09-04 18:31:47,940 - on stmt: peaks = arg(7, name=peaks)
2024-09-04 18:31:47,940 - on stmt: $const4.1 = const(int, 0)
2024-09-04 18:31:47,940 - on stmt: $6binary_subscr.2 = static_getitem(value=x, index=0, index_var=$const4.1, fn=<built-in function getitem>)
2024-09-04 18:31:47,941 - on stmt: $8load_global.3 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:47,941 - on stmt: $10load_method.4 = getattr(value=$8load_global.3, attr=max)
2024-09-04 18:31:47,941 - on stmt: $const14.6 = const(NoneType, None)
2024-09-04 18:31:47,941 - on stmt: $16load_global.7 = global(min: <built-in function min>)
2024-09-04 18:31:47,941 - on stmt: $22load_attr.10 = getattr(value=x, attr=shape)
2024-09-04 18:31:47,941 - on stmt: $const24.11 = const(int, 0)
2024-09-04 18:31:47,941 - on stmt: $26binary_subscr.12 = static_getitem(value=$22load_attr.10, index=0, index_var=$const24.11, fn=<built-in function getitem>)
2024-09-04 18:31:47,941 - on stmt: $28call_function.13 = call $16load_global.7(post_max, $26binary_subscr.12, func=$16load_global.7, args=[Var(post_max, utils.py:1209), Var($26binary_subscr.12, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,942 - on stmt: $30build_slice.14 = global(slice: <class 'slice'>)
2024-09-04 18:31:47,942 - on stmt: $30build_slice.15 = call $30build_slice.14($const14.6, $28call_function.13, func=$30build_slice.14, args=(Var($const14.6, utils.py:1221), Var($28call_function.13, utils.py:1221)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,942 - on stmt: $32binary_subscr.16 = getitem(value=x, index=$30build_slice.15, fn=<built-in function getitem>)
2024-09-04 18:31:47,942 - on stmt: $34call_method.17 = call $10load_method.4($32binary_subscr.16, func=$10load_method.4, args=[Var($32binary_subscr.16, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,942 - on stmt: $36compare_op.18 = $6binary_subscr.2 >= $34call_method.17
2024-09-04 18:31:47,942 - on stmt: $const40.20 = const(int, 0)
2024-09-04 18:31:47,942 - on stmt: peaks[0] = $36compare_op.18
2024-09-04 18:31:47,942 - on stmt: $const46.22 = const(int, 0)
2024-09-04 18:31:47,943 - on stmt: $50binary_subscr.25 = static_getitem(value=peaks, index=0, index_var=$const46.22, fn=<built-in function getitem>)
2024-09-04 18:31:47,943 - on stmt: $const54.27 = const(int, 0)
2024-09-04 18:31:47,943 - on stmt: $56binary_subscr.28 = static_getitem(value=x, index=0, index_var=$const54.27, fn=<built-in function getitem>)
2024-09-04 18:31:47,943 - on stmt: $58load_global.29 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:47,943 - on stmt: $60load_method.30 = getattr(value=$58load_global.29, attr=mean)
2024-09-04 18:31:47,943 - on stmt: $const64.32 = const(NoneType, None)
2024-09-04 18:31:47,943 - on stmt: $66load_global.33 = global(min: <built-in function min>)
2024-09-04 18:31:47,943 - on stmt: $72load_attr.36 = getattr(value=x, attr=shape)
2024-09-04 18:31:47,943 - on stmt: $const74.37 = const(int, 0)
2024-09-04 18:31:47,943 - on stmt: $76binary_subscr.38 = static_getitem(value=$72load_attr.36, index=0, index_var=$const74.37, fn=<built-in function getitem>)
2024-09-04 18:31:47,944 - on stmt: $78call_function.39 = call $66load_global.33(post_avg, $76binary_subscr.38, func=$66load_global.33, args=[Var(post_avg, utils.py:1209), Var($76binary_subscr.38, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,944 - on stmt: $80build_slice.40 = global(slice: <class 'slice'>)
2024-09-04 18:31:47,944 - on stmt: $80build_slice.41 = call $80build_slice.40($const64.32, $78call_function.39, func=$80build_slice.40, args=(Var($const64.32, utils.py:1222), Var($78call_function.39, utils.py:1222)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,944 - on stmt: $82binary_subscr.42 = getitem(value=x, index=$80build_slice.41, fn=<built-in function getitem>)
2024-09-04 18:31:47,944 - on stmt: $84call_method.43 = call $60load_method.30($82binary_subscr.42, func=$60load_method.30, args=[Var($82binary_subscr.42, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,944 - on stmt: $88binary_add.45 = $84call_method.43 + delta
2024-09-04 18:31:47,944 - on stmt: $90compare_op.46 = $56binary_subscr.28 >= $88binary_add.45
2024-09-04 18:31:47,945 - on stmt: $92inplace_and.47 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$50binary_subscr.25, rhs=$90compare_op.46, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:47,945 - on stmt: peaks[0] = $92inplace_and.47
2024-09-04 18:31:47,945 - on stmt: $const100.49 = const(int, 0)
2024-09-04 18:31:47,945 - on stmt: $102binary_subscr.50 = static_getitem(value=peaks, index=0, index_var=$const100.49, fn=<built-in function getitem>)
2024-09-04 18:31:47,945 - on stmt: bool104 = global(bool: <class 'bool'>)
2024-09-04 18:31:47,945 - on stmt: $104pred = call bool104($102binary_subscr.50, func=bool104, args=(Var($102binary_subscr.50, utils.py:1224),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,945 - on stmt: branch $104pred, 106, 116
2024-09-04 18:31:47,945 - ==== SSA block analysis pass on 106
2024-09-04 18:31:47,945 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431342ADD0>
2024-09-04 18:31:47,946 - on stmt: $const108.1 = const(int, 1)
2024-09-04 18:31:47,946 - on stmt: n = wait + $const108.1
2024-09-04 18:31:47,946 - on stmt: jump 120
2024-09-04 18:31:47,946 - ==== SSA block analysis pass on 116
2024-09-04 18:31:47,946 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431342ADD0>
2024-09-04 18:31:47,946 - on stmt: n = const(int, 1)
2024-09-04 18:31:47,946 - on stmt: jump 120
2024-09-04 18:31:47,946 - ==== SSA block analysis pass on 120
2024-09-04 18:31:47,946 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431342ADD0>
2024-09-04 18:31:47,946 - on stmt: $124load_attr.2 = getattr(value=x, attr=shape)
2024-09-04 18:31:47,946 - on stmt: $const126.3 = const(int, 0)
2024-09-04 18:31:47,947 - on stmt: $128binary_subscr.4 = static_getitem(value=$124load_attr.2, index=0, index_var=$const126.3, fn=<built-in function getitem>)
2024-09-04 18:31:47,947 - on stmt: $130compare_op.5 = n < $128binary_subscr.4
2024-09-04 18:31:47,947 - on stmt: bool132 = global(bool: <class 'bool'>)
2024-09-04 18:31:47,947 - on stmt: $132pred = call bool132($130compare_op.5, func=bool132, args=(Var($130compare_op.5, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,947 - on stmt: branch $132pred, 134, 332
2024-09-04 18:31:47,947 - ==== SSA block analysis pass on 134
2024-09-04 18:31:47,947 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431342ADD0>
2024-09-04 18:31:47,947 - on stmt: $134load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:47,947 - on stmt: $136load_method.1 = getattr(value=$134load_global.0, attr=max)
2024-09-04 18:31:47,947 - on stmt: $140load_global.3 = global(max: <built-in function max>)
2024-09-04 18:31:47,948 - on stmt: $const142.4 = const(int, 0)
2024-09-04 18:31:47,948 - on stmt: $148binary_subtract.7 = n - pre_max
2024-09-04 18:31:47,948 - on stmt: $150call_function.8 = call $140load_global.3($const142.4, $148binary_subtract.7, func=$140load_global.3, args=[Var($const142.4, utils.py:1230), Var($148binary_subtract.7, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,948 - on stmt: $152load_global.9 = global(min: <built-in function min>)
2024-09-04 18:31:47,948 - on stmt: $158binary_add.12 = n + post_max
2024-09-04 18:31:47,948 - on stmt: $162load_attr.14 = getattr(value=x, attr=shape)
2024-09-04 18:31:47,948 - on stmt: $const164.15 = const(int, 0)
2024-09-04 18:31:47,948 - on stmt: $166binary_subscr.16 = static_getitem(value=$162load_attr.14, index=0, index_var=$const164.15, fn=<built-in function getitem>)
2024-09-04 18:31:47,949 - on stmt: $168call_function.17 = call $152load_global.9($158binary_add.12, $166binary_subscr.16, func=$152load_global.9, args=[Var($158binary_add.12, utils.py:1230), Var($166binary_subscr.16, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,949 - on stmt: $170build_slice.18 = global(slice: <class 'slice'>)
2024-09-04 18:31:47,949 - on stmt: $170build_slice.19 = call $170build_slice.18($150call_function.8, $168call_function.17, func=$170build_slice.18, args=(Var($150call_function.8, utils.py:1230), Var($168call_function.17, utils.py:1230)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,949 - on stmt: $172binary_subscr.20 = getitem(value=x, index=$170build_slice.19, fn=<built-in function getitem>)
2024-09-04 18:31:47,949 - on stmt: maxn = call $136load_method.1($172binary_subscr.20, func=$136load_method.1, args=[Var($172binary_subscr.20, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,949 - on stmt: $182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:47,949 - on stmt: $186compare_op.26 = $182binary_subscr.24 == maxn
2024-09-04 18:31:47,949 - on stmt: peaks[n] = $186compare_op.26
2024-09-04 18:31:47,950 - on stmt: $198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:47,950 - on stmt: bool200 = global(bool: <class 'bool'>)
2024-09-04 18:31:47,950 - on stmt: $200pred = call bool200($198binary_subscr.31, func=bool200, args=(Var($198binary_subscr.31, utils.py:1235),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,950 - on stmt: branch $200pred, 212, 202
2024-09-04 18:31:47,951 - ==== SSA block analysis pass on 202
2024-09-04 18:31:47,951 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431342ADD0>
2024-09-04 18:31:47,951 - on stmt: $const204.1 = const(int, 1)
2024-09-04 18:31:47,951 - on stmt: $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:47,951 - on stmt: n = $206inplace_add.2
2024-09-04 18:31:47,951 - on stmt: jump 333
2024-09-04 18:31:47,951 - ==== SSA block analysis pass on 212
2024-09-04 18:31:47,951 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431342ADD0>
2024-09-04 18:31:47,952 - on stmt: $212load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:47,952 - on stmt: $214load_method.1 = getattr(value=$212load_global.0, attr=mean)
2024-09-04 18:31:47,952 - on stmt: $218load_global.3 = global(max: <built-in function max>)
2024-09-04 18:31:47,952 - on stmt: $const220.4 = const(int, 0)
2024-09-04 18:31:47,952 - on stmt: $226binary_subtract.7 = n - pre_avg
2024-09-04 18:31:47,952 - on stmt: $228call_function.8 = call $218load_global.3($const220.4, $226binary_subtract.7, func=$218load_global.3, args=[Var($const220.4, utils.py:1239), Var($226binary_subtract.7, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,952 - on stmt: $230load_global.9 = global(min: <built-in function min>)
2024-09-04 18:31:47,952 - on stmt: $236binary_add.12 = n + post_avg
2024-09-04 18:31:47,952 - on stmt: $240load_attr.14 = getattr(value=x, attr=shape)
2024-09-04 18:31:47,953 - on stmt: $const242.15 = const(int, 0)
2024-09-04 18:31:47,953 - on stmt: $244binary_subscr.16 = static_getitem(value=$240load_attr.14, index=0, index_var=$const242.15, fn=<built-in function getitem>)
2024-09-04 18:31:47,953 - on stmt: $246call_function.17 = call $230load_global.9($236binary_add.12, $244binary_subscr.16, func=$230load_global.9, args=[Var($236binary_add.12, utils.py:1239), Var($244binary_subscr.16, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,953 - on stmt: $248build_slice.18 = global(slice: <class 'slice'>)
2024-09-04 18:31:47,953 - on stmt: $248build_slice.19 = call $248build_slice.18($228call_function.8, $246call_function.17, func=$248build_slice.18, args=(Var($228call_function.8, utils.py:1239), Var($246call_function.17, utils.py:1239)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,953 - on stmt: $250binary_subscr.20 = getitem(value=x, index=$248build_slice.19, fn=<built-in function getitem>)
2024-09-04 18:31:47,953 - on stmt: avgn = call $214load_method.1($250binary_subscr.20, func=$214load_method.1, args=[Var($250binary_subscr.20, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,954 - on stmt: $262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:47,954 - on stmt: $268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:47,954 - on stmt: $274binary_add.32 = avgn + delta
2024-09-04 18:31:47,954 - on stmt: $276compare_op.33 = $268binary_subscr.29 >= $274binary_add.32
2024-09-04 18:31:47,954 - on stmt: $278inplace_and.34 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$262binary_subscr.26, rhs=$276compare_op.33, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:47,954 - on stmt: peaks[n] = $278inplace_and.34
2024-09-04 18:31:47,954 - on stmt: $288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:47,954 - on stmt: bool290 = global(bool: <class 'bool'>)
2024-09-04 18:31:47,954 - on stmt: $290pred = call bool290($288binary_subscr.37, func=bool290, args=(Var($288binary_subscr.37, utils.py:1242),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,955 - on stmt: branch $290pred, 302, 292
2024-09-04 18:31:47,955 - ==== SSA block analysis pass on 292
2024-09-04 18:31:47,955 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431342ADD0>
2024-09-04 18:31:47,955 - on stmt: $const294.1 = const(int, 1)
2024-09-04 18:31:47,955 - on stmt: $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:47,955 - on stmt: n = $296inplace_add.2
2024-09-04 18:31:47,955 - on stmt: jump 333
2024-09-04 18:31:47,955 - ==== SSA block analysis pass on 302
2024-09-04 18:31:47,955 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431342ADD0>
2024-09-04 18:31:47,955 - on stmt: $const306.2 = const(int, 1)
2024-09-04 18:31:47,956 - on stmt: $308binary_add.3 = wait + $const306.2
2024-09-04 18:31:47,956 - on stmt: $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:47,956 - on stmt: n = $310inplace_add.4
2024-09-04 18:31:47,956 - on stmt: $318load_attr.7 = getattr(value=x, attr=shape)
2024-09-04 18:31:47,956 - on stmt: $const320.8 = const(int, 0)
2024-09-04 18:31:47,956 - on stmt: $322binary_subscr.9 = static_getitem(value=$318load_attr.7, index=0, index_var=$const320.8, fn=<built-in function getitem>)
2024-09-04 18:31:47,956 - on stmt: $324compare_op.10 = n < $322binary_subscr.9
2024-09-04 18:31:47,956 - on stmt: bool326 = global(bool: <class 'bool'>)
2024-09-04 18:31:47,957 - on stmt: $326pred = call bool326($324compare_op.10, func=bool326, args=(Var($324compare_op.10, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,957 - on stmt: branch $326pred, 134, 328
2024-09-04 18:31:47,957 - ==== SSA block analysis pass on 328
2024-09-04 18:31:47,957 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431342ADD0>
2024-09-04 18:31:47,957 - on stmt: $const328.0 = const(NoneType, None)
2024-09-04 18:31:47,957 - on stmt: $330return_value.1 = cast(value=$const328.0)
2024-09-04 18:31:47,957 - on stmt: return $330return_value.1
2024-09-04 18:31:47,957 - ==== SSA block analysis pass on 332
2024-09-04 18:31:47,957 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431342ADD0>
2024-09-04 18:31:47,957 - on stmt: $const332.0 = const(NoneType, None)
2024-09-04 18:31:47,958 - on stmt: $334return_value.1 = cast(value=$const332.0)
2024-09-04 18:31:47,958 - on stmt: return $334return_value.1
2024-09-04 18:31:47,958 - ==== SSA block analysis pass on 333
2024-09-04 18:31:47,958 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431342ADD0>
2024-09-04 18:31:47,958 - on stmt: jump 120
2024-09-04 18:31:47,964 - defs defaultdict(<class 'list'>,
            {'$102binary_subscr.50': [(<numba.core.ir.Assign object at 0x0000024318F363E0>,
                                       0)],
             '$104pred': [(<numba.core.ir.Assign object at 0x00000243134245E0>,
                           0)],
             '$10load_method.4': [(<numba.core.ir.Assign object at 0x000002431339E800>,
                                   0)],
             '$124load_attr.2': [(<numba.core.ir.Assign object at 0x0000024313318850>,
                                  120)],
             '$128binary_subscr.4': [(<numba.core.ir.Assign object at 0x000002431D272D10>,
                                      120)],
             '$130compare_op.5': [(<numba.core.ir.Assign object at 0x0000024313319300>,
                                   120)],
             '$132pred': [(<numba.core.ir.Assign object at 0x0000024313319750>,
                           120)],
             '$134load_global.0': [(<numba.core.ir.Assign object at 0x000002431331B970>,
                                    134)],
             '$136load_method.1': [(<numba.core.ir.Assign object at 0x000002431331BEB0>,
                                    134)],
             '$140load_global.3': [(<numba.core.ir.Assign object at 0x000002431331ACB0>,
                                    134)],
             '$148binary_subtract.7': [(<numba.core.ir.Assign object at 0x000002431331ADA0>,
                                        134)],
             '$150call_function.8': [(<numba.core.ir.Assign object at 0x000002431331BBB0>,
                                      134)],
             '$152load_global.9': [(<numba.core.ir.Assign object at 0x000002431331A830>,
                                    134)],
             '$158binary_add.12': [(<numba.core.ir.Assign object at 0x000002431331B5B0>,
                                    134)],
             '$162load_attr.14': [(<numba.core.ir.Assign object at 0x0000024313319540>,
                                   134)],
             '$166binary_subscr.16': [(<numba.core.ir.Assign object at 0x000002431D271720>,
                                       134)],
             '$168call_function.17': [(<numba.core.ir.Assign object at 0x000002431340BBB0>,
                                       134)],
             '$16load_global.7': [(<numba.core.ir.Assign object at 0x0000024313385F90>,
                                   0)],
             '$170build_slice.18': [(<numba.core.ir.Assign object at 0x000002431340BE50>,
                                     134)],
             '$170build_slice.19': [(<numba.core.ir.Assign object at 0x000002431340BDF0>,
                                     134)],
             '$172binary_subscr.20': [(<numba.core.ir.Assign object at 0x000002431340BA00>,
                                       134)],
             '$182binary_subscr.24': [(<numba.core.ir.Assign object at 0x000002431340AA70>,
                                       134)],
             '$186compare_op.26': [(<numba.core.ir.Assign object at 0x000002431340A2F0>,
                                    134)],
             '$198binary_subscr.31': [(<numba.core.ir.Assign object at 0x000002431340BC40>,
                                       134)],
             '$200pred': [(<numba.core.ir.Assign object at 0x0000024313408760>,
                           134)],
             '$206inplace_add.2': [(<numba.core.ir.Assign object at 0x000002431340A560>,
                                    202)],
             '$212load_global.0': [(<numba.core.ir.Assign object at 0x000002431340B6D0>,
                                    212)],
             '$214load_method.1': [(<numba.core.ir.Assign object at 0x000002431340A920>,
                                    212)],
             '$218load_global.3': [(<numba.core.ir.Assign object at 0x000002431340B0A0>,
                                    212)],
             '$226binary_subtract.7': [(<numba.core.ir.Assign object at 0x000002431340B3A0>,
                                        212)],
             '$228call_function.8': [(<numba.core.ir.Assign object at 0x000002431340B9D0>,
                                      212)],
             '$22load_attr.10': [(<numba.core.ir.Assign object at 0x00000243133DB310>,
                                  0)],
             '$230load_global.9': [(<numba.core.ir.Assign object at 0x0000024313408340>,
                                    212)],
             '$236binary_add.12': [(<numba.core.ir.Assign object at 0x00000243134302B0>,
                                    212)],
             '$240load_attr.14': [(<numba.core.ir.Assign object at 0x0000024313432B00>,
                                   212)],
             '$244binary_subscr.16': [(<numba.core.ir.Assign object at 0x0000024318F34F70>,
                                       212)],
             '$246call_function.17': [(<numba.core.ir.Assign object at 0x00000243134314E0>,
                                       212)],
             '$248build_slice.18': [(<numba.core.ir.Assign object at 0x0000024313431DE0>,
                                     212)],
             '$248build_slice.19': [(<numba.core.ir.Assign object at 0x0000024313430A60>,
                                     212)],
             '$250binary_subscr.20': [(<numba.core.ir.Assign object at 0x0000024313431480>,
                                       212)],
             '$262binary_subscr.26': [(<numba.core.ir.Assign object at 0x0000024313432F80>,
                                       212)],
             '$268binary_subscr.29': [(<numba.core.ir.Assign object at 0x000002431D20C490>,
                                       212)],
             '$26binary_subscr.12': [(<numba.core.ir.Assign object at 0x0000024318F34100>,
                                      0)],
             '$274binary_add.32': [(<numba.core.ir.Assign object at 0x000002431D20F7F0>,
                                    212)],
             '$276compare_op.33': [(<numba.core.ir.Assign object at 0x000002431D20E4D0>,
                                    212)],
             '$278inplace_and.34': [(<numba.core.ir.Assign object at 0x0000024317832950>,
                                     212)],
             '$288binary_subscr.37': [(<numba.core.ir.Assign object at 0x0000024317833220>,
                                       212)],
             '$28call_function.13': [(<numba.core.ir.Assign object at 0x00000243135E3F70>,
                                      0)],
             '$290pred': [(<numba.core.ir.Assign object at 0x0000024317831180>,
                           212)],
             '$296inplace_add.2': [(<numba.core.ir.Assign object at 0x000002431D20FB80>,
                                    292)],
             '$308binary_add.3': [(<numba.core.ir.Assign object at 0x000002431B4DFD30>,
                                   302)],
             '$30build_slice.14': [(<numba.core.ir.Assign object at 0x00000243135E3B80>,
                                    0)],
             '$30build_slice.15': [(<numba.core.ir.Assign object at 0x00000243135E1C90>,
                                    0)],
             '$310inplace_add.4': [(<numba.core.ir.Assign object at 0x000002431B4DFFA0>,
                                    302)],
             '$318load_attr.7': [(<numba.core.ir.Assign object at 0x0000024313266260>,
                                  302)],
             '$322binary_subscr.9': [(<numba.core.ir.Assign object at 0x0000024313393850>,
                                      302)],
             '$324compare_op.10': [(<numba.core.ir.Assign object at 0x0000024313264D00>,
                                    302)],
             '$326pred': [(<numba.core.ir.Assign object at 0x0000024313265C00>,
                           302)],
             '$32binary_subscr.16': [(<numba.core.ir.Assign object at 0x00000243136C42B0>,
                                      0)],
             '$330return_value.1': [(<numba.core.ir.Assign object at 0x0000024318F37A30>,
                                     328)],
             '$334return_value.1': [(<numba.core.ir.Assign object at 0x0000024318F362F0>,
                                     332)],
             '$34call_method.17': [(<numba.core.ir.Assign object at 0x00000243133E57E0>,
                                    0)],
             '$36compare_op.18': [(<numba.core.ir.Assign object at 0x00000243133E5D50>,
                                   0)],
             '$50binary_subscr.25': [(<numba.core.ir.Assign object at 0x0000024318F354E0>,
                                      0)],
             '$56binary_subscr.28': [(<numba.core.ir.Assign object at 0x0000024318F37E20>,
                                      0)],
             '$58load_global.29': [(<numba.core.ir.Assign object at 0x00000243132663E0>,
                                    0)],
             '$60load_method.30': [(<numba.core.ir.Assign object at 0x0000024313264C40>,
                                    0)],
             '$66load_global.33': [(<numba.core.ir.Assign object at 0x00000243132519C0>,
                                    0)],
             '$6binary_subscr.2': [(<numba.core.ir.Assign object at 0x0000024318F37130>,
                                    0)],
             '$72load_attr.36': [(<numba.core.ir.Assign object at 0x0000024313250550>,
                                  0)],
             '$76binary_subscr.38': [(<numba.core.ir.Assign object at 0x0000024318F372E0>,
                                      0)],
             '$78call_function.39': [(<numba.core.ir.Assign object at 0x0000024313251150>,
                                      0)],
             '$80build_slice.40': [(<numba.core.ir.Assign object at 0x0000024313250EB0>,
                                    0)],
             '$80build_slice.41': [(<numba.core.ir.Assign object at 0x0000024313252530>,
                                    0)],
             '$82binary_subscr.42': [(<numba.core.ir.Assign object at 0x00000243132530A0>,
                                      0)],
             '$84call_method.43': [(<numba.core.ir.Assign object at 0x0000024313425000>,
                                    0)],
             '$88binary_add.45': [(<numba.core.ir.Assign object at 0x0000024313424370>,
                                   0)],
             '$8load_global.3': [(<numba.core.ir.Assign object at 0x000002431339F250>,
                                  0)],
             '$90compare_op.46': [(<numba.core.ir.Assign object at 0x0000024313425A50>,
                                   0)],
             '$92inplace_and.47': [(<numba.core.ir.Assign object at 0x00000243134242B0>,
                                    0)],
             '$const100.49': [(<numba.core.ir.Assign object at 0x0000024313426EF0>,
                               0)],
             '$const108.1': [(<numba.core.ir.Assign object at 0x0000024313264EE0>,
                              106)],
             '$const126.3': [(<numba.core.ir.Assign object at 0x0000024313318520>,
                              120)],
             '$const14.6': [(<numba.core.ir.Assign object at 0x00000243133859F0>,
                             0)],
             '$const142.4': [(<numba.core.ir.Assign object at 0x000002431331AC80>,
                              134)],
             '$const164.15': [(<numba.core.ir.Assign object at 0x000002431340A620>,
                               134)],
             '$const204.1': [(<numba.core.ir.Assign object at 0x000002431340AAA0>,
                              202)],
             '$const220.4': [(<numba.core.ir.Assign object at 0x000002431340AE30>,
                              212)],
             '$const24.11': [(<numba.core.ir.Assign object at 0x0000024313A23B50>,
                              0)],
             '$const242.15': [(<numba.core.ir.Assign object at 0x00000243134308B0>,
                               212)],
             '$const294.1': [(<numba.core.ir.Assign object at 0x0000024313433760>,
                              292)],
             '$const306.2': [(<numba.core.ir.Assign object at 0x0000024317831C00>,
                              302)],
             '$const320.8': [(<numba.core.ir.Assign object at 0x0000024313264B20>,
                              302)],
             '$const328.0': [(<numba.core.ir.Assign object at 0x0000024318F36440>,
                              328)],
             '$const332.0': [(<numba.core.ir.Assign object at 0x0000024318F35120>,
                              332)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x000002431339C820>,
                            0)],
             '$const40.20': [(<numba.core.ir.Assign object at 0x00000243133E5660>,
                              0)],
             '$const46.22': [(<numba.core.ir.Assign object at 0x00000243133E5570>,
                              0)],
             '$const54.27': [(<numba.core.ir.Assign object at 0x0000024313266EF0>,
                              0)],
             '$const64.32': [(<numba.core.ir.Assign object at 0x0000024313253C10>,
                              0)],
             '$const74.37': [(<numba.core.ir.Assign object at 0x0000024313250400>,
                              0)],
             'avgn': [(<numba.core.ir.Assign object at 0x0000024313431B70>,
                       212)],
             'bool104': [(<numba.core.ir.Assign object at 0x00000243134246A0>,
                          0)],
             'bool132': [(<numba.core.ir.Assign object at 0x00000243133192D0>,
                          120)],
             'bool200': [(<numba.core.ir.Assign object at 0x000002431340B790>,
                          134)],
             'bool290': [(<numba.core.ir.Assign object at 0x0000024317830A00>,
                          212)],
             'bool326': [(<numba.core.ir.Assign object at 0x0000024313265ED0>,
                          302)],
             'delta': [(<numba.core.ir.Assign object at 0x0000024312A71A80>,
                        0)],
             'maxn': [(<numba.core.ir.Assign object at 0x000002431340BAC0>,
                       134)],
             'n': [(<numba.core.ir.Assign object at 0x0000024313427070>, 106),
                   (<numba.core.ir.Assign object at 0x000002431331BE20>, 116),
                   (<numba.core.ir.Assign object at 0x000002431340A140>, 202),
                   (<numba.core.ir.Assign object at 0x000002431D20E4A0>, 292),
                   (<numba.core.ir.Assign object at 0x000002431B4DFD00>, 302)],
             'peaks': [(<numba.core.ir.Assign object at 0x000002431324A380>,
                        0)],
             'post_avg': [(<numba.core.ir.Assign object at 0x0000024312A73520>,
                           0)],
             'post_max': [(<numba.core.ir.Assign object at 0x0000024312A72200>,
                           0)],
             'pre_avg': [(<numba.core.ir.Assign object at 0x0000024312A71990>,
                          0)],
             'pre_max': [(<numba.core.ir.Assign object at 0x0000024312A72B30>,
                          0)],
             'wait': [(<numba.core.ir.Assign object at 0x0000024312A71AB0>, 0)],
             'x': [(<numba.core.ir.Assign object at 0x00000243133A6860>, 0)]})
2024-09-04 18:31:47,965 - SSA violators <numba.core.utils.OrderedSet object at 0x00000243139F1AB0>
2024-09-04 18:31:47,965 - Fix SSA violator on var n
2024-09-04 18:31:47,965 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:47,965 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313408B20>
2024-09-04 18:31:47,965 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:47,965 - on stmt: pre_max = arg(1, name=pre_max)
2024-09-04 18:31:47,965 - on stmt: post_max = arg(2, name=post_max)
2024-09-04 18:31:47,966 - on stmt: pre_avg = arg(3, name=pre_avg)
2024-09-04 18:31:47,966 - on stmt: post_avg = arg(4, name=post_avg)
2024-09-04 18:31:47,966 - on stmt: delta = arg(5, name=delta)
2024-09-04 18:31:47,966 - on stmt: wait = arg(6, name=wait)
2024-09-04 18:31:47,966 - on stmt: peaks = arg(7, name=peaks)
2024-09-04 18:31:47,966 - on stmt: $const4.1 = const(int, 0)
2024-09-04 18:31:47,966 - on stmt: $6binary_subscr.2 = static_getitem(value=x, index=0, index_var=$const4.1, fn=<built-in function getitem>)
2024-09-04 18:31:47,966 - on stmt: $8load_global.3 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:47,966 - on stmt: $10load_method.4 = getattr(value=$8load_global.3, attr=max)
2024-09-04 18:31:47,966 - on stmt: $const14.6 = const(NoneType, None)
2024-09-04 18:31:47,966 - on stmt: $16load_global.7 = global(min: <built-in function min>)
2024-09-04 18:31:47,966 - on stmt: $22load_attr.10 = getattr(value=x, attr=shape)
2024-09-04 18:31:47,966 - on stmt: $const24.11 = const(int, 0)
2024-09-04 18:31:47,967 - on stmt: $26binary_subscr.12 = static_getitem(value=$22load_attr.10, index=0, index_var=$const24.11, fn=<built-in function getitem>)
2024-09-04 18:31:47,967 - on stmt: $28call_function.13 = call $16load_global.7(post_max, $26binary_subscr.12, func=$16load_global.7, args=[Var(post_max, utils.py:1209), Var($26binary_subscr.12, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,967 - on stmt: $30build_slice.14 = global(slice: <class 'slice'>)
2024-09-04 18:31:47,967 - on stmt: $30build_slice.15 = call $30build_slice.14($const14.6, $28call_function.13, func=$30build_slice.14, args=(Var($const14.6, utils.py:1221), Var($28call_function.13, utils.py:1221)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,967 - on stmt: $32binary_subscr.16 = getitem(value=x, index=$30build_slice.15, fn=<built-in function getitem>)
2024-09-04 18:31:47,967 - on stmt: $34call_method.17 = call $10load_method.4($32binary_subscr.16, func=$10load_method.4, args=[Var($32binary_subscr.16, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,967 - on stmt: $36compare_op.18 = $6binary_subscr.2 >= $34call_method.17
2024-09-04 18:31:47,967 - on stmt: $const40.20 = const(int, 0)
2024-09-04 18:31:47,967 - on stmt: peaks[0] = $36compare_op.18
2024-09-04 18:31:47,967 - on stmt: $const46.22 = const(int, 0)
2024-09-04 18:31:47,968 - on stmt: $50binary_subscr.25 = static_getitem(value=peaks, index=0, index_var=$const46.22, fn=<built-in function getitem>)
2024-09-04 18:31:47,968 - on stmt: $const54.27 = const(int, 0)
2024-09-04 18:31:47,968 - on stmt: $56binary_subscr.28 = static_getitem(value=x, index=0, index_var=$const54.27, fn=<built-in function getitem>)
2024-09-04 18:31:47,968 - on stmt: $58load_global.29 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:47,968 - on stmt: $60load_method.30 = getattr(value=$58load_global.29, attr=mean)
2024-09-04 18:31:47,968 - on stmt: $const64.32 = const(NoneType, None)
2024-09-04 18:31:47,968 - on stmt: $66load_global.33 = global(min: <built-in function min>)
2024-09-04 18:31:47,968 - on stmt: $72load_attr.36 = getattr(value=x, attr=shape)
2024-09-04 18:31:47,968 - on stmt: $const74.37 = const(int, 0)
2024-09-04 18:31:47,968 - on stmt: $76binary_subscr.38 = static_getitem(value=$72load_attr.36, index=0, index_var=$const74.37, fn=<built-in function getitem>)
2024-09-04 18:31:47,968 - on stmt: $78call_function.39 = call $66load_global.33(post_avg, $76binary_subscr.38, func=$66load_global.33, args=[Var(post_avg, utils.py:1209), Var($76binary_subscr.38, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,969 - on stmt: $80build_slice.40 = global(slice: <class 'slice'>)
2024-09-04 18:31:47,969 - on stmt: $80build_slice.41 = call $80build_slice.40($const64.32, $78call_function.39, func=$80build_slice.40, args=(Var($const64.32, utils.py:1222), Var($78call_function.39, utils.py:1222)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,969 - on stmt: $82binary_subscr.42 = getitem(value=x, index=$80build_slice.41, fn=<built-in function getitem>)
2024-09-04 18:31:47,969 - on stmt: $84call_method.43 = call $60load_method.30($82binary_subscr.42, func=$60load_method.30, args=[Var($82binary_subscr.42, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,969 - on stmt: $88binary_add.45 = $84call_method.43 + delta
2024-09-04 18:31:47,969 - on stmt: $90compare_op.46 = $56binary_subscr.28 >= $88binary_add.45
2024-09-04 18:31:47,969 - on stmt: $92inplace_and.47 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$50binary_subscr.25, rhs=$90compare_op.46, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:47,969 - on stmt: peaks[0] = $92inplace_and.47
2024-09-04 18:31:47,969 - on stmt: $const100.49 = const(int, 0)
2024-09-04 18:31:47,969 - on stmt: $102binary_subscr.50 = static_getitem(value=peaks, index=0, index_var=$const100.49, fn=<built-in function getitem>)
2024-09-04 18:31:47,970 - on stmt: bool104 = global(bool: <class 'bool'>)
2024-09-04 18:31:47,970 - on stmt: $104pred = call bool104($102binary_subscr.50, func=bool104, args=(Var($102binary_subscr.50, utils.py:1224),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,970 - on stmt: branch $104pred, 106, 116
2024-09-04 18:31:47,970 - ==== SSA block rewrite pass on 106
2024-09-04 18:31:47,970 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313408B20>
2024-09-04 18:31:47,970 - on stmt: $const108.1 = const(int, 1)
2024-09-04 18:31:47,970 - on stmt: n = wait + $const108.1
2024-09-04 18:31:47,970 - first assign: n
2024-09-04 18:31:47,970 - replaced with: n = wait + $const108.1
2024-09-04 18:31:47,970 - on stmt: jump 120
2024-09-04 18:31:47,970 - ==== SSA block rewrite pass on 116
2024-09-04 18:31:47,971 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313408B20>
2024-09-04 18:31:47,971 - on stmt: n = const(int, 1)
2024-09-04 18:31:47,971 - replaced with: n.1 = const(int, 1)
2024-09-04 18:31:47,971 - on stmt: jump 120
2024-09-04 18:31:47,971 - ==== SSA block rewrite pass on 120
2024-09-04 18:31:47,971 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313408B20>
2024-09-04 18:31:47,971 - on stmt: $124load_attr.2 = getattr(value=x, attr=shape)
2024-09-04 18:31:47,971 - on stmt: $const126.3 = const(int, 0)
2024-09-04 18:31:47,971 - on stmt: $128binary_subscr.4 = static_getitem(value=$124load_attr.2, index=0, index_var=$const126.3, fn=<built-in function getitem>)
2024-09-04 18:31:47,971 - on stmt: $130compare_op.5 = n < $128binary_subscr.4
2024-09-04 18:31:47,971 - on stmt: bool132 = global(bool: <class 'bool'>)
2024-09-04 18:31:47,971 - on stmt: $132pred = call bool132($130compare_op.5, func=bool132, args=(Var($130compare_op.5, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,972 - on stmt: branch $132pred, 134, 332
2024-09-04 18:31:47,972 - ==== SSA block rewrite pass on 134
2024-09-04 18:31:47,972 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313408B20>
2024-09-04 18:31:47,972 - on stmt: $134load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:47,972 - on stmt: $136load_method.1 = getattr(value=$134load_global.0, attr=max)
2024-09-04 18:31:47,972 - on stmt: $140load_global.3 = global(max: <built-in function max>)
2024-09-04 18:31:47,972 - on stmt: $const142.4 = const(int, 0)
2024-09-04 18:31:47,972 - on stmt: $148binary_subtract.7 = n - pre_max
2024-09-04 18:31:47,972 - on stmt: $150call_function.8 = call $140load_global.3($const142.4, $148binary_subtract.7, func=$140load_global.3, args=[Var($const142.4, utils.py:1230), Var($148binary_subtract.7, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,972 - on stmt: $152load_global.9 = global(min: <built-in function min>)
2024-09-04 18:31:47,972 - on stmt: $158binary_add.12 = n + post_max
2024-09-04 18:31:47,973 - on stmt: $162load_attr.14 = getattr(value=x, attr=shape)
2024-09-04 18:31:47,973 - on stmt: $const164.15 = const(int, 0)
2024-09-04 18:31:47,973 - on stmt: $166binary_subscr.16 = static_getitem(value=$162load_attr.14, index=0, index_var=$const164.15, fn=<built-in function getitem>)
2024-09-04 18:31:47,973 - on stmt: $168call_function.17 = call $152load_global.9($158binary_add.12, $166binary_subscr.16, func=$152load_global.9, args=[Var($158binary_add.12, utils.py:1230), Var($166binary_subscr.16, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,973 - on stmt: $170build_slice.18 = global(slice: <class 'slice'>)
2024-09-04 18:31:47,973 - on stmt: $170build_slice.19 = call $170build_slice.18($150call_function.8, $168call_function.17, func=$170build_slice.18, args=(Var($150call_function.8, utils.py:1230), Var($168call_function.17, utils.py:1230)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,973 - on stmt: $172binary_subscr.20 = getitem(value=x, index=$170build_slice.19, fn=<built-in function getitem>)
2024-09-04 18:31:47,973 - on stmt: maxn = call $136load_method.1($172binary_subscr.20, func=$136load_method.1, args=[Var($172binary_subscr.20, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,973 - on stmt: $182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:47,973 - on stmt: $186compare_op.26 = $182binary_subscr.24 == maxn
2024-09-04 18:31:47,973 - on stmt: peaks[n] = $186compare_op.26
2024-09-04 18:31:47,974 - on stmt: $198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:47,974 - on stmt: bool200 = global(bool: <class 'bool'>)
2024-09-04 18:31:47,974 - on stmt: $200pred = call bool200($198binary_subscr.31, func=bool200, args=(Var($198binary_subscr.31, utils.py:1235),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,974 - on stmt: branch $200pred, 212, 202
2024-09-04 18:31:47,974 - ==== SSA block rewrite pass on 202
2024-09-04 18:31:47,974 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313408B20>
2024-09-04 18:31:47,974 - on stmt: $const204.1 = const(int, 1)
2024-09-04 18:31:47,974 - on stmt: $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:47,974 - on stmt: n = $206inplace_add.2
2024-09-04 18:31:47,974 - replaced with: n.2 = $206inplace_add.2
2024-09-04 18:31:47,974 - on stmt: jump 333
2024-09-04 18:31:47,975 - ==== SSA block rewrite pass on 212
2024-09-04 18:31:47,975 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313408B20>
2024-09-04 18:31:47,975 - on stmt: $212load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:47,975 - on stmt: $214load_method.1 = getattr(value=$212load_global.0, attr=mean)
2024-09-04 18:31:47,975 - on stmt: $218load_global.3 = global(max: <built-in function max>)
2024-09-04 18:31:47,975 - on stmt: $const220.4 = const(int, 0)
2024-09-04 18:31:47,975 - on stmt: $226binary_subtract.7 = n - pre_avg
2024-09-04 18:31:47,975 - on stmt: $228call_function.8 = call $218load_global.3($const220.4, $226binary_subtract.7, func=$218load_global.3, args=[Var($const220.4, utils.py:1239), Var($226binary_subtract.7, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,975 - on stmt: $230load_global.9 = global(min: <built-in function min>)
2024-09-04 18:31:47,975 - on stmt: $236binary_add.12 = n + post_avg
2024-09-04 18:31:47,975 - on stmt: $240load_attr.14 = getattr(value=x, attr=shape)
2024-09-04 18:31:47,975 - on stmt: $const242.15 = const(int, 0)
2024-09-04 18:31:47,975 - on stmt: $244binary_subscr.16 = static_getitem(value=$240load_attr.14, index=0, index_var=$const242.15, fn=<built-in function getitem>)
2024-09-04 18:31:47,975 - on stmt: $246call_function.17 = call $230load_global.9($236binary_add.12, $244binary_subscr.16, func=$230load_global.9, args=[Var($236binary_add.12, utils.py:1239), Var($244binary_subscr.16, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,975 - on stmt: $248build_slice.18 = global(slice: <class 'slice'>)
2024-09-04 18:31:47,975 - on stmt: $248build_slice.19 = call $248build_slice.18($228call_function.8, $246call_function.17, func=$248build_slice.18, args=(Var($228call_function.8, utils.py:1239), Var($246call_function.17, utils.py:1239)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,975 - on stmt: $250binary_subscr.20 = getitem(value=x, index=$248build_slice.19, fn=<built-in function getitem>)
2024-09-04 18:31:47,975 - on stmt: avgn = call $214load_method.1($250binary_subscr.20, func=$214load_method.1, args=[Var($250binary_subscr.20, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:47,975 - on stmt: $262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:47,975 - on stmt: $268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:47,975 - on stmt: $274binary_add.32 = avgn + delta
2024-09-04 18:31:47,975 - on stmt: $276compare_op.33 = $268binary_subscr.29 >= $274binary_add.32
2024-09-04 18:31:47,975 - on stmt: $278inplace_and.34 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$262binary_subscr.26, rhs=$276compare_op.33, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:47,975 - on stmt: peaks[n] = $278inplace_and.34
2024-09-04 18:31:47,975 - on stmt: $288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:47,975 - on stmt: bool290 = global(bool: <class 'bool'>)
2024-09-04 18:31:47,975 - on stmt: $290pred = call bool290($288binary_subscr.37, func=bool290, args=(Var($288binary_subscr.37, utils.py:1242),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,519 - on stmt: branch $290pred, 302, 292
2024-09-04 18:31:48,520 - ==== SSA block rewrite pass on 292
2024-09-04 18:31:48,520 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313408B20>
2024-09-04 18:31:48,520 - on stmt: $const294.1 = const(int, 1)
2024-09-04 18:31:48,520 - on stmt: $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:48,520 - on stmt: n = $296inplace_add.2
2024-09-04 18:31:48,520 - replaced with: n.3 = $296inplace_add.2
2024-09-04 18:31:48,520 - on stmt: jump 333
2024-09-04 18:31:48,520 - ==== SSA block rewrite pass on 302
2024-09-04 18:31:48,521 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313408B20>
2024-09-04 18:31:48,521 - on stmt: $const306.2 = const(int, 1)
2024-09-04 18:31:48,521 - on stmt: $308binary_add.3 = wait + $const306.2
2024-09-04 18:31:48,521 - on stmt: $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:48,521 - on stmt: n = $310inplace_add.4
2024-09-04 18:31:48,521 - replaced with: n.4 = $310inplace_add.4
2024-09-04 18:31:48,521 - on stmt: $318load_attr.7 = getattr(value=x, attr=shape)
2024-09-04 18:31:48,522 - on stmt: $const320.8 = const(int, 0)
2024-09-04 18:31:48,522 - on stmt: $322binary_subscr.9 = static_getitem(value=$318load_attr.7, index=0, index_var=$const320.8, fn=<built-in function getitem>)
2024-09-04 18:31:48,522 - on stmt: $324compare_op.10 = n < $322binary_subscr.9
2024-09-04 18:31:48,523 - on stmt: bool326 = global(bool: <class 'bool'>)
2024-09-04 18:31:48,523 - on stmt: $326pred = call bool326($324compare_op.10, func=bool326, args=(Var($324compare_op.10, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,523 - on stmt: branch $326pred, 134, 328
2024-09-04 18:31:48,523 - ==== SSA block rewrite pass on 328
2024-09-04 18:31:48,523 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313408B20>
2024-09-04 18:31:48,523 - on stmt: $const328.0 = const(NoneType, None)
2024-09-04 18:31:48,523 - on stmt: $330return_value.1 = cast(value=$const328.0)
2024-09-04 18:31:48,523 - on stmt: return $330return_value.1
2024-09-04 18:31:48,523 - ==== SSA block rewrite pass on 332
2024-09-04 18:31:48,523 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313408B20>
2024-09-04 18:31:48,523 - on stmt: $const332.0 = const(NoneType, None)
2024-09-04 18:31:48,523 - on stmt: $334return_value.1 = cast(value=$const332.0)
2024-09-04 18:31:48,523 - on stmt: return $334return_value.1
2024-09-04 18:31:48,525 - ==== SSA block rewrite pass on 333
2024-09-04 18:31:48,525 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313408B20>
2024-09-04 18:31:48,525 - on stmt: jump 120
2024-09-04 18:31:48,525 - Replaced assignments: defaultdict(<class 'list'>,
            {106: [<numba.core.ir.Assign object at 0x0000024313391690>],
             116: [<numba.core.ir.Assign object at 0x000002431D271CC0>],
             202: [<numba.core.ir.Assign object at 0x000002431D273790>],
             292: [<numba.core.ir.Assign object at 0x000002431D271F30>],
             302: [<numba.core.ir.Assign object at 0x000002431D270370>]})
2024-09-04 18:31:48,525 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:48,525 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313408B20>
2024-09-04 18:31:48,525 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:48,526 - on stmt: pre_max = arg(1, name=pre_max)
2024-09-04 18:31:48,526 - on stmt: post_max = arg(2, name=post_max)
2024-09-04 18:31:48,526 - on stmt: pre_avg = arg(3, name=pre_avg)
2024-09-04 18:31:48,526 - on stmt: post_avg = arg(4, name=post_avg)
2024-09-04 18:31:48,526 - on stmt: delta = arg(5, name=delta)
2024-09-04 18:31:48,526 - on stmt: wait = arg(6, name=wait)
2024-09-04 18:31:48,526 - on stmt: peaks = arg(7, name=peaks)
2024-09-04 18:31:48,526 - on stmt: $const4.1 = const(int, 0)
2024-09-04 18:31:48,527 - on stmt: $6binary_subscr.2 = static_getitem(value=x, index=0, index_var=$const4.1, fn=<built-in function getitem>)
2024-09-04 18:31:48,527 - on stmt: $8load_global.3 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:48,527 - on stmt: $10load_method.4 = getattr(value=$8load_global.3, attr=max)
2024-09-04 18:31:48,527 - on stmt: $const14.6 = const(NoneType, None)
2024-09-04 18:31:48,527 - on stmt: $16load_global.7 = global(min: <built-in function min>)
2024-09-04 18:31:48,527 - on stmt: $22load_attr.10 = getattr(value=x, attr=shape)
2024-09-04 18:31:48,527 - on stmt: $const24.11 = const(int, 0)
2024-09-04 18:31:48,527 - on stmt: $26binary_subscr.12 = static_getitem(value=$22load_attr.10, index=0, index_var=$const24.11, fn=<built-in function getitem>)
2024-09-04 18:31:48,527 - on stmt: $28call_function.13 = call $16load_global.7(post_max, $26binary_subscr.12, func=$16load_global.7, args=[Var(post_max, utils.py:1209), Var($26binary_subscr.12, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,527 - on stmt: $30build_slice.14 = global(slice: <class 'slice'>)
2024-09-04 18:31:48,528 - on stmt: $30build_slice.15 = call $30build_slice.14($const14.6, $28call_function.13, func=$30build_slice.14, args=(Var($const14.6, utils.py:1221), Var($28call_function.13, utils.py:1221)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,528 - on stmt: $32binary_subscr.16 = getitem(value=x, index=$30build_slice.15, fn=<built-in function getitem>)
2024-09-04 18:31:48,528 - on stmt: $34call_method.17 = call $10load_method.4($32binary_subscr.16, func=$10load_method.4, args=[Var($32binary_subscr.16, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,528 - on stmt: $36compare_op.18 = $6binary_subscr.2 >= $34call_method.17
2024-09-04 18:31:48,529 - on stmt: $const40.20 = const(int, 0)
2024-09-04 18:31:48,529 - on stmt: peaks[0] = $36compare_op.18
2024-09-04 18:31:48,529 - on stmt: $const46.22 = const(int, 0)
2024-09-04 18:31:48,529 - on stmt: $50binary_subscr.25 = static_getitem(value=peaks, index=0, index_var=$const46.22, fn=<built-in function getitem>)
2024-09-04 18:31:48,529 - on stmt: $const54.27 = const(int, 0)
2024-09-04 18:31:48,530 - on stmt: $56binary_subscr.28 = static_getitem(value=x, index=0, index_var=$const54.27, fn=<built-in function getitem>)
2024-09-04 18:31:48,530 - on stmt: $58load_global.29 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:48,530 - on stmt: $60load_method.30 = getattr(value=$58load_global.29, attr=mean)
2024-09-04 18:31:48,530 - on stmt: $const64.32 = const(NoneType, None)
2024-09-04 18:31:48,530 - on stmt: $66load_global.33 = global(min: <built-in function min>)
2024-09-04 18:31:48,530 - on stmt: $72load_attr.36 = getattr(value=x, attr=shape)
2024-09-04 18:31:48,530 - on stmt: $const74.37 = const(int, 0)
2024-09-04 18:31:48,530 - on stmt: $76binary_subscr.38 = static_getitem(value=$72load_attr.36, index=0, index_var=$const74.37, fn=<built-in function getitem>)
2024-09-04 18:31:48,530 - on stmt: $78call_function.39 = call $66load_global.33(post_avg, $76binary_subscr.38, func=$66load_global.33, args=[Var(post_avg, utils.py:1209), Var($76binary_subscr.38, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,531 - on stmt: $80build_slice.40 = global(slice: <class 'slice'>)
2024-09-04 18:31:48,531 - on stmt: $80build_slice.41 = call $80build_slice.40($const64.32, $78call_function.39, func=$80build_slice.40, args=(Var($const64.32, utils.py:1222), Var($78call_function.39, utils.py:1222)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,531 - on stmt: $82binary_subscr.42 = getitem(value=x, index=$80build_slice.41, fn=<built-in function getitem>)
2024-09-04 18:31:48,531 - on stmt: $84call_method.43 = call $60load_method.30($82binary_subscr.42, func=$60load_method.30, args=[Var($82binary_subscr.42, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,532 - on stmt: $88binary_add.45 = $84call_method.43 + delta
2024-09-04 18:31:48,532 - on stmt: $90compare_op.46 = $56binary_subscr.28 >= $88binary_add.45
2024-09-04 18:31:48,532 - on stmt: $92inplace_and.47 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$50binary_subscr.25, rhs=$90compare_op.46, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:48,532 - on stmt: peaks[0] = $92inplace_and.47
2024-09-04 18:31:48,532 - on stmt: $const100.49 = const(int, 0)
2024-09-04 18:31:48,532 - on stmt: $102binary_subscr.50 = static_getitem(value=peaks, index=0, index_var=$const100.49, fn=<built-in function getitem>)
2024-09-04 18:31:48,533 - on stmt: bool104 = global(bool: <class 'bool'>)
2024-09-04 18:31:48,533 - on stmt: $104pred = call bool104($102binary_subscr.50, func=bool104, args=(Var($102binary_subscr.50, utils.py:1224),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,533 - on stmt: branch $104pred, 106, 116
2024-09-04 18:31:48,533 - ==== SSA block rewrite pass on 106
2024-09-04 18:31:48,533 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313408B20>
2024-09-04 18:31:48,533 - on stmt: $const108.1 = const(int, 1)
2024-09-04 18:31:48,533 - on stmt: n = wait + $const108.1
2024-09-04 18:31:48,534 - on stmt: jump 120
2024-09-04 18:31:48,534 - ==== SSA block rewrite pass on 116
2024-09-04 18:31:48,534 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313408B20>
2024-09-04 18:31:48,534 - on stmt: n.1 = const(int, 1)
2024-09-04 18:31:48,534 - on stmt: jump 120
2024-09-04 18:31:48,535 - ==== SSA block rewrite pass on 120
2024-09-04 18:31:48,535 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313408B20>
2024-09-04 18:31:48,535 - on stmt: $124load_attr.2 = getattr(value=x, attr=shape)
2024-09-04 18:31:48,535 - on stmt: $const126.3 = const(int, 0)
2024-09-04 18:31:48,535 - on stmt: $128binary_subscr.4 = static_getitem(value=$124load_attr.2, index=0, index_var=$const126.3, fn=<built-in function getitem>)
2024-09-04 18:31:48,535 - on stmt: $130compare_op.5 = n < $128binary_subscr.4
2024-09-04 18:31:48,536 - find_def var='n' stmt=$130compare_op.5 = n < $128binary_subscr.4
2024-09-04 18:31:48,536 - find_def_from_top label 120
2024-09-04 18:31:48,536 - insert phi node n.5 = phi(incoming_values=[], incoming_blocks=[]) at 120
2024-09-04 18:31:48,536 - find_def_from_bottom label 106
2024-09-04 18:31:48,537 - incoming_def n = wait + $const108.1
2024-09-04 18:31:48,537 - find_def_from_bottom label 116
2024-09-04 18:31:48,537 - incoming_def n.1 = const(int, 1)
2024-09-04 18:31:48,537 - find_def_from_bottom label 333
2024-09-04 18:31:48,537 - find_def_from_top label 333
2024-09-04 18:31:48,537 - insert phi node n.6 = phi(incoming_values=[], incoming_blocks=[]) at 333
2024-09-04 18:31:48,537 - find_def_from_bottom label 202
2024-09-04 18:31:48,537 - incoming_def n.2 = $206inplace_add.2
2024-09-04 18:31:48,537 - find_def_from_bottom label 292
2024-09-04 18:31:48,537 - incoming_def n.3 = $296inplace_add.2
2024-09-04 18:31:48,537 - incoming_def n.6 = phi(incoming_values=[Var(n.2, utils.py:1236), Var(n.3, utils.py:1243)], incoming_blocks=[202, 292])
2024-09-04 18:31:48,538 - replaced with: $130compare_op.5 = n.5 < $128binary_subscr.4
2024-09-04 18:31:48,538 - on stmt: bool132 = global(bool: <class 'bool'>)
2024-09-04 18:31:48,538 - on stmt: $132pred = call bool132($130compare_op.5, func=bool132, args=(Var($130compare_op.5, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,538 - on stmt: branch $132pred, 134, 332
2024-09-04 18:31:48,539 - ==== SSA block rewrite pass on 134
2024-09-04 18:31:48,539 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313408B20>
2024-09-04 18:31:48,539 - on stmt: $134load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:48,539 - on stmt: $136load_method.1 = getattr(value=$134load_global.0, attr=max)
2024-09-04 18:31:48,539 - on stmt: $140load_global.3 = global(max: <built-in function max>)
2024-09-04 18:31:48,539 - on stmt: $const142.4 = const(int, 0)
2024-09-04 18:31:48,540 - on stmt: $148binary_subtract.7 = n - pre_max
2024-09-04 18:31:48,540 - find_def var='n' stmt=$148binary_subtract.7 = n - pre_max
2024-09-04 18:31:48,540 - find_def_from_top label 134
2024-09-04 18:31:48,540 - insert phi node n.7 = phi(incoming_values=[], incoming_blocks=[]) at 134
2024-09-04 18:31:48,540 - find_def_from_bottom label 120
2024-09-04 18:31:48,540 - incoming_def n.5 = phi(incoming_values=[Var(n, utils.py:1225), Var(n.1, utils.py:1227), Var(n.6, utils.py:1229)], incoming_blocks=[106, 116, 333])
2024-09-04 18:31:48,540 - find_def_from_bottom label 302
2024-09-04 18:31:48,540 - incoming_def n.4 = $310inplace_add.4
2024-09-04 18:31:48,540 - replaced with: $148binary_subtract.7 = n.7 - pre_max
2024-09-04 18:31:48,540 - on stmt: $150call_function.8 = call $140load_global.3($const142.4, $148binary_subtract.7, func=$140load_global.3, args=[Var($const142.4, utils.py:1230), Var($148binary_subtract.7, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,540 - on stmt: $152load_global.9 = global(min: <built-in function min>)
2024-09-04 18:31:48,540 - on stmt: $158binary_add.12 = n + post_max
2024-09-04 18:31:48,541 - find_def var='n' stmt=$158binary_add.12 = n + post_max
2024-09-04 18:31:48,541 - replaced with: $158binary_add.12 = n.7 + post_max
2024-09-04 18:31:48,541 - on stmt: $162load_attr.14 = getattr(value=x, attr=shape)
2024-09-04 18:31:48,541 - on stmt: $const164.15 = const(int, 0)
2024-09-04 18:31:48,542 - on stmt: $166binary_subscr.16 = static_getitem(value=$162load_attr.14, index=0, index_var=$const164.15, fn=<built-in function getitem>)
2024-09-04 18:31:48,542 - on stmt: $168call_function.17 = call $152load_global.9($158binary_add.12, $166binary_subscr.16, func=$152load_global.9, args=[Var($158binary_add.12, utils.py:1230), Var($166binary_subscr.16, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,542 - on stmt: $170build_slice.18 = global(slice: <class 'slice'>)
2024-09-04 18:31:48,542 - on stmt: $170build_slice.19 = call $170build_slice.18($150call_function.8, $168call_function.17, func=$170build_slice.18, args=(Var($150call_function.8, utils.py:1230), Var($168call_function.17, utils.py:1230)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,542 - on stmt: $172binary_subscr.20 = getitem(value=x, index=$170build_slice.19, fn=<built-in function getitem>)
2024-09-04 18:31:48,542 - on stmt: maxn = call $136load_method.1($172binary_subscr.20, func=$136load_method.1, args=[Var($172binary_subscr.20, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,543 - on stmt: $182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:48,543 - find_def var='n' stmt=$182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:48,543 - replaced with: $182binary_subscr.24 = getitem(value=x, index=n.7, fn=<built-in function getitem>)
2024-09-04 18:31:48,543 - on stmt: $186compare_op.26 = $182binary_subscr.24 == maxn
2024-09-04 18:31:48,543 - on stmt: peaks[n] = $186compare_op.26
2024-09-04 18:31:48,543 - find_def var='n' stmt=peaks[n] = $186compare_op.26
2024-09-04 18:31:48,544 - replaced with: peaks[n.7] = $186compare_op.26
2024-09-04 18:31:48,544 - on stmt: $198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:48,544 - find_def var='n' stmt=$198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:48,544 - replaced with: $198binary_subscr.31 = getitem(value=peaks, index=n.7, fn=<built-in function getitem>)
2024-09-04 18:31:48,544 - on stmt: bool200 = global(bool: <class 'bool'>)
2024-09-04 18:31:48,544 - on stmt: $200pred = call bool200($198binary_subscr.31, func=bool200, args=(Var($198binary_subscr.31, utils.py:1235),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,545 - on stmt: branch $200pred, 212, 202
2024-09-04 18:31:48,545 - ==== SSA block rewrite pass on 202
2024-09-04 18:31:48,545 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313408B20>
2024-09-04 18:31:48,545 - on stmt: $const204.1 = const(int, 1)
2024-09-04 18:31:48,545 - on stmt: $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:48,545 - find_def var='n' stmt=$206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:48,545 - find_def_from_top label 202
2024-09-04 18:31:48,545 - idom 134 from label 202
2024-09-04 18:31:48,546 - find_def_from_bottom label 134
2024-09-04 18:31:48,546 - replaced with: $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.7, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:48,546 - on stmt: n.2 = $206inplace_add.2
2024-09-04 18:31:48,546 - on stmt: jump 333
2024-09-04 18:31:48,546 - ==== SSA block rewrite pass on 212
2024-09-04 18:31:48,546 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313408B20>
2024-09-04 18:31:48,546 - on stmt: $212load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:48,547 - on stmt: $214load_method.1 = getattr(value=$212load_global.0, attr=mean)
2024-09-04 18:31:48,547 - on stmt: $218load_global.3 = global(max: <built-in function max>)
2024-09-04 18:31:48,547 - on stmt: $const220.4 = const(int, 0)
2024-09-04 18:31:48,547 - on stmt: $226binary_subtract.7 = n - pre_avg
2024-09-04 18:31:48,547 - find_def var='n' stmt=$226binary_subtract.7 = n - pre_avg
2024-09-04 18:31:48,547 - find_def_from_top label 212
2024-09-04 18:31:48,547 - idom 134 from label 212
2024-09-04 18:31:48,547 - find_def_from_bottom label 134
2024-09-04 18:31:48,547 - replaced with: $226binary_subtract.7 = n.7 - pre_avg
2024-09-04 18:31:48,547 - on stmt: $228call_function.8 = call $218load_global.3($const220.4, $226binary_subtract.7, func=$218load_global.3, args=[Var($const220.4, utils.py:1239), Var($226binary_subtract.7, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,548 - on stmt: $230load_global.9 = global(min: <built-in function min>)
2024-09-04 18:31:48,548 - on stmt: $236binary_add.12 = n + post_avg
2024-09-04 18:31:48,548 - find_def var='n' stmt=$236binary_add.12 = n + post_avg
2024-09-04 18:31:48,548 - find_def_from_top label 212
2024-09-04 18:31:48,548 - idom 134 from label 212
2024-09-04 18:31:48,548 - find_def_from_bottom label 134
2024-09-04 18:31:48,549 - replaced with: $236binary_add.12 = n.7 + post_avg
2024-09-04 18:31:48,549 - on stmt: $240load_attr.14 = getattr(value=x, attr=shape)
2024-09-04 18:31:48,549 - on stmt: $const242.15 = const(int, 0)
2024-09-04 18:31:48,549 - on stmt: $244binary_subscr.16 = static_getitem(value=$240load_attr.14, index=0, index_var=$const242.15, fn=<built-in function getitem>)
2024-09-04 18:31:48,549 - on stmt: $246call_function.17 = call $230load_global.9($236binary_add.12, $244binary_subscr.16, func=$230load_global.9, args=[Var($236binary_add.12, utils.py:1239), Var($244binary_subscr.16, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,549 - on stmt: $248build_slice.18 = global(slice: <class 'slice'>)
2024-09-04 18:31:48,549 - on stmt: $248build_slice.19 = call $248build_slice.18($228call_function.8, $246call_function.17, func=$248build_slice.18, args=(Var($228call_function.8, utils.py:1239), Var($246call_function.17, utils.py:1239)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,549 - on stmt: $250binary_subscr.20 = getitem(value=x, index=$248build_slice.19, fn=<built-in function getitem>)
2024-09-04 18:31:48,549 - on stmt: avgn = call $214load_method.1($250binary_subscr.20, func=$214load_method.1, args=[Var($250binary_subscr.20, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,549 - on stmt: $262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:48,551 - find_def var='n' stmt=$262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:48,551 - find_def_from_top label 212
2024-09-04 18:31:48,551 - idom 134 from label 212
2024-09-04 18:31:48,551 - find_def_from_bottom label 134
2024-09-04 18:31:48,552 - replaced with: $262binary_subscr.26 = getitem(value=peaks, index=n.7, fn=<built-in function getitem>)
2024-09-04 18:31:48,552 - on stmt: $268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:48,552 - find_def var='n' stmt=$268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:48,552 - find_def_from_top label 212
2024-09-04 18:31:48,552 - idom 134 from label 212
2024-09-04 18:31:48,552 - find_def_from_bottom label 134
2024-09-04 18:31:48,552 - replaced with: $268binary_subscr.29 = getitem(value=x, index=n.7, fn=<built-in function getitem>)
2024-09-04 18:31:48,552 - on stmt: $274binary_add.32 = avgn + delta
2024-09-04 18:31:48,552 - on stmt: $276compare_op.33 = $268binary_subscr.29 >= $274binary_add.32
2024-09-04 18:31:48,552 - on stmt: $278inplace_and.34 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$262binary_subscr.26, rhs=$276compare_op.33, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:48,552 - on stmt: peaks[n] = $278inplace_and.34
2024-09-04 18:31:48,552 - find_def var='n' stmt=peaks[n] = $278inplace_and.34
2024-09-04 18:31:48,552 - find_def_from_top label 212
2024-09-04 18:31:48,552 - idom 134 from label 212
2024-09-04 18:31:48,552 - find_def_from_bottom label 134
2024-09-04 18:31:48,552 - replaced with: peaks[n.7] = $278inplace_and.34
2024-09-04 18:31:48,552 - on stmt: $288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:48,552 - find_def var='n' stmt=$288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:48,552 - find_def_from_top label 212
2024-09-04 18:31:48,552 - idom 134 from label 212
2024-09-04 18:31:48,552 - find_def_from_bottom label 134
2024-09-04 18:31:48,552 - replaced with: $288binary_subscr.37 = getitem(value=peaks, index=n.7, fn=<built-in function getitem>)
2024-09-04 18:31:48,552 - on stmt: bool290 = global(bool: <class 'bool'>)
2024-09-04 18:31:48,552 - on stmt: $290pred = call bool290($288binary_subscr.37, func=bool290, args=(Var($288binary_subscr.37, utils.py:1242),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,552 - on stmt: branch $290pred, 302, 292
2024-09-04 18:31:48,552 - ==== SSA block rewrite pass on 292
2024-09-04 18:31:48,555 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313408B20>
2024-09-04 18:31:48,555 - on stmt: $const294.1 = const(int, 1)
2024-09-04 18:31:48,555 - on stmt: $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:48,555 - find_def var='n' stmt=$296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:48,555 - find_def_from_top label 292
2024-09-04 18:31:48,555 - idom 212 from label 292
2024-09-04 18:31:48,555 - find_def_from_bottom label 212
2024-09-04 18:31:48,555 - find_def_from_top label 212
2024-09-04 18:31:48,556 - idom 134 from label 212
2024-09-04 18:31:48,556 - find_def_from_bottom label 134
2024-09-04 18:31:48,556 - replaced with: $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.7, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:48,556 - on stmt: n.3 = $296inplace_add.2
2024-09-04 18:31:48,556 - on stmt: jump 333
2024-09-04 18:31:48,556 - ==== SSA block rewrite pass on 302
2024-09-04 18:31:48,556 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313408B20>
2024-09-04 18:31:48,556 - on stmt: $const306.2 = const(int, 1)
2024-09-04 18:31:48,557 - on stmt: $308binary_add.3 = wait + $const306.2
2024-09-04 18:31:48,557 - on stmt: $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:48,557 - find_def var='n' stmt=$310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:48,557 - find_def_from_top label 302
2024-09-04 18:31:48,557 - idom 212 from label 302
2024-09-04 18:31:48,557 - find_def_from_bottom label 212
2024-09-04 18:31:48,557 - find_def_from_top label 212
2024-09-04 18:31:48,557 - idom 134 from label 212
2024-09-04 18:31:48,557 - find_def_from_bottom label 134
2024-09-04 18:31:48,557 - replaced with: $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.7, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:48,558 - on stmt: n.4 = $310inplace_add.4
2024-09-04 18:31:48,558 - on stmt: $318load_attr.7 = getattr(value=x, attr=shape)
2024-09-04 18:31:48,558 - on stmt: $const320.8 = const(int, 0)
2024-09-04 18:31:48,558 - on stmt: $322binary_subscr.9 = static_getitem(value=$318load_attr.7, index=0, index_var=$const320.8, fn=<built-in function getitem>)
2024-09-04 18:31:48,558 - on stmt: $324compare_op.10 = n < $322binary_subscr.9
2024-09-04 18:31:48,559 - find_def var='n' stmt=$324compare_op.10 = n < $322binary_subscr.9
2024-09-04 18:31:48,559 - replaced with: $324compare_op.10 = n.4 < $322binary_subscr.9
2024-09-04 18:31:48,559 - on stmt: bool326 = global(bool: <class 'bool'>)
2024-09-04 18:31:48,559 - on stmt: $326pred = call bool326($324compare_op.10, func=bool326, args=(Var($324compare_op.10, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,559 - on stmt: branch $326pred, 134, 328
2024-09-04 18:31:48,559 - ==== SSA block rewrite pass on 328
2024-09-04 18:31:48,559 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313408B20>
2024-09-04 18:31:48,559 - on stmt: $const328.0 = const(NoneType, None)
2024-09-04 18:31:48,560 - on stmt: $330return_value.1 = cast(value=$const328.0)
2024-09-04 18:31:48,560 - on stmt: return $330return_value.1
2024-09-04 18:31:48,560 - ==== SSA block rewrite pass on 332
2024-09-04 18:31:48,560 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313408B20>
2024-09-04 18:31:48,560 - on stmt: $const332.0 = const(NoneType, None)
2024-09-04 18:31:48,560 - on stmt: $334return_value.1 = cast(value=$const332.0)
2024-09-04 18:31:48,560 - on stmt: return $334return_value.1
2024-09-04 18:31:48,560 - ==== SSA block rewrite pass on 333
2024-09-04 18:31:48,560 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313408B20>
2024-09-04 18:31:48,560 - on stmt: jump 120
2024-09-04 18:31:48,592 - bytecode dump:
>          0	NOP(arg=None, lineno=570)
           2	LOAD_FAST(arg=0, lineno=571)
           4	LOAD_ATTR(arg=0, lineno=571)
           6	LOAD_CONST(arg=1, lineno=571)
           8	COMPARE_OP(arg=2, lineno=571)
          10	POP_JUMP_IF_FALSE(arg=11, lineno=571)
          12	LOAD_GLOBAL(arg=1, lineno=572)
          14	LOAD_CONST(arg=2, lineno=572)
          16	CALL_FUNCTION(arg=1, lineno=572)
          18	RAISE_VARARGS(arg=1, lineno=572)
>         20	LOAD_GLOBAL(arg=2, lineno=575)
          22	LOAD_METHOD(arg=3, lineno=575)
          24	LOAD_FAST(arg=0, lineno=575)
          26	CALL_METHOD(arg=1, lineno=575)
          28	STORE_FAST(arg=1, lineno=575)
          30	LOAD_GLOBAL(arg=4, lineno=576)
          32	LOAD_FAST(arg=1, lineno=576)
          34	CALL_FUNCTION(arg=1, lineno=576)
          36	LOAD_METHOD(arg=5, lineno=576)
          38	LOAD_CONST(arg=1, lineno=576)
          40	CALL_METHOD(arg=1, lineno=576)
          42	STORE_FAST(arg=2, lineno=576)
          44	LOAD_DEREF(arg=1, lineno=577)
          46	LOAD_FAST(arg=2, lineno=577)
          48	CALL_FUNCTION(arg=1, lineno=577)
          50	POP_JUMP_IF_FALSE(arg=29, lineno=577)
          52	LOAD_FAST(arg=2, lineno=578)
          54	RETURN_VALUE(arg=None, lineno=578)
>         56	LOAD_FAST(arg=1, lineno=580)
          58	GET_ITER(arg=None, lineno=580)
>         60	FOR_ITER(arg=21, lineno=580)
          62	STORE_FAST(arg=3, lineno=580)
          64	LOAD_FAST(arg=3, lineno=581)
          66	LOAD_METHOD(arg=6, lineno=581)
          68	CALL_METHOD(arg=0, lineno=581)
          70	STORE_FAST(arg=4, lineno=581)
          72	LOAD_DEREF(arg=1, lineno=582)
          74	LOAD_FAST(arg=4, lineno=582)
          76	CALL_FUNCTION(arg=1, lineno=582)
          78	POP_JUMP_IF_FALSE(arg=45, lineno=582)
          80	LOAD_FAST(arg=4, lineno=583)
          82	ROT_TWO(arg=None, lineno=583)
          84	POP_TOP(arg=None, lineno=583)
          86	RETURN_VALUE(arg=None, lineno=583)
>         88	LOAD_DEREF(arg=0, lineno=584)
          90	LOAD_FAST(arg=4, lineno=584)
          92	LOAD_FAST(arg=2, lineno=584)
          94	CALL_FUNCTION(arg=2, lineno=584)
          96	POP_JUMP_IF_FALSE(arg=52, lineno=584)
          98	LOAD_FAST(arg=4, lineno=585)
         100	STORE_FAST(arg=2, lineno=585)
>        102	JUMP_ABSOLUTE(arg=31, lineno=585)
>        104	LOAD_FAST(arg=2, lineno=586)
         106	RETURN_VALUE(arg=None, lineno=586)
2024-09-04 18:31:48,592 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:48,592 - stack: []
2024-09-04 18:31:48,592 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:48,592 - dispatch pc=0, inst=NOP(arg=None, lineno=570)
2024-09-04 18:31:48,592 - stack []
2024-09-04 18:31:48,592 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=571)
2024-09-04 18:31:48,592 - stack []
2024-09-04 18:31:48,592 - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=571)
2024-09-04 18:31:48,593 - stack ['$a2.0']
2024-09-04 18:31:48,593 - dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=571)
2024-09-04 18:31:48,593 - stack ['$4load_attr.1']
2024-09-04 18:31:48,593 - dispatch pc=8, inst=COMPARE_OP(arg=2, lineno=571)
2024-09-04 18:31:48,593 - stack ['$4load_attr.1', '$const6.2']
2024-09-04 18:31:48,593 - dispatch pc=10, inst=POP_JUMP_IF_FALSE(arg=11, lineno=571)
2024-09-04 18:31:48,593 - stack ['$8compare_op.3']
2024-09-04 18:31:48,593 - end state. edges=[Edge(pc=12, stack=(), blockstack=(), npush=0), Edge(pc=20, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:48,593 - pending: deque([State(pc_initial=12 nstack_initial=0), State(pc_initial=20 nstack_initial=0)])
2024-09-04 18:31:48,593 - stack: []
2024-09-04 18:31:48,593 - state.pc_initial: State(pc_initial=12 nstack_initial=0)
2024-09-04 18:31:48,593 - dispatch pc=12, inst=LOAD_GLOBAL(arg=1, lineno=572)
2024-09-04 18:31:48,594 - stack []
2024-09-04 18:31:48,594 - dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=572)
2024-09-04 18:31:48,594 - stack ['$12load_global.0']
2024-09-04 18:31:48,594 - dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=572)
2024-09-04 18:31:48,594 - stack ['$12load_global.0', '$const14.1']
2024-09-04 18:31:48,594 - dispatch pc=18, inst=RAISE_VARARGS(arg=1, lineno=572)
2024-09-04 18:31:48,594 - stack ['$16call_function.2']
2024-09-04 18:31:48,594 - end state. edges=[]
2024-09-04 18:31:48,594 - pending: deque([State(pc_initial=20 nstack_initial=0)])
2024-09-04 18:31:48,594 - stack: []
2024-09-04 18:31:48,594 - state.pc_initial: State(pc_initial=20 nstack_initial=0)
2024-09-04 18:31:48,594 - dispatch pc=20, inst=LOAD_GLOBAL(arg=2, lineno=575)
2024-09-04 18:31:48,594 - stack []
2024-09-04 18:31:48,595 - dispatch pc=22, inst=LOAD_METHOD(arg=3, lineno=575)
2024-09-04 18:31:48,595 - stack ['$20load_global.0']
2024-09-04 18:31:48,595 - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=575)
2024-09-04 18:31:48,595 - stack ['$22load_method.1']
2024-09-04 18:31:48,595 - dispatch pc=26, inst=CALL_METHOD(arg=1, lineno=575)
2024-09-04 18:31:48,595 - stack ['$22load_method.1', '$a24.2']
2024-09-04 18:31:48,595 - dispatch pc=28, inst=STORE_FAST(arg=1, lineno=575)
2024-09-04 18:31:48,595 - stack ['$26call_method.3']
2024-09-04 18:31:48,595 - dispatch pc=30, inst=LOAD_GLOBAL(arg=4, lineno=576)
2024-09-04 18:31:48,595 - stack []
2024-09-04 18:31:48,595 - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=576)
2024-09-04 18:31:48,595 - stack ['$30load_global.4']
2024-09-04 18:31:48,596 - dispatch pc=34, inst=CALL_FUNCTION(arg=1, lineno=576)
2024-09-04 18:31:48,596 - stack ['$30load_global.4', '$it32.5']
2024-09-04 18:31:48,596 - dispatch pc=36, inst=LOAD_METHOD(arg=5, lineno=576)
2024-09-04 18:31:48,596 - stack ['$34call_function.6']
2024-09-04 18:31:48,596 - dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=576)
2024-09-04 18:31:48,596 - stack ['$36load_method.7']
2024-09-04 18:31:48,596 - dispatch pc=40, inst=CALL_METHOD(arg=1, lineno=576)
2024-09-04 18:31:48,596 - stack ['$36load_method.7', '$const38.8']
2024-09-04 18:31:48,596 - dispatch pc=42, inst=STORE_FAST(arg=2, lineno=576)
2024-09-04 18:31:48,596 - stack ['$40call_method.9']
2024-09-04 18:31:48,596 - dispatch pc=44, inst=LOAD_DEREF(arg=1, lineno=577)
2024-09-04 18:31:48,596 - stack []
2024-09-04 18:31:48,597 - dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=577)
2024-09-04 18:31:48,597 - stack ['$44load_deref.10']
2024-09-04 18:31:48,597 - dispatch pc=48, inst=CALL_FUNCTION(arg=1, lineno=577)
2024-09-04 18:31:48,597 - stack ['$44load_deref.10', '$max_value46.11']
2024-09-04 18:31:48,597 - dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=29, lineno=577)
2024-09-04 18:31:48,597 - stack ['$48call_function.12']
2024-09-04 18:31:48,597 - end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=56, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:48,597 - pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=56 nstack_initial=0)])
2024-09-04 18:31:48,597 - stack: []
2024-09-04 18:31:48,597 - state.pc_initial: State(pc_initial=52 nstack_initial=0)
2024-09-04 18:31:48,597 - dispatch pc=52, inst=LOAD_FAST(arg=2, lineno=578)
2024-09-04 18:31:48,597 - stack []
2024-09-04 18:31:48,597 - dispatch pc=54, inst=RETURN_VALUE(arg=None, lineno=578)
2024-09-04 18:31:48,598 - stack ['$max_value52.0']
2024-09-04 18:31:48,598 - end state. edges=[]
2024-09-04 18:31:48,598 - pending: deque([State(pc_initial=56 nstack_initial=0)])
2024-09-04 18:31:48,598 - stack: []
2024-09-04 18:31:48,598 - state.pc_initial: State(pc_initial=56 nstack_initial=0)
2024-09-04 18:31:48,598 - dispatch pc=56, inst=LOAD_FAST(arg=1, lineno=580)
2024-09-04 18:31:48,598 - stack []
2024-09-04 18:31:48,598 - dispatch pc=58, inst=GET_ITER(arg=None, lineno=580)
2024-09-04 18:31:48,598 - stack ['$it56.0']
2024-09-04 18:31:48,598 - end state. edges=[Edge(pc=60, stack=('$58get_iter.1',), blockstack=(), npush=0)]
2024-09-04 18:31:48,598 - pending: deque([State(pc_initial=60 nstack_initial=1)])
2024-09-04 18:31:48,598 - stack: ['$phi60.0']
2024-09-04 18:31:48,598 - state.pc_initial: State(pc_initial=60 nstack_initial=1)
2024-09-04 18:31:48,599 - dispatch pc=60, inst=FOR_ITER(arg=21, lineno=580)
2024-09-04 18:31:48,599 - stack ['$phi60.0']
2024-09-04 18:31:48,599 - end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=('$phi60.0', '$60for_iter.2'), blockstack=(), npush=0)]
2024-09-04 18:31:48,599 - pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=62 nstack_initial=2)])
2024-09-04 18:31:48,599 - stack: []
2024-09-04 18:31:48,599 - state.pc_initial: State(pc_initial=104 nstack_initial=0)
2024-09-04 18:31:48,599 - dispatch pc=104, inst=LOAD_FAST(arg=2, lineno=586)
2024-09-04 18:31:48,599 - stack []
2024-09-04 18:31:48,599 - dispatch pc=106, inst=RETURN_VALUE(arg=None, lineno=586)
2024-09-04 18:31:48,599 - stack ['$max_value104.0']
2024-09-04 18:31:48,599 - end state. edges=[]
2024-09-04 18:31:48,599 - pending: deque([State(pc_initial=62 nstack_initial=2)])
2024-09-04 18:31:48,599 - stack: ['$phi62.0', '$phi62.1']
2024-09-04 18:31:48,600 - state.pc_initial: State(pc_initial=62 nstack_initial=2)
2024-09-04 18:31:48,600 - dispatch pc=62, inst=STORE_FAST(arg=3, lineno=580)
2024-09-04 18:31:48,600 - stack ['$phi62.0', '$phi62.1']
2024-09-04 18:31:48,600 - dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=581)
2024-09-04 18:31:48,600 - stack ['$phi62.0']
2024-09-04 18:31:48,600 - dispatch pc=66, inst=LOAD_METHOD(arg=6, lineno=581)
2024-09-04 18:31:48,601 - stack ['$phi62.0', '$view64.2']
2024-09-04 18:31:48,601 - dispatch pc=68, inst=CALL_METHOD(arg=0, lineno=581)
2024-09-04 18:31:48,601 - stack ['$phi62.0', '$66load_method.3']
2024-09-04 18:31:48,601 - dispatch pc=70, inst=STORE_FAST(arg=4, lineno=581)
2024-09-04 18:31:48,601 - stack ['$phi62.0', '$68call_method.4']
2024-09-04 18:31:48,601 - dispatch pc=72, inst=LOAD_DEREF(arg=1, lineno=582)
2024-09-04 18:31:48,601 - stack ['$phi62.0']
2024-09-04 18:31:48,601 - dispatch pc=74, inst=LOAD_FAST(arg=4, lineno=582)
2024-09-04 18:31:48,601 - stack ['$phi62.0', '$72load_deref.5']
2024-09-04 18:31:48,601 - dispatch pc=76, inst=CALL_FUNCTION(arg=1, lineno=582)
2024-09-04 18:31:48,602 - stack ['$phi62.0', '$72load_deref.5', '$v74.6']
2024-09-04 18:31:48,602 - dispatch pc=78, inst=POP_JUMP_IF_FALSE(arg=45, lineno=582)
2024-09-04 18:31:48,602 - stack ['$phi62.0', '$76call_function.7']
2024-09-04 18:31:48,602 - end state. edges=[Edge(pc=80, stack=('$phi62.0',), blockstack=(), npush=0), Edge(pc=88, stack=('$phi62.0',), blockstack=(), npush=0)]
2024-09-04 18:31:48,602 - pending: deque([State(pc_initial=80 nstack_initial=1), State(pc_initial=88 nstack_initial=1)])
2024-09-04 18:31:48,602 - stack: ['$phi80.0']
2024-09-04 18:31:48,602 - state.pc_initial: State(pc_initial=80 nstack_initial=1)
2024-09-04 18:31:48,602 - dispatch pc=80, inst=LOAD_FAST(arg=4, lineno=583)
2024-09-04 18:31:48,602 - stack ['$phi80.0']
2024-09-04 18:31:48,603 - dispatch pc=82, inst=ROT_TWO(arg=None, lineno=583)
2024-09-04 18:31:48,603 - stack ['$phi80.0', '$v80.1']
2024-09-04 18:31:48,603 - dispatch pc=84, inst=POP_TOP(arg=None, lineno=583)
2024-09-04 18:31:48,603 - stack ['$v80.1', '$phi80.0']
2024-09-04 18:31:48,603 - dispatch pc=86, inst=RETURN_VALUE(arg=None, lineno=583)
2024-09-04 18:31:48,603 - stack ['$v80.1']
2024-09-04 18:31:48,603 - end state. edges=[]
2024-09-04 18:31:48,603 - pending: deque([State(pc_initial=88 nstack_initial=1)])
2024-09-04 18:31:48,603 - stack: ['$phi88.0']
2024-09-04 18:31:48,603 - state.pc_initial: State(pc_initial=88 nstack_initial=1)
2024-09-04 18:31:48,604 - dispatch pc=88, inst=LOAD_DEREF(arg=0, lineno=584)
2024-09-04 18:31:48,604 - stack ['$phi88.0']
2024-09-04 18:31:48,604 - dispatch pc=90, inst=LOAD_FAST(arg=4, lineno=584)
2024-09-04 18:31:48,604 - stack ['$phi88.0', '$88load_deref.1']
2024-09-04 18:31:48,604 - dispatch pc=92, inst=LOAD_FAST(arg=2, lineno=584)
2024-09-04 18:31:48,604 - stack ['$phi88.0', '$88load_deref.1', '$v90.2']
2024-09-04 18:31:48,604 - dispatch pc=94, inst=CALL_FUNCTION(arg=2, lineno=584)
2024-09-04 18:31:48,604 - stack ['$phi88.0', '$88load_deref.1', '$v90.2', '$max_value92.3']
2024-09-04 18:31:48,604 - dispatch pc=96, inst=POP_JUMP_IF_FALSE(arg=52, lineno=584)
2024-09-04 18:31:48,604 - stack ['$phi88.0', '$94call_function.4']
2024-09-04 18:31:48,605 - end state. edges=[Edge(pc=98, stack=('$phi88.0',), blockstack=(), npush=0), Edge(pc=102, stack=('$phi88.0',), blockstack=(), npush=0)]
2024-09-04 18:31:48,605 - pending: deque([State(pc_initial=98 nstack_initial=1), State(pc_initial=102 nstack_initial=1)])
2024-09-04 18:31:48,605 - stack: ['$phi98.0']
2024-09-04 18:31:48,605 - state.pc_initial: State(pc_initial=98 nstack_initial=1)
2024-09-04 18:31:48,605 - dispatch pc=98, inst=LOAD_FAST(arg=4, lineno=585)
2024-09-04 18:31:48,605 - stack ['$phi98.0']
2024-09-04 18:31:48,605 - dispatch pc=100, inst=STORE_FAST(arg=2, lineno=585)
2024-09-04 18:31:48,605 - stack ['$phi98.0', '$v98.1']
2024-09-04 18:31:48,605 - end state. edges=[Edge(pc=102, stack=('$phi98.0',), blockstack=(), npush=0)]
2024-09-04 18:31:48,606 - pending: deque([State(pc_initial=102 nstack_initial=1), State(pc_initial=102 nstack_initial=1)])
2024-09-04 18:31:48,606 - stack: ['$phi102.0']
2024-09-04 18:31:48,606 - state.pc_initial: State(pc_initial=102 nstack_initial=1)
2024-09-04 18:31:48,606 - dispatch pc=102, inst=JUMP_ABSOLUTE(arg=31, lineno=585)
2024-09-04 18:31:48,606 - stack ['$phi102.0']
2024-09-04 18:31:48,606 - end state. edges=[Edge(pc=60, stack=('$phi102.0',), blockstack=(), npush=0)]
2024-09-04 18:31:48,606 - pending: deque([State(pc_initial=102 nstack_initial=1), State(pc_initial=60 nstack_initial=1)])
2024-09-04 18:31:48,606 - pending: deque([State(pc_initial=60 nstack_initial=1)])
2024-09-04 18:31:48,606 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:48,607 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=56 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=1): {'$phi60.0'},
             State(pc_initial=62 nstack_initial=2): {'$phi62.1'},
             State(pc_initial=80 nstack_initial=1): set(),
             State(pc_initial=88 nstack_initial=1): set(),
             State(pc_initial=98 nstack_initial=1): set(),
             State(pc_initial=102 nstack_initial=1): set(),
             State(pc_initial=104 nstack_initial=0): set()})
2024-09-04 18:31:48,607 - defmap: {'$phi60.0': State(pc_initial=56 nstack_initial=0),
 '$phi62.1': State(pc_initial=60 nstack_initial=1)}
2024-09-04 18:31:48,607 - phismap: defaultdict(<class 'set'>,
            {'$phi102.0': {('$phi88.0', State(pc_initial=88 nstack_initial=1)),
                           ('$phi98.0', State(pc_initial=98 nstack_initial=1))},
             '$phi60.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0)),
                          ('$phi102.0',
                           State(pc_initial=102 nstack_initial=1))},
             '$phi62.0': {('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi80.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi88.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi98.0': {('$phi88.0', State(pc_initial=88 nstack_initial=1))}})
2024-09-04 18:31:48,608 - changing phismap: defaultdict(<class 'set'>,
            {'$phi102.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi60.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi80.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi88.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi98.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))}})
2024-09-04 18:31:48,608 - changing phismap: defaultdict(<class 'set'>,
            {'$phi102.0': {('$58get_iter.1',
                            State(pc_initial=56 nstack_initial=0))},
             '$phi60.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi80.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi88.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi98.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))}})
2024-09-04 18:31:48,609 - changing phismap: defaultdict(<class 'set'>,
            {'$phi102.0': {('$58get_iter.1',
                            State(pc_initial=56 nstack_initial=0))},
             '$phi60.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi80.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi88.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi98.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))}})
2024-09-04 18:31:48,609 - keep phismap: {'$phi60.0': {('$58get_iter.1', State(pc_initial=56 nstack_initial=0))},
 '$phi62.1': {('$60for_iter.2', State(pc_initial=60 nstack_initial=1))}}
2024-09-04 18:31:48,610 - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=56 nstack_initial=0): {'$phi60.0': '$58get_iter.1'},
             State(pc_initial=60 nstack_initial=1): {'$phi62.1': '$60for_iter.2'}})
2024-09-04 18:31:48,610 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:48,610 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'item': '$a2.0', 'res': '$4load_attr.1'}), (6, {'res': '$const6.2'}), (8, {'lhs': '$4load_attr.1', 'rhs': '$const6.2', 'res': '$8compare_op.3'}), (10, {'pred': '$8compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: (), 20: ()})
2024-09-04 18:31:48,611 - block_infos State(pc_initial=12 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$const14.1'}), (16, {'func': '$12load_global.0', 'args': ['$const14.1'], 'res': '$16call_function.2'}), (18, {'exc': '$16call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:48,611 - block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$20load_global.0'}), (22, {'item': '$20load_global.0', 'res': '$22load_method.1'}), (24, {'res': '$a24.2'}), (26, {'func': '$22load_method.1', 'args': ['$a24.2'], 'res': '$26call_method.3'}), (28, {'value': '$26call_method.3'}), (30, {'res': '$30load_global.4'}), (32, {'res': '$it32.5'}), (34, {'func': '$30load_global.4', 'args': ['$it32.5'], 'res': '$34call_function.6'}), (36, {'item': '$34call_function.6', 'res': '$36load_method.7'}), (38, {'res': '$const38.8'}), (40, {'func': '$36load_method.7', 'args': ['$const38.8'], 'res': '$40call_method.9'}), (42, {'value': '$40call_method.9'}), (44, {'res': '$44load_deref.10'}), (46, {'res': '$max_value46.11'}), (48, {'func': '$44load_deref.10', 'args': ['$max_value46.11'], 'res': '$48call_function.12'}), (50, {'pred': '$48call_function.12'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 56: ()})
2024-09-04 18:31:48,611 - block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$max_value52.0'}), (54, {'retval': '$max_value52.0', 'castval': '$54return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:48,611 - block_infos State(pc_initial=56 nstack_initial=0):
AdaptBlockInfo(insts=((56, {'res': '$it56.0'}), (58, {'value': '$it56.0', 'res': '$58get_iter.1'})), outgoing_phis={'$phi60.0': '$58get_iter.1'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$58get_iter.1',)})
2024-09-04 18:31:48,611 - block_infos State(pc_initial=60 nstack_initial=1):
AdaptBlockInfo(insts=((60, {'iterator': '$phi60.0', 'pair': '$60for_iter.1', 'indval': '$60for_iter.2', 'pred': '$60for_iter.3'}),), outgoing_phis={'$phi62.1': '$60for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 62: ('$phi60.0', '$60for_iter.2')})
2024-09-04 18:31:48,611 - block_infos State(pc_initial=62 nstack_initial=2):
AdaptBlockInfo(insts=((62, {'value': '$phi62.1'}), (64, {'res': '$view64.2'}), (66, {'item': '$view64.2', 'res': '$66load_method.3'}), (68, {'func': '$66load_method.3', 'args': [], 'res': '$68call_method.4'}), (70, {'value': '$68call_method.4'}), (72, {'res': '$72load_deref.5'}), (74, {'res': '$v74.6'}), (76, {'func': '$72load_deref.5', 'args': ['$v74.6'], 'res': '$76call_function.7'}), (78, {'pred': '$76call_function.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi62.0',), 88: ('$phi62.0',)})
2024-09-04 18:31:48,611 - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'res': '$v80.1'}), (86, {'retval': '$v80.1', 'castval': '$86return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:48,611 - block_infos State(pc_initial=88 nstack_initial=1):
AdaptBlockInfo(insts=((88, {'res': '$88load_deref.1'}), (90, {'res': '$v90.2'}), (92, {'res': '$max_value92.3'}), (94, {'func': '$88load_deref.1', 'args': ['$v90.2', '$max_value92.3'], 'res': '$94call_function.4'}), (96, {'pred': '$94call_function.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={98: ('$phi88.0',), 102: ('$phi88.0',)})
2024-09-04 18:31:48,611 - block_infos State(pc_initial=98 nstack_initial=1):
AdaptBlockInfo(insts=((98, {'res': '$v98.1'}), (100, {'value': '$v98.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={102: ('$phi98.0',)})
2024-09-04 18:31:48,611 - block_infos State(pc_initial=102 nstack_initial=1):
AdaptBlockInfo(insts=((102, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$phi102.0',)})
2024-09-04 18:31:48,612 - block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$max_value104.0'}), (106, {'retval': '$max_value104.0', 'castval': '$106return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:48,615 - label 0:
    a = arg(0, name=a)                       ['a']
    $4load_attr.1 = getattr(value=a, attr=size) ['$4load_attr.1', 'a']
    $const6.2 = const(int, 0)                ['$const6.2']
    $8compare_op.3 = $4load_attr.1 == $const6.2 ['$4load_attr.1', '$8compare_op.3', '$const6.2']
    bool10 = global(bool: <class 'bool'>)    ['bool10']
    $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:571),), kws=(), vararg=None, varkwarg=None, target=None) ['$10pred', '$8compare_op.3', 'bool10']
    branch $10pred, 12, 20                   ['$10pred']
label 12:
    $12load_global.0 = global(ValueError: <class 'ValueError'>) ['$12load_global.0']
    $const14.1 = const(str, zero-size array to reduction operation maximum which has no identity) ['$const14.1']
    $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:572)], kws=(), vararg=None, varkwarg=None, target=None) ['$12load_global.0', '$16call_function.2', '$const14.1']
    raise $16call_function.2                 ['$16call_function.2']
label 20:
    $20load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$20load_global.0']
    $22load_method.1 = getattr(value=$20load_global.0, attr=nditer) ['$20load_global.0', '$22load_method.1']
    it = call $22load_method.1(a, func=$22load_method.1, args=[Var(a, arraymath.py:570)], kws=(), vararg=None, varkwarg=None, target=None) ['$22load_method.1', 'a', 'it']
    $30load_global.4 = global(next: <built-in function next>) ['$30load_global.4']
    $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.4', '$34call_function.6', 'it']
    $36load_method.7 = getattr(value=$34call_function.6, attr=take) ['$34call_function.6', '$36load_method.7']
    $const38.8 = const(int, 0)               ['$const38.8']
    max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None) ['$36load_method.7', '$const38.8', 'max_value']
    $44load_deref.10 = freevar(pre_return_func: <ufunc 'isnan'>) ['$44load_deref.10']
    $48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None) ['$44load_deref.10', '$48call_function.12', 'max_value']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48call_function.12, func=bool50, args=(Var($48call_function.12, arraymath.py:577),), kws=(), vararg=None, varkwarg=None, target=None) ['$48call_function.12', '$50pred', 'bool50']
    branch $50pred, 52, 56                   ['$50pred']
label 52:
    $54return_value.1 = cast(value=max_value) ['$54return_value.1', 'max_value']
    return $54return_value.1                 ['$54return_value.1']
label 56:
    $58get_iter.1 = getiter(value=it)        ['$58get_iter.1', 'it']
    $phi60.0 = $58get_iter.1                 ['$58get_iter.1', '$phi60.0']
    jump 60                                  []
label 60:
    $60for_iter.1 = iternext(value=$phi60.0) ['$60for_iter.1', '$phi60.0']
    $60for_iter.2 = pair_first(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.2']
    $60for_iter.3 = pair_second(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.3']
    $phi62.1 = $60for_iter.2                 ['$60for_iter.2', '$phi62.1']
    branch $60for_iter.3, 62, 104            ['$60for_iter.3']
label 62:
    view = $phi62.1                          ['$phi62.1', 'view']
    $66load_method.3 = getattr(value=view, attr=item) ['$66load_method.3', 'view']
    v = call $66load_method.3(func=$66load_method.3, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_method.3', 'v']
    $72load_deref.5 = freevar(pre_return_func: <ufunc 'isnan'>) ['$72load_deref.5']
    $76call_function.7 = call $72load_deref.5(v, func=$72load_deref.5, args=[Var(v, arraymath.py:581)], kws=(), vararg=None, varkwarg=None, target=None) ['$72load_deref.5', '$76call_function.7', 'v']
    bool78 = global(bool: <class 'bool'>)    ['bool78']
    $78pred = call bool78($76call_function.7, func=bool78, args=(Var($76call_function.7, arraymath.py:582),), kws=(), vararg=None, varkwarg=None, target=None) ['$76call_function.7', '$78pred', 'bool78']
    branch $78pred, 80, 88                   ['$78pred']
label 80:
    $86return_value.2 = cast(value=v)        ['$86return_value.2', 'v']
    return $86return_value.2                 ['$86return_value.2']
label 88:
    $88load_deref.1 = freevar(comparator: <function max_comparator at 0x0000024317C80430>) ['$88load_deref.1']
    $94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None) ['$88load_deref.1', '$94call_function.4', 'max_value', 'v']
    bool96 = global(bool: <class 'bool'>)    ['bool96']
    $96pred = call bool96($94call_function.4, func=bool96, args=(Var($94call_function.4, arraymath.py:584),), kws=(), vararg=None, varkwarg=None, target=None) ['$94call_function.4', '$96pred', 'bool96']
    branch $96pred, 98, 102                  ['$96pred']
label 98:
    max_value = v                            ['max_value', 'v']
    jump 102                                 []
label 102:
    jump 60                                  []
label 104:
    $106return_value.1 = cast(value=max_value) ['$106return_value.1', 'max_value']
    return $106return_value.1                ['$106return_value.1']

2024-09-04 18:31:48,640 - ==== SSA block analysis pass on 0
2024-09-04 18:31:48,641 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D1E2170>
2024-09-04 18:31:48,641 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:48,641 - on stmt: $4load_attr.1 = getattr(value=a, attr=size)
2024-09-04 18:31:48,641 - on stmt: $const6.2 = const(int, 0)
2024-09-04 18:31:48,641 - on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2024-09-04 18:31:48,641 - on stmt: bool10 = global(bool: <class 'bool'>)
2024-09-04 18:31:48,641 - on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:571),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,641 - on stmt: branch $10pred, 12, 20
2024-09-04 18:31:48,641 - ==== SSA block analysis pass on 12
2024-09-04 18:31:48,641 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D1E2170>
2024-09-04 18:31:48,641 - on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:48,641 - on stmt: $const14.1 = const(str, zero-size array to reduction operation maximum which has no identity)
2024-09-04 18:31:48,641 - on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:572)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,642 - on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
2024-09-04 18:31:48,642 - ==== SSA block analysis pass on 20
2024-09-04 18:31:48,642 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D1E2170>
2024-09-04 18:31:48,642 - on stmt: $20load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:48,642 - on stmt: $22load_method.1 = getattr(value=$20load_global.0, attr=nditer)
2024-09-04 18:31:48,642 - on stmt: it = call $22load_method.1(a, func=$22load_method.1, args=[Var(a, arraymath.py:570)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,642 - on stmt: $30load_global.4 = global(next: <built-in function next>)
2024-09-04 18:31:48,642 - on stmt: $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,642 - on stmt: $36load_method.7 = getattr(value=$34call_function.6, attr=take)
2024-09-04 18:31:48,642 - on stmt: $const38.8 = const(int, 0)
2024-09-04 18:31:48,642 - on stmt: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,643 - on stmt: $44load_deref.10 = freevar(pre_return_func: <ufunc 'isnan'>)
2024-09-04 18:31:48,643 - on stmt: $48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,643 - on stmt: bool50 = global(bool: <class 'bool'>)
2024-09-04 18:31:48,643 - on stmt: $50pred = call bool50($48call_function.12, func=bool50, args=(Var($48call_function.12, arraymath.py:577),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,643 - on stmt: branch $50pred, 52, 56
2024-09-04 18:31:48,643 - ==== SSA block analysis pass on 52
2024-09-04 18:31:48,643 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D1E2170>
2024-09-04 18:31:48,643 - on stmt: $54return_value.1 = cast(value=max_value)
2024-09-04 18:31:48,643 - on stmt: return $54return_value.1
2024-09-04 18:31:48,643 - ==== SSA block analysis pass on 56
2024-09-04 18:31:48,643 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D1E2170>
2024-09-04 18:31:48,643 - on stmt: $58get_iter.1 = getiter(value=it)
2024-09-04 18:31:48,643 - on stmt: $phi60.0 = $58get_iter.1
2024-09-04 18:31:48,644 - on stmt: jump 60
2024-09-04 18:31:48,644 - ==== SSA block analysis pass on 60
2024-09-04 18:31:48,644 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D1E2170>
2024-09-04 18:31:48,644 - on stmt: $60for_iter.1 = iternext(value=$phi60.0)
2024-09-04 18:31:48,644 - on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
2024-09-04 18:31:48,644 - on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
2024-09-04 18:31:48,644 - on stmt: $phi62.1 = $60for_iter.2
2024-09-04 18:31:48,644 - on stmt: branch $60for_iter.3, 62, 104
2024-09-04 18:31:48,644 - ==== SSA block analysis pass on 62
2024-09-04 18:31:48,644 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D1E2170>
2024-09-04 18:31:48,644 - on stmt: view = $phi62.1
2024-09-04 18:31:48,644 - on stmt: $66load_method.3 = getattr(value=view, attr=item)
2024-09-04 18:31:48,644 - on stmt: v = call $66load_method.3(func=$66load_method.3, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,644 - on stmt: $72load_deref.5 = freevar(pre_return_func: <ufunc 'isnan'>)
2024-09-04 18:31:48,645 - on stmt: $76call_function.7 = call $72load_deref.5(v, func=$72load_deref.5, args=[Var(v, arraymath.py:581)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,645 - on stmt: bool78 = global(bool: <class 'bool'>)
2024-09-04 18:31:48,645 - on stmt: $78pred = call bool78($76call_function.7, func=bool78, args=(Var($76call_function.7, arraymath.py:582),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,645 - on stmt: branch $78pred, 80, 88
2024-09-04 18:31:48,645 - ==== SSA block analysis pass on 80
2024-09-04 18:31:48,645 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D1E2170>
2024-09-04 18:31:48,645 - on stmt: $86return_value.2 = cast(value=v)
2024-09-04 18:31:48,645 - on stmt: return $86return_value.2
2024-09-04 18:31:48,645 - ==== SSA block analysis pass on 88
2024-09-04 18:31:48,645 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D1E2170>
2024-09-04 18:31:48,645 - on stmt: $88load_deref.1 = freevar(comparator: <function max_comparator at 0x0000024317C80430>)
2024-09-04 18:31:48,645 - on stmt: $94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,645 - on stmt: bool96 = global(bool: <class 'bool'>)
2024-09-04 18:31:48,646 - on stmt: $96pred = call bool96($94call_function.4, func=bool96, args=(Var($94call_function.4, arraymath.py:584),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,646 - on stmt: branch $96pred, 98, 102
2024-09-04 18:31:48,646 - ==== SSA block analysis pass on 98
2024-09-04 18:31:48,646 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D1E2170>
2024-09-04 18:31:48,646 - on stmt: max_value = v
2024-09-04 18:31:48,646 - on stmt: jump 102
2024-09-04 18:31:48,646 - ==== SSA block analysis pass on 102
2024-09-04 18:31:48,646 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D1E2170>
2024-09-04 18:31:48,646 - on stmt: jump 60
2024-09-04 18:31:48,646 - ==== SSA block analysis pass on 104
2024-09-04 18:31:48,646 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431D1E2170>
2024-09-04 18:31:48,646 - on stmt: $106return_value.1 = cast(value=max_value)
2024-09-04 18:31:48,646 - on stmt: return $106return_value.1
2024-09-04 18:31:48,648 - defs defaultdict(<class 'list'>,
            {'$106return_value.1': [(<numba.core.ir.Assign object at 0x00000243178C8BE0>,
                                     104)],
             '$10pred': [(<numba.core.ir.Assign object at 0x00000243178311E0>,
                          0)],
             '$12load_global.0': [(<numba.core.ir.Assign object at 0x00000243178305E0>,
                                   12)],
             '$16call_function.2': [(<numba.core.ir.Assign object at 0x00000243178300D0>,
                                     12)],
             '$20load_global.0': [(<numba.core.ir.Assign object at 0x0000024317830580>,
                                   20)],
             '$22load_method.1': [(<numba.core.ir.Assign object at 0x0000024317831000>,
                                   20)],
             '$30load_global.4': [(<numba.core.ir.Assign object at 0x0000024317833460>,
                                   20)],
             '$34call_function.6': [(<numba.core.ir.Assign object at 0x0000024317832890>,
                                     20)],
             '$36load_method.7': [(<numba.core.ir.Assign object at 0x00000243178329E0>,
                                   20)],
             '$44load_deref.10': [(<numba.core.ir.Assign object at 0x0000024317831B10>,
                                   20)],
             '$48call_function.12': [(<numba.core.ir.Assign object at 0x0000024317833160>,
                                      20)],
             '$4load_attr.1': [(<numba.core.ir.Assign object at 0x0000024317832C80>,
                                0)],
             '$50pred': [(<numba.core.ir.Assign object at 0x0000024317833430>,
                          20)],
             '$54return_value.1': [(<numba.core.ir.Assign object at 0x00000243178C88E0>,
                                    52)],
             '$58get_iter.1': [(<numba.core.ir.Assign object at 0x00000243178CA410>,
                                56)],
             '$60for_iter.1': [(<numba.core.ir.Assign object at 0x00000243178CBAF0>,
                                60)],
             '$60for_iter.2': [(<numba.core.ir.Assign object at 0x00000243178C9BA0>,
                                60)],
             '$60for_iter.3': [(<numba.core.ir.Assign object at 0x00000243178C9990>,
                                60)],
             '$66load_method.3': [(<numba.core.ir.Assign object at 0x00000243178C8DF0>,
                                   62)],
             '$72load_deref.5': [(<numba.core.ir.Assign object at 0x00000243178C9C60>,
                                  62)],
             '$76call_function.7': [(<numba.core.ir.Assign object at 0x00000243178C82B0>,
                                     62)],
             '$78pred': [(<numba.core.ir.Assign object at 0x00000243178C9DE0>,
                          62)],
             '$86return_value.2': [(<numba.core.ir.Assign object at 0x00000243178CB9D0>,
                                    80)],
             '$88load_deref.1': [(<numba.core.ir.Assign object at 0x00000243178C9900>,
                                  88)],
             '$8compare_op.3': [(<numba.core.ir.Assign object at 0x0000024317831900>,
                                 0)],
             '$94call_function.4': [(<numba.core.ir.Assign object at 0x00000243178C9E40>,
                                     88)],
             '$96pred': [(<numba.core.ir.Assign object at 0x00000243178CAC50>,
                          88)],
             '$const14.1': [(<numba.core.ir.Assign object at 0x0000024317833070>,
                             12)],
             '$const38.8': [(<numba.core.ir.Assign object at 0x0000024317832E00>,
                             20)],
             '$const6.2': [(<numba.core.ir.Assign object at 0x00000243178335B0>,
                            0)],
             '$phi60.0': [(<numba.core.ir.Assign object at 0x00000243178CBA30>,
                           56)],
             '$phi62.1': [(<numba.core.ir.Assign object at 0x00000243178CBB20>,
                           60)],
             'a': [(<numba.core.ir.Assign object at 0x000002431342B7C0>, 0)],
             'bool10': [(<numba.core.ir.Assign object at 0x00000243178301C0>,
                         0)],
             'bool50': [(<numba.core.ir.Assign object at 0x0000024317832050>,
                         20)],
             'bool78': [(<numba.core.ir.Assign object at 0x00000243178C8E80>,
                         62)],
             'bool96': [(<numba.core.ir.Assign object at 0x00000243178CBD60>,
                         88)],
             'it': [(<numba.core.ir.Assign object at 0x00000243178334F0>, 20)],
             'max_value': [(<numba.core.ir.Assign object at 0x0000024317832980>,
                            20),
                           (<numba.core.ir.Assign object at 0x00000243178CA950>,
                            98)],
             'v': [(<numba.core.ir.Assign object at 0x00000243178CB460>, 62)],
             'view': [(<numba.core.ir.Assign object at 0x00000243178C9FC0>,
                       62)]})
2024-09-04 18:31:48,649 - SSA violators <numba.core.utils.OrderedSet object at 0x000002431D1E2170>
2024-09-04 18:31:48,649 - Fix SSA violator on var max_value
2024-09-04 18:31:48,649 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:48,649 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1E3B20>
2024-09-04 18:31:48,649 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:48,649 - on stmt: $4load_attr.1 = getattr(value=a, attr=size)
2024-09-04 18:31:48,649 - on stmt: $const6.2 = const(int, 0)
2024-09-04 18:31:48,649 - on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2024-09-04 18:31:48,649 - on stmt: bool10 = global(bool: <class 'bool'>)
2024-09-04 18:31:48,649 - on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:571),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,649 - on stmt: branch $10pred, 12, 20
2024-09-04 18:31:48,649 - ==== SSA block rewrite pass on 12
2024-09-04 18:31:48,649 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1E3B20>
2024-09-04 18:31:48,649 - on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:48,649 - on stmt: $const14.1 = const(str, zero-size array to reduction operation maximum which has no identity)
2024-09-04 18:31:48,651 - on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:572)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,651 - on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
2024-09-04 18:31:48,651 - ==== SSA block rewrite pass on 20
2024-09-04 18:31:48,651 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1E3B20>
2024-09-04 18:31:48,651 - on stmt: $20load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:48,651 - on stmt: $22load_method.1 = getattr(value=$20load_global.0, attr=nditer)
2024-09-04 18:31:48,651 - on stmt: it = call $22load_method.1(a, func=$22load_method.1, args=[Var(a, arraymath.py:570)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,651 - on stmt: $30load_global.4 = global(next: <built-in function next>)
2024-09-04 18:31:48,651 - on stmt: $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,651 - on stmt: $36load_method.7 = getattr(value=$34call_function.6, attr=take)
2024-09-04 18:31:48,651 - on stmt: $const38.8 = const(int, 0)
2024-09-04 18:31:48,651 - on stmt: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,651 - first assign: max_value
2024-09-04 18:31:48,651 - replaced with: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,651 - on stmt: $44load_deref.10 = freevar(pre_return_func: <ufunc 'isnan'>)
2024-09-04 18:31:48,651 - on stmt: $48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,651 - on stmt: bool50 = global(bool: <class 'bool'>)
2024-09-04 18:31:48,651 - on stmt: $50pred = call bool50($48call_function.12, func=bool50, args=(Var($48call_function.12, arraymath.py:577),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,651 - on stmt: branch $50pred, 52, 56
2024-09-04 18:31:48,652 - ==== SSA block rewrite pass on 52
2024-09-04 18:31:48,652 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1E3B20>
2024-09-04 18:31:48,652 - on stmt: $54return_value.1 = cast(value=max_value)
2024-09-04 18:31:48,652 - on stmt: return $54return_value.1
2024-09-04 18:31:48,652 - ==== SSA block rewrite pass on 56
2024-09-04 18:31:48,652 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1E3B20>
2024-09-04 18:31:48,652 - on stmt: $58get_iter.1 = getiter(value=it)
2024-09-04 18:31:48,652 - on stmt: $phi60.0 = $58get_iter.1
2024-09-04 18:31:48,652 - on stmt: jump 60
2024-09-04 18:31:48,652 - ==== SSA block rewrite pass on 60
2024-09-04 18:31:48,652 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1E3B20>
2024-09-04 18:31:48,652 - on stmt: $60for_iter.1 = iternext(value=$phi60.0)
2024-09-04 18:31:48,652 - on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
2024-09-04 18:31:48,652 - on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
2024-09-04 18:31:48,653 - on stmt: $phi62.1 = $60for_iter.2
2024-09-04 18:31:48,653 - on stmt: branch $60for_iter.3, 62, 104
2024-09-04 18:31:48,653 - ==== SSA block rewrite pass on 62
2024-09-04 18:31:48,653 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1E3B20>
2024-09-04 18:31:48,653 - on stmt: view = $phi62.1
2024-09-04 18:31:48,653 - on stmt: $66load_method.3 = getattr(value=view, attr=item)
2024-09-04 18:31:48,653 - on stmt: v = call $66load_method.3(func=$66load_method.3, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,653 - on stmt: $72load_deref.5 = freevar(pre_return_func: <ufunc 'isnan'>)
2024-09-04 18:31:48,653 - on stmt: $76call_function.7 = call $72load_deref.5(v, func=$72load_deref.5, args=[Var(v, arraymath.py:581)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,653 - on stmt: bool78 = global(bool: <class 'bool'>)
2024-09-04 18:31:48,653 - on stmt: $78pred = call bool78($76call_function.7, func=bool78, args=(Var($76call_function.7, arraymath.py:582),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,653 - on stmt: branch $78pred, 80, 88
2024-09-04 18:31:48,653 - ==== SSA block rewrite pass on 80
2024-09-04 18:31:48,653 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1E3B20>
2024-09-04 18:31:48,654 - on stmt: $86return_value.2 = cast(value=v)
2024-09-04 18:31:48,654 - on stmt: return $86return_value.2
2024-09-04 18:31:48,654 - ==== SSA block rewrite pass on 88
2024-09-04 18:31:48,654 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1E3B20>
2024-09-04 18:31:48,654 - on stmt: $88load_deref.1 = freevar(comparator: <function max_comparator at 0x0000024317C80430>)
2024-09-04 18:31:48,654 - on stmt: $94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,654 - on stmt: bool96 = global(bool: <class 'bool'>)
2024-09-04 18:31:48,654 - on stmt: $96pred = call bool96($94call_function.4, func=bool96, args=(Var($94call_function.4, arraymath.py:584),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,654 - on stmt: branch $96pred, 98, 102
2024-09-04 18:31:48,654 - ==== SSA block rewrite pass on 98
2024-09-04 18:31:48,654 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1E3B20>
2024-09-04 18:31:48,654 - on stmt: max_value = v
2024-09-04 18:31:48,654 - replaced with: max_value.1 = v
2024-09-04 18:31:48,655 - on stmt: jump 102
2024-09-04 18:31:48,655 - ==== SSA block rewrite pass on 102
2024-09-04 18:31:48,655 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1E3B20>
2024-09-04 18:31:48,655 - on stmt: jump 60
2024-09-04 18:31:48,655 - ==== SSA block rewrite pass on 104
2024-09-04 18:31:48,655 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431D1E3B20>
2024-09-04 18:31:48,655 - on stmt: $106return_value.1 = cast(value=max_value)
2024-09-04 18:31:48,655 - on stmt: return $106return_value.1
2024-09-04 18:31:48,655 - Replaced assignments: defaultdict(<class 'list'>,
            {20: [<numba.core.ir.Assign object at 0x000002431D1E3220>],
             98: [<numba.core.ir.Assign object at 0x000002431D1E37C0>]})
2024-09-04 18:31:48,655 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:48,655 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1E3B20>
2024-09-04 18:31:48,655 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:48,656 - on stmt: $4load_attr.1 = getattr(value=a, attr=size)
2024-09-04 18:31:48,656 - on stmt: $const6.2 = const(int, 0)
2024-09-04 18:31:48,656 - on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2024-09-04 18:31:48,656 - on stmt: bool10 = global(bool: <class 'bool'>)
2024-09-04 18:31:48,656 - on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:571),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,656 - on stmt: branch $10pred, 12, 20
2024-09-04 18:31:48,656 - ==== SSA block rewrite pass on 12
2024-09-04 18:31:48,656 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1E3B20>
2024-09-04 18:31:48,656 - on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:48,656 - on stmt: $const14.1 = const(str, zero-size array to reduction operation maximum which has no identity)
2024-09-04 18:31:48,656 - on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:572)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,656 - on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
2024-09-04 18:31:48,657 - ==== SSA block rewrite pass on 20
2024-09-04 18:31:48,657 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1E3B20>
2024-09-04 18:31:48,657 - on stmt: $20load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:48,657 - on stmt: $22load_method.1 = getattr(value=$20load_global.0, attr=nditer)
2024-09-04 18:31:48,657 - on stmt: it = call $22load_method.1(a, func=$22load_method.1, args=[Var(a, arraymath.py:570)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,657 - on stmt: $30load_global.4 = global(next: <built-in function next>)
2024-09-04 18:31:48,657 - on stmt: $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,657 - on stmt: $36load_method.7 = getattr(value=$34call_function.6, attr=take)
2024-09-04 18:31:48,657 - on stmt: $const38.8 = const(int, 0)
2024-09-04 18:31:48,657 - on stmt: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,657 - on stmt: $44load_deref.10 = freevar(pre_return_func: <ufunc 'isnan'>)
2024-09-04 18:31:48,658 - on stmt: $48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,658 - find_def var='max_value' stmt=$48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,658 - on stmt: bool50 = global(bool: <class 'bool'>)
2024-09-04 18:31:48,658 - on stmt: $50pred = call bool50($48call_function.12, func=bool50, args=(Var($48call_function.12, arraymath.py:577),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,658 - on stmt: branch $50pred, 52, 56
2024-09-04 18:31:48,658 - ==== SSA block rewrite pass on 52
2024-09-04 18:31:48,658 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1E3B20>
2024-09-04 18:31:48,658 - on stmt: $54return_value.1 = cast(value=max_value)
2024-09-04 18:31:48,658 - find_def var='max_value' stmt=$54return_value.1 = cast(value=max_value)
2024-09-04 18:31:48,658 - find_def_from_top label 52
2024-09-04 18:31:48,658 - idom 20 from label 52
2024-09-04 18:31:48,658 - find_def_from_bottom label 20
2024-09-04 18:31:48,659 - on stmt: return $54return_value.1
2024-09-04 18:31:48,659 - ==== SSA block rewrite pass on 56
2024-09-04 18:31:48,659 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1E3B20>
2024-09-04 18:31:48,659 - on stmt: $58get_iter.1 = getiter(value=it)
2024-09-04 18:31:48,659 - on stmt: $phi60.0 = $58get_iter.1
2024-09-04 18:31:48,659 - on stmt: jump 60
2024-09-04 18:31:48,659 - ==== SSA block rewrite pass on 60
2024-09-04 18:31:48,659 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1E3B20>
2024-09-04 18:31:48,659 - on stmt: $60for_iter.1 = iternext(value=$phi60.0)
2024-09-04 18:31:48,659 - on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
2024-09-04 18:31:48,660 - on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
2024-09-04 18:31:48,660 - on stmt: $phi62.1 = $60for_iter.2
2024-09-04 18:31:48,660 - on stmt: branch $60for_iter.3, 62, 104
2024-09-04 18:31:48,660 - ==== SSA block rewrite pass on 62
2024-09-04 18:31:48,660 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1E3B20>
2024-09-04 18:31:48,660 - on stmt: view = $phi62.1
2024-09-04 18:31:48,660 - on stmt: $66load_method.3 = getattr(value=view, attr=item)
2024-09-04 18:31:48,660 - on stmt: v = call $66load_method.3(func=$66load_method.3, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,660 - on stmt: $72load_deref.5 = freevar(pre_return_func: <ufunc 'isnan'>)
2024-09-04 18:31:48,660 - on stmt: $76call_function.7 = call $72load_deref.5(v, func=$72load_deref.5, args=[Var(v, arraymath.py:581)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,661 - on stmt: bool78 = global(bool: <class 'bool'>)
2024-09-04 18:31:48,661 - on stmt: $78pred = call bool78($76call_function.7, func=bool78, args=(Var($76call_function.7, arraymath.py:582),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,661 - on stmt: branch $78pred, 80, 88
2024-09-04 18:31:48,661 - ==== SSA block rewrite pass on 80
2024-09-04 18:31:48,661 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1E3B20>
2024-09-04 18:31:48,661 - on stmt: $86return_value.2 = cast(value=v)
2024-09-04 18:31:48,661 - on stmt: return $86return_value.2
2024-09-04 18:31:48,661 - ==== SSA block rewrite pass on 88
2024-09-04 18:31:48,662 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1E3B20>
2024-09-04 18:31:48,662 - on stmt: $88load_deref.1 = freevar(comparator: <function max_comparator at 0x0000024317C80430>)
2024-09-04 18:31:48,662 - on stmt: $94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,662 - find_def var='max_value' stmt=$94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,662 - find_def_from_top label 88
2024-09-04 18:31:48,662 - idom 62 from label 88
2024-09-04 18:31:48,662 - find_def_from_bottom label 62
2024-09-04 18:31:48,662 - find_def_from_top label 62
2024-09-04 18:31:48,662 - idom 60 from label 62
2024-09-04 18:31:48,662 - find_def_from_bottom label 60
2024-09-04 18:31:48,663 - find_def_from_top label 60
2024-09-04 18:31:48,663 - insert phi node max_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 60
2024-09-04 18:31:48,663 - find_def_from_bottom label 56
2024-09-04 18:31:48,663 - find_def_from_top label 56
2024-09-04 18:31:48,663 - idom 20 from label 56
2024-09-04 18:31:48,663 - find_def_from_bottom label 20
2024-09-04 18:31:48,663 - incoming_def max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,663 - find_def_from_bottom label 102
2024-09-04 18:31:48,663 - find_def_from_top label 102
2024-09-04 18:31:48,663 - insert phi node max_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 102
2024-09-04 18:31:48,663 - find_def_from_bottom label 88
2024-09-04 18:31:48,664 - find_def_from_top label 88
2024-09-04 18:31:48,664 - idom 62 from label 88
2024-09-04 18:31:48,664 - find_def_from_bottom label 62
2024-09-04 18:31:48,664 - find_def_from_top label 62
2024-09-04 18:31:48,664 - idom 60 from label 62
2024-09-04 18:31:48,664 - find_def_from_bottom label 60
2024-09-04 18:31:48,664 - incoming_def max_value.2 = phi(incoming_values=[Var(max_value, arraymath.py:576)], incoming_blocks=[56])
2024-09-04 18:31:48,664 - find_def_from_bottom label 98
2024-09-04 18:31:48,664 - incoming_def max_value.1 = v
2024-09-04 18:31:48,664 - incoming_def max_value.3 = phi(incoming_values=[Var(max_value.2, arraymath.py:584), Var(max_value.1, arraymath.py:585)], incoming_blocks=[88, 98])
2024-09-04 18:31:48,664 - replaced with: $94call_function.4 = call $88load_deref.1(v, max_value.2, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value.2, arraymath.py:584)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,664 - on stmt: bool96 = global(bool: <class 'bool'>)
2024-09-04 18:31:48,664 - on stmt: $96pred = call bool96($94call_function.4, func=bool96, args=(Var($94call_function.4, arraymath.py:584),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,665 - on stmt: branch $96pred, 98, 102
2024-09-04 18:31:48,665 - ==== SSA block rewrite pass on 98
2024-09-04 18:31:48,665 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1E3B20>
2024-09-04 18:31:48,665 - on stmt: max_value.1 = v
2024-09-04 18:31:48,665 - on stmt: jump 102
2024-09-04 18:31:48,665 - ==== SSA block rewrite pass on 102
2024-09-04 18:31:48,665 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1E3B20>
2024-09-04 18:31:48,665 - on stmt: jump 60
2024-09-04 18:31:48,665 - ==== SSA block rewrite pass on 104
2024-09-04 18:31:48,665 - Running <numba.core.ssa._FixSSAVars object at 0x000002431D1E3B20>
2024-09-04 18:31:48,665 - on stmt: $106return_value.1 = cast(value=max_value)
2024-09-04 18:31:48,665 - find_def var='max_value' stmt=$106return_value.1 = cast(value=max_value)
2024-09-04 18:31:48,665 - find_def_from_top label 104
2024-09-04 18:31:48,666 - idom 60 from label 104
2024-09-04 18:31:48,666 - find_def_from_bottom label 60
2024-09-04 18:31:48,666 - replaced with: $106return_value.1 = cast(value=max_value.2)
2024-09-04 18:31:48,666 - on stmt: return $106return_value.1
2024-09-04 18:31:48,683 - bytecode dump:
>          0	NOP(arg=None, lineno=4691)
           2	LOAD_FAST(arg=1, lineno=4692)
           4	LOAD_FAST(arg=0, lineno=4692)
           6	LOAD_ATTR(arg=0, lineno=4692)
           8	LOAD_CONST(arg=1, lineno=4692)
          10	BINARY_SUBTRACT(arg=None, lineno=4692)
          12	COMPARE_OP(arg=4, lineno=4692)
          14	POP_JUMP_IF_TRUE(arg=15, lineno=4692)
          16	LOAD_FAST(arg=1, lineno=4692)
          18	LOAD_FAST(arg=0, lineno=4692)
          20	LOAD_ATTR(arg=0, lineno=4692)
          22	UNARY_NEGATIVE(arg=None, lineno=4692)
          24	COMPARE_OP(arg=0, lineno=4692)
          26	POP_JUMP_IF_FALSE(arg=19, lineno=4692)
>         28	LOAD_GLOBAL(arg=1, lineno=4693)
          30	LOAD_CONST(arg=2, lineno=4693)
          32	CALL_FUNCTION(arg=1, lineno=4693)
          34	RAISE_VARARGS(arg=1, lineno=4693)
>         36	LOAD_FAST(arg=0, lineno=4694)
          38	LOAD_METHOD(arg=2, lineno=4694)
          40	CALL_METHOD(arg=0, lineno=4694)
          42	LOAD_FAST(arg=1, lineno=4694)
          44	BINARY_SUBSCR(arg=None, lineno=4694)
          46	RETURN_VALUE(arg=None, lineno=4694)
2024-09-04 18:31:48,684 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:48,684 - stack: []
2024-09-04 18:31:48,684 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:48,684 - dispatch pc=0, inst=NOP(arg=None, lineno=4691)
2024-09-04 18:31:48,684 - stack []
2024-09-04 18:31:48,685 - dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=4692)
2024-09-04 18:31:48,685 - stack []
2024-09-04 18:31:48,685 - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4692)
2024-09-04 18:31:48,685 - stack ['$indices2.0']
2024-09-04 18:31:48,685 - dispatch pc=6, inst=LOAD_ATTR(arg=0, lineno=4692)
2024-09-04 18:31:48,685 - stack ['$indices2.0', '$a4.1']
2024-09-04 18:31:48,685 - dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=4692)
2024-09-04 18:31:48,686 - stack ['$indices2.0', '$6load_attr.2']
2024-09-04 18:31:48,686 - dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=4692)
2024-09-04 18:31:48,686 - stack ['$indices2.0', '$6load_attr.2', '$const8.3']
2024-09-04 18:31:48,686 - dispatch pc=12, inst=COMPARE_OP(arg=4, lineno=4692)
2024-09-04 18:31:48,686 - stack ['$indices2.0', '$10binary_subtract.4']
2024-09-04 18:31:48,686 - dispatch pc=14, inst=POP_JUMP_IF_TRUE(arg=15, lineno=4692)
2024-09-04 18:31:48,686 - stack ['$12compare_op.5']
2024-09-04 18:31:48,686 - end state. edges=[Edge(pc=16, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:48,687 - pending: deque([State(pc_initial=16 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
2024-09-04 18:31:48,687 - stack: []
2024-09-04 18:31:48,687 - state.pc_initial: State(pc_initial=16 nstack_initial=0)
2024-09-04 18:31:48,687 - dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=4692)
2024-09-04 18:31:48,687 - stack []
2024-09-04 18:31:48,687 - dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=4692)
2024-09-04 18:31:48,687 - stack ['$indices16.0']
2024-09-04 18:31:48,687 - dispatch pc=20, inst=LOAD_ATTR(arg=0, lineno=4692)
2024-09-04 18:31:48,687 - stack ['$indices16.0', '$a18.1']
2024-09-04 18:31:48,688 - dispatch pc=22, inst=UNARY_NEGATIVE(arg=None, lineno=4692)
2024-09-04 18:31:48,688 - stack ['$indices16.0', '$20load_attr.2']
2024-09-04 18:31:48,688 - dispatch pc=24, inst=COMPARE_OP(arg=0, lineno=4692)
2024-09-04 18:31:48,688 - stack ['$indices16.0', '$22unary_negative.3']
2024-09-04 18:31:48,688 - dispatch pc=26, inst=POP_JUMP_IF_FALSE(arg=19, lineno=4692)
2024-09-04 18:31:48,688 - stack ['$24compare_op.4']
2024-09-04 18:31:48,688 - end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:48,688 - pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2024-09-04 18:31:48,688 - stack: []
2024-09-04 18:31:48,688 - state.pc_initial: State(pc_initial=28 nstack_initial=0)
2024-09-04 18:31:48,689 - dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=4693)
2024-09-04 18:31:48,689 - stack []
2024-09-04 18:31:48,689 - dispatch pc=30, inst=LOAD_CONST(arg=2, lineno=4693)
2024-09-04 18:31:48,689 - stack ['$28load_global.0']
2024-09-04 18:31:48,689 - dispatch pc=32, inst=CALL_FUNCTION(arg=1, lineno=4693)
2024-09-04 18:31:48,689 - stack ['$28load_global.0', '$const30.1']
2024-09-04 18:31:48,689 - dispatch pc=34, inst=RAISE_VARARGS(arg=1, lineno=4693)
2024-09-04 18:31:48,689 - stack ['$32call_function.2']
2024-09-04 18:31:48,689 - end state. edges=[]
2024-09-04 18:31:48,689 - pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2024-09-04 18:31:48,689 - pending: deque([State(pc_initial=36 nstack_initial=0)])
2024-09-04 18:31:48,690 - stack: []
2024-09-04 18:31:48,690 - state.pc_initial: State(pc_initial=36 nstack_initial=0)
2024-09-04 18:31:48,690 - dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=4694)
2024-09-04 18:31:48,690 - stack []
2024-09-04 18:31:48,690 - dispatch pc=38, inst=LOAD_METHOD(arg=2, lineno=4694)
2024-09-04 18:31:48,690 - stack ['$a36.0']
2024-09-04 18:31:48,690 - dispatch pc=40, inst=CALL_METHOD(arg=0, lineno=4694)
2024-09-04 18:31:48,690 - stack ['$38load_method.1']
2024-09-04 18:31:48,690 - dispatch pc=42, inst=LOAD_FAST(arg=1, lineno=4694)
2024-09-04 18:31:48,690 - stack ['$40call_method.2']
2024-09-04 18:31:48,690 - dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=4694)
2024-09-04 18:31:48,690 - stack ['$40call_method.2', '$indices42.3']
2024-09-04 18:31:48,691 - dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=4694)
2024-09-04 18:31:48,691 - stack ['$44binary_subscr.4']
2024-09-04 18:31:48,691 - end state. edges=[]
2024-09-04 18:31:48,691 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:48,691 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
2024-09-04 18:31:48,692 - defmap: {}
2024-09-04 18:31:48,692 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:48,692 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:48,692 - keep phismap: {}
2024-09-04 18:31:48,692 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:48,693 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:48,693 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$indices2.0'}), (4, {'res': '$a4.1'}), (6, {'item': '$a4.1', 'res': '$6load_attr.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$6load_attr.2', 'rhs': '$const8.3', 'res': '$10binary_subtract.4'}), (12, {'lhs': '$indices2.0', 'rhs': '$10binary_subtract.4', 'res': '$12compare_op.5'}), (14, {'pred': '$12compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: (), 28: ()})
2024-09-04 18:31:48,693 - block_infos State(pc_initial=16 nstack_initial=0):
AdaptBlockInfo(insts=((16, {'res': '$indices16.0'}), (18, {'res': '$a18.1'}), (20, {'item': '$a18.1', 'res': '$20load_attr.2'}), (22, {'value': '$20load_attr.2', 'res': '$22unary_negative.3'}), (24, {'lhs': '$indices16.0', 'rhs': '$22unary_negative.3', 'res': '$24compare_op.4'}), (26, {'pred': '$24compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: (), 36: ()})
2024-09-04 18:31:48,693 - block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$28load_global.0'}), (30, {'res': '$const30.1'}), (32, {'func': '$28load_global.0', 'args': ['$const30.1'], 'res': '$32call_function.2'}), (34, {'exc': '$32call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:48,693 - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$a36.0'}), (38, {'item': '$a36.0', 'res': '$38load_method.1'}), (40, {'func': '$38load_method.1', 'args': [], 'res': '$40call_method.2'}), (42, {'res': '$indices42.3'}), (44, {'index': '$indices42.3', 'target': '$40call_method.2', 'res': '$44binary_subscr.4'}), (46, {'retval': '$44binary_subscr.4', 'castval': '$46return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:48,696 - label 0:
    a = arg(0, name=a)                       ['a']
    indices = arg(1, name=indices)           ['indices']
    $6load_attr.2 = getattr(value=a, attr=size) ['$6load_attr.2', 'a']
    $const8.3 = const(int, 1)                ['$const8.3']
    $10binary_subtract.4 = $6load_attr.2 - $const8.3 ['$10binary_subtract.4', '$6load_attr.2', '$const8.3']
    $12compare_op.5 = indices > $10binary_subtract.4 ['$10binary_subtract.4', '$12compare_op.5', 'indices']
    bool14 = global(bool: <class 'bool'>)    ['bool14']
    $14pred = call bool14($12compare_op.5, func=bool14, args=(Var($12compare_op.5, arrayobj.py:4692),), kws=(), vararg=None, varkwarg=None, target=None) ['$12compare_op.5', '$14pred', 'bool14']
    branch $14pred, 28, 16                   ['$14pred']
label 16:
    $20load_attr.2 = getattr(value=a, attr=size) ['$20load_attr.2', 'a']
    $22unary_negative.3 = unary(fn=<built-in function neg>, value=$20load_attr.2) ['$20load_attr.2', '$22unary_negative.3']
    $24compare_op.4 = indices < $22unary_negative.3 ['$22unary_negative.3', '$24compare_op.4', 'indices']
    bool26 = global(bool: <class 'bool'>)    ['bool26']
    $26pred = call bool26($24compare_op.4, func=bool26, args=(Var($24compare_op.4, arrayobj.py:4692),), kws=(), vararg=None, varkwarg=None, target=None) ['$24compare_op.4', '$26pred', 'bool26']
    branch $26pred, 28, 36                   ['$26pred']
label 28:
    $28load_global.0 = global(IndexError: <class 'IndexError'>) ['$28load_global.0']
    $const30.1 = const(str, Index out of bounds) ['$const30.1']
    $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, arrayobj.py:4693)], kws=(), vararg=None, varkwarg=None, target=None) ['$28load_global.0', '$32call_function.2', '$const30.1']
    raise $32call_function.2                 ['$32call_function.2']
label 36:
    $38load_method.1 = getattr(value=a, attr=ravel) ['$38load_method.1', 'a']
    $40call_method.2 = call $38load_method.1(func=$38load_method.1, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$38load_method.1', '$40call_method.2']
    $44binary_subscr.4 = getitem(value=$40call_method.2, index=indices, fn=<built-in function getitem>) ['$40call_method.2', '$44binary_subscr.4', 'indices']
    $46return_value.5 = cast(value=$44binary_subscr.4) ['$44binary_subscr.4', '$46return_value.5']
    return $46return_value.5                 ['$46return_value.5']

2024-09-04 18:31:48,717 - ==== SSA block analysis pass on 0
2024-09-04 18:31:48,718 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243134CF310>
2024-09-04 18:31:48,718 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:48,718 - on stmt: indices = arg(1, name=indices)
2024-09-04 18:31:48,718 - on stmt: $6load_attr.2 = getattr(value=a, attr=size)
2024-09-04 18:31:48,718 - on stmt: $const8.3 = const(int, 1)
2024-09-04 18:31:48,719 - on stmt: $10binary_subtract.4 = $6load_attr.2 - $const8.3
2024-09-04 18:31:48,719 - on stmt: $12compare_op.5 = indices > $10binary_subtract.4
2024-09-04 18:31:48,719 - on stmt: bool14 = global(bool: <class 'bool'>)
2024-09-04 18:31:48,719 - on stmt: $14pred = call bool14($12compare_op.5, func=bool14, args=(Var($12compare_op.5, arrayobj.py:4692),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,719 - on stmt: branch $14pred, 28, 16
2024-09-04 18:31:48,720 - ==== SSA block analysis pass on 16
2024-09-04 18:31:48,720 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243134CF310>
2024-09-04 18:31:48,720 - on stmt: $20load_attr.2 = getattr(value=a, attr=size)
2024-09-04 18:31:48,720 - on stmt: $22unary_negative.3 = unary(fn=<built-in function neg>, value=$20load_attr.2)
2024-09-04 18:31:48,720 - on stmt: $24compare_op.4 = indices < $22unary_negative.3
2024-09-04 18:31:48,720 - on stmt: bool26 = global(bool: <class 'bool'>)
2024-09-04 18:31:48,720 - on stmt: $26pred = call bool26($24compare_op.4, func=bool26, args=(Var($24compare_op.4, arrayobj.py:4692),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,721 - on stmt: branch $26pred, 28, 36
2024-09-04 18:31:48,721 - ==== SSA block analysis pass on 28
2024-09-04 18:31:48,721 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243134CF310>
2024-09-04 18:31:48,721 - on stmt: $28load_global.0 = global(IndexError: <class 'IndexError'>)
2024-09-04 18:31:48,721 - on stmt: $const30.1 = const(str, Index out of bounds)
2024-09-04 18:31:48,721 - on stmt: $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, arrayobj.py:4693)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,721 - on stmt: <static> raise <class 'IndexError'>('Index out of bounds')
2024-09-04 18:31:48,722 - ==== SSA block analysis pass on 36
2024-09-04 18:31:48,722 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243134CF310>
2024-09-04 18:31:48,722 - on stmt: $38load_method.1 = getattr(value=a, attr=ravel)
2024-09-04 18:31:48,722 - on stmt: $40call_method.2 = call $38load_method.1(func=$38load_method.1, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,722 - on stmt: $44binary_subscr.4 = getitem(value=$40call_method.2, index=indices, fn=<built-in function getitem>)
2024-09-04 18:31:48,722 - on stmt: $46return_value.5 = cast(value=$44binary_subscr.4)
2024-09-04 18:31:48,722 - on stmt: return $46return_value.5
2024-09-04 18:31:48,724 - defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [(<numba.core.ir.Assign object at 0x00000243134CE500>,
                                       0)],
             '$12compare_op.5': [(<numba.core.ir.Assign object at 0x00000243134CF9D0>,
                                  0)],
             '$14pred': [(<numba.core.ir.Assign object at 0x00000243134CE830>,
                          0)],
             '$20load_attr.2': [(<numba.core.ir.Assign object at 0x00000243134CE2F0>,
                                 16)],
             '$22unary_negative.3': [(<numba.core.ir.Assign object at 0x00000243134CEBC0>,
                                      16)],
             '$24compare_op.4': [(<numba.core.ir.Assign object at 0x00000243134CD1B0>,
                                  16)],
             '$26pred': [(<numba.core.ir.Assign object at 0x00000243134CF1F0>,
                          16)],
             '$28load_global.0': [(<numba.core.ir.Assign object at 0x00000243134CDFC0>,
                                   28)],
             '$32call_function.2': [(<numba.core.ir.Assign object at 0x00000243134CE770>,
                                     28)],
             '$38load_method.1': [(<numba.core.ir.Assign object at 0x00000243134CFAC0>,
                                   36)],
             '$40call_method.2': [(<numba.core.ir.Assign object at 0x00000243134CFE20>,
                                   36)],
             '$44binary_subscr.4': [(<numba.core.ir.Assign object at 0x00000243134CFDC0>,
                                     36)],
             '$46return_value.5': [(<numba.core.ir.Assign object at 0x00000243134CE890>,
                                    36)],
             '$6load_attr.2': [(<numba.core.ir.Assign object at 0x00000243176FA590>,
                                0)],
             '$const30.1': [(<numba.core.ir.Assign object at 0x00000243134CFFA0>,
                             28)],
             '$const8.3': [(<numba.core.ir.Assign object at 0x00000243134CDA80>,
                            0)],
             'a': [(<numba.core.ir.Assign object at 0x00000243178CB0A0>, 0)],
             'bool14': [(<numba.core.ir.Assign object at 0x00000243134CD360>,
                         0)],
             'bool26': [(<numba.core.ir.Assign object at 0x00000243134CD060>,
                         16)],
             'indices': [(<numba.core.ir.Assign object at 0x00000243178CB880>,
                          0)]})
2024-09-04 18:31:48,725 - SSA violators <numba.core.utils.OrderedSet object at 0x00000243134CF310>
2024-09-04 18:31:48,798 - bytecode dump:
>          0	NOP(arg=None, lineno=2230)
           2	LOAD_FAST(arg=0, lineno=2232)
           4	LOAD_METHOD(arg=0, lineno=2232)
           6	LOAD_FAST(arg=0, lineno=2232)
           8	LOAD_ATTR(arg=1, lineno=2232)
          10	CALL_METHOD(arg=1, lineno=2232)
          12	RETURN_VALUE(arg=None, lineno=2232)
2024-09-04 18:31:48,798 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:48,798 - stack: []
2024-09-04 18:31:48,798 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:48,798 - dispatch pc=0, inst=NOP(arg=None, lineno=2230)
2024-09-04 18:31:48,799 - stack []
2024-09-04 18:31:48,799 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2232)
2024-09-04 18:31:48,799 - stack []
2024-09-04 18:31:48,799 - dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=2232)
2024-09-04 18:31:48,799 - stack ['$ary2.0']
2024-09-04 18:31:48,799 - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=2232)
2024-09-04 18:31:48,799 - stack ['$4load_method.1']
2024-09-04 18:31:48,799 - dispatch pc=8, inst=LOAD_ATTR(arg=1, lineno=2232)
2024-09-04 18:31:48,799 - stack ['$4load_method.1', '$ary6.2']
2024-09-04 18:31:48,799 - dispatch pc=10, inst=CALL_METHOD(arg=1, lineno=2232)
2024-09-04 18:31:48,800 - stack ['$4load_method.1', '$8load_attr.3']
2024-09-04 18:31:48,801 - dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=2232)
2024-09-04 18:31:48,801 - stack ['$10call_method.4']
2024-09-04 18:31:48,801 - end state. edges=[]
2024-09-04 18:31:48,802 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:48,802 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 18:31:48,802 - defmap: {}
2024-09-04 18:31:48,802 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:48,802 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:48,802 - keep phismap: {}
2024-09-04 18:31:48,802 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:48,802 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:48,803 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$ary2.0'}), (4, {'item': '$ary2.0', 'res': '$4load_method.1'}), (6, {'res': '$ary6.2'}), (8, {'item': '$ary6.2', 'res': '$8load_attr.3'}), (10, {'func': '$4load_method.1', 'args': ['$8load_attr.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:48,803 - label 0:
    ary = arg(0, name=ary)                   ['ary']
    $4load_method.1 = getattr(value=ary, attr=reshape) ['$4load_method.1', 'ary']
    $8load_attr.3 = getattr(value=ary, attr=size) ['$8load_attr.3', 'ary']
    $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arrayobj.py:2232)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_method.4', '$4load_method.1', '$8load_attr.3']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2024-09-04 18:31:48,816 - ==== SSA block analysis pass on 0
2024-09-04 18:31:48,817 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024312A5F280>
2024-09-04 18:31:48,817 - on stmt: ary = arg(0, name=ary)
2024-09-04 18:31:48,817 - on stmt: $4load_method.1 = getattr(value=ary, attr=reshape)
2024-09-04 18:31:48,817 - on stmt: $8load_attr.3 = getattr(value=ary, attr=size)
2024-09-04 18:31:48,818 - on stmt: $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arrayobj.py:2232)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:48,818 - on stmt: $12return_value.5 = cast(value=$10call_method.4)
2024-09-04 18:31:48,818 - on stmt: return $12return_value.5
2024-09-04 18:31:48,819 - defs defaultdict(<class 'list'>,
            {'$10call_method.4': [(<numba.core.ir.Assign object at 0x0000024313463340>,
                                   0)],
             '$12return_value.5': [(<numba.core.ir.Assign object at 0x0000024313460F10>,
                                    0)],
             '$4load_method.1': [(<numba.core.ir.Assign object at 0x00000243134636A0>,
                                  0)],
             '$8load_attr.3': [(<numba.core.ir.Assign object at 0x0000024313463010>,
                                0)],
             'ary': [(<numba.core.ir.Assign object at 0x0000024313463E80>, 0)]})
2024-09-04 18:31:48,819 - SSA violators <numba.core.utils.OrderedSet object at 0x0000024312A5F280>
2024-09-04 18:31:49,276 - bytecode dump:
>          0	NOP(arg=None, lineno=481)
           2	LOAD_FAST(arg=0, lineno=483)
           4	LOAD_FAST(arg=1, lineno=483)
           6	COMPARE_OP(arg=4, lineno=483)
           8	RETURN_VALUE(arg=None, lineno=483)
2024-09-04 18:31:49,276 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:49,276 - stack: []
2024-09-04 18:31:49,276 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:49,276 - dispatch pc=0, inst=NOP(arg=None, lineno=481)
2024-09-04 18:31:49,276 - stack []
2024-09-04 18:31:49,276 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=483)
2024-09-04 18:31:49,276 - stack []
2024-09-04 18:31:49,276 - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=483)
2024-09-04 18:31:49,276 - stack ['$a2.0']
2024-09-04 18:31:49,276 - dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=483)
2024-09-04 18:31:49,276 - stack ['$a2.0', '$min_val4.1']
2024-09-04 18:31:49,276 - dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=483)
2024-09-04 18:31:49,276 - stack ['$6compare_op.2']
2024-09-04 18:31:49,276 - end state. edges=[]
2024-09-04 18:31:49,281 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:49,281 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 18:31:49,281 - defmap: {}
2024-09-04 18:31:49,283 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:49,283 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:49,283 - keep phismap: {}
2024-09-04 18:31:49,283 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:49,283 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:49,283 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'res': '$min_val4.1'}), (6, {'lhs': '$a2.0', 'rhs': '$min_val4.1', 'res': '$6compare_op.2'}), (8, {'retval': '$6compare_op.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:49,285 - label 0:
    a = arg(0, name=a)                       ['a']
    min_val = arg(1, name=min_val)           ['min_val']
    $6compare_op.2 = a > min_val             ['$6compare_op.2', 'a', 'min_val']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2024-09-04 18:31:49,331 - ==== SSA block analysis pass on 0
2024-09-04 18:31:49,334 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431B53F5E0>
2024-09-04 18:31:49,334 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:49,334 - on stmt: min_val = arg(1, name=min_val)
2024-09-04 18:31:49,336 - on stmt: $6compare_op.2 = a > min_val
2024-09-04 18:31:49,336 - on stmt: $8return_value.3 = cast(value=$6compare_op.2)
2024-09-04 18:31:49,336 - on stmt: return $8return_value.3
2024-09-04 18:31:49,336 - defs defaultdict(<class 'list'>,
            {'$6compare_op.2': [(<numba.core.ir.Assign object at 0x000002431B53D090>,
                                 0)],
             '$8return_value.3': [(<numba.core.ir.Assign object at 0x000002431B53CF70>,
                                   0)],
             'a': [(<numba.core.ir.Assign object at 0x000002431B53FE50>, 0)],
             'min_val': [(<numba.core.ir.Assign object at 0x000002431B53F2B0>,
                          0)]})
2024-09-04 18:31:49,336 - SSA violators <numba.core.utils.OrderedSet object at 0x000002431B53F5E0>
2024-09-04 18:31:49,700 - bytecode dump:
>          0	NOP(arg=None, lineno=437)
           2	LOAD_DEREF(arg=0, lineno=440)
           4	STORE_FAST(arg=1, lineno=440)
           6	LOAD_GLOBAL(arg=0, lineno=441)
           8	LOAD_METHOD(arg=1, lineno=441)
          10	LOAD_FAST(arg=0, lineno=441)
          12	CALL_METHOD(arg=1, lineno=441)
          14	GET_ITER(arg=None, lineno=441)
>         16	FOR_ITER(arg=8, lineno=441)
          18	STORE_FAST(arg=2, lineno=441)
          20	LOAD_FAST(arg=1, lineno=442)
          22	LOAD_FAST(arg=2, lineno=442)
          24	LOAD_METHOD(arg=2, lineno=442)
          26	CALL_METHOD(arg=0, lineno=442)
          28	INPLACE_ADD(arg=None, lineno=442)
          30	STORE_FAST(arg=1, lineno=442)
          32	JUMP_ABSOLUTE(arg=9, lineno=442)
>         34	LOAD_FAST(arg=1, lineno=443)
          36	LOAD_FAST(arg=0, lineno=443)
          38	LOAD_ATTR(arg=3, lineno=443)
          40	BINARY_TRUE_DIVIDE(arg=None, lineno=443)
          42	RETURN_VALUE(arg=None, lineno=443)
2024-09-04 18:31:49,700 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:49,701 - stack: []
2024-09-04 18:31:49,701 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:49,701 - dispatch pc=0, inst=NOP(arg=None, lineno=437)
2024-09-04 18:31:49,701 - stack []
2024-09-04 18:31:49,701 - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=440)
2024-09-04 18:31:49,701 - stack []
2024-09-04 18:31:49,701 - dispatch pc=4, inst=STORE_FAST(arg=1, lineno=440)
2024-09-04 18:31:49,701 - stack ['$2load_deref.0']
2024-09-04 18:31:49,701 - dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=441)
2024-09-04 18:31:49,701 - stack []
2024-09-04 18:31:49,701 - dispatch pc=8, inst=LOAD_METHOD(arg=1, lineno=441)
2024-09-04 18:31:49,701 - stack ['$6load_global.1']
2024-09-04 18:31:49,701 - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=441)
2024-09-04 18:31:49,703 - stack ['$8load_method.2']
2024-09-04 18:31:49,703 - dispatch pc=12, inst=CALL_METHOD(arg=1, lineno=441)
2024-09-04 18:31:49,703 - stack ['$8load_method.2', '$a10.3']
2024-09-04 18:31:49,703 - dispatch pc=14, inst=GET_ITER(arg=None, lineno=441)
2024-09-04 18:31:49,703 - stack ['$12call_method.4']
2024-09-04 18:31:49,703 - end state. edges=[Edge(pc=16, stack=('$14get_iter.5',), blockstack=(), npush=0)]
2024-09-04 18:31:49,703 - pending: deque([State(pc_initial=16 nstack_initial=1)])
2024-09-04 18:31:49,703 - stack: ['$phi16.0']
2024-09-04 18:31:49,703 - state.pc_initial: State(pc_initial=16 nstack_initial=1)
2024-09-04 18:31:49,703 - dispatch pc=16, inst=FOR_ITER(arg=8, lineno=441)
2024-09-04 18:31:49,703 - stack ['$phi16.0']
2024-09-04 18:31:49,703 - end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=18, stack=('$phi16.0', '$16for_iter.2'), blockstack=(), npush=0)]
2024-09-04 18:31:49,703 - pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=18 nstack_initial=2)])
2024-09-04 18:31:49,703 - stack: []
2024-09-04 18:31:49,703 - state.pc_initial: State(pc_initial=34 nstack_initial=0)
2024-09-04 18:31:49,703 - dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=443)
2024-09-04 18:31:49,703 - stack []
2024-09-04 18:31:49,703 - dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=443)
2024-09-04 18:31:49,703 - stack ['$c34.0']
2024-09-04 18:31:49,703 - dispatch pc=38, inst=LOAD_ATTR(arg=3, lineno=443)
2024-09-04 18:31:49,703 - stack ['$c34.0', '$a36.1']
2024-09-04 18:31:49,703 - dispatch pc=40, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=443)
2024-09-04 18:31:49,703 - stack ['$c34.0', '$38load_attr.2']
2024-09-04 18:31:49,703 - dispatch pc=42, inst=RETURN_VALUE(arg=None, lineno=443)
2024-09-04 18:31:49,703 - stack ['$40binary_true_divide.3']
2024-09-04 18:31:49,703 - end state. edges=[]
2024-09-04 18:31:49,703 - pending: deque([State(pc_initial=18 nstack_initial=2)])
2024-09-04 18:31:49,703 - stack: ['$phi18.0', '$phi18.1']
2024-09-04 18:31:49,703 - state.pc_initial: State(pc_initial=18 nstack_initial=2)
2024-09-04 18:31:49,703 - dispatch pc=18, inst=STORE_FAST(arg=2, lineno=441)
2024-09-04 18:31:49,703 - stack ['$phi18.0', '$phi18.1']
2024-09-04 18:31:49,703 - dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=442)
2024-09-04 18:31:49,703 - stack ['$phi18.0']
2024-09-04 18:31:49,703 - dispatch pc=22, inst=LOAD_FAST(arg=2, lineno=442)
2024-09-04 18:31:49,703 - stack ['$phi18.0', '$c20.2']
2024-09-04 18:31:49,703 - dispatch pc=24, inst=LOAD_METHOD(arg=2, lineno=442)
2024-09-04 18:31:49,703 - stack ['$phi18.0', '$c20.2', '$v22.3']
2024-09-04 18:31:49,703 - dispatch pc=26, inst=CALL_METHOD(arg=0, lineno=442)
2024-09-04 18:31:49,703 - stack ['$phi18.0', '$c20.2', '$24load_method.4']
2024-09-04 18:31:49,703 - dispatch pc=28, inst=INPLACE_ADD(arg=None, lineno=442)
2024-09-04 18:31:49,703 - stack ['$phi18.0', '$c20.2', '$26call_method.5']
2024-09-04 18:31:49,703 - dispatch pc=30, inst=STORE_FAST(arg=1, lineno=442)
2024-09-04 18:31:49,703 - stack ['$phi18.0', '$28inplace_add.6']
2024-09-04 18:31:49,703 - dispatch pc=32, inst=JUMP_ABSOLUTE(arg=9, lineno=442)
2024-09-04 18:31:49,703 - stack ['$phi18.0']
2024-09-04 18:31:49,703 - end state. edges=[Edge(pc=16, stack=('$phi18.0',), blockstack=(), npush=0)]
2024-09-04 18:31:49,703 - pending: deque([State(pc_initial=16 nstack_initial=1)])
2024-09-04 18:31:49,703 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:49,703 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=1): {'$phi16.0'},
             State(pc_initial=18 nstack_initial=2): {'$phi18.1'},
             State(pc_initial=34 nstack_initial=0): set()})
2024-09-04 18:31:49,703 - defmap: {'$phi16.0': State(pc_initial=0 nstack_initial=0),
 '$phi18.1': State(pc_initial=16 nstack_initial=1)}
2024-09-04 18:31:49,703 - phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi18.0', State(pc_initial=18 nstack_initial=2))},
             '$phi18.0': {('$phi16.0', State(pc_initial=16 nstack_initial=1))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
2024-09-04 18:31:49,703 - changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=1))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
2024-09-04 18:31:49,703 - changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
2024-09-04 18:31:49,703 - changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
2024-09-04 18:31:49,703 - keep phismap: {'$phi16.0': {('$14get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi18.1': {('$16for_iter.2', State(pc_initial=16 nstack_initial=1))}}
2024-09-04 18:31:49,703 - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi16.0': '$14get_iter.5'},
             State(pc_initial=16 nstack_initial=1): {'$phi18.1': '$16for_iter.2'}})
2024-09-04 18:31:49,703 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:49,703 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'value': '$2load_deref.0'}), (6, {'res': '$6load_global.1'}), (8, {'item': '$6load_global.1', 'res': '$8load_method.2'}), (10, {'res': '$a10.3'}), (12, {'func': '$8load_method.2', 'args': ['$a10.3'], 'res': '$12call_method.4'}), (14, {'value': '$12call_method.4', 'res': '$14get_iter.5'})), outgoing_phis={'$phi16.0': '$14get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$14get_iter.5',)})
2024-09-04 18:31:49,703 - block_infos State(pc_initial=16 nstack_initial=1):
AdaptBlockInfo(insts=((16, {'iterator': '$phi16.0', 'pair': '$16for_iter.1', 'indval': '$16for_iter.2', 'pred': '$16for_iter.3'}),), outgoing_phis={'$phi18.1': '$16for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 18: ('$phi16.0', '$16for_iter.2')})
2024-09-04 18:31:49,703 - block_infos State(pc_initial=18 nstack_initial=2):
AdaptBlockInfo(insts=((18, {'value': '$phi18.1'}), (20, {'res': '$c20.2'}), (22, {'res': '$v22.3'}), (24, {'item': '$v22.3', 'res': '$24load_method.4'}), (26, {'func': '$24load_method.4', 'args': [], 'res': '$26call_method.5'}), (28, {'lhs': '$c20.2', 'rhs': '$26call_method.5', 'res': '$28inplace_add.6'}), (30, {'value': '$28inplace_add.6'}), (32, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$phi18.0',)})
2024-09-04 18:31:49,703 - block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$c34.0'}), (36, {'res': '$a36.1'}), (38, {'item': '$a36.1', 'res': '$38load_attr.2'}), (40, {'lhs': '$c34.0', 'rhs': '$38load_attr.2', 'res': '$40binary_true_divide.3'}), (42, {'retval': '$40binary_true_divide.3', 'castval': '$42return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:49,710 - label 0:
    a = arg(0, name=a)                       ['a']
    c = freevar(acc_init: 0.0)               ['c']
    $6load_global.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$6load_global.1']
    $8load_method.2 = getattr(value=$6load_global.1, attr=nditer) ['$6load_global.1', '$8load_method.2']
    $12call_method.4 = call $8load_method.2(a, func=$8load_method.2, args=[Var(a, arraymath.py:437)], kws=(), vararg=None, varkwarg=None, target=None) ['$12call_method.4', '$8load_method.2', 'a']
    $14get_iter.5 = getiter(value=$12call_method.4) ['$12call_method.4', '$14get_iter.5']
    $phi16.0 = $14get_iter.5                 ['$14get_iter.5', '$phi16.0']
    jump 16                                  []
label 16:
    $16for_iter.1 = iternext(value=$phi16.0) ['$16for_iter.1', '$phi16.0']
    $16for_iter.2 = pair_first(value=$16for_iter.1) ['$16for_iter.1', '$16for_iter.2']
    $16for_iter.3 = pair_second(value=$16for_iter.1) ['$16for_iter.1', '$16for_iter.3']
    $phi18.1 = $16for_iter.2                 ['$16for_iter.2', '$phi18.1']
    branch $16for_iter.3, 18, 34             ['$16for_iter.3']
label 18:
    v = $phi18.1                             ['$phi18.1', 'v']
    $24load_method.4 = getattr(value=v, attr=item) ['$24load_method.4', 'v']
    $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$24load_method.4', '$26call_method.5']
    $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined) ['$26call_method.5', '$28inplace_add.6', 'c']
    c = $28inplace_add.6                     ['$28inplace_add.6', 'c']
    jump 16                                  []
label 34:
    $38load_attr.2 = getattr(value=a, attr=size) ['$38load_attr.2', 'a']
    $40binary_true_divide.3 = c / $38load_attr.2 ['$38load_attr.2', '$40binary_true_divide.3', 'c']
    $42return_value.4 = cast(value=$40binary_true_divide.3) ['$40binary_true_divide.3', '$42return_value.4']
    return $42return_value.4                 ['$42return_value.4']

2024-09-04 18:31:49,724 - ==== SSA block analysis pass on 0
2024-09-04 18:31:49,724 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431833B670>
2024-09-04 18:31:49,724 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:49,724 - on stmt: c = freevar(acc_init: 0.0)
2024-09-04 18:31:49,724 - on stmt: $6load_global.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:49,724 - on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
2024-09-04 18:31:49,725 - on stmt: $12call_method.4 = call $8load_method.2(a, func=$8load_method.2, args=[Var(a, arraymath.py:437)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:49,726 - on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
2024-09-04 18:31:49,726 - on stmt: $phi16.0 = $14get_iter.5
2024-09-04 18:31:49,726 - on stmt: jump 16
2024-09-04 18:31:49,726 - ==== SSA block analysis pass on 16
2024-09-04 18:31:49,726 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431833B670>
2024-09-04 18:31:49,726 - on stmt: $16for_iter.1 = iternext(value=$phi16.0)
2024-09-04 18:31:49,726 - on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
2024-09-04 18:31:49,726 - on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
2024-09-04 18:31:49,726 - on stmt: $phi18.1 = $16for_iter.2
2024-09-04 18:31:49,726 - on stmt: branch $16for_iter.3, 18, 34
2024-09-04 18:31:49,726 - ==== SSA block analysis pass on 18
2024-09-04 18:31:49,726 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431833B670>
2024-09-04 18:31:49,727 - on stmt: v = $phi18.1
2024-09-04 18:31:49,727 - on stmt: $24load_method.4 = getattr(value=v, attr=item)
2024-09-04 18:31:49,727 - on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:49,727 - on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:49,727 - on stmt: c = $28inplace_add.6
2024-09-04 18:31:49,727 - on stmt: jump 16
2024-09-04 18:31:49,727 - ==== SSA block analysis pass on 34
2024-09-04 18:31:49,727 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431833B670>
2024-09-04 18:31:49,727 - on stmt: $38load_attr.2 = getattr(value=a, attr=size)
2024-09-04 18:31:49,727 - on stmt: $40binary_true_divide.3 = c / $38load_attr.2
2024-09-04 18:31:49,727 - on stmt: $42return_value.4 = cast(value=$40binary_true_divide.3)
2024-09-04 18:31:49,727 - on stmt: return $42return_value.4
2024-09-04 18:31:49,728 - defs defaultdict(<class 'list'>,
            {'$12call_method.4': [(<numba.core.ir.Assign object at 0x0000024313585420>,
                                   0)],
             '$14get_iter.5': [(<numba.core.ir.Assign object at 0x0000024313585DE0>,
                                0)],
             '$16for_iter.1': [(<numba.core.ir.Assign object at 0x0000024313585180>,
                                16)],
             '$16for_iter.2': [(<numba.core.ir.Assign object at 0x00000243135842B0>,
                                16)],
             '$16for_iter.3': [(<numba.core.ir.Assign object at 0x0000024313584BB0>,
                                16)],
             '$24load_method.4': [(<numba.core.ir.Assign object at 0x0000024313587CD0>,
                                   18)],
             '$26call_method.5': [(<numba.core.ir.Assign object at 0x0000024313587430>,
                                   18)],
             '$28inplace_add.6': [(<numba.core.ir.Assign object at 0x0000024313586C50>,
                                   18)],
             '$38load_attr.2': [(<numba.core.ir.Assign object at 0x00000243135875B0>,
                                 34)],
             '$40binary_true_divide.3': [(<numba.core.ir.Assign object at 0x0000024313587730>,
                                          34)],
             '$42return_value.4': [(<numba.core.ir.Assign object at 0x00000243135879A0>,
                                    34)],
             '$6load_global.1': [(<numba.core.ir.Assign object at 0x0000024313584FD0>,
                                  0)],
             '$8load_method.2': [(<numba.core.ir.Assign object at 0x0000024313584E50>,
                                  0)],
             '$phi16.0': [(<numba.core.ir.Assign object at 0x0000024313585F30>,
                           0)],
             '$phi18.1': [(<numba.core.ir.Assign object at 0x0000024313586620>,
                           16)],
             'a': [(<numba.core.ir.Assign object at 0x0000024318FA9840>, 0)],
             'c': [(<numba.core.ir.Assign object at 0x0000024313586CB0>, 0),
                   (<numba.core.ir.Assign object at 0x0000024313587790>, 18)],
             'v': [(<numba.core.ir.Assign object at 0x0000024313587EB0>, 18)]})
2024-09-04 18:31:49,729 - SSA violators <numba.core.utils.OrderedSet object at 0x000002431833B670>
2024-09-04 18:31:49,729 - Fix SSA violator on var c
2024-09-04 18:31:49,729 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:49,729 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318339690>
2024-09-04 18:31:49,729 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:49,729 - on stmt: c = freevar(acc_init: 0.0)
2024-09-04 18:31:49,729 - first assign: c
2024-09-04 18:31:49,729 - replaced with: c = freevar(acc_init: 0.0)
2024-09-04 18:31:49,729 - on stmt: $6load_global.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:49,729 - on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
2024-09-04 18:31:49,729 - on stmt: $12call_method.4 = call $8load_method.2(a, func=$8load_method.2, args=[Var(a, arraymath.py:437)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:49,729 - on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
2024-09-04 18:31:49,729 - on stmt: $phi16.0 = $14get_iter.5
2024-09-04 18:31:49,730 - on stmt: jump 16
2024-09-04 18:31:49,730 - ==== SSA block rewrite pass on 16
2024-09-04 18:31:49,730 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318339690>
2024-09-04 18:31:49,730 - on stmt: $16for_iter.1 = iternext(value=$phi16.0)
2024-09-04 18:31:49,730 - on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
2024-09-04 18:31:49,730 - on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
2024-09-04 18:31:49,730 - on stmt: $phi18.1 = $16for_iter.2
2024-09-04 18:31:49,730 - on stmt: branch $16for_iter.3, 18, 34
2024-09-04 18:31:49,730 - ==== SSA block rewrite pass on 18
2024-09-04 18:31:49,730 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318339690>
2024-09-04 18:31:49,730 - on stmt: v = $phi18.1
2024-09-04 18:31:49,730 - on stmt: $24load_method.4 = getattr(value=v, attr=item)
2024-09-04 18:31:49,730 - on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:49,730 - on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:49,731 - on stmt: c = $28inplace_add.6
2024-09-04 18:31:49,731 - replaced with: c.1 = $28inplace_add.6
2024-09-04 18:31:49,731 - on stmt: jump 16
2024-09-04 18:31:49,731 - ==== SSA block rewrite pass on 34
2024-09-04 18:31:49,731 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024318339690>
2024-09-04 18:31:49,731 - on stmt: $38load_attr.2 = getattr(value=a, attr=size)
2024-09-04 18:31:49,731 - on stmt: $40binary_true_divide.3 = c / $38load_attr.2
2024-09-04 18:31:49,731 - on stmt: $42return_value.4 = cast(value=$40binary_true_divide.3)
2024-09-04 18:31:49,731 - on stmt: return $42return_value.4
2024-09-04 18:31:49,731 - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000024318339480>],
             18: [<numba.core.ir.Assign object at 0x000002431833A710>]})
2024-09-04 18:31:49,731 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:49,731 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318339690>
2024-09-04 18:31:49,731 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:49,732 - on stmt: c = freevar(acc_init: 0.0)
2024-09-04 18:31:49,732 - on stmt: $6load_global.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:49,732 - on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
2024-09-04 18:31:49,732 - on stmt: $12call_method.4 = call $8load_method.2(a, func=$8load_method.2, args=[Var(a, arraymath.py:437)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:49,732 - on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
2024-09-04 18:31:49,732 - on stmt: $phi16.0 = $14get_iter.5
2024-09-04 18:31:49,732 - on stmt: jump 16
2024-09-04 18:31:49,732 - ==== SSA block rewrite pass on 16
2024-09-04 18:31:49,732 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318339690>
2024-09-04 18:31:49,732 - on stmt: $16for_iter.1 = iternext(value=$phi16.0)
2024-09-04 18:31:49,732 - on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
2024-09-04 18:31:49,732 - on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
2024-09-04 18:31:49,732 - on stmt: $phi18.1 = $16for_iter.2
2024-09-04 18:31:49,733 - on stmt: branch $16for_iter.3, 18, 34
2024-09-04 18:31:49,733 - ==== SSA block rewrite pass on 18
2024-09-04 18:31:49,733 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318339690>
2024-09-04 18:31:49,733 - on stmt: v = $phi18.1
2024-09-04 18:31:49,733 - on stmt: $24load_method.4 = getattr(value=v, attr=item)
2024-09-04 18:31:49,733 - on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:49,733 - on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:49,733 - find_def var='c' stmt=$28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:49,733 - find_def_from_top label 18
2024-09-04 18:31:49,733 - idom 16 from label 18
2024-09-04 18:31:49,733 - find_def_from_bottom label 16
2024-09-04 18:31:49,733 - find_def_from_top label 16
2024-09-04 18:31:49,733 - insert phi node c.2 = phi(incoming_values=[], incoming_blocks=[]) at 16
2024-09-04 18:31:49,734 - find_def_from_bottom label 0
2024-09-04 18:31:49,734 - incoming_def c = freevar(acc_init: 0.0)
2024-09-04 18:31:49,734 - find_def_from_bottom label 18
2024-09-04 18:31:49,734 - incoming_def c.1 = $28inplace_add.6
2024-09-04 18:31:49,734 - replaced with: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c.2, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:49,734 - on stmt: c.1 = $28inplace_add.6
2024-09-04 18:31:49,734 - on stmt: jump 16
2024-09-04 18:31:49,734 - ==== SSA block rewrite pass on 34
2024-09-04 18:31:49,734 - Running <numba.core.ssa._FixSSAVars object at 0x0000024318339690>
2024-09-04 18:31:49,734 - on stmt: $38load_attr.2 = getattr(value=a, attr=size)
2024-09-04 18:31:49,734 - on stmt: $40binary_true_divide.3 = c / $38load_attr.2
2024-09-04 18:31:49,734 - find_def var='c' stmt=$40binary_true_divide.3 = c / $38load_attr.2
2024-09-04 18:31:49,735 - find_def_from_top label 34
2024-09-04 18:31:49,735 - idom 16 from label 34
2024-09-04 18:31:49,735 - find_def_from_bottom label 16
2024-09-04 18:31:49,735 - replaced with: $40binary_true_divide.3 = c.2 / $38load_attr.2
2024-09-04 18:31:49,735 - on stmt: $42return_value.4 = cast(value=$40binary_true_divide.3)
2024-09-04 18:31:49,735 - on stmt: return $42return_value.4
2024-09-04 18:31:50,290 - bytecode dump:
>          0	NOP(arg=None, lineno=1209)
           2	LOAD_FAST(arg=0, lineno=1221)
           4	LOAD_CONST(arg=1, lineno=1221)
           6	BINARY_SUBSCR(arg=None, lineno=1221)
           8	LOAD_GLOBAL(arg=0, lineno=1221)
          10	LOAD_METHOD(arg=1, lineno=1221)
          12	LOAD_FAST(arg=0, lineno=1221)
          14	LOAD_CONST(arg=2, lineno=1221)
          16	LOAD_GLOBAL(arg=2, lineno=1221)
          18	LOAD_FAST(arg=2, lineno=1221)
          20	LOAD_FAST(arg=0, lineno=1221)
          22	LOAD_ATTR(arg=3, lineno=1221)
          24	LOAD_CONST(arg=1, lineno=1221)
          26	BINARY_SUBSCR(arg=None, lineno=1221)
          28	CALL_FUNCTION(arg=2, lineno=1221)
          30	BUILD_SLICE(arg=2, lineno=1221)
          32	BINARY_SUBSCR(arg=None, lineno=1221)
          34	CALL_METHOD(arg=1, lineno=1221)
          36	COMPARE_OP(arg=5, lineno=1221)
          38	LOAD_FAST(arg=7, lineno=1221)
          40	LOAD_CONST(arg=1, lineno=1221)
          42	STORE_SUBSCR(arg=None, lineno=1221)
          44	LOAD_FAST(arg=7, lineno=1222)
          46	LOAD_CONST(arg=1, lineno=1222)
          48	DUP_TOP_TWO(arg=None, lineno=1222)
          50	BINARY_SUBSCR(arg=None, lineno=1222)
          52	LOAD_FAST(arg=0, lineno=1222)
          54	LOAD_CONST(arg=1, lineno=1222)
          56	BINARY_SUBSCR(arg=None, lineno=1222)
          58	LOAD_GLOBAL(arg=0, lineno=1222)
          60	LOAD_METHOD(arg=4, lineno=1222)
          62	LOAD_FAST(arg=0, lineno=1222)
          64	LOAD_CONST(arg=2, lineno=1222)
          66	LOAD_GLOBAL(arg=2, lineno=1222)
          68	LOAD_FAST(arg=4, lineno=1222)
          70	LOAD_FAST(arg=0, lineno=1222)
          72	LOAD_ATTR(arg=3, lineno=1222)
          74	LOAD_CONST(arg=1, lineno=1222)
          76	BINARY_SUBSCR(arg=None, lineno=1222)
          78	CALL_FUNCTION(arg=2, lineno=1222)
          80	BUILD_SLICE(arg=2, lineno=1222)
          82	BINARY_SUBSCR(arg=None, lineno=1222)
          84	CALL_METHOD(arg=1, lineno=1222)
          86	LOAD_FAST(arg=5, lineno=1222)
          88	BINARY_ADD(arg=None, lineno=1222)
          90	COMPARE_OP(arg=5, lineno=1222)
          92	INPLACE_AND(arg=None, lineno=1222)
          94	ROT_THREE(arg=None, lineno=1222)
          96	STORE_SUBSCR(arg=None, lineno=1222)
          98	LOAD_FAST(arg=7, lineno=1224)
         100	LOAD_CONST(arg=1, lineno=1224)
         102	BINARY_SUBSCR(arg=None, lineno=1224)
         104	POP_JUMP_IF_FALSE(arg=59, lineno=1224)
         106	LOAD_FAST(arg=6, lineno=1225)
         108	LOAD_CONST(arg=3, lineno=1225)
         110	BINARY_ADD(arg=None, lineno=1225)
         112	STORE_FAST(arg=8, lineno=1225)
         114	JUMP_FORWARD(arg=2, lineno=1225)
>        116	LOAD_CONST(arg=3, lineno=1227)
         118	STORE_FAST(arg=8, lineno=1227)
>        120	LOAD_FAST(arg=8, lineno=1229)
         122	LOAD_FAST(arg=0, lineno=1229)
         124	LOAD_ATTR(arg=3, lineno=1229)
         126	LOAD_CONST(arg=1, lineno=1229)
         128	BINARY_SUBSCR(arg=None, lineno=1229)
         130	COMPARE_OP(arg=0, lineno=1229)
         132	POP_JUMP_IF_FALSE(arg=167, lineno=1229)
>        134	LOAD_GLOBAL(arg=0, lineno=1230)
         136	LOAD_METHOD(arg=1, lineno=1230)
         138	LOAD_FAST(arg=0, lineno=1230)
         140	LOAD_GLOBAL(arg=1, lineno=1230)
         142	LOAD_CONST(arg=1, lineno=1230)
         144	LOAD_FAST(arg=8, lineno=1230)
         146	LOAD_FAST(arg=1, lineno=1230)
         148	BINARY_SUBTRACT(arg=None, lineno=1230)
         150	CALL_FUNCTION(arg=2, lineno=1230)
         152	LOAD_GLOBAL(arg=2, lineno=1230)
         154	LOAD_FAST(arg=8, lineno=1230)
         156	LOAD_FAST(arg=2, lineno=1230)
         158	BINARY_ADD(arg=None, lineno=1230)
         160	LOAD_FAST(arg=0, lineno=1230)
         162	LOAD_ATTR(arg=3, lineno=1230)
         164	LOAD_CONST(arg=1, lineno=1230)
         166	BINARY_SUBSCR(arg=None, lineno=1230)
         168	CALL_FUNCTION(arg=2, lineno=1230)
         170	BUILD_SLICE(arg=2, lineno=1230)
         172	BINARY_SUBSCR(arg=None, lineno=1230)
         174	CALL_METHOD(arg=1, lineno=1230)
         176	STORE_FAST(arg=9, lineno=1230)
         178	LOAD_FAST(arg=0, lineno=1233)
         180	LOAD_FAST(arg=8, lineno=1233)
         182	BINARY_SUBSCR(arg=None, lineno=1233)
         184	LOAD_FAST(arg=9, lineno=1233)
         186	COMPARE_OP(arg=2, lineno=1233)
         188	LOAD_FAST(arg=7, lineno=1233)
         190	LOAD_FAST(arg=8, lineno=1233)
         192	STORE_SUBSCR(arg=None, lineno=1233)
         194	LOAD_FAST(arg=7, lineno=1235)
         196	LOAD_FAST(arg=8, lineno=1235)
         198	BINARY_SUBSCR(arg=None, lineno=1235)
         200	POP_JUMP_IF_TRUE(arg=107, lineno=1235)
         202	LOAD_FAST(arg=8, lineno=1236)
         204	LOAD_CONST(arg=3, lineno=1236)
         206	INPLACE_ADD(arg=None, lineno=1236)
         208	STORE_FAST(arg=8, lineno=1236)
         210	JUMP_ABSOLUTE(arg=61, lineno=1237)
>        212	LOAD_GLOBAL(arg=0, lineno=1239)
         214	LOAD_METHOD(arg=4, lineno=1239)
         216	LOAD_FAST(arg=0, lineno=1239)
         218	LOAD_GLOBAL(arg=1, lineno=1239)
         220	LOAD_CONST(arg=1, lineno=1239)
         222	LOAD_FAST(arg=8, lineno=1239)
         224	LOAD_FAST(arg=3, lineno=1239)
         226	BINARY_SUBTRACT(arg=None, lineno=1239)
         228	CALL_FUNCTION(arg=2, lineno=1239)
         230	LOAD_GLOBAL(arg=2, lineno=1239)
         232	LOAD_FAST(arg=8, lineno=1239)
         234	LOAD_FAST(arg=4, lineno=1239)
         236	BINARY_ADD(arg=None, lineno=1239)
         238	LOAD_FAST(arg=0, lineno=1239)
         240	LOAD_ATTR(arg=3, lineno=1239)
         242	LOAD_CONST(arg=1, lineno=1239)
         244	BINARY_SUBSCR(arg=None, lineno=1239)
         246	CALL_FUNCTION(arg=2, lineno=1239)
         248	BUILD_SLICE(arg=2, lineno=1239)
         250	BINARY_SUBSCR(arg=None, lineno=1239)
         252	CALL_METHOD(arg=1, lineno=1239)
         254	STORE_FAST(arg=10, lineno=1239)
         256	LOAD_FAST(arg=7, lineno=1240)
         258	LOAD_FAST(arg=8, lineno=1240)
         260	DUP_TOP_TWO(arg=None, lineno=1240)
         262	BINARY_SUBSCR(arg=None, lineno=1240)
         264	LOAD_FAST(arg=0, lineno=1240)
         266	LOAD_FAST(arg=8, lineno=1240)
         268	BINARY_SUBSCR(arg=None, lineno=1240)
         270	LOAD_FAST(arg=10, lineno=1240)
         272	LOAD_FAST(arg=5, lineno=1240)
         274	BINARY_ADD(arg=None, lineno=1240)
         276	COMPARE_OP(arg=5, lineno=1240)
         278	INPLACE_AND(arg=None, lineno=1240)
         280	ROT_THREE(arg=None, lineno=1240)
         282	STORE_SUBSCR(arg=None, lineno=1240)
         284	LOAD_FAST(arg=7, lineno=1242)
         286	LOAD_FAST(arg=8, lineno=1242)
         288	BINARY_SUBSCR(arg=None, lineno=1242)
         290	POP_JUMP_IF_TRUE(arg=152, lineno=1242)
         292	LOAD_FAST(arg=8, lineno=1243)
         294	LOAD_CONST(arg=3, lineno=1243)
         296	INPLACE_ADD(arg=None, lineno=1243)
         298	STORE_FAST(arg=8, lineno=1243)
         300	JUMP_ABSOLUTE(arg=61, lineno=1244)
>        302	LOAD_FAST(arg=8, lineno=1247)
         304	LOAD_FAST(arg=6, lineno=1247)
         306	LOAD_CONST(arg=3, lineno=1247)
         308	BINARY_ADD(arg=None, lineno=1247)
         310	INPLACE_ADD(arg=None, lineno=1247)
         312	STORE_FAST(arg=8, lineno=1247)
         314	LOAD_FAST(arg=8, lineno=1229)
         316	LOAD_FAST(arg=0, lineno=1229)
         318	LOAD_ATTR(arg=3, lineno=1229)
         320	LOAD_CONST(arg=1, lineno=1229)
         322	BINARY_SUBSCR(arg=None, lineno=1229)
         324	COMPARE_OP(arg=0, lineno=1229)
         326	POP_JUMP_IF_TRUE(arg=68, lineno=1229)
         328	LOAD_CONST(arg=2, lineno=1229)
         330	RETURN_VALUE(arg=None, lineno=1229)
>        332	LOAD_CONST(arg=2, lineno=1229)
         334	RETURN_VALUE(arg=None, lineno=1229)
2024-09-04 18:31:50,291 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:50,291 - stack: []
2024-09-04 18:31:50,291 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:50,291 - dispatch pc=0, inst=NOP(arg=None, lineno=1209)
2024-09-04 18:31:50,291 - stack []
2024-09-04 18:31:50,291 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1221)
2024-09-04 18:31:50,291 - stack []
2024-09-04 18:31:50,292 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1221)
2024-09-04 18:31:50,292 - stack ['$x2.0']
2024-09-04 18:31:50,292 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1221)
2024-09-04 18:31:50,292 - stack ['$x2.0', '$const4.1']
2024-09-04 18:31:50,292 - dispatch pc=8, inst=LOAD_GLOBAL(arg=0, lineno=1221)
2024-09-04 18:31:50,292 - stack ['$6binary_subscr.2']
2024-09-04 18:31:50,293 - dispatch pc=10, inst=LOAD_METHOD(arg=1, lineno=1221)
2024-09-04 18:31:50,293 - stack ['$6binary_subscr.2', '$8load_global.3']
2024-09-04 18:31:50,293 - dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=1221)
2024-09-04 18:31:50,293 - stack ['$6binary_subscr.2', '$10load_method.4']
2024-09-04 18:31:50,293 - dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=1221)
2024-09-04 18:31:50,293 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5']
2024-09-04 18:31:50,294 - dispatch pc=16, inst=LOAD_GLOBAL(arg=2, lineno=1221)
2024-09-04 18:31:50,294 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6']
2024-09-04 18:31:50,294 - dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=1221)
2024-09-04 18:31:50,294 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7']
2024-09-04 18:31:50,294 - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=1221)
2024-09-04 18:31:50,295 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8']
2024-09-04 18:31:50,295 - dispatch pc=22, inst=LOAD_ATTR(arg=3, lineno=1221)
2024-09-04 18:31:50,295 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8', '$x20.9']
2024-09-04 18:31:50,295 - dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=1221)
2024-09-04 18:31:50,295 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8', '$22load_attr.10']
2024-09-04 18:31:50,295 - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1221)
2024-09-04 18:31:50,296 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8', '$22load_attr.10', '$const24.11']
2024-09-04 18:31:50,296 - dispatch pc=28, inst=CALL_FUNCTION(arg=2, lineno=1221)
2024-09-04 18:31:50,296 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8', '$26binary_subscr.12']
2024-09-04 18:31:50,296 - dispatch pc=30, inst=BUILD_SLICE(arg=2, lineno=1221)
2024-09-04 18:31:50,296 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$28call_function.13']
2024-09-04 18:31:50,296 - dispatch pc=32, inst=BINARY_SUBSCR(arg=None, lineno=1221)
2024-09-04 18:31:50,297 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$30build_slice.15']
2024-09-04 18:31:50,297 - dispatch pc=34, inst=CALL_METHOD(arg=1, lineno=1221)
2024-09-04 18:31:50,297 - stack ['$6binary_subscr.2', '$10load_method.4', '$32binary_subscr.16']
2024-09-04 18:31:50,297 - dispatch pc=36, inst=COMPARE_OP(arg=5, lineno=1221)
2024-09-04 18:31:50,297 - stack ['$6binary_subscr.2', '$34call_method.17']
2024-09-04 18:31:50,298 - dispatch pc=38, inst=LOAD_FAST(arg=7, lineno=1221)
2024-09-04 18:31:50,298 - stack ['$36compare_op.18']
2024-09-04 18:31:50,298 - dispatch pc=40, inst=LOAD_CONST(arg=1, lineno=1221)
2024-09-04 18:31:50,298 - stack ['$36compare_op.18', '$peaks38.19']
2024-09-04 18:31:50,298 - dispatch pc=42, inst=STORE_SUBSCR(arg=None, lineno=1221)
2024-09-04 18:31:50,298 - stack ['$36compare_op.18', '$peaks38.19', '$const40.20']
2024-09-04 18:31:50,298 - dispatch pc=44, inst=LOAD_FAST(arg=7, lineno=1222)
2024-09-04 18:31:50,299 - stack []
2024-09-04 18:31:50,299 - dispatch pc=46, inst=LOAD_CONST(arg=1, lineno=1222)
2024-09-04 18:31:50,299 - stack ['$peaks44.21']
2024-09-04 18:31:50,299 - dispatch pc=48, inst=DUP_TOP_TWO(arg=None, lineno=1222)
2024-09-04 18:31:50,299 - stack ['$peaks44.21', '$const46.22']
2024-09-04 18:31:50,299 - dispatch pc=50, inst=BINARY_SUBSCR(arg=None, lineno=1222)
2024-09-04 18:31:50,300 - stack ['$peaks44.21', '$const46.22', '$48dup_top_two.23', '$48dup_top_two.24']
2024-09-04 18:31:50,300 - dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=1222)
2024-09-04 18:31:50,300 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25']
2024-09-04 18:31:50,300 - dispatch pc=54, inst=LOAD_CONST(arg=1, lineno=1222)
2024-09-04 18:31:50,300 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$x52.26']
2024-09-04 18:31:50,300 - dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=1222)
2024-09-04 18:31:50,301 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$x52.26', '$const54.27']
2024-09-04 18:31:50,301 - dispatch pc=58, inst=LOAD_GLOBAL(arg=0, lineno=1222)
2024-09-04 18:31:50,301 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28']
2024-09-04 18:31:50,301 - dispatch pc=60, inst=LOAD_METHOD(arg=4, lineno=1222)
2024-09-04 18:31:50,301 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$58load_global.29']
2024-09-04 18:31:50,302 - dispatch pc=62, inst=LOAD_FAST(arg=0, lineno=1222)
2024-09-04 18:31:50,302 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30']
2024-09-04 18:31:50,302 - dispatch pc=64, inst=LOAD_CONST(arg=2, lineno=1222)
2024-09-04 18:31:50,302 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31']
2024-09-04 18:31:50,302 - dispatch pc=66, inst=LOAD_GLOBAL(arg=2, lineno=1222)
2024-09-04 18:31:50,303 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32']
2024-09-04 18:31:50,303 - dispatch pc=68, inst=LOAD_FAST(arg=4, lineno=1222)
2024-09-04 18:31:50,303 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33']
2024-09-04 18:31:50,303 - dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1222)
2024-09-04 18:31:50,303 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34']
2024-09-04 18:31:50,304 - dispatch pc=72, inst=LOAD_ATTR(arg=3, lineno=1222)
2024-09-04 18:31:50,304 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34', '$x70.35']
2024-09-04 18:31:50,304 - dispatch pc=74, inst=LOAD_CONST(arg=1, lineno=1222)
2024-09-04 18:31:50,304 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34', '$72load_attr.36']
2024-09-04 18:31:50,304 - dispatch pc=76, inst=BINARY_SUBSCR(arg=None, lineno=1222)
2024-09-04 18:31:50,304 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34', '$72load_attr.36', '$const74.37']
2024-09-04 18:31:50,305 - dispatch pc=78, inst=CALL_FUNCTION(arg=2, lineno=1222)
2024-09-04 18:31:50,305 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34', '$76binary_subscr.38']
2024-09-04 18:31:50,305 - dispatch pc=80, inst=BUILD_SLICE(arg=2, lineno=1222)
2024-09-04 18:31:50,305 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$78call_function.39']
2024-09-04 18:31:50,305 - dispatch pc=82, inst=BINARY_SUBSCR(arg=None, lineno=1222)
2024-09-04 18:31:50,305 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$80build_slice.41']
2024-09-04 18:31:50,305 - dispatch pc=84, inst=CALL_METHOD(arg=1, lineno=1222)
2024-09-04 18:31:50,306 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$82binary_subscr.42']
2024-09-04 18:31:50,306 - dispatch pc=86, inst=LOAD_FAST(arg=5, lineno=1222)
2024-09-04 18:31:50,306 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$84call_method.43']
2024-09-04 18:31:50,306 - dispatch pc=88, inst=BINARY_ADD(arg=None, lineno=1222)
2024-09-04 18:31:50,306 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$84call_method.43', '$delta86.44']
2024-09-04 18:31:50,306 - dispatch pc=90, inst=COMPARE_OP(arg=5, lineno=1222)
2024-09-04 18:31:50,307 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$88binary_add.45']
2024-09-04 18:31:50,307 - dispatch pc=92, inst=INPLACE_AND(arg=None, lineno=1222)
2024-09-04 18:31:50,307 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$90compare_op.46']
2024-09-04 18:31:50,307 - dispatch pc=94, inst=ROT_THREE(arg=None, lineno=1222)
2024-09-04 18:31:50,307 - stack ['$peaks44.21', '$const46.22', '$92inplace_and.47']
2024-09-04 18:31:50,307 - dispatch pc=96, inst=STORE_SUBSCR(arg=None, lineno=1222)
2024-09-04 18:31:50,308 - stack ['$92inplace_and.47', '$peaks44.21', '$const46.22']
2024-09-04 18:31:50,308 - dispatch pc=98, inst=LOAD_FAST(arg=7, lineno=1224)
2024-09-04 18:31:50,308 - stack []
2024-09-04 18:31:50,308 - dispatch pc=100, inst=LOAD_CONST(arg=1, lineno=1224)
2024-09-04 18:31:50,308 - stack ['$peaks98.48']
2024-09-04 18:31:50,308 - dispatch pc=102, inst=BINARY_SUBSCR(arg=None, lineno=1224)
2024-09-04 18:31:50,308 - stack ['$peaks98.48', '$const100.49']
2024-09-04 18:31:50,309 - dispatch pc=104, inst=POP_JUMP_IF_FALSE(arg=59, lineno=1224)
2024-09-04 18:31:50,309 - stack ['$102binary_subscr.50']
2024-09-04 18:31:50,309 - end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0), Edge(pc=116, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:50,309 - pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=116 nstack_initial=0)])
2024-09-04 18:31:50,309 - stack: []
2024-09-04 18:31:50,310 - state.pc_initial: State(pc_initial=106 nstack_initial=0)
2024-09-04 18:31:50,310 - dispatch pc=106, inst=LOAD_FAST(arg=6, lineno=1225)
2024-09-04 18:31:50,310 - stack []
2024-09-04 18:31:50,310 - dispatch pc=108, inst=LOAD_CONST(arg=3, lineno=1225)
2024-09-04 18:31:50,310 - stack ['$wait106.0']
2024-09-04 18:31:50,310 - dispatch pc=110, inst=BINARY_ADD(arg=None, lineno=1225)
2024-09-04 18:31:50,311 - stack ['$wait106.0', '$const108.1']
2024-09-04 18:31:50,311 - dispatch pc=112, inst=STORE_FAST(arg=8, lineno=1225)
2024-09-04 18:31:50,311 - stack ['$110binary_add.2']
2024-09-04 18:31:50,311 - dispatch pc=114, inst=JUMP_FORWARD(arg=2, lineno=1225)
2024-09-04 18:31:50,311 - stack []
2024-09-04 18:31:50,311 - end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:50,312 - pending: deque([State(pc_initial=116 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
2024-09-04 18:31:50,312 - stack: []
2024-09-04 18:31:50,312 - state.pc_initial: State(pc_initial=116 nstack_initial=0)
2024-09-04 18:31:50,312 - dispatch pc=116, inst=LOAD_CONST(arg=3, lineno=1227)
2024-09-04 18:31:50,312 - stack []
2024-09-04 18:31:50,313 - dispatch pc=118, inst=STORE_FAST(arg=8, lineno=1227)
2024-09-04 18:31:50,313 - stack ['$const116.0']
2024-09-04 18:31:50,313 - end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:50,313 - pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
2024-09-04 18:31:50,313 - stack: []
2024-09-04 18:31:50,314 - state.pc_initial: State(pc_initial=120 nstack_initial=0)
2024-09-04 18:31:50,314 - dispatch pc=120, inst=LOAD_FAST(arg=8, lineno=1229)
2024-09-04 18:31:50,314 - stack []
2024-09-04 18:31:50,314 - dispatch pc=122, inst=LOAD_FAST(arg=0, lineno=1229)
2024-09-04 18:31:50,314 - stack ['$n120.0']
2024-09-04 18:31:50,315 - dispatch pc=124, inst=LOAD_ATTR(arg=3, lineno=1229)
2024-09-04 18:31:50,315 - stack ['$n120.0', '$x122.1']
2024-09-04 18:31:50,315 - dispatch pc=126, inst=LOAD_CONST(arg=1, lineno=1229)
2024-09-04 18:31:50,315 - stack ['$n120.0', '$124load_attr.2']
2024-09-04 18:31:50,315 - dispatch pc=128, inst=BINARY_SUBSCR(arg=None, lineno=1229)
2024-09-04 18:31:50,316 - stack ['$n120.0', '$124load_attr.2', '$const126.3']
2024-09-04 18:31:50,316 - dispatch pc=130, inst=COMPARE_OP(arg=0, lineno=1229)
2024-09-04 18:31:50,316 - stack ['$n120.0', '$128binary_subscr.4']
2024-09-04 18:31:50,316 - dispatch pc=132, inst=POP_JUMP_IF_FALSE(arg=167, lineno=1229)
2024-09-04 18:31:50,316 - stack ['$130compare_op.5']
2024-09-04 18:31:50,317 - end state. edges=[Edge(pc=134, stack=(), blockstack=(), npush=0), Edge(pc=332, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:50,317 - pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=134 nstack_initial=0), State(pc_initial=332 nstack_initial=0)])
2024-09-04 18:31:50,317 - pending: deque([State(pc_initial=134 nstack_initial=0), State(pc_initial=332 nstack_initial=0)])
2024-09-04 18:31:50,318 - stack: []
2024-09-04 18:31:50,318 - state.pc_initial: State(pc_initial=134 nstack_initial=0)
2024-09-04 18:31:50,318 - dispatch pc=134, inst=LOAD_GLOBAL(arg=0, lineno=1230)
2024-09-04 18:31:50,318 - stack []
2024-09-04 18:31:50,319 - dispatch pc=136, inst=LOAD_METHOD(arg=1, lineno=1230)
2024-09-04 18:31:50,319 - stack ['$134load_global.0']
2024-09-04 18:31:50,319 - dispatch pc=138, inst=LOAD_FAST(arg=0, lineno=1230)
2024-09-04 18:31:50,319 - stack ['$136load_method.1']
2024-09-04 18:31:50,320 - dispatch pc=140, inst=LOAD_GLOBAL(arg=1, lineno=1230)
2024-09-04 18:31:50,320 - stack ['$136load_method.1', '$x138.2']
2024-09-04 18:31:50,320 - dispatch pc=142, inst=LOAD_CONST(arg=1, lineno=1230)
2024-09-04 18:31:50,320 - stack ['$136load_method.1', '$x138.2', '$140load_global.3']
2024-09-04 18:31:50,321 - dispatch pc=144, inst=LOAD_FAST(arg=8, lineno=1230)
2024-09-04 18:31:50,321 - stack ['$136load_method.1', '$x138.2', '$140load_global.3', '$const142.4']
2024-09-04 18:31:50,321 - dispatch pc=146, inst=LOAD_FAST(arg=1, lineno=1230)
2024-09-04 18:31:50,321 - stack ['$136load_method.1', '$x138.2', '$140load_global.3', '$const142.4', '$n144.5']
2024-09-04 18:31:50,321 - dispatch pc=148, inst=BINARY_SUBTRACT(arg=None, lineno=1230)
2024-09-04 18:31:50,322 - stack ['$136load_method.1', '$x138.2', '$140load_global.3', '$const142.4', '$n144.5', '$pre_max146.6']
2024-09-04 18:31:50,322 - dispatch pc=150, inst=CALL_FUNCTION(arg=2, lineno=1230)
2024-09-04 18:31:50,322 - stack ['$136load_method.1', '$x138.2', '$140load_global.3', '$const142.4', '$148binary_subtract.7']
2024-09-04 18:31:50,322 - dispatch pc=152, inst=LOAD_GLOBAL(arg=2, lineno=1230)
2024-09-04 18:31:50,322 - stack ['$136load_method.1', '$x138.2', '$150call_function.8']
2024-09-04 18:31:50,323 - dispatch pc=154, inst=LOAD_FAST(arg=8, lineno=1230)
2024-09-04 18:31:50,323 - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9']
2024-09-04 18:31:50,323 - dispatch pc=156, inst=LOAD_FAST(arg=2, lineno=1230)
2024-09-04 18:31:50,323 - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$n154.10']
2024-09-04 18:31:50,323 - dispatch pc=158, inst=BINARY_ADD(arg=None, lineno=1230)
2024-09-04 18:31:50,324 - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$n154.10', '$post_max156.11']
2024-09-04 18:31:50,324 - dispatch pc=160, inst=LOAD_FAST(arg=0, lineno=1230)
2024-09-04 18:31:50,324 - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12']
2024-09-04 18:31:50,324 - dispatch pc=162, inst=LOAD_ATTR(arg=3, lineno=1230)
2024-09-04 18:31:50,324 - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12', '$x160.13']
2024-09-04 18:31:50,325 - dispatch pc=164, inst=LOAD_CONST(arg=1, lineno=1230)
2024-09-04 18:31:50,325 - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12', '$162load_attr.14']
2024-09-04 18:31:50,325 - dispatch pc=166, inst=BINARY_SUBSCR(arg=None, lineno=1230)
2024-09-04 18:31:50,325 - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12', '$162load_attr.14', '$const164.15']
2024-09-04 18:31:50,325 - dispatch pc=168, inst=CALL_FUNCTION(arg=2, lineno=1230)
2024-09-04 18:31:50,325 - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12', '$166binary_subscr.16']
2024-09-04 18:31:50,325 - dispatch pc=170, inst=BUILD_SLICE(arg=2, lineno=1230)
2024-09-04 18:31:50,325 - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$168call_function.17']
2024-09-04 18:31:50,325 - dispatch pc=172, inst=BINARY_SUBSCR(arg=None, lineno=1230)
2024-09-04 18:31:50,325 - stack ['$136load_method.1', '$x138.2', '$170build_slice.19']
2024-09-04 18:31:50,325 - dispatch pc=174, inst=CALL_METHOD(arg=1, lineno=1230)
2024-09-04 18:31:50,325 - stack ['$136load_method.1', '$172binary_subscr.20']
2024-09-04 18:31:50,325 - dispatch pc=176, inst=STORE_FAST(arg=9, lineno=1230)
2024-09-04 18:31:50,325 - stack ['$174call_method.21']
2024-09-04 18:31:50,325 - dispatch pc=178, inst=LOAD_FAST(arg=0, lineno=1233)
2024-09-04 18:31:50,325 - stack []
2024-09-04 18:31:50,325 - dispatch pc=180, inst=LOAD_FAST(arg=8, lineno=1233)
2024-09-04 18:31:50,325 - stack ['$x178.22']
2024-09-04 18:31:50,325 - dispatch pc=182, inst=BINARY_SUBSCR(arg=None, lineno=1233)
2024-09-04 18:31:50,325 - stack ['$x178.22', '$n180.23']
2024-09-04 18:31:50,325 - dispatch pc=184, inst=LOAD_FAST(arg=9, lineno=1233)
2024-09-04 18:31:50,325 - stack ['$182binary_subscr.24']
2024-09-04 18:31:50,325 - dispatch pc=186, inst=COMPARE_OP(arg=2, lineno=1233)
2024-09-04 18:31:50,325 - stack ['$182binary_subscr.24', '$maxn184.25']
2024-09-04 18:31:50,325 - dispatch pc=188, inst=LOAD_FAST(arg=7, lineno=1233)
2024-09-04 18:31:50,325 - stack ['$186compare_op.26']
2024-09-04 18:31:50,325 - dispatch pc=190, inst=LOAD_FAST(arg=8, lineno=1233)
2024-09-04 18:31:50,325 - stack ['$186compare_op.26', '$peaks188.27']
2024-09-04 18:31:50,325 - dispatch pc=192, inst=STORE_SUBSCR(arg=None, lineno=1233)
2024-09-04 18:31:50,325 - stack ['$186compare_op.26', '$peaks188.27', '$n190.28']
2024-09-04 18:31:50,325 - dispatch pc=194, inst=LOAD_FAST(arg=7, lineno=1235)
2024-09-04 18:31:50,325 - stack []
2024-09-04 18:31:50,325 - dispatch pc=196, inst=LOAD_FAST(arg=8, lineno=1235)
2024-09-04 18:31:50,325 - stack ['$peaks194.29']
2024-09-04 18:31:50,325 - dispatch pc=198, inst=BINARY_SUBSCR(arg=None, lineno=1235)
2024-09-04 18:31:50,325 - stack ['$peaks194.29', '$n196.30']
2024-09-04 18:31:50,325 - dispatch pc=200, inst=POP_JUMP_IF_TRUE(arg=107, lineno=1235)
2024-09-04 18:31:50,325 - stack ['$198binary_subscr.31']
2024-09-04 18:31:50,325 - end state. edges=[Edge(pc=202, stack=(), blockstack=(), npush=0), Edge(pc=212, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:50,325 - pending: deque([State(pc_initial=332 nstack_initial=0), State(pc_initial=202 nstack_initial=0), State(pc_initial=212 nstack_initial=0)])
2024-09-04 18:31:50,325 - stack: []
2024-09-04 18:31:50,325 - state.pc_initial: State(pc_initial=332 nstack_initial=0)
2024-09-04 18:31:50,325 - dispatch pc=332, inst=LOAD_CONST(arg=2, lineno=1229)
2024-09-04 18:31:50,325 - stack []
2024-09-04 18:31:50,325 - dispatch pc=334, inst=RETURN_VALUE(arg=None, lineno=1229)
2024-09-04 18:31:50,325 - stack ['$const332.0']
2024-09-04 18:31:50,325 - end state. edges=[]
2024-09-04 18:31:50,325 - pending: deque([State(pc_initial=202 nstack_initial=0), State(pc_initial=212 nstack_initial=0)])
2024-09-04 18:31:50,325 - stack: []
2024-09-04 18:31:50,325 - state.pc_initial: State(pc_initial=202 nstack_initial=0)
2024-09-04 18:31:50,325 - dispatch pc=202, inst=LOAD_FAST(arg=8, lineno=1236)
2024-09-04 18:31:50,325 - stack []
2024-09-04 18:31:50,325 - dispatch pc=204, inst=LOAD_CONST(arg=3, lineno=1236)
2024-09-04 18:31:50,325 - stack ['$n202.0']
2024-09-04 18:31:50,325 - dispatch pc=206, inst=INPLACE_ADD(arg=None, lineno=1236)
2024-09-04 18:31:50,325 - stack ['$n202.0', '$const204.1']
2024-09-04 18:31:50,325 - dispatch pc=208, inst=STORE_FAST(arg=8, lineno=1236)
2024-09-04 18:31:50,325 - stack ['$206inplace_add.2']
2024-09-04 18:31:50,325 - dispatch pc=210, inst=JUMP_ABSOLUTE(arg=61, lineno=1237)
2024-09-04 18:31:50,325 - stack []
2024-09-04 18:31:50,325 - end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:50,325 - pending: deque([State(pc_initial=212 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
2024-09-04 18:31:50,325 - stack: []
2024-09-04 18:31:50,325 - state.pc_initial: State(pc_initial=212 nstack_initial=0)
2024-09-04 18:31:50,325 - dispatch pc=212, inst=LOAD_GLOBAL(arg=0, lineno=1239)
2024-09-04 18:31:50,325 - stack []
2024-09-04 18:31:50,325 - dispatch pc=214, inst=LOAD_METHOD(arg=4, lineno=1239)
2024-09-04 18:31:50,325 - stack ['$212load_global.0']
2024-09-04 18:31:50,325 - dispatch pc=216, inst=LOAD_FAST(arg=0, lineno=1239)
2024-09-04 18:31:50,325 - stack ['$214load_method.1']
2024-09-04 18:31:50,325 - dispatch pc=218, inst=LOAD_GLOBAL(arg=1, lineno=1239)
2024-09-04 18:31:50,325 - stack ['$214load_method.1', '$x216.2']
2024-09-04 18:31:50,325 - dispatch pc=220, inst=LOAD_CONST(arg=1, lineno=1239)
2024-09-04 18:31:50,325 - stack ['$214load_method.1', '$x216.2', '$218load_global.3']
2024-09-04 18:31:50,341 - dispatch pc=222, inst=LOAD_FAST(arg=8, lineno=1239)
2024-09-04 18:31:50,341 - stack ['$214load_method.1', '$x216.2', '$218load_global.3', '$const220.4']
2024-09-04 18:31:50,341 - dispatch pc=224, inst=LOAD_FAST(arg=3, lineno=1239)
2024-09-04 18:31:50,341 - stack ['$214load_method.1', '$x216.2', '$218load_global.3', '$const220.4', '$n222.5']
2024-09-04 18:31:50,341 - dispatch pc=226, inst=BINARY_SUBTRACT(arg=None, lineno=1239)
2024-09-04 18:31:50,341 - stack ['$214load_method.1', '$x216.2', '$218load_global.3', '$const220.4', '$n222.5', '$pre_avg224.6']
2024-09-04 18:31:50,342 - dispatch pc=228, inst=CALL_FUNCTION(arg=2, lineno=1239)
2024-09-04 18:31:50,342 - stack ['$214load_method.1', '$x216.2', '$218load_global.3', '$const220.4', '$226binary_subtract.7']
2024-09-04 18:31:50,342 - dispatch pc=230, inst=LOAD_GLOBAL(arg=2, lineno=1239)
2024-09-04 18:31:50,342 - stack ['$214load_method.1', '$x216.2', '$228call_function.8']
2024-09-04 18:31:50,342 - dispatch pc=232, inst=LOAD_FAST(arg=8, lineno=1239)
2024-09-04 18:31:50,343 - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9']
2024-09-04 18:31:50,343 - dispatch pc=234, inst=LOAD_FAST(arg=4, lineno=1239)
2024-09-04 18:31:50,343 - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$n232.10']
2024-09-04 18:31:50,343 - dispatch pc=236, inst=BINARY_ADD(arg=None, lineno=1239)
2024-09-04 18:31:50,343 - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$n232.10', '$post_avg234.11']
2024-09-04 18:31:50,344 - dispatch pc=238, inst=LOAD_FAST(arg=0, lineno=1239)
2024-09-04 18:31:50,344 - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12']
2024-09-04 18:31:50,344 - dispatch pc=240, inst=LOAD_ATTR(arg=3, lineno=1239)
2024-09-04 18:31:50,344 - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12', '$x238.13']
2024-09-04 18:31:50,344 - dispatch pc=242, inst=LOAD_CONST(arg=1, lineno=1239)
2024-09-04 18:31:50,345 - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12', '$240load_attr.14']
2024-09-04 18:31:50,345 - dispatch pc=244, inst=BINARY_SUBSCR(arg=None, lineno=1239)
2024-09-04 18:31:50,345 - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12', '$240load_attr.14', '$const242.15']
2024-09-04 18:31:50,345 - dispatch pc=246, inst=CALL_FUNCTION(arg=2, lineno=1239)
2024-09-04 18:31:50,345 - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12', '$244binary_subscr.16']
2024-09-04 18:31:50,346 - dispatch pc=248, inst=BUILD_SLICE(arg=2, lineno=1239)
2024-09-04 18:31:50,346 - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$246call_function.17']
2024-09-04 18:31:50,346 - dispatch pc=250, inst=BINARY_SUBSCR(arg=None, lineno=1239)
2024-09-04 18:31:50,346 - stack ['$214load_method.1', '$x216.2', '$248build_slice.19']
2024-09-04 18:31:50,346 - dispatch pc=252, inst=CALL_METHOD(arg=1, lineno=1239)
2024-09-04 18:31:50,347 - stack ['$214load_method.1', '$250binary_subscr.20']
2024-09-04 18:31:50,347 - dispatch pc=254, inst=STORE_FAST(arg=10, lineno=1239)
2024-09-04 18:31:50,347 - stack ['$252call_method.21']
2024-09-04 18:31:50,347 - dispatch pc=256, inst=LOAD_FAST(arg=7, lineno=1240)
2024-09-04 18:31:50,347 - stack []
2024-09-04 18:31:50,348 - dispatch pc=258, inst=LOAD_FAST(arg=8, lineno=1240)
2024-09-04 18:31:50,348 - stack ['$peaks256.22']
2024-09-04 18:31:50,348 - dispatch pc=260, inst=DUP_TOP_TWO(arg=None, lineno=1240)
2024-09-04 18:31:50,348 - stack ['$peaks256.22', '$n258.23']
2024-09-04 18:31:50,348 - dispatch pc=262, inst=BINARY_SUBSCR(arg=None, lineno=1240)
2024-09-04 18:31:50,349 - stack ['$peaks256.22', '$n258.23', '$260dup_top_two.24', '$260dup_top_two.25']
2024-09-04 18:31:50,349 - dispatch pc=264, inst=LOAD_FAST(arg=0, lineno=1240)
2024-09-04 18:31:50,349 - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26']
2024-09-04 18:31:50,349 - dispatch pc=266, inst=LOAD_FAST(arg=8, lineno=1240)
2024-09-04 18:31:50,349 - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$x264.27']
2024-09-04 18:31:50,349 - dispatch pc=268, inst=BINARY_SUBSCR(arg=None, lineno=1240)
2024-09-04 18:31:50,350 - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$x264.27', '$n266.28']
2024-09-04 18:31:50,350 - dispatch pc=270, inst=LOAD_FAST(arg=10, lineno=1240)
2024-09-04 18:31:50,350 - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$268binary_subscr.29']
2024-09-04 18:31:50,350 - dispatch pc=272, inst=LOAD_FAST(arg=5, lineno=1240)
2024-09-04 18:31:50,350 - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$268binary_subscr.29', '$avgn270.30']
2024-09-04 18:31:50,351 - dispatch pc=274, inst=BINARY_ADD(arg=None, lineno=1240)
2024-09-04 18:31:50,351 - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$268binary_subscr.29', '$avgn270.30', '$delta272.31']
2024-09-04 18:31:50,351 - dispatch pc=276, inst=COMPARE_OP(arg=5, lineno=1240)
2024-09-04 18:31:50,351 - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$268binary_subscr.29', '$274binary_add.32']
2024-09-04 18:31:50,352 - dispatch pc=278, inst=INPLACE_AND(arg=None, lineno=1240)
2024-09-04 18:31:50,352 - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$276compare_op.33']
2024-09-04 18:31:50,352 - dispatch pc=280, inst=ROT_THREE(arg=None, lineno=1240)
2024-09-04 18:31:50,352 - stack ['$peaks256.22', '$n258.23', '$278inplace_and.34']
2024-09-04 18:31:50,352 - dispatch pc=282, inst=STORE_SUBSCR(arg=None, lineno=1240)
2024-09-04 18:31:50,353 - stack ['$278inplace_and.34', '$peaks256.22', '$n258.23']
2024-09-04 18:31:50,353 - dispatch pc=284, inst=LOAD_FAST(arg=7, lineno=1242)
2024-09-04 18:31:50,353 - stack []
2024-09-04 18:31:50,353 - dispatch pc=286, inst=LOAD_FAST(arg=8, lineno=1242)
2024-09-04 18:31:50,354 - stack ['$peaks284.35']
2024-09-04 18:31:50,354 - dispatch pc=288, inst=BINARY_SUBSCR(arg=None, lineno=1242)
2024-09-04 18:31:50,354 - stack ['$peaks284.35', '$n286.36']
2024-09-04 18:31:50,354 - dispatch pc=290, inst=POP_JUMP_IF_TRUE(arg=152, lineno=1242)
2024-09-04 18:31:50,354 - stack ['$288binary_subscr.37']
2024-09-04 18:31:50,354 - end state. edges=[Edge(pc=292, stack=(), blockstack=(), npush=0), Edge(pc=302, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:50,355 - pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0)])
2024-09-04 18:31:50,355 - pending: deque([State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0)])
2024-09-04 18:31:50,355 - stack: []
2024-09-04 18:31:50,355 - state.pc_initial: State(pc_initial=292 nstack_initial=0)
2024-09-04 18:31:50,355 - dispatch pc=292, inst=LOAD_FAST(arg=8, lineno=1243)
2024-09-04 18:31:50,355 - stack []
2024-09-04 18:31:50,356 - dispatch pc=294, inst=LOAD_CONST(arg=3, lineno=1243)
2024-09-04 18:31:50,356 - stack ['$n292.0']
2024-09-04 18:31:50,356 - dispatch pc=296, inst=INPLACE_ADD(arg=None, lineno=1243)
2024-09-04 18:31:50,356 - stack ['$n292.0', '$const294.1']
2024-09-04 18:31:50,356 - dispatch pc=298, inst=STORE_FAST(arg=8, lineno=1243)
2024-09-04 18:31:50,357 - stack ['$296inplace_add.2']
2024-09-04 18:31:50,357 - dispatch pc=300, inst=JUMP_ABSOLUTE(arg=61, lineno=1244)
2024-09-04 18:31:50,357 - stack []
2024-09-04 18:31:50,357 - end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:50,357 - pending: deque([State(pc_initial=302 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
2024-09-04 18:31:50,357 - stack: []
2024-09-04 18:31:50,358 - state.pc_initial: State(pc_initial=302 nstack_initial=0)
2024-09-04 18:31:50,358 - dispatch pc=302, inst=LOAD_FAST(arg=8, lineno=1247)
2024-09-04 18:31:50,358 - stack []
2024-09-04 18:31:50,358 - dispatch pc=304, inst=LOAD_FAST(arg=6, lineno=1247)
2024-09-04 18:31:50,358 - stack ['$n302.0']
2024-09-04 18:31:50,358 - dispatch pc=306, inst=LOAD_CONST(arg=3, lineno=1247)
2024-09-04 18:31:50,358 - stack ['$n302.0', '$wait304.1']
2024-09-04 18:31:50,359 - dispatch pc=308, inst=BINARY_ADD(arg=None, lineno=1247)
2024-09-04 18:31:50,359 - stack ['$n302.0', '$wait304.1', '$const306.2']
2024-09-04 18:31:50,359 - dispatch pc=310, inst=INPLACE_ADD(arg=None, lineno=1247)
2024-09-04 18:31:50,359 - stack ['$n302.0', '$308binary_add.3']
2024-09-04 18:31:50,359 - dispatch pc=312, inst=STORE_FAST(arg=8, lineno=1247)
2024-09-04 18:31:50,359 - stack ['$310inplace_add.4']
2024-09-04 18:31:50,360 - dispatch pc=314, inst=LOAD_FAST(arg=8, lineno=1229)
2024-09-04 18:31:50,360 - stack []
2024-09-04 18:31:50,360 - dispatch pc=316, inst=LOAD_FAST(arg=0, lineno=1229)
2024-09-04 18:31:50,360 - stack ['$n314.5']
2024-09-04 18:31:50,360 - dispatch pc=318, inst=LOAD_ATTR(arg=3, lineno=1229)
2024-09-04 18:31:50,360 - stack ['$n314.5', '$x316.6']
2024-09-04 18:31:50,361 - dispatch pc=320, inst=LOAD_CONST(arg=1, lineno=1229)
2024-09-04 18:31:50,361 - stack ['$n314.5', '$318load_attr.7']
2024-09-04 18:31:50,361 - dispatch pc=322, inst=BINARY_SUBSCR(arg=None, lineno=1229)
2024-09-04 18:31:50,361 - stack ['$n314.5', '$318load_attr.7', '$const320.8']
2024-09-04 18:31:50,361 - dispatch pc=324, inst=COMPARE_OP(arg=0, lineno=1229)
2024-09-04 18:31:50,361 - stack ['$n314.5', '$322binary_subscr.9']
2024-09-04 18:31:50,362 - dispatch pc=326, inst=POP_JUMP_IF_TRUE(arg=68, lineno=1229)
2024-09-04 18:31:50,362 - stack ['$324compare_op.10']
2024-09-04 18:31:50,362 - end state. edges=[Edge(pc=328, stack=(), blockstack=(), npush=0), Edge(pc=134, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:50,362 - pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=328 nstack_initial=0), State(pc_initial=134 nstack_initial=0)])
2024-09-04 18:31:50,362 - pending: deque([State(pc_initial=328 nstack_initial=0), State(pc_initial=134 nstack_initial=0)])
2024-09-04 18:31:50,362 - stack: []
2024-09-04 18:31:50,363 - state.pc_initial: State(pc_initial=328 nstack_initial=0)
2024-09-04 18:31:50,363 - dispatch pc=328, inst=LOAD_CONST(arg=2, lineno=1229)
2024-09-04 18:31:50,363 - stack []
2024-09-04 18:31:50,363 - dispatch pc=330, inst=RETURN_VALUE(arg=None, lineno=1229)
2024-09-04 18:31:50,363 - stack ['$const328.0']
2024-09-04 18:31:50,363 - end state. edges=[]
2024-09-04 18:31:50,363 - pending: deque([State(pc_initial=134 nstack_initial=0)])
2024-09-04 18:31:50,364 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:50,364 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=116 nstack_initial=0): set(),
             State(pc_initial=120 nstack_initial=0): set(),
             State(pc_initial=134 nstack_initial=0): set(),
             State(pc_initial=202 nstack_initial=0): set(),
             State(pc_initial=212 nstack_initial=0): set(),
             State(pc_initial=292 nstack_initial=0): set(),
             State(pc_initial=302 nstack_initial=0): set(),
             State(pc_initial=328 nstack_initial=0): set(),
             State(pc_initial=332 nstack_initial=0): set()})
2024-09-04 18:31:50,365 - defmap: {}
2024-09-04 18:31:50,365 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:50,365 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:50,366 - keep phismap: {}
2024-09-04 18:31:50,366 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:50,366 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:50,366 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$8load_global.3'}), (10, {'item': '$8load_global.3', 'res': '$10load_method.4'}), (12, {'res': '$x12.5'}), (14, {'res': '$const14.6'}), (16, {'res': '$16load_global.7'}), (18, {'res': '$post_max18.8'}), (20, {'res': '$x20.9'}), (22, {'item': '$x20.9', 'res': '$22load_attr.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$22load_attr.10', 'res': '$26binary_subscr.12'}), (28, {'func': '$16load_global.7', 'args': ['$post_max18.8', '$26binary_subscr.12'], 'res': '$28call_function.13'}), (30, {'start': '$const14.6', 'stop': '$28call_function.13', 'step': None, 'res': '$30build_slice.15', 'slicevar': '$30build_slice.14'}), (32, {'index': '$30build_slice.15', 'target': '$x12.5', 'res': '$32binary_subscr.16'}), (34, {'func': '$10load_method.4', 'args': ['$32binary_subscr.16'], 'res': '$34call_method.17'}), (36, {'lhs': '$6binary_subscr.2', 'rhs': '$34call_method.17', 'res': '$36compare_op.18'}), (38, {'res': '$peaks38.19'}), (40, {'res': '$const40.20'}), (42, {'target': '$peaks38.19', 'index': '$const40.20', 'value': '$36compare_op.18'}), (44, {'res': '$peaks44.21'}), (46, {'res': '$const46.22'}), (48, {'orig': ['$peaks44.21', '$const46.22'], 'duped': ['$48dup_top_two.23', '$48dup_top_two.24']}), (50, {'index': '$48dup_top_two.24', 'target': '$48dup_top_two.23', 'res': '$50binary_subscr.25'}), (52, {'res': '$x52.26'}), (54, {'res': '$const54.27'}), (56, {'index': '$const54.27', 'target': '$x52.26', 'res': '$56binary_subscr.28'}), (58, {'res': '$58load_global.29'}), (60, {'item': '$58load_global.29', 'res': '$60load_method.30'}), (62, {'res': '$x62.31'}), (64, {'res': '$const64.32'}), (66, {'res': '$66load_global.33'}), (68, {'res': '$post_avg68.34'}), (70, {'res': '$x70.35'}), (72, {'item': '$x70.35', 'res': '$72load_attr.36'}), (74, {'res': '$const74.37'}), (76, {'index': '$const74.37', 'target': '$72load_attr.36', 'res': '$76binary_subscr.38'}), (78, {'func': '$66load_global.33', 'args': ['$post_avg68.34', '$76binary_subscr.38'], 'res': '$78call_function.39'}), (80, {'start': '$const64.32', 'stop': '$78call_function.39', 'step': None, 'res': '$80build_slice.41', 'slicevar': '$80build_slice.40'}), (82, {'index': '$80build_slice.41', 'target': '$x62.31', 'res': '$82binary_subscr.42'}), (84, {'func': '$60load_method.30', 'args': ['$82binary_subscr.42'], 'res': '$84call_method.43'}), (86, {'res': '$delta86.44'}), (88, {'lhs': '$84call_method.43', 'rhs': '$delta86.44', 'res': '$88binary_add.45'}), (90, {'lhs': '$56binary_subscr.28', 'rhs': '$88binary_add.45', 'res': '$90compare_op.46'}), (92, {'lhs': '$50binary_subscr.25', 'rhs': '$90compare_op.46', 'res': '$92inplace_and.47'}), (96, {'target': '$peaks44.21', 'index': '$const46.22', 'value': '$92inplace_and.47'}), (98, {'res': '$peaks98.48'}), (100, {'res': '$const100.49'}), (102, {'index': '$const100.49', 'target': '$peaks98.48', 'res': '$102binary_subscr.50'}), (104, {'pred': '$102binary_subscr.50'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: (), 116: ()})
2024-09-04 18:31:50,367 - block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$wait106.0'}), (108, {'res': '$const108.1'}), (110, {'lhs': '$wait106.0', 'rhs': '$const108.1', 'res': '$110binary_add.2'}), (112, {'value': '$110binary_add.2'}), (114, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ()})
2024-09-04 18:31:50,367 - block_infos State(pc_initial=116 nstack_initial=0):
AdaptBlockInfo(insts=((116, {'res': '$const116.0'}), (118, {'value': '$const116.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ()})
2024-09-04 18:31:50,367 - block_infos State(pc_initial=120 nstack_initial=0):
AdaptBlockInfo(insts=((120, {'res': '$n120.0'}), (122, {'res': '$x122.1'}), (124, {'item': '$x122.1', 'res': '$124load_attr.2'}), (126, {'res': '$const126.3'}), (128, {'index': '$const126.3', 'target': '$124load_attr.2', 'res': '$128binary_subscr.4'}), (130, {'lhs': '$n120.0', 'rhs': '$128binary_subscr.4', 'res': '$130compare_op.5'}), (132, {'pred': '$130compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={134: (), 332: ()})
2024-09-04 18:31:50,367 - block_infos State(pc_initial=134 nstack_initial=0):
AdaptBlockInfo(insts=((134, {'res': '$134load_global.0'}), (136, {'item': '$134load_global.0', 'res': '$136load_method.1'}), (138, {'res': '$x138.2'}), (140, {'res': '$140load_global.3'}), (142, {'res': '$const142.4'}), (144, {'res': '$n144.5'}), (146, {'res': '$pre_max146.6'}), (148, {'lhs': '$n144.5', 'rhs': '$pre_max146.6', 'res': '$148binary_subtract.7'}), (150, {'func': '$140load_global.3', 'args': ['$const142.4', '$148binary_subtract.7'], 'res': '$150call_function.8'}), (152, {'res': '$152load_global.9'}), (154, {'res': '$n154.10'}), (156, {'res': '$post_max156.11'}), (158, {'lhs': '$n154.10', 'rhs': '$post_max156.11', 'res': '$158binary_add.12'}), (160, {'res': '$x160.13'}), (162, {'item': '$x160.13', 'res': '$162load_attr.14'}), (164, {'res': '$const164.15'}), (166, {'index': '$const164.15', 'target': '$162load_attr.14', 'res': '$166binary_subscr.16'}), (168, {'func': '$152load_global.9', 'args': ['$158binary_add.12', '$166binary_subscr.16'], 'res': '$168call_function.17'}), (170, {'start': '$150call_function.8', 'stop': '$168call_function.17', 'step': None, 'res': '$170build_slice.19', 'slicevar': '$170build_slice.18'}), (172, {'index': '$170build_slice.19', 'target': '$x138.2', 'res': '$172binary_subscr.20'}), (174, {'func': '$136load_method.1', 'args': ['$172binary_subscr.20'], 'res': '$174call_method.21'}), (176, {'value': '$174call_method.21'}), (178, {'res': '$x178.22'}), (180, {'res': '$n180.23'}), (182, {'index': '$n180.23', 'target': '$x178.22', 'res': '$182binary_subscr.24'}), (184, {'res': '$maxn184.25'}), (186, {'lhs': '$182binary_subscr.24', 'rhs': '$maxn184.25', 'res': '$186compare_op.26'}), (188, {'res': '$peaks188.27'}), (190, {'res': '$n190.28'}), (192, {'target': '$peaks188.27', 'index': '$n190.28', 'value': '$186compare_op.26'}), (194, {'res': '$peaks194.29'}), (196, {'res': '$n196.30'}), (198, {'index': '$n196.30', 'target': '$peaks194.29', 'res': '$198binary_subscr.31'}), (200, {'pred': '$198binary_subscr.31'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={202: (), 212: ()})
2024-09-04 18:31:50,368 - block_infos State(pc_initial=202 nstack_initial=0):
AdaptBlockInfo(insts=((202, {'res': '$n202.0'}), (204, {'res': '$const204.1'}), (206, {'lhs': '$n202.0', 'rhs': '$const204.1', 'res': '$206inplace_add.2'}), (208, {'value': '$206inplace_add.2'}), (210, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ()})
2024-09-04 18:31:50,368 - block_infos State(pc_initial=212 nstack_initial=0):
AdaptBlockInfo(insts=((212, {'res': '$212load_global.0'}), (214, {'item': '$212load_global.0', 'res': '$214load_method.1'}), (216, {'res': '$x216.2'}), (218, {'res': '$218load_global.3'}), (220, {'res': '$const220.4'}), (222, {'res': '$n222.5'}), (224, {'res': '$pre_avg224.6'}), (226, {'lhs': '$n222.5', 'rhs': '$pre_avg224.6', 'res': '$226binary_subtract.7'}), (228, {'func': '$218load_global.3', 'args': ['$const220.4', '$226binary_subtract.7'], 'res': '$228call_function.8'}), (230, {'res': '$230load_global.9'}), (232, {'res': '$n232.10'}), (234, {'res': '$post_avg234.11'}), (236, {'lhs': '$n232.10', 'rhs': '$post_avg234.11', 'res': '$236binary_add.12'}), (238, {'res': '$x238.13'}), (240, {'item': '$x238.13', 'res': '$240load_attr.14'}), (242, {'res': '$const242.15'}), (244, {'index': '$const242.15', 'target': '$240load_attr.14', 'res': '$244binary_subscr.16'}), (246, {'func': '$230load_global.9', 'args': ['$236binary_add.12', '$244binary_subscr.16'], 'res': '$246call_function.17'}), (248, {'start': '$228call_function.8', 'stop': '$246call_function.17', 'step': None, 'res': '$248build_slice.19', 'slicevar': '$248build_slice.18'}), (250, {'index': '$248build_slice.19', 'target': '$x216.2', 'res': '$250binary_subscr.20'}), (252, {'func': '$214load_method.1', 'args': ['$250binary_subscr.20'], 'res': '$252call_method.21'}), (254, {'value': '$252call_method.21'}), (256, {'res': '$peaks256.22'}), (258, {'res': '$n258.23'}), (260, {'orig': ['$peaks256.22', '$n258.23'], 'duped': ['$260dup_top_two.24', '$260dup_top_two.25']}), (262, {'index': '$260dup_top_two.25', 'target': '$260dup_top_two.24', 'res': '$262binary_subscr.26'}), (264, {'res': '$x264.27'}), (266, {'res': '$n266.28'}), (268, {'index': '$n266.28', 'target': '$x264.27', 'res': '$268binary_subscr.29'}), (270, {'res': '$avgn270.30'}), (272, {'res': '$delta272.31'}), (274, {'lhs': '$avgn270.30', 'rhs': '$delta272.31', 'res': '$274binary_add.32'}), (276, {'lhs': '$268binary_subscr.29', 'rhs': '$274binary_add.32', 'res': '$276compare_op.33'}), (278, {'lhs': '$262binary_subscr.26', 'rhs': '$276compare_op.33', 'res': '$278inplace_and.34'}), (282, {'target': '$peaks256.22', 'index': '$n258.23', 'value': '$278inplace_and.34'}), (284, {'res': '$peaks284.35'}), (286, {'res': '$n286.36'}), (288, {'index': '$n286.36', 'target': '$peaks284.35', 'res': '$288binary_subscr.37'}), (290, {'pred': '$288binary_subscr.37'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={292: (), 302: ()})
2024-09-04 18:31:50,368 - block_infos State(pc_initial=292 nstack_initial=0):
AdaptBlockInfo(insts=((292, {'res': '$n292.0'}), (294, {'res': '$const294.1'}), (296, {'lhs': '$n292.0', 'rhs': '$const294.1', 'res': '$296inplace_add.2'}), (298, {'value': '$296inplace_add.2'}), (300, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ()})
2024-09-04 18:31:50,369 - block_infos State(pc_initial=302 nstack_initial=0):
AdaptBlockInfo(insts=((302, {'res': '$n302.0'}), (304, {'res': '$wait304.1'}), (306, {'res': '$const306.2'}), (308, {'lhs': '$wait304.1', 'rhs': '$const306.2', 'res': '$308binary_add.3'}), (310, {'lhs': '$n302.0', 'rhs': '$308binary_add.3', 'res': '$310inplace_add.4'}), (312, {'value': '$310inplace_add.4'}), (314, {'res': '$n314.5'}), (316, {'res': '$x316.6'}), (318, {'item': '$x316.6', 'res': '$318load_attr.7'}), (320, {'res': '$const320.8'}), (322, {'index': '$const320.8', 'target': '$318load_attr.7', 'res': '$322binary_subscr.9'}), (324, {'lhs': '$n314.5', 'rhs': '$322binary_subscr.9', 'res': '$324compare_op.10'}), (326, {'pred': '$324compare_op.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={328: (), 134: ()})
2024-09-04 18:31:50,369 - block_infos State(pc_initial=328 nstack_initial=0):
AdaptBlockInfo(insts=((328, {'res': '$const328.0'}), (330, {'retval': '$const328.0', 'castval': '$330return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:50,369 - block_infos State(pc_initial=332 nstack_initial=0):
AdaptBlockInfo(insts=((332, {'res': '$const332.0'}), (334, {'retval': '$const332.0', 'castval': '$334return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:50,378 - label 0:
    x = arg(0, name=x)                       ['x']
    pre_max = arg(1, name=pre_max)           ['pre_max']
    post_max = arg(2, name=post_max)         ['post_max']
    pre_avg = arg(3, name=pre_avg)           ['pre_avg']
    post_avg = arg(4, name=post_avg)         ['post_avg']
    delta = arg(5, name=delta)               ['delta']
    wait = arg(6, name=wait)                 ['wait']
    peaks = arg(7, name=peaks)               ['peaks']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $8load_global.3 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$8load_global.3']
    $10load_method.4 = getattr(value=$8load_global.3, attr=max) ['$10load_method.4', '$8load_global.3']
    $const14.6 = const(NoneType, None)       ['$const14.6']
    $16load_global.7 = global(min: <built-in function min>) ['$16load_global.7']
    $22load_attr.10 = getattr(value=x, attr=shape) ['$22load_attr.10', 'x']
    $const24.11 = const(int, 0)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=$22load_attr.10, index=$const24.11, fn=<built-in function getitem>) ['$22load_attr.10', '$26binary_subscr.12', '$const24.11']
    $28call_function.13 = call $16load_global.7(post_max, $26binary_subscr.12, func=$16load_global.7, args=[Var(post_max, utils.py:1209), Var($26binary_subscr.12, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None) ['$16load_global.7', '$26binary_subscr.12', '$28call_function.13', 'post_max']
    $30build_slice.14 = global(slice: <class 'slice'>) ['$30build_slice.14']
    $30build_slice.15 = call $30build_slice.14($const14.6, $28call_function.13, func=$30build_slice.14, args=(Var($const14.6, utils.py:1221), Var($28call_function.13, utils.py:1221)), kws=(), vararg=None, varkwarg=None, target=None) ['$28call_function.13', '$30build_slice.14', '$30build_slice.15', '$const14.6']
    $32binary_subscr.16 = getitem(value=x, index=$30build_slice.15, fn=<built-in function getitem>) ['$30build_slice.15', '$32binary_subscr.16', 'x']
    $34call_method.17 = call $10load_method.4($32binary_subscr.16, func=$10load_method.4, args=[Var($32binary_subscr.16, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_method.4', '$32binary_subscr.16', '$34call_method.17']
    $36compare_op.18 = $6binary_subscr.2 >= $34call_method.17 ['$34call_method.17', '$36compare_op.18', '$6binary_subscr.2']
    $const40.20 = const(int, 0)              ['$const40.20']
    peaks[$const40.20] = $36compare_op.18    ['$36compare_op.18', '$const40.20', 'peaks']
    $const46.22 = const(int, 0)              ['$const46.22']
    $50binary_subscr.25 = getitem(value=peaks, index=$const46.22, fn=<built-in function getitem>) ['$50binary_subscr.25', '$const46.22', 'peaks']
    $const54.27 = const(int, 0)              ['$const54.27']
    $56binary_subscr.28 = getitem(value=x, index=$const54.27, fn=<built-in function getitem>) ['$56binary_subscr.28', '$const54.27', 'x']
    $58load_global.29 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$58load_global.29']
    $60load_method.30 = getattr(value=$58load_global.29, attr=mean) ['$58load_global.29', '$60load_method.30']
    $const64.32 = const(NoneType, None)      ['$const64.32']
    $66load_global.33 = global(min: <built-in function min>) ['$66load_global.33']
    $72load_attr.36 = getattr(value=x, attr=shape) ['$72load_attr.36', 'x']
    $const74.37 = const(int, 0)              ['$const74.37']
    $76binary_subscr.38 = getitem(value=$72load_attr.36, index=$const74.37, fn=<built-in function getitem>) ['$72load_attr.36', '$76binary_subscr.38', '$const74.37']
    $78call_function.39 = call $66load_global.33(post_avg, $76binary_subscr.38, func=$66load_global.33, args=[Var(post_avg, utils.py:1209), Var($76binary_subscr.38, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.33', '$76binary_subscr.38', '$78call_function.39', 'post_avg']
    $80build_slice.40 = global(slice: <class 'slice'>) ['$80build_slice.40']
    $80build_slice.41 = call $80build_slice.40($const64.32, $78call_function.39, func=$80build_slice.40, args=(Var($const64.32, utils.py:1222), Var($78call_function.39, utils.py:1222)), kws=(), vararg=None, varkwarg=None, target=None) ['$78call_function.39', '$80build_slice.40', '$80build_slice.41', '$const64.32']
    $82binary_subscr.42 = getitem(value=x, index=$80build_slice.41, fn=<built-in function getitem>) ['$80build_slice.41', '$82binary_subscr.42', 'x']
    $84call_method.43 = call $60load_method.30($82binary_subscr.42, func=$60load_method.30, args=[Var($82binary_subscr.42, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None) ['$60load_method.30', '$82binary_subscr.42', '$84call_method.43']
    $88binary_add.45 = $84call_method.43 + delta ['$84call_method.43', '$88binary_add.45', 'delta']
    $90compare_op.46 = $56binary_subscr.28 >= $88binary_add.45 ['$56binary_subscr.28', '$88binary_add.45', '$90compare_op.46']
    $92inplace_and.47 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$50binary_subscr.25, rhs=$90compare_op.46, static_lhs=Undefined, static_rhs=Undefined) ['$50binary_subscr.25', '$90compare_op.46', '$92inplace_and.47']
    peaks[$const46.22] = $92inplace_and.47   ['$92inplace_and.47', '$const46.22', 'peaks']
    $const100.49 = const(int, 0)             ['$const100.49']
    $102binary_subscr.50 = getitem(value=peaks, index=$const100.49, fn=<built-in function getitem>) ['$102binary_subscr.50', '$const100.49', 'peaks']
    bool104 = global(bool: <class 'bool'>)   ['bool104']
    $104pred = call bool104($102binary_subscr.50, func=bool104, args=(Var($102binary_subscr.50, utils.py:1224),), kws=(), vararg=None, varkwarg=None, target=None) ['$102binary_subscr.50', '$104pred', 'bool104']
    branch $104pred, 106, 116                ['$104pred']
label 106:
    $const108.1 = const(int, 1)              ['$const108.1']
    n = wait + $const108.1                   ['$const108.1', 'n', 'wait']
    jump 120                                 []
label 116:
    n = const(int, 1)                        ['n']
    jump 120                                 []
label 120:
    $124load_attr.2 = getattr(value=x, attr=shape) ['$124load_attr.2', 'x']
    $const126.3 = const(int, 0)              ['$const126.3']
    $128binary_subscr.4 = getitem(value=$124load_attr.2, index=$const126.3, fn=<built-in function getitem>) ['$124load_attr.2', '$128binary_subscr.4', '$const126.3']
    $130compare_op.5 = n < $128binary_subscr.4 ['$128binary_subscr.4', '$130compare_op.5', 'n']
    bool132 = global(bool: <class 'bool'>)   ['bool132']
    $132pred = call bool132($130compare_op.5, func=bool132, args=(Var($130compare_op.5, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None) ['$130compare_op.5', '$132pred', 'bool132']
    branch $132pred, 134, 332                ['$132pred']
label 134:
    $134load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$134load_global.0']
    $136load_method.1 = getattr(value=$134load_global.0, attr=max) ['$134load_global.0', '$136load_method.1']
    $140load_global.3 = global(max: <built-in function max>) ['$140load_global.3']
    $const142.4 = const(int, 0)              ['$const142.4']
    $148binary_subtract.7 = n - pre_max      ['$148binary_subtract.7', 'n', 'pre_max']
    $150call_function.8 = call $140load_global.3($const142.4, $148binary_subtract.7, func=$140load_global.3, args=[Var($const142.4, utils.py:1230), Var($148binary_subtract.7, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None) ['$140load_global.3', '$148binary_subtract.7', '$150call_function.8', '$const142.4']
    $152load_global.9 = global(min: <built-in function min>) ['$152load_global.9']
    $158binary_add.12 = n + post_max         ['$158binary_add.12', 'n', 'post_max']
    $162load_attr.14 = getattr(value=x, attr=shape) ['$162load_attr.14', 'x']
    $const164.15 = const(int, 0)             ['$const164.15']
    $166binary_subscr.16 = getitem(value=$162load_attr.14, index=$const164.15, fn=<built-in function getitem>) ['$162load_attr.14', '$166binary_subscr.16', '$const164.15']
    $168call_function.17 = call $152load_global.9($158binary_add.12, $166binary_subscr.16, func=$152load_global.9, args=[Var($158binary_add.12, utils.py:1230), Var($166binary_subscr.16, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None) ['$152load_global.9', '$158binary_add.12', '$166binary_subscr.16', '$168call_function.17']
    $170build_slice.18 = global(slice: <class 'slice'>) ['$170build_slice.18']
    $170build_slice.19 = call $170build_slice.18($150call_function.8, $168call_function.17, func=$170build_slice.18, args=(Var($150call_function.8, utils.py:1230), Var($168call_function.17, utils.py:1230)), kws=(), vararg=None, varkwarg=None, target=None) ['$150call_function.8', '$168call_function.17', '$170build_slice.18', '$170build_slice.19']
    $172binary_subscr.20 = getitem(value=x, index=$170build_slice.19, fn=<built-in function getitem>) ['$170build_slice.19', '$172binary_subscr.20', 'x']
    maxn = call $136load_method.1($172binary_subscr.20, func=$136load_method.1, args=[Var($172binary_subscr.20, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None) ['$136load_method.1', '$172binary_subscr.20', 'maxn']
    $182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>) ['$182binary_subscr.24', 'n', 'x']
    $186compare_op.26 = $182binary_subscr.24 == maxn ['$182binary_subscr.24', '$186compare_op.26', 'maxn']
    peaks[n] = $186compare_op.26             ['$186compare_op.26', 'n', 'peaks']
    $198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>) ['$198binary_subscr.31', 'n', 'peaks']
    bool200 = global(bool: <class 'bool'>)   ['bool200']
    $200pred = call bool200($198binary_subscr.31, func=bool200, args=(Var($198binary_subscr.31, utils.py:1235),), kws=(), vararg=None, varkwarg=None, target=None) ['$198binary_subscr.31', '$200pred', 'bool200']
    branch $200pred, 212, 202                ['$200pred']
label 202:
    $const204.1 = const(int, 1)              ['$const204.1']
    $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined) ['$206inplace_add.2', '$const204.1', 'n']
    n = $206inplace_add.2                    ['$206inplace_add.2', 'n']
    jump 120                                 []
label 212:
    $212load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$212load_global.0']
    $214load_method.1 = getattr(value=$212load_global.0, attr=mean) ['$212load_global.0', '$214load_method.1']
    $218load_global.3 = global(max: <built-in function max>) ['$218load_global.3']
    $const220.4 = const(int, 0)              ['$const220.4']
    $226binary_subtract.7 = n - pre_avg      ['$226binary_subtract.7', 'n', 'pre_avg']
    $228call_function.8 = call $218load_global.3($const220.4, $226binary_subtract.7, func=$218load_global.3, args=[Var($const220.4, utils.py:1239), Var($226binary_subtract.7, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None) ['$218load_global.3', '$226binary_subtract.7', '$228call_function.8', '$const220.4']
    $230load_global.9 = global(min: <built-in function min>) ['$230load_global.9']
    $236binary_add.12 = n + post_avg         ['$236binary_add.12', 'n', 'post_avg']
    $240load_attr.14 = getattr(value=x, attr=shape) ['$240load_attr.14', 'x']
    $const242.15 = const(int, 0)             ['$const242.15']
    $244binary_subscr.16 = getitem(value=$240load_attr.14, index=$const242.15, fn=<built-in function getitem>) ['$240load_attr.14', '$244binary_subscr.16', '$const242.15']
    $246call_function.17 = call $230load_global.9($236binary_add.12, $244binary_subscr.16, func=$230load_global.9, args=[Var($236binary_add.12, utils.py:1239), Var($244binary_subscr.16, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None) ['$230load_global.9', '$236binary_add.12', '$244binary_subscr.16', '$246call_function.17']
    $248build_slice.18 = global(slice: <class 'slice'>) ['$248build_slice.18']
    $248build_slice.19 = call $248build_slice.18($228call_function.8, $246call_function.17, func=$248build_slice.18, args=(Var($228call_function.8, utils.py:1239), Var($246call_function.17, utils.py:1239)), kws=(), vararg=None, varkwarg=None, target=None) ['$228call_function.8', '$246call_function.17', '$248build_slice.18', '$248build_slice.19']
    $250binary_subscr.20 = getitem(value=x, index=$248build_slice.19, fn=<built-in function getitem>) ['$248build_slice.19', '$250binary_subscr.20', 'x']
    avgn = call $214load_method.1($250binary_subscr.20, func=$214load_method.1, args=[Var($250binary_subscr.20, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None) ['$214load_method.1', '$250binary_subscr.20', 'avgn']
    $262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>) ['$262binary_subscr.26', 'n', 'peaks']
    $268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>) ['$268binary_subscr.29', 'n', 'x']
    $274binary_add.32 = avgn + delta         ['$274binary_add.32', 'avgn', 'delta']
    $276compare_op.33 = $268binary_subscr.29 >= $274binary_add.32 ['$268binary_subscr.29', '$274binary_add.32', '$276compare_op.33']
    $278inplace_and.34 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$262binary_subscr.26, rhs=$276compare_op.33, static_lhs=Undefined, static_rhs=Undefined) ['$262binary_subscr.26', '$276compare_op.33', '$278inplace_and.34']
    peaks[n] = $278inplace_and.34            ['$278inplace_and.34', 'n', 'peaks']
    $288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>) ['$288binary_subscr.37', 'n', 'peaks']
    bool290 = global(bool: <class 'bool'>)   ['bool290']
    $290pred = call bool290($288binary_subscr.37, func=bool290, args=(Var($288binary_subscr.37, utils.py:1242),), kws=(), vararg=None, varkwarg=None, target=None) ['$288binary_subscr.37', '$290pred', 'bool290']
    branch $290pred, 302, 292                ['$290pred']
label 292:
    $const294.1 = const(int, 1)              ['$const294.1']
    $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined) ['$296inplace_add.2', '$const294.1', 'n']
    n = $296inplace_add.2                    ['$296inplace_add.2', 'n']
    jump 120                                 []
label 302:
    $const306.2 = const(int, 1)              ['$const306.2']
    $308binary_add.3 = wait + $const306.2    ['$308binary_add.3', '$const306.2', 'wait']
    $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined) ['$308binary_add.3', '$310inplace_add.4', 'n']
    n = $310inplace_add.4                    ['$310inplace_add.4', 'n']
    $318load_attr.7 = getattr(value=x, attr=shape) ['$318load_attr.7', 'x']
    $const320.8 = const(int, 0)              ['$const320.8']
    $322binary_subscr.9 = getitem(value=$318load_attr.7, index=$const320.8, fn=<built-in function getitem>) ['$318load_attr.7', '$322binary_subscr.9', '$const320.8']
    $324compare_op.10 = n < $322binary_subscr.9 ['$322binary_subscr.9', '$324compare_op.10', 'n']
    bool326 = global(bool: <class 'bool'>)   ['bool326']
    $326pred = call bool326($324compare_op.10, func=bool326, args=(Var($324compare_op.10, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None) ['$324compare_op.10', '$326pred', 'bool326']
    branch $326pred, 134, 328                ['$326pred']
label 328:
    $const328.0 = const(NoneType, None)      ['$const328.0']
    $330return_value.1 = cast(value=$const328.0) ['$330return_value.1', '$const328.0']
    return $330return_value.1                ['$330return_value.1']
label 332:
    $const332.0 = const(NoneType, None)      ['$const332.0']
    $334return_value.1 = cast(value=$const332.0) ['$334return_value.1', '$const332.0']
    return $334return_value.1                ['$334return_value.1']

2024-09-04 18:31:50,418 - ==== SSA block analysis pass on 0
2024-09-04 18:31:50,418 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243131F6B30>
2024-09-04 18:31:50,418 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:50,419 - on stmt: pre_max = arg(1, name=pre_max)
2024-09-04 18:31:50,419 - on stmt: post_max = arg(2, name=post_max)
2024-09-04 18:31:50,419 - on stmt: pre_avg = arg(3, name=pre_avg)
2024-09-04 18:31:50,419 - on stmt: post_avg = arg(4, name=post_avg)
2024-09-04 18:31:50,420 - on stmt: delta = arg(5, name=delta)
2024-09-04 18:31:50,420 - on stmt: wait = arg(6, name=wait)
2024-09-04 18:31:50,420 - on stmt: peaks = arg(7, name=peaks)
2024-09-04 18:31:50,420 - on stmt: $const4.1 = const(int, 0)
2024-09-04 18:31:50,420 - on stmt: $6binary_subscr.2 = static_getitem(value=x, index=0, index_var=$const4.1, fn=<built-in function getitem>)
2024-09-04 18:31:50,421 - on stmt: $8load_global.3 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:50,421 - on stmt: $10load_method.4 = getattr(value=$8load_global.3, attr=max)
2024-09-04 18:31:50,421 - on stmt: $const14.6 = const(NoneType, None)
2024-09-04 18:31:50,422 - on stmt: $16load_global.7 = global(min: <built-in function min>)
2024-09-04 18:31:50,423 - on stmt: $22load_attr.10 = getattr(value=x, attr=shape)
2024-09-04 18:31:50,423 - on stmt: $const24.11 = const(int, 0)
2024-09-04 18:31:50,423 - on stmt: $26binary_subscr.12 = static_getitem(value=$22load_attr.10, index=0, index_var=$const24.11, fn=<built-in function getitem>)
2024-09-04 18:31:50,423 - on stmt: $28call_function.13 = call $16load_global.7(post_max, $26binary_subscr.12, func=$16load_global.7, args=[Var(post_max, utils.py:1209), Var($26binary_subscr.12, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,423 - on stmt: $30build_slice.14 = global(slice: <class 'slice'>)
2024-09-04 18:31:50,424 - on stmt: $30build_slice.15 = call $30build_slice.14($const14.6, $28call_function.13, func=$30build_slice.14, args=(Var($const14.6, utils.py:1221), Var($28call_function.13, utils.py:1221)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,424 - on stmt: $32binary_subscr.16 = getitem(value=x, index=$30build_slice.15, fn=<built-in function getitem>)
2024-09-04 18:31:50,424 - on stmt: $34call_method.17 = call $10load_method.4($32binary_subscr.16, func=$10load_method.4, args=[Var($32binary_subscr.16, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,424 - on stmt: $36compare_op.18 = $6binary_subscr.2 >= $34call_method.17
2024-09-04 18:31:50,425 - on stmt: $const40.20 = const(int, 0)
2024-09-04 18:31:50,425 - on stmt: peaks[0] = $36compare_op.18
2024-09-04 18:31:50,425 - on stmt: $const46.22 = const(int, 0)
2024-09-04 18:31:50,425 - on stmt: $50binary_subscr.25 = static_getitem(value=peaks, index=0, index_var=$const46.22, fn=<built-in function getitem>)
2024-09-04 18:31:50,425 - on stmt: $const54.27 = const(int, 0)
2024-09-04 18:31:50,425 - on stmt: $56binary_subscr.28 = static_getitem(value=x, index=0, index_var=$const54.27, fn=<built-in function getitem>)
2024-09-04 18:31:50,426 - on stmt: $58load_global.29 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:50,426 - on stmt: $60load_method.30 = getattr(value=$58load_global.29, attr=mean)
2024-09-04 18:31:50,426 - on stmt: $const64.32 = const(NoneType, None)
2024-09-04 18:31:50,426 - on stmt: $66load_global.33 = global(min: <built-in function min>)
2024-09-04 18:31:50,426 - on stmt: $72load_attr.36 = getattr(value=x, attr=shape)
2024-09-04 18:31:50,427 - on stmt: $const74.37 = const(int, 0)
2024-09-04 18:31:50,427 - on stmt: $76binary_subscr.38 = static_getitem(value=$72load_attr.36, index=0, index_var=$const74.37, fn=<built-in function getitem>)
2024-09-04 18:31:50,427 - on stmt: $78call_function.39 = call $66load_global.33(post_avg, $76binary_subscr.38, func=$66load_global.33, args=[Var(post_avg, utils.py:1209), Var($76binary_subscr.38, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,427 - on stmt: $80build_slice.40 = global(slice: <class 'slice'>)
2024-09-04 18:31:50,427 - on stmt: $80build_slice.41 = call $80build_slice.40($const64.32, $78call_function.39, func=$80build_slice.40, args=(Var($const64.32, utils.py:1222), Var($78call_function.39, utils.py:1222)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,428 - on stmt: $82binary_subscr.42 = getitem(value=x, index=$80build_slice.41, fn=<built-in function getitem>)
2024-09-04 18:31:50,428 - on stmt: $84call_method.43 = call $60load_method.30($82binary_subscr.42, func=$60load_method.30, args=[Var($82binary_subscr.42, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,428 - on stmt: $88binary_add.45 = $84call_method.43 + delta
2024-09-04 18:31:50,428 - on stmt: $90compare_op.46 = $56binary_subscr.28 >= $88binary_add.45
2024-09-04 18:31:50,429 - on stmt: $92inplace_and.47 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$50binary_subscr.25, rhs=$90compare_op.46, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:50,429 - on stmt: peaks[0] = $92inplace_and.47
2024-09-04 18:31:50,429 - on stmt: $const100.49 = const(int, 0)
2024-09-04 18:31:50,429 - on stmt: $102binary_subscr.50 = static_getitem(value=peaks, index=0, index_var=$const100.49, fn=<built-in function getitem>)
2024-09-04 18:31:50,429 - on stmt: bool104 = global(bool: <class 'bool'>)
2024-09-04 18:31:50,430 - on stmt: $104pred = call bool104($102binary_subscr.50, func=bool104, args=(Var($102binary_subscr.50, utils.py:1224),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,430 - on stmt: branch $104pred, 106, 116
2024-09-04 18:31:50,430 - ==== SSA block analysis pass on 106
2024-09-04 18:31:50,430 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243131F6B30>
2024-09-04 18:31:50,430 - on stmt: $const108.1 = const(int, 1)
2024-09-04 18:31:50,430 - on stmt: n = wait + $const108.1
2024-09-04 18:31:50,431 - on stmt: jump 120
2024-09-04 18:31:50,431 - ==== SSA block analysis pass on 116
2024-09-04 18:31:50,431 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243131F6B30>
2024-09-04 18:31:50,431 - on stmt: n = const(int, 1)
2024-09-04 18:31:50,431 - on stmt: jump 120
2024-09-04 18:31:50,431 - ==== SSA block analysis pass on 120
2024-09-04 18:31:50,432 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243131F6B30>
2024-09-04 18:31:50,432 - on stmt: $124load_attr.2 = getattr(value=x, attr=shape)
2024-09-04 18:31:50,432 - on stmt: $const126.3 = const(int, 0)
2024-09-04 18:31:50,432 - on stmt: $128binary_subscr.4 = static_getitem(value=$124load_attr.2, index=0, index_var=$const126.3, fn=<built-in function getitem>)
2024-09-04 18:31:50,432 - on stmt: $130compare_op.5 = n < $128binary_subscr.4
2024-09-04 18:31:50,433 - on stmt: bool132 = global(bool: <class 'bool'>)
2024-09-04 18:31:50,433 - on stmt: $132pred = call bool132($130compare_op.5, func=bool132, args=(Var($130compare_op.5, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,433 - on stmt: branch $132pred, 134, 332
2024-09-04 18:31:50,433 - ==== SSA block analysis pass on 134
2024-09-04 18:31:50,433 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243131F6B30>
2024-09-04 18:31:50,433 - on stmt: $134load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:50,434 - on stmt: $136load_method.1 = getattr(value=$134load_global.0, attr=max)
2024-09-04 18:31:50,434 - on stmt: $140load_global.3 = global(max: <built-in function max>)
2024-09-04 18:31:50,434 - on stmt: $const142.4 = const(int, 0)
2024-09-04 18:31:50,434 - on stmt: $148binary_subtract.7 = n - pre_max
2024-09-04 18:31:50,435 - on stmt: $150call_function.8 = call $140load_global.3($const142.4, $148binary_subtract.7, func=$140load_global.3, args=[Var($const142.4, utils.py:1230), Var($148binary_subtract.7, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,435 - on stmt: $152load_global.9 = global(min: <built-in function min>)
2024-09-04 18:31:50,435 - on stmt: $158binary_add.12 = n + post_max
2024-09-04 18:31:50,436 - on stmt: $162load_attr.14 = getattr(value=x, attr=shape)
2024-09-04 18:31:50,436 - on stmt: $const164.15 = const(int, 0)
2024-09-04 18:31:50,436 - on stmt: $166binary_subscr.16 = static_getitem(value=$162load_attr.14, index=0, index_var=$const164.15, fn=<built-in function getitem>)
2024-09-04 18:31:50,436 - on stmt: $168call_function.17 = call $152load_global.9($158binary_add.12, $166binary_subscr.16, func=$152load_global.9, args=[Var($158binary_add.12, utils.py:1230), Var($166binary_subscr.16, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,437 - on stmt: $170build_slice.18 = global(slice: <class 'slice'>)
2024-09-04 18:31:50,437 - on stmt: $170build_slice.19 = call $170build_slice.18($150call_function.8, $168call_function.17, func=$170build_slice.18, args=(Var($150call_function.8, utils.py:1230), Var($168call_function.17, utils.py:1230)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,437 - on stmt: $172binary_subscr.20 = getitem(value=x, index=$170build_slice.19, fn=<built-in function getitem>)
2024-09-04 18:31:50,437 - on stmt: maxn = call $136load_method.1($172binary_subscr.20, func=$136load_method.1, args=[Var($172binary_subscr.20, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,437 - on stmt: $182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:50,438 - on stmt: $186compare_op.26 = $182binary_subscr.24 == maxn
2024-09-04 18:31:50,438 - on stmt: peaks[n] = $186compare_op.26
2024-09-04 18:31:50,438 - on stmt: $198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:50,438 - on stmt: bool200 = global(bool: <class 'bool'>)
2024-09-04 18:31:50,438 - on stmt: $200pred = call bool200($198binary_subscr.31, func=bool200, args=(Var($198binary_subscr.31, utils.py:1235),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,439 - on stmt: branch $200pred, 212, 202
2024-09-04 18:31:50,439 - ==== SSA block analysis pass on 202
2024-09-04 18:31:50,439 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243131F6B30>
2024-09-04 18:31:50,439 - on stmt: $const204.1 = const(int, 1)
2024-09-04 18:31:50,439 - on stmt: $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:50,439 - on stmt: n = $206inplace_add.2
2024-09-04 18:31:50,440 - on stmt: jump 333
2024-09-04 18:31:50,440 - ==== SSA block analysis pass on 212
2024-09-04 18:31:50,440 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243131F6B30>
2024-09-04 18:31:50,440 - on stmt: $212load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:50,440 - on stmt: $214load_method.1 = getattr(value=$212load_global.0, attr=mean)
2024-09-04 18:31:50,440 - on stmt: $218load_global.3 = global(max: <built-in function max>)
2024-09-04 18:31:50,441 - on stmt: $const220.4 = const(int, 0)
2024-09-04 18:31:50,441 - on stmt: $226binary_subtract.7 = n - pre_avg
2024-09-04 18:31:50,441 - on stmt: $228call_function.8 = call $218load_global.3($const220.4, $226binary_subtract.7, func=$218load_global.3, args=[Var($const220.4, utils.py:1239), Var($226binary_subtract.7, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,441 - on stmt: $230load_global.9 = global(min: <built-in function min>)
2024-09-04 18:31:50,441 - on stmt: $236binary_add.12 = n + post_avg
2024-09-04 18:31:50,442 - on stmt: $240load_attr.14 = getattr(value=x, attr=shape)
2024-09-04 18:31:50,442 - on stmt: $const242.15 = const(int, 0)
2024-09-04 18:31:50,442 - on stmt: $244binary_subscr.16 = static_getitem(value=$240load_attr.14, index=0, index_var=$const242.15, fn=<built-in function getitem>)
2024-09-04 18:31:50,442 - on stmt: $246call_function.17 = call $230load_global.9($236binary_add.12, $244binary_subscr.16, func=$230load_global.9, args=[Var($236binary_add.12, utils.py:1239), Var($244binary_subscr.16, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,443 - on stmt: $248build_slice.18 = global(slice: <class 'slice'>)
2024-09-04 18:31:50,443 - on stmt: $248build_slice.19 = call $248build_slice.18($228call_function.8, $246call_function.17, func=$248build_slice.18, args=(Var($228call_function.8, utils.py:1239), Var($246call_function.17, utils.py:1239)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,443 - on stmt: $250binary_subscr.20 = getitem(value=x, index=$248build_slice.19, fn=<built-in function getitem>)
2024-09-04 18:31:50,443 - on stmt: avgn = call $214load_method.1($250binary_subscr.20, func=$214load_method.1, args=[Var($250binary_subscr.20, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,443 - on stmt: $262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:50,444 - on stmt: $268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:50,444 - on stmt: $274binary_add.32 = avgn + delta
2024-09-04 18:31:50,444 - on stmt: $276compare_op.33 = $268binary_subscr.29 >= $274binary_add.32
2024-09-04 18:31:50,444 - on stmt: $278inplace_and.34 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$262binary_subscr.26, rhs=$276compare_op.33, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:50,444 - on stmt: peaks[n] = $278inplace_and.34
2024-09-04 18:31:50,445 - on stmt: $288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:50,445 - on stmt: bool290 = global(bool: <class 'bool'>)
2024-09-04 18:31:50,445 - on stmt: $290pred = call bool290($288binary_subscr.37, func=bool290, args=(Var($288binary_subscr.37, utils.py:1242),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,445 - on stmt: branch $290pred, 302, 292
2024-09-04 18:31:50,445 - ==== SSA block analysis pass on 292
2024-09-04 18:31:50,446 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243131F6B30>
2024-09-04 18:31:50,446 - on stmt: $const294.1 = const(int, 1)
2024-09-04 18:31:50,446 - on stmt: $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:50,446 - on stmt: n = $296inplace_add.2
2024-09-04 18:31:50,446 - on stmt: jump 333
2024-09-04 18:31:50,446 - ==== SSA block analysis pass on 302
2024-09-04 18:31:50,447 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243131F6B30>
2024-09-04 18:31:50,447 - on stmt: $const306.2 = const(int, 1)
2024-09-04 18:31:50,447 - on stmt: $308binary_add.3 = wait + $const306.2
2024-09-04 18:31:50,447 - on stmt: $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:50,447 - on stmt: n = $310inplace_add.4
2024-09-04 18:31:50,447 - on stmt: $318load_attr.7 = getattr(value=x, attr=shape)
2024-09-04 18:31:50,448 - on stmt: $const320.8 = const(int, 0)
2024-09-04 18:31:50,448 - on stmt: $322binary_subscr.9 = static_getitem(value=$318load_attr.7, index=0, index_var=$const320.8, fn=<built-in function getitem>)
2024-09-04 18:31:50,448 - on stmt: $324compare_op.10 = n < $322binary_subscr.9
2024-09-04 18:31:50,448 - on stmt: bool326 = global(bool: <class 'bool'>)
2024-09-04 18:31:50,448 - on stmt: $326pred = call bool326($324compare_op.10, func=bool326, args=(Var($324compare_op.10, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,449 - on stmt: branch $326pred, 134, 328
2024-09-04 18:31:50,449 - ==== SSA block analysis pass on 328
2024-09-04 18:31:50,449 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243131F6B30>
2024-09-04 18:31:50,449 - on stmt: $const328.0 = const(NoneType, None)
2024-09-04 18:31:50,449 - on stmt: $330return_value.1 = cast(value=$const328.0)
2024-09-04 18:31:50,449 - on stmt: return $330return_value.1
2024-09-04 18:31:50,450 - ==== SSA block analysis pass on 332
2024-09-04 18:31:50,450 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243131F6B30>
2024-09-04 18:31:50,450 - on stmt: $const332.0 = const(NoneType, None)
2024-09-04 18:31:50,450 - on stmt: $334return_value.1 = cast(value=$const332.0)
2024-09-04 18:31:50,450 - on stmt: return $334return_value.1
2024-09-04 18:31:50,450 - ==== SSA block analysis pass on 333
2024-09-04 18:31:50,450 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243131F6B30>
2024-09-04 18:31:50,450 - on stmt: jump 120
2024-09-04 18:31:50,457 - defs defaultdict(<class 'list'>,
            {'$102binary_subscr.50': [(<numba.core.ir.Assign object at 0x0000024313641A80>,
                                       0)],
             '$104pred': [(<numba.core.ir.Assign object at 0x00000243136E0AC0>,
                           0)],
             '$10load_method.4': [(<numba.core.ir.Assign object at 0x00000243133A7F40>,
                                   0)],
             '$124load_attr.2': [(<numba.core.ir.Assign object at 0x00000243136E2500>,
                                  120)],
             '$128binary_subscr.4': [(<numba.core.ir.Assign object at 0x00000243131F6890>,
                                      120)],
             '$130compare_op.5': [(<numba.core.ir.Assign object at 0x00000243136E02B0>,
                                   120)],
             '$132pred': [(<numba.core.ir.Assign object at 0x00000243136E3910>,
                           120)],
             '$134load_global.0': [(<numba.core.ir.Assign object at 0x00000243136E2F20>,
                                    134)],
             '$136load_method.1': [(<numba.core.ir.Assign object at 0x00000243136E2DA0>,
                                    134)],
             '$140load_global.3': [(<numba.core.ir.Assign object at 0x00000243136E2A10>,
                                    134)],
             '$148binary_subtract.7': [(<numba.core.ir.Assign object at 0x00000243136E3940>,
                                        134)],
             '$150call_function.8': [(<numba.core.ir.Assign object at 0x00000243136E32B0>,
                                      134)],
             '$152load_global.9': [(<numba.core.ir.Assign object at 0x00000243136E3700>,
                                    134)],
             '$158binary_add.12': [(<numba.core.ir.Assign object at 0x00000243136E2530>,
                                    134)],
             '$162load_attr.14': [(<numba.core.ir.Assign object at 0x00000243136E3220>,
                                   134)],
             '$166binary_subscr.16': [(<numba.core.ir.Assign object at 0x00000243131F60B0>,
                                       134)],
             '$168call_function.17': [(<numba.core.ir.Assign object at 0x00000243131B0730>,
                                       134)],
             '$16load_global.7': [(<numba.core.ir.Assign object at 0x0000024313318340>,
                                   0)],
             '$170build_slice.18': [(<numba.core.ir.Assign object at 0x00000243131B12A0>,
                                     134)],
             '$170build_slice.19': [(<numba.core.ir.Assign object at 0x00000243131B0D90>,
                                     134)],
             '$172binary_subscr.20': [(<numba.core.ir.Assign object at 0x00000243131B24D0>,
                                       134)],
             '$182binary_subscr.24': [(<numba.core.ir.Assign object at 0x00000243131B32E0>,
                                       134)],
             '$186compare_op.26': [(<numba.core.ir.Assign object at 0x00000243131B15D0>,
                                    134)],
             '$198binary_subscr.31': [(<numba.core.ir.Assign object at 0x00000243131B0160>,
                                       134)],
             '$200pred': [(<numba.core.ir.Assign object at 0x00000243131B2110>,
                           134)],
             '$206inplace_add.2': [(<numba.core.ir.Assign object at 0x00000243131B2A40>,
                                    202)],
             '$212load_global.0': [(<numba.core.ir.Assign object at 0x00000243131B1570>,
                                    212)],
             '$214load_method.1': [(<numba.core.ir.Assign object at 0x00000243131B26B0>,
                                    212)],
             '$218load_global.3': [(<numba.core.ir.Assign object at 0x000002431368F8B0>,
                                    212)],
             '$226binary_subtract.7': [(<numba.core.ir.Assign object at 0x000002431368EC50>,
                                        212)],
             '$228call_function.8': [(<numba.core.ir.Assign object at 0x000002431368FCD0>,
                                      212)],
             '$22load_attr.10': [(<numba.core.ir.Assign object at 0x00000243133938E0>,
                                  0)],
             '$230load_global.9': [(<numba.core.ir.Assign object at 0x000002431368F7F0>,
                                    212)],
             '$236binary_add.12': [(<numba.core.ir.Assign object at 0x000002431368FEE0>,
                                    212)],
             '$240load_attr.14': [(<numba.core.ir.Assign object at 0x000002431368EAA0>,
                                   212)],
             '$244binary_subscr.16': [(<numba.core.ir.Assign object at 0x0000024313640E80>,
                                       212)],
             '$246call_function.17': [(<numba.core.ir.Assign object at 0x000002431368F670>,
                                       212)],
             '$248build_slice.18': [(<numba.core.ir.Assign object at 0x000002431368EFE0>,
                                     212)],
             '$248build_slice.19': [(<numba.core.ir.Assign object at 0x000002431368ED40>,
                                     212)],
             '$250binary_subscr.20': [(<numba.core.ir.Assign object at 0x000002431368D8A0>,
                                       212)],
             '$262binary_subscr.26': [(<numba.core.ir.Assign object at 0x000002431368E9E0>,
                                       212)],
             '$268binary_subscr.29': [(<numba.core.ir.Assign object at 0x0000024316C56D10>,
                                       212)],
             '$26binary_subscr.12': [(<numba.core.ir.Assign object at 0x0000024313642A10>,
                                      0)],
             '$274binary_add.32': [(<numba.core.ir.Assign object at 0x0000024316C56380>,
                                    212)],
             '$276compare_op.33': [(<numba.core.ir.Assign object at 0x0000024316C54940>,
                                    212)],
             '$278inplace_and.34': [(<numba.core.ir.Assign object at 0x0000024316C57EB0>,
                                     212)],
             '$288binary_subscr.37': [(<numba.core.ir.Assign object at 0x0000024316C54430>,
                                       212)],
             '$28call_function.13': [(<numba.core.ir.Assign object at 0x0000024316C4A4D0>,
                                      0)],
             '$290pred': [(<numba.core.ir.Assign object at 0x0000024316C55DE0>,
                           212)],
             '$296inplace_add.2': [(<numba.core.ir.Assign object at 0x0000024316C573A0>,
                                    292)],
             '$308binary_add.3': [(<numba.core.ir.Assign object at 0x0000024316C546A0>,
                                   302)],
             '$30build_slice.14': [(<numba.core.ir.Assign object at 0x000002431B51C0D0>,
                                    0)],
             '$30build_slice.15': [(<numba.core.ir.Assign object at 0x0000024312A10340>,
                                    0)],
             '$310inplace_add.4': [(<numba.core.ir.Assign object at 0x0000024313641E70>,
                                    302)],
             '$318load_attr.7': [(<numba.core.ir.Assign object at 0x00000243136419F0>,
                                  302)],
             '$322binary_subscr.9': [(<numba.core.ir.Assign object at 0x000002431340BC40>,
                                      302)],
             '$324compare_op.10': [(<numba.core.ir.Assign object at 0x0000024313643670>,
                                    302)],
             '$326pred': [(<numba.core.ir.Assign object at 0x0000024313643340>,
                           302)],
             '$32binary_subscr.16': [(<numba.core.ir.Assign object at 0x00000243136B4370>,
                                      0)],
             '$330return_value.1': [(<numba.core.ir.Assign object at 0x0000024313643C70>,
                                     328)],
             '$334return_value.1': [(<numba.core.ir.Assign object at 0x0000024313643AF0>,
                                     332)],
             '$34call_method.17': [(<numba.core.ir.Assign object at 0x0000024312DA2FB0>,
                                    0)],
             '$36compare_op.18': [(<numba.core.ir.Assign object at 0x0000024312DA00D0>,
                                   0)],
             '$50binary_subscr.25': [(<numba.core.ir.Assign object at 0x0000024313642B60>,
                                      0)],
             '$56binary_subscr.28': [(<numba.core.ir.Assign object at 0x0000024313642EF0>,
                                      0)],
             '$58load_global.29': [(<numba.core.ir.Assign object at 0x0000024313699F90>,
                                    0)],
             '$60load_method.30': [(<numba.core.ir.Assign object at 0x000002431369BF40>,
                                    0)],
             '$66load_global.33': [(<numba.core.ir.Assign object at 0x0000024313699D80>,
                                    0)],
             '$6binary_subscr.2': [(<numba.core.ir.Assign object at 0x00000243136425F0>,
                                    0)],
             '$72load_attr.36': [(<numba.core.ir.Assign object at 0x000002431369AF80>,
                                  0)],
             '$76binary_subscr.38': [(<numba.core.ir.Assign object at 0x00000243136417E0>,
                                      0)],
             '$78call_function.39': [(<numba.core.ir.Assign object at 0x00000243136E3F10>,
                                      0)],
             '$80build_slice.40': [(<numba.core.ir.Assign object at 0x00000243136E3610>,
                                    0)],
             '$80build_slice.41': [(<numba.core.ir.Assign object at 0x00000243136E2200>,
                                    0)],
             '$82binary_subscr.42': [(<numba.core.ir.Assign object at 0x00000243136E1990>,
                                      0)],
             '$84call_method.43': [(<numba.core.ir.Assign object at 0x00000243136E1D20>,
                                    0)],
             '$88binary_add.45': [(<numba.core.ir.Assign object at 0x00000243136E01C0>,
                                   0)],
             '$8load_global.3': [(<numba.core.ir.Assign object at 0x00000243133A6770>,
                                  0)],
             '$90compare_op.46': [(<numba.core.ir.Assign object at 0x00000243136E0A30>,
                                   0)],
             '$92inplace_and.47': [(<numba.core.ir.Assign object at 0x00000243136E1000>,
                                    0)],
             '$const100.49': [(<numba.core.ir.Assign object at 0x00000243136E05B0>,
                               0)],
             '$const108.1': [(<numba.core.ir.Assign object at 0x000002431369BFA0>,
                              106)],
             '$const126.3': [(<numba.core.ir.Assign object at 0x00000243136E2FB0>,
                              120)],
             '$const14.6': [(<numba.core.ir.Assign object at 0x0000024313319030>,
                             0)],
             '$const142.4': [(<numba.core.ir.Assign object at 0x00000243136E26B0>,
                              134)],
             '$const164.15': [(<numba.core.ir.Assign object at 0x00000243136E2050>,
                               134)],
             '$const204.1': [(<numba.core.ir.Assign object at 0x00000243131B32B0>,
                              202)],
             '$const220.4': [(<numba.core.ir.Assign object at 0x000002431368D660>,
                              212)],
             '$const24.11': [(<numba.core.ir.Assign object at 0x0000024312A869B0>,
                              0)],
             '$const242.15': [(<numba.core.ir.Assign object at 0x000002431368EF20>,
                               212)],
             '$const294.1': [(<numba.core.ir.Assign object at 0x000002431368CCD0>,
                              292)],
             '$const306.2': [(<numba.core.ir.Assign object at 0x0000024316C55270>,
                              302)],
             '$const320.8': [(<numba.core.ir.Assign object at 0x0000024313643820>,
                              302)],
             '$const328.0': [(<numba.core.ir.Assign object at 0x0000024313642C80>,
                              328)],
             '$const332.0': [(<numba.core.ir.Assign object at 0x0000024313643B80>,
                              332)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x0000024313266230>,
                            0)],
             '$const40.20': [(<numba.core.ir.Assign object at 0x0000024318F35150>,
                              0)],
             '$const46.22': [(<numba.core.ir.Assign object at 0x0000024318F340D0>,
                              0)],
             '$const54.27': [(<numba.core.ir.Assign object at 0x000002431369A830>,
                              0)],
             '$const64.32': [(<numba.core.ir.Assign object at 0x000002431369AE30>,
                              0)],
             '$const74.37': [(<numba.core.ir.Assign object at 0x00000243136E1750>,
                              0)],
             'avgn': [(<numba.core.ir.Assign object at 0x000002431368CA60>,
                       212)],
             'bool104': [(<numba.core.ir.Assign object at 0x00000243136E1330>,
                          0)],
             'bool132': [(<numba.core.ir.Assign object at 0x00000243136E03D0>,
                          120)],
             'bool200': [(<numba.core.ir.Assign object at 0x00000243131B1C60>,
                          134)],
             'bool290': [(<numba.core.ir.Assign object at 0x0000024316C55FF0>,
                          212)],
             'bool326': [(<numba.core.ir.Assign object at 0x0000024313640130>,
                          302)],
             'delta': [(<numba.core.ir.Assign object at 0x000002431D273130>,
                        0)],
             'maxn': [(<numba.core.ir.Assign object at 0x00000243131B0460>,
                       134)],
             'n': [(<numba.core.ir.Assign object at 0x00000243136E1E70>, 106),
                   (<numba.core.ir.Assign object at 0x00000243136E13C0>, 116),
                   (<numba.core.ir.Assign object at 0x00000243131B0E80>, 202),
                   (<numba.core.ir.Assign object at 0x0000024316C55450>, 292),
                   (<numba.core.ir.Assign object at 0x0000024313641FC0>, 302)],
             'peaks': [(<numba.core.ir.Assign object at 0x0000024313426E30>,
                        0)],
             'post_avg': [(<numba.core.ir.Assign object at 0x000002431D270070>,
                           0)],
             'post_max': [(<numba.core.ir.Assign object at 0x000002431D272A10>,
                           0)],
             'pre_avg': [(<numba.core.ir.Assign object at 0x000002431D272B60>,
                          0)],
             'pre_max': [(<numba.core.ir.Assign object at 0x00000243139F1AE0>,
                          0)],
             'wait': [(<numba.core.ir.Assign object at 0x000002431D271150>, 0)],
             'x': [(<numba.core.ir.Assign object at 0x000002431D20FAC0>, 0)]})
2024-09-04 18:31:50,458 - SSA violators <numba.core.utils.OrderedSet object at 0x00000243133E4430>
2024-09-04 18:31:50,458 - Fix SSA violator on var n
2024-09-04 18:31:50,458 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:50,458 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313594D30>
2024-09-04 18:31:50,458 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:50,458 - on stmt: pre_max = arg(1, name=pre_max)
2024-09-04 18:31:50,458 - on stmt: post_max = arg(2, name=post_max)
2024-09-04 18:31:50,459 - on stmt: pre_avg = arg(3, name=pre_avg)
2024-09-04 18:31:50,459 - on stmt: post_avg = arg(4, name=post_avg)
2024-09-04 18:31:50,459 - on stmt: delta = arg(5, name=delta)
2024-09-04 18:31:50,459 - on stmt: wait = arg(6, name=wait)
2024-09-04 18:31:50,459 - on stmt: peaks = arg(7, name=peaks)
2024-09-04 18:31:50,459 - on stmt: $const4.1 = const(int, 0)
2024-09-04 18:31:50,459 - on stmt: $6binary_subscr.2 = static_getitem(value=x, index=0, index_var=$const4.1, fn=<built-in function getitem>)
2024-09-04 18:31:50,459 - on stmt: $8load_global.3 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:50,459 - on stmt: $10load_method.4 = getattr(value=$8load_global.3, attr=max)
2024-09-04 18:31:50,459 - on stmt: $const14.6 = const(NoneType, None)
2024-09-04 18:31:50,459 - on stmt: $16load_global.7 = global(min: <built-in function min>)
2024-09-04 18:31:50,459 - on stmt: $22load_attr.10 = getattr(value=x, attr=shape)
2024-09-04 18:31:50,459 - on stmt: $const24.11 = const(int, 0)
2024-09-04 18:31:50,459 - on stmt: $26binary_subscr.12 = static_getitem(value=$22load_attr.10, index=0, index_var=$const24.11, fn=<built-in function getitem>)
2024-09-04 18:31:50,460 - on stmt: $28call_function.13 = call $16load_global.7(post_max, $26binary_subscr.12, func=$16load_global.7, args=[Var(post_max, utils.py:1209), Var($26binary_subscr.12, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,460 - on stmt: $30build_slice.14 = global(slice: <class 'slice'>)
2024-09-04 18:31:50,460 - on stmt: $30build_slice.15 = call $30build_slice.14($const14.6, $28call_function.13, func=$30build_slice.14, args=(Var($const14.6, utils.py:1221), Var($28call_function.13, utils.py:1221)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,460 - on stmt: $32binary_subscr.16 = getitem(value=x, index=$30build_slice.15, fn=<built-in function getitem>)
2024-09-04 18:31:50,460 - on stmt: $34call_method.17 = call $10load_method.4($32binary_subscr.16, func=$10load_method.4, args=[Var($32binary_subscr.16, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,460 - on stmt: $36compare_op.18 = $6binary_subscr.2 >= $34call_method.17
2024-09-04 18:31:50,460 - on stmt: $const40.20 = const(int, 0)
2024-09-04 18:31:50,460 - on stmt: peaks[0] = $36compare_op.18
2024-09-04 18:31:50,460 - on stmt: $const46.22 = const(int, 0)
2024-09-04 18:31:50,460 - on stmt: $50binary_subscr.25 = static_getitem(value=peaks, index=0, index_var=$const46.22, fn=<built-in function getitem>)
2024-09-04 18:31:50,460 - on stmt: $const54.27 = const(int, 0)
2024-09-04 18:31:50,460 - on stmt: $56binary_subscr.28 = static_getitem(value=x, index=0, index_var=$const54.27, fn=<built-in function getitem>)
2024-09-04 18:31:50,460 - on stmt: $58load_global.29 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:50,461 - on stmt: $60load_method.30 = getattr(value=$58load_global.29, attr=mean)
2024-09-04 18:31:50,461 - on stmt: $const64.32 = const(NoneType, None)
2024-09-04 18:31:50,461 - on stmt: $66load_global.33 = global(min: <built-in function min>)
2024-09-04 18:31:50,461 - on stmt: $72load_attr.36 = getattr(value=x, attr=shape)
2024-09-04 18:31:50,461 - on stmt: $const74.37 = const(int, 0)
2024-09-04 18:31:50,461 - on stmt: $76binary_subscr.38 = static_getitem(value=$72load_attr.36, index=0, index_var=$const74.37, fn=<built-in function getitem>)
2024-09-04 18:31:50,461 - on stmt: $78call_function.39 = call $66load_global.33(post_avg, $76binary_subscr.38, func=$66load_global.33, args=[Var(post_avg, utils.py:1209), Var($76binary_subscr.38, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,461 - on stmt: $80build_slice.40 = global(slice: <class 'slice'>)
2024-09-04 18:31:50,461 - on stmt: $80build_slice.41 = call $80build_slice.40($const64.32, $78call_function.39, func=$80build_slice.40, args=(Var($const64.32, utils.py:1222), Var($78call_function.39, utils.py:1222)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,461 - on stmt: $82binary_subscr.42 = getitem(value=x, index=$80build_slice.41, fn=<built-in function getitem>)
2024-09-04 18:31:50,461 - on stmt: $84call_method.43 = call $60load_method.30($82binary_subscr.42, func=$60load_method.30, args=[Var($82binary_subscr.42, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,461 - on stmt: $88binary_add.45 = $84call_method.43 + delta
2024-09-04 18:31:50,461 - on stmt: $90compare_op.46 = $56binary_subscr.28 >= $88binary_add.45
2024-09-04 18:31:50,462 - on stmt: $92inplace_and.47 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$50binary_subscr.25, rhs=$90compare_op.46, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:50,462 - on stmt: peaks[0] = $92inplace_and.47
2024-09-04 18:31:50,462 - on stmt: $const100.49 = const(int, 0)
2024-09-04 18:31:50,462 - on stmt: $102binary_subscr.50 = static_getitem(value=peaks, index=0, index_var=$const100.49, fn=<built-in function getitem>)
2024-09-04 18:31:50,462 - on stmt: bool104 = global(bool: <class 'bool'>)
2024-09-04 18:31:50,462 - on stmt: $104pred = call bool104($102binary_subscr.50, func=bool104, args=(Var($102binary_subscr.50, utils.py:1224),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,462 - on stmt: branch $104pred, 106, 116
2024-09-04 18:31:50,462 - ==== SSA block rewrite pass on 106
2024-09-04 18:31:50,462 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313594D30>
2024-09-04 18:31:50,462 - on stmt: $const108.1 = const(int, 1)
2024-09-04 18:31:50,462 - on stmt: n = wait + $const108.1
2024-09-04 18:31:50,462 - first assign: n
2024-09-04 18:31:50,462 - replaced with: n = wait + $const108.1
2024-09-04 18:31:50,462 - on stmt: jump 120
2024-09-04 18:31:50,463 - ==== SSA block rewrite pass on 116
2024-09-04 18:31:50,463 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313594D30>
2024-09-04 18:31:50,463 - on stmt: n = const(int, 1)
2024-09-04 18:31:50,463 - replaced with: n.1 = const(int, 1)
2024-09-04 18:31:50,463 - on stmt: jump 120
2024-09-04 18:31:50,463 - ==== SSA block rewrite pass on 120
2024-09-04 18:31:50,463 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313594D30>
2024-09-04 18:31:50,463 - on stmt: $124load_attr.2 = getattr(value=x, attr=shape)
2024-09-04 18:31:50,463 - on stmt: $const126.3 = const(int, 0)
2024-09-04 18:31:50,463 - on stmt: $128binary_subscr.4 = static_getitem(value=$124load_attr.2, index=0, index_var=$const126.3, fn=<built-in function getitem>)
2024-09-04 18:31:50,463 - on stmt: $130compare_op.5 = n < $128binary_subscr.4
2024-09-04 18:31:50,463 - on stmt: bool132 = global(bool: <class 'bool'>)
2024-09-04 18:31:50,463 - on stmt: $132pred = call bool132($130compare_op.5, func=bool132, args=(Var($130compare_op.5, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,463 - on stmt: branch $132pred, 134, 332
2024-09-04 18:31:50,464 - ==== SSA block rewrite pass on 134
2024-09-04 18:31:50,464 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313594D30>
2024-09-04 18:31:50,464 - on stmt: $134load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:50,464 - on stmt: $136load_method.1 = getattr(value=$134load_global.0, attr=max)
2024-09-04 18:31:50,464 - on stmt: $140load_global.3 = global(max: <built-in function max>)
2024-09-04 18:31:50,464 - on stmt: $const142.4 = const(int, 0)
2024-09-04 18:31:50,464 - on stmt: $148binary_subtract.7 = n - pre_max
2024-09-04 18:31:50,464 - on stmt: $150call_function.8 = call $140load_global.3($const142.4, $148binary_subtract.7, func=$140load_global.3, args=[Var($const142.4, utils.py:1230), Var($148binary_subtract.7, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,464 - on stmt: $152load_global.9 = global(min: <built-in function min>)
2024-09-04 18:31:50,464 - on stmt: $158binary_add.12 = n + post_max
2024-09-04 18:31:50,464 - on stmt: $162load_attr.14 = getattr(value=x, attr=shape)
2024-09-04 18:31:50,464 - on stmt: $const164.15 = const(int, 0)
2024-09-04 18:31:50,464 - on stmt: $166binary_subscr.16 = static_getitem(value=$162load_attr.14, index=0, index_var=$const164.15, fn=<built-in function getitem>)
2024-09-04 18:31:50,464 - on stmt: $168call_function.17 = call $152load_global.9($158binary_add.12, $166binary_subscr.16, func=$152load_global.9, args=[Var($158binary_add.12, utils.py:1230), Var($166binary_subscr.16, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,465 - on stmt: $170build_slice.18 = global(slice: <class 'slice'>)
2024-09-04 18:31:50,465 - on stmt: $170build_slice.19 = call $170build_slice.18($150call_function.8, $168call_function.17, func=$170build_slice.18, args=(Var($150call_function.8, utils.py:1230), Var($168call_function.17, utils.py:1230)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,465 - on stmt: $172binary_subscr.20 = getitem(value=x, index=$170build_slice.19, fn=<built-in function getitem>)
2024-09-04 18:31:50,465 - on stmt: maxn = call $136load_method.1($172binary_subscr.20, func=$136load_method.1, args=[Var($172binary_subscr.20, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,465 - on stmt: $182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:50,465 - on stmt: $186compare_op.26 = $182binary_subscr.24 == maxn
2024-09-04 18:31:50,465 - on stmt: peaks[n] = $186compare_op.26
2024-09-04 18:31:50,465 - on stmt: $198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:50,465 - on stmt: bool200 = global(bool: <class 'bool'>)
2024-09-04 18:31:50,465 - on stmt: $200pred = call bool200($198binary_subscr.31, func=bool200, args=(Var($198binary_subscr.31, utils.py:1235),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,465 - on stmt: branch $200pred, 212, 202
2024-09-04 18:31:50,465 - ==== SSA block rewrite pass on 202
2024-09-04 18:31:50,465 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313594D30>
2024-09-04 18:31:50,466 - on stmt: $const204.1 = const(int, 1)
2024-09-04 18:31:50,466 - on stmt: $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:50,466 - on stmt: n = $206inplace_add.2
2024-09-04 18:31:50,466 - replaced with: n.2 = $206inplace_add.2
2024-09-04 18:31:50,466 - on stmt: jump 333
2024-09-04 18:31:50,466 - ==== SSA block rewrite pass on 212
2024-09-04 18:31:50,466 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313594D30>
2024-09-04 18:31:50,466 - on stmt: $212load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:50,466 - on stmt: $214load_method.1 = getattr(value=$212load_global.0, attr=mean)
2024-09-04 18:31:50,466 - on stmt: $218load_global.3 = global(max: <built-in function max>)
2024-09-04 18:31:50,466 - on stmt: $const220.4 = const(int, 0)
2024-09-04 18:31:50,466 - on stmt: $226binary_subtract.7 = n - pre_avg
2024-09-04 18:31:50,466 - on stmt: $228call_function.8 = call $218load_global.3($const220.4, $226binary_subtract.7, func=$218load_global.3, args=[Var($const220.4, utils.py:1239), Var($226binary_subtract.7, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,466 - on stmt: $230load_global.9 = global(min: <built-in function min>)
2024-09-04 18:31:50,467 - on stmt: $236binary_add.12 = n + post_avg
2024-09-04 18:31:50,467 - on stmt: $240load_attr.14 = getattr(value=x, attr=shape)
2024-09-04 18:31:50,467 - on stmt: $const242.15 = const(int, 0)
2024-09-04 18:31:50,467 - on stmt: $244binary_subscr.16 = static_getitem(value=$240load_attr.14, index=0, index_var=$const242.15, fn=<built-in function getitem>)
2024-09-04 18:31:50,467 - on stmt: $246call_function.17 = call $230load_global.9($236binary_add.12, $244binary_subscr.16, func=$230load_global.9, args=[Var($236binary_add.12, utils.py:1239), Var($244binary_subscr.16, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,467 - on stmt: $248build_slice.18 = global(slice: <class 'slice'>)
2024-09-04 18:31:50,467 - on stmt: $248build_slice.19 = call $248build_slice.18($228call_function.8, $246call_function.17, func=$248build_slice.18, args=(Var($228call_function.8, utils.py:1239), Var($246call_function.17, utils.py:1239)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,467 - on stmt: $250binary_subscr.20 = getitem(value=x, index=$248build_slice.19, fn=<built-in function getitem>)
2024-09-04 18:31:50,467 - on stmt: avgn = call $214load_method.1($250binary_subscr.20, func=$214load_method.1, args=[Var($250binary_subscr.20, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,467 - on stmt: $262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:50,467 - on stmt: $268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:50,467 - on stmt: $274binary_add.32 = avgn + delta
2024-09-04 18:31:50,467 - on stmt: $276compare_op.33 = $268binary_subscr.29 >= $274binary_add.32
2024-09-04 18:31:50,468 - on stmt: $278inplace_and.34 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$262binary_subscr.26, rhs=$276compare_op.33, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:50,468 - on stmt: peaks[n] = $278inplace_and.34
2024-09-04 18:31:50,468 - on stmt: $288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:50,468 - on stmt: bool290 = global(bool: <class 'bool'>)
2024-09-04 18:31:50,468 - on stmt: $290pred = call bool290($288binary_subscr.37, func=bool290, args=(Var($288binary_subscr.37, utils.py:1242),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,468 - on stmt: branch $290pred, 302, 292
2024-09-04 18:31:50,468 - ==== SSA block rewrite pass on 292
2024-09-04 18:31:50,468 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313594D30>
2024-09-04 18:31:50,468 - on stmt: $const294.1 = const(int, 1)
2024-09-04 18:31:50,468 - on stmt: $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:50,469 - on stmt: n = $296inplace_add.2
2024-09-04 18:31:50,469 - replaced with: n.3 = $296inplace_add.2
2024-09-04 18:31:50,469 - on stmt: jump 333
2024-09-04 18:31:50,469 - ==== SSA block rewrite pass on 302
2024-09-04 18:31:50,469 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313594D30>
2024-09-04 18:31:50,469 - on stmt: $const306.2 = const(int, 1)
2024-09-04 18:31:50,469 - on stmt: $308binary_add.3 = wait + $const306.2
2024-09-04 18:31:50,469 - on stmt: $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:50,469 - on stmt: n = $310inplace_add.4
2024-09-04 18:31:50,469 - replaced with: n.4 = $310inplace_add.4
2024-09-04 18:31:50,469 - on stmt: $318load_attr.7 = getattr(value=x, attr=shape)
2024-09-04 18:31:50,469 - on stmt: $const320.8 = const(int, 0)
2024-09-04 18:31:50,469 - on stmt: $322binary_subscr.9 = static_getitem(value=$318load_attr.7, index=0, index_var=$const320.8, fn=<built-in function getitem>)
2024-09-04 18:31:50,470 - on stmt: $324compare_op.10 = n < $322binary_subscr.9
2024-09-04 18:31:50,470 - on stmt: bool326 = global(bool: <class 'bool'>)
2024-09-04 18:31:50,470 - on stmt: $326pred = call bool326($324compare_op.10, func=bool326, args=(Var($324compare_op.10, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,470 - on stmt: branch $326pred, 134, 328
2024-09-04 18:31:50,470 - ==== SSA block rewrite pass on 328
2024-09-04 18:31:50,470 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313594D30>
2024-09-04 18:31:50,470 - on stmt: $const328.0 = const(NoneType, None)
2024-09-04 18:31:50,470 - on stmt: $330return_value.1 = cast(value=$const328.0)
2024-09-04 18:31:50,470 - on stmt: return $330return_value.1
2024-09-04 18:31:50,470 - ==== SSA block rewrite pass on 332
2024-09-04 18:31:50,470 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313594D30>
2024-09-04 18:31:50,470 - on stmt: $const332.0 = const(NoneType, None)
2024-09-04 18:31:50,470 - on stmt: $334return_value.1 = cast(value=$const332.0)
2024-09-04 18:31:50,470 - on stmt: return $334return_value.1
2024-09-04 18:31:50,471 - ==== SSA block rewrite pass on 333
2024-09-04 18:31:50,471 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313594D30>
2024-09-04 18:31:50,471 - on stmt: jump 120
2024-09-04 18:31:50,471 - Replaced assignments: defaultdict(<class 'list'>,
            {106: [<numba.core.ir.Assign object at 0x000002431340B700>],
             116: [<numba.core.ir.Assign object at 0x0000024313641AB0>],
             202: [<numba.core.ir.Assign object at 0x0000024313642BF0>],
             292: [<numba.core.ir.Assign object at 0x0000024313642680>],
             302: [<numba.core.ir.Assign object at 0x00000243136424A0>]})
2024-09-04 18:31:50,471 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:50,471 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313594D30>
2024-09-04 18:31:50,471 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:50,471 - on stmt: pre_max = arg(1, name=pre_max)
2024-09-04 18:31:50,471 - on stmt: post_max = arg(2, name=post_max)
2024-09-04 18:31:50,471 - on stmt: pre_avg = arg(3, name=pre_avg)
2024-09-04 18:31:50,471 - on stmt: post_avg = arg(4, name=post_avg)
2024-09-04 18:31:50,471 - on stmt: delta = arg(5, name=delta)
2024-09-04 18:31:50,471 - on stmt: wait = arg(6, name=wait)
2024-09-04 18:31:50,472 - on stmt: peaks = arg(7, name=peaks)
2024-09-04 18:31:50,472 - on stmt: $const4.1 = const(int, 0)
2024-09-04 18:31:50,472 - on stmt: $6binary_subscr.2 = static_getitem(value=x, index=0, index_var=$const4.1, fn=<built-in function getitem>)
2024-09-04 18:31:50,472 - on stmt: $8load_global.3 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:50,472 - on stmt: $10load_method.4 = getattr(value=$8load_global.3, attr=max)
2024-09-04 18:31:50,472 - on stmt: $const14.6 = const(NoneType, None)
2024-09-04 18:31:50,472 - on stmt: $16load_global.7 = global(min: <built-in function min>)
2024-09-04 18:31:50,472 - on stmt: $22load_attr.10 = getattr(value=x, attr=shape)
2024-09-04 18:31:50,472 - on stmt: $const24.11 = const(int, 0)
2024-09-04 18:31:50,472 - on stmt: $26binary_subscr.12 = static_getitem(value=$22load_attr.10, index=0, index_var=$const24.11, fn=<built-in function getitem>)
2024-09-04 18:31:50,472 - on stmt: $28call_function.13 = call $16load_global.7(post_max, $26binary_subscr.12, func=$16load_global.7, args=[Var(post_max, utils.py:1209), Var($26binary_subscr.12, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,472 - on stmt: $30build_slice.14 = global(slice: <class 'slice'>)
2024-09-04 18:31:50,472 - on stmt: $30build_slice.15 = call $30build_slice.14($const14.6, $28call_function.13, func=$30build_slice.14, args=(Var($const14.6, utils.py:1221), Var($28call_function.13, utils.py:1221)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,473 - on stmt: $32binary_subscr.16 = getitem(value=x, index=$30build_slice.15, fn=<built-in function getitem>)
2024-09-04 18:31:50,473 - on stmt: $34call_method.17 = call $10load_method.4($32binary_subscr.16, func=$10load_method.4, args=[Var($32binary_subscr.16, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,473 - on stmt: $36compare_op.18 = $6binary_subscr.2 >= $34call_method.17
2024-09-04 18:31:50,473 - on stmt: $const40.20 = const(int, 0)
2024-09-04 18:31:50,473 - on stmt: peaks[0] = $36compare_op.18
2024-09-04 18:31:50,473 - on stmt: $const46.22 = const(int, 0)
2024-09-04 18:31:50,473 - on stmt: $50binary_subscr.25 = static_getitem(value=peaks, index=0, index_var=$const46.22, fn=<built-in function getitem>)
2024-09-04 18:31:50,473 - on stmt: $const54.27 = const(int, 0)
2024-09-04 18:31:50,473 - on stmt: $56binary_subscr.28 = static_getitem(value=x, index=0, index_var=$const54.27, fn=<built-in function getitem>)
2024-09-04 18:31:50,473 - on stmt: $58load_global.29 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:50,473 - on stmt: $60load_method.30 = getattr(value=$58load_global.29, attr=mean)
2024-09-04 18:31:50,473 - on stmt: $const64.32 = const(NoneType, None)
2024-09-04 18:31:50,473 - on stmt: $66load_global.33 = global(min: <built-in function min>)
2024-09-04 18:31:50,474 - on stmt: $72load_attr.36 = getattr(value=x, attr=shape)
2024-09-04 18:31:50,474 - on stmt: $const74.37 = const(int, 0)
2024-09-04 18:31:50,474 - on stmt: $76binary_subscr.38 = static_getitem(value=$72load_attr.36, index=0, index_var=$const74.37, fn=<built-in function getitem>)
2024-09-04 18:31:50,474 - on stmt: $78call_function.39 = call $66load_global.33(post_avg, $76binary_subscr.38, func=$66load_global.33, args=[Var(post_avg, utils.py:1209), Var($76binary_subscr.38, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,474 - on stmt: $80build_slice.40 = global(slice: <class 'slice'>)
2024-09-04 18:31:50,474 - on stmt: $80build_slice.41 = call $80build_slice.40($const64.32, $78call_function.39, func=$80build_slice.40, args=(Var($const64.32, utils.py:1222), Var($78call_function.39, utils.py:1222)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,474 - on stmt: $82binary_subscr.42 = getitem(value=x, index=$80build_slice.41, fn=<built-in function getitem>)
2024-09-04 18:31:50,474 - on stmt: $84call_method.43 = call $60load_method.30($82binary_subscr.42, func=$60load_method.30, args=[Var($82binary_subscr.42, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,474 - on stmt: $88binary_add.45 = $84call_method.43 + delta
2024-09-04 18:31:50,474 - on stmt: $90compare_op.46 = $56binary_subscr.28 >= $88binary_add.45
2024-09-04 18:31:50,475 - on stmt: $92inplace_and.47 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$50binary_subscr.25, rhs=$90compare_op.46, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:50,475 - on stmt: peaks[0] = $92inplace_and.47
2024-09-04 18:31:50,475 - on stmt: $const100.49 = const(int, 0)
2024-09-04 18:31:50,475 - on stmt: $102binary_subscr.50 = static_getitem(value=peaks, index=0, index_var=$const100.49, fn=<built-in function getitem>)
2024-09-04 18:31:50,475 - on stmt: bool104 = global(bool: <class 'bool'>)
2024-09-04 18:31:50,475 - on stmt: $104pred = call bool104($102binary_subscr.50, func=bool104, args=(Var($102binary_subscr.50, utils.py:1224),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,475 - on stmt: branch $104pred, 106, 116
2024-09-04 18:31:50,475 - ==== SSA block rewrite pass on 106
2024-09-04 18:31:50,475 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313594D30>
2024-09-04 18:31:50,475 - on stmt: $const108.1 = const(int, 1)
2024-09-04 18:31:50,475 - on stmt: n = wait + $const108.1
2024-09-04 18:31:50,475 - on stmt: jump 120
2024-09-04 18:31:50,475 - ==== SSA block rewrite pass on 116
2024-09-04 18:31:50,475 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313594D30>
2024-09-04 18:31:50,475 - on stmt: n.1 = const(int, 1)
2024-09-04 18:31:50,475 - on stmt: jump 120
2024-09-04 18:31:50,475 - ==== SSA block rewrite pass on 120
2024-09-04 18:31:50,475 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313594D30>
2024-09-04 18:31:50,475 - on stmt: $124load_attr.2 = getattr(value=x, attr=shape)
2024-09-04 18:31:50,475 - on stmt: $const126.3 = const(int, 0)
2024-09-04 18:31:50,475 - on stmt: $128binary_subscr.4 = static_getitem(value=$124load_attr.2, index=0, index_var=$const126.3, fn=<built-in function getitem>)
2024-09-04 18:31:50,475 - on stmt: $130compare_op.5 = n < $128binary_subscr.4
2024-09-04 18:31:50,475 - find_def var='n' stmt=$130compare_op.5 = n < $128binary_subscr.4
2024-09-04 18:31:50,475 - find_def_from_top label 120
2024-09-04 18:31:50,475 - insert phi node n.5 = phi(incoming_values=[], incoming_blocks=[]) at 120
2024-09-04 18:31:50,475 - find_def_from_bottom label 106
2024-09-04 18:31:50,475 - incoming_def n = wait + $const108.1
2024-09-04 18:31:50,475 - find_def_from_bottom label 116
2024-09-04 18:31:50,475 - incoming_def n.1 = const(int, 1)
2024-09-04 18:31:50,475 - find_def_from_bottom label 333
2024-09-04 18:31:50,475 - find_def_from_top label 333
2024-09-04 18:31:50,475 - insert phi node n.6 = phi(incoming_values=[], incoming_blocks=[]) at 333
2024-09-04 18:31:50,475 - find_def_from_bottom label 202
2024-09-04 18:31:50,475 - incoming_def n.2 = $206inplace_add.2
2024-09-04 18:31:50,475 - find_def_from_bottom label 292
2024-09-04 18:31:50,475 - incoming_def n.3 = $296inplace_add.2
2024-09-04 18:31:50,475 - incoming_def n.6 = phi(incoming_values=[Var(n.2, utils.py:1236), Var(n.3, utils.py:1243)], incoming_blocks=[202, 292])
2024-09-04 18:31:50,475 - replaced with: $130compare_op.5 = n.5 < $128binary_subscr.4
2024-09-04 18:31:50,475 - on stmt: bool132 = global(bool: <class 'bool'>)
2024-09-04 18:31:50,475 - on stmt: $132pred = call bool132($130compare_op.5, func=bool132, args=(Var($130compare_op.5, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,475 - on stmt: branch $132pred, 134, 332
2024-09-04 18:31:50,475 - ==== SSA block rewrite pass on 134
2024-09-04 18:31:50,475 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313594D30>
2024-09-04 18:31:50,475 - on stmt: $134load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:50,475 - on stmt: $136load_method.1 = getattr(value=$134load_global.0, attr=max)
2024-09-04 18:31:50,475 - on stmt: $140load_global.3 = global(max: <built-in function max>)
2024-09-04 18:31:50,475 - on stmt: $const142.4 = const(int, 0)
2024-09-04 18:31:50,475 - on stmt: $148binary_subtract.7 = n - pre_max
2024-09-04 18:31:50,475 - find_def var='n' stmt=$148binary_subtract.7 = n - pre_max
2024-09-04 18:31:50,475 - find_def_from_top label 134
2024-09-04 18:31:50,475 - insert phi node n.7 = phi(incoming_values=[], incoming_blocks=[]) at 134
2024-09-04 18:31:50,475 - find_def_from_bottom label 120
2024-09-04 18:31:50,475 - incoming_def n.5 = phi(incoming_values=[Var(n, utils.py:1225), Var(n.1, utils.py:1227), Var(n.6, utils.py:1229)], incoming_blocks=[106, 116, 333])
2024-09-04 18:31:50,475 - find_def_from_bottom label 302
2024-09-04 18:31:50,475 - incoming_def n.4 = $310inplace_add.4
2024-09-04 18:31:50,475 - replaced with: $148binary_subtract.7 = n.7 - pre_max
2024-09-04 18:31:50,475 - on stmt: $150call_function.8 = call $140load_global.3($const142.4, $148binary_subtract.7, func=$140load_global.3, args=[Var($const142.4, utils.py:1230), Var($148binary_subtract.7, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,475 - on stmt: $152load_global.9 = global(min: <built-in function min>)
2024-09-04 18:31:50,475 - on stmt: $158binary_add.12 = n + post_max
2024-09-04 18:31:50,475 - find_def var='n' stmt=$158binary_add.12 = n + post_max
2024-09-04 18:31:50,475 - replaced with: $158binary_add.12 = n.7 + post_max
2024-09-04 18:31:50,475 - on stmt: $162load_attr.14 = getattr(value=x, attr=shape)
2024-09-04 18:31:50,475 - on stmt: $const164.15 = const(int, 0)
2024-09-04 18:31:50,475 - on stmt: $166binary_subscr.16 = static_getitem(value=$162load_attr.14, index=0, index_var=$const164.15, fn=<built-in function getitem>)
2024-09-04 18:31:50,475 - on stmt: $168call_function.17 = call $152load_global.9($158binary_add.12, $166binary_subscr.16, func=$152load_global.9, args=[Var($158binary_add.12, utils.py:1230), Var($166binary_subscr.16, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,475 - on stmt: $170build_slice.18 = global(slice: <class 'slice'>)
2024-09-04 18:31:50,475 - on stmt: $170build_slice.19 = call $170build_slice.18($150call_function.8, $168call_function.17, func=$170build_slice.18, args=(Var($150call_function.8, utils.py:1230), Var($168call_function.17, utils.py:1230)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,475 - on stmt: $172binary_subscr.20 = getitem(value=x, index=$170build_slice.19, fn=<built-in function getitem>)
2024-09-04 18:31:50,475 - on stmt: maxn = call $136load_method.1($172binary_subscr.20, func=$136load_method.1, args=[Var($172binary_subscr.20, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,475 - on stmt: $182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:50,475 - find_def var='n' stmt=$182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:50,475 - replaced with: $182binary_subscr.24 = getitem(value=x, index=n.7, fn=<built-in function getitem>)
2024-09-04 18:31:50,475 - on stmt: $186compare_op.26 = $182binary_subscr.24 == maxn
2024-09-04 18:31:50,475 - on stmt: peaks[n] = $186compare_op.26
2024-09-04 18:31:50,475 - find_def var='n' stmt=peaks[n] = $186compare_op.26
2024-09-04 18:31:50,475 - replaced with: peaks[n.7] = $186compare_op.26
2024-09-04 18:31:50,475 - on stmt: $198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:50,475 - find_def var='n' stmt=$198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:50,475 - replaced with: $198binary_subscr.31 = getitem(value=peaks, index=n.7, fn=<built-in function getitem>)
2024-09-04 18:31:50,475 - on stmt: bool200 = global(bool: <class 'bool'>)
2024-09-04 18:31:50,475 - on stmt: $200pred = call bool200($198binary_subscr.31, func=bool200, args=(Var($198binary_subscr.31, utils.py:1235),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,475 - on stmt: branch $200pred, 212, 202
2024-09-04 18:31:50,475 - ==== SSA block rewrite pass on 202
2024-09-04 18:31:50,475 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313594D30>
2024-09-04 18:31:50,475 - on stmt: $const204.1 = const(int, 1)
2024-09-04 18:31:50,475 - on stmt: $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:50,475 - find_def var='n' stmt=$206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:50,475 - find_def_from_top label 202
2024-09-04 18:31:50,475 - idom 134 from label 202
2024-09-04 18:31:50,475 - find_def_from_bottom label 134
2024-09-04 18:31:50,475 - replaced with: $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.7, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:50,475 - on stmt: n.2 = $206inplace_add.2
2024-09-04 18:31:50,475 - on stmt: jump 333
2024-09-04 18:31:50,475 - ==== SSA block rewrite pass on 212
2024-09-04 18:31:50,475 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313594D30>
2024-09-04 18:31:50,475 - on stmt: $212load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:50,475 - on stmt: $214load_method.1 = getattr(value=$212load_global.0, attr=mean)
2024-09-04 18:31:50,475 - on stmt: $218load_global.3 = global(max: <built-in function max>)
2024-09-04 18:31:50,475 - on stmt: $const220.4 = const(int, 0)
2024-09-04 18:31:50,475 - on stmt: $226binary_subtract.7 = n - pre_avg
2024-09-04 18:31:50,475 - find_def var='n' stmt=$226binary_subtract.7 = n - pre_avg
2024-09-04 18:31:50,475 - find_def_from_top label 212
2024-09-04 18:31:50,475 - idom 134 from label 212
2024-09-04 18:31:50,475 - find_def_from_bottom label 134
2024-09-04 18:31:50,475 - replaced with: $226binary_subtract.7 = n.7 - pre_avg
2024-09-04 18:31:50,475 - on stmt: $228call_function.8 = call $218load_global.3($const220.4, $226binary_subtract.7, func=$218load_global.3, args=[Var($const220.4, utils.py:1239), Var($226binary_subtract.7, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,475 - on stmt: $230load_global.9 = global(min: <built-in function min>)
2024-09-04 18:31:50,475 - on stmt: $236binary_add.12 = n + post_avg
2024-09-04 18:31:50,475 - find_def var='n' stmt=$236binary_add.12 = n + post_avg
2024-09-04 18:31:50,475 - find_def_from_top label 212
2024-09-04 18:31:50,475 - idom 134 from label 212
2024-09-04 18:31:50,475 - find_def_from_bottom label 134
2024-09-04 18:31:50,475 - replaced with: $236binary_add.12 = n.7 + post_avg
2024-09-04 18:31:50,475 - on stmt: $240load_attr.14 = getattr(value=x, attr=shape)
2024-09-04 18:31:50,475 - on stmt: $const242.15 = const(int, 0)
2024-09-04 18:31:50,475 - on stmt: $244binary_subscr.16 = static_getitem(value=$240load_attr.14, index=0, index_var=$const242.15, fn=<built-in function getitem>)
2024-09-04 18:31:50,475 - on stmt: $246call_function.17 = call $230load_global.9($236binary_add.12, $244binary_subscr.16, func=$230load_global.9, args=[Var($236binary_add.12, utils.py:1239), Var($244binary_subscr.16, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,475 - on stmt: $248build_slice.18 = global(slice: <class 'slice'>)
2024-09-04 18:31:50,475 - on stmt: $248build_slice.19 = call $248build_slice.18($228call_function.8, $246call_function.17, func=$248build_slice.18, args=(Var($228call_function.8, utils.py:1239), Var($246call_function.17, utils.py:1239)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,475 - on stmt: $250binary_subscr.20 = getitem(value=x, index=$248build_slice.19, fn=<built-in function getitem>)
2024-09-04 18:31:50,475 - on stmt: avgn = call $214load_method.1($250binary_subscr.20, func=$214load_method.1, args=[Var($250binary_subscr.20, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,475 - on stmt: $262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:50,475 - find_def var='n' stmt=$262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:50,475 - find_def_from_top label 212
2024-09-04 18:31:50,475 - idom 134 from label 212
2024-09-04 18:31:50,475 - find_def_from_bottom label 134
2024-09-04 18:31:50,475 - replaced with: $262binary_subscr.26 = getitem(value=peaks, index=n.7, fn=<built-in function getitem>)
2024-09-04 18:31:50,475 - on stmt: $268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:50,475 - find_def var='n' stmt=$268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:50,475 - find_def_from_top label 212
2024-09-04 18:31:50,475 - idom 134 from label 212
2024-09-04 18:31:50,475 - find_def_from_bottom label 134
2024-09-04 18:31:50,475 - replaced with: $268binary_subscr.29 = getitem(value=x, index=n.7, fn=<built-in function getitem>)
2024-09-04 18:31:50,475 - on stmt: $274binary_add.32 = avgn + delta
2024-09-04 18:31:50,475 - on stmt: $276compare_op.33 = $268binary_subscr.29 >= $274binary_add.32
2024-09-04 18:31:50,475 - on stmt: $278inplace_and.34 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$262binary_subscr.26, rhs=$276compare_op.33, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:50,475 - on stmt: peaks[n] = $278inplace_and.34
2024-09-04 18:31:50,475 - find_def var='n' stmt=peaks[n] = $278inplace_and.34
2024-09-04 18:31:50,475 - find_def_from_top label 212
2024-09-04 18:31:50,475 - idom 134 from label 212
2024-09-04 18:31:50,475 - find_def_from_bottom label 134
2024-09-04 18:31:50,475 - replaced with: peaks[n.7] = $278inplace_and.34
2024-09-04 18:31:50,475 - on stmt: $288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:50,475 - find_def var='n' stmt=$288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:50,475 - find_def_from_top label 212
2024-09-04 18:31:50,475 - idom 134 from label 212
2024-09-04 18:31:50,475 - find_def_from_bottom label 134
2024-09-04 18:31:50,475 - replaced with: $288binary_subscr.37 = getitem(value=peaks, index=n.7, fn=<built-in function getitem>)
2024-09-04 18:31:50,475 - on stmt: bool290 = global(bool: <class 'bool'>)
2024-09-04 18:31:50,475 - on stmt: $290pred = call bool290($288binary_subscr.37, func=bool290, args=(Var($288binary_subscr.37, utils.py:1242),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,475 - on stmt: branch $290pred, 302, 292
2024-09-04 18:31:50,475 - ==== SSA block rewrite pass on 292
2024-09-04 18:31:50,475 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313594D30>
2024-09-04 18:31:50,475 - on stmt: $const294.1 = const(int, 1)
2024-09-04 18:31:50,475 - on stmt: $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:50,475 - find_def var='n' stmt=$296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:50,475 - find_def_from_top label 292
2024-09-04 18:31:50,475 - idom 212 from label 292
2024-09-04 18:31:50,475 - find_def_from_bottom label 212
2024-09-04 18:31:50,491 - find_def_from_top label 212
2024-09-04 18:31:50,491 - idom 134 from label 212
2024-09-04 18:31:50,491 - find_def_from_bottom label 134
2024-09-04 18:31:50,491 - replaced with: $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.7, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:50,491 - on stmt: n.3 = $296inplace_add.2
2024-09-04 18:31:50,491 - on stmt: jump 333
2024-09-04 18:31:50,491 - ==== SSA block rewrite pass on 302
2024-09-04 18:31:50,491 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313594D30>
2024-09-04 18:31:50,491 - on stmt: $const306.2 = const(int, 1)
2024-09-04 18:31:50,491 - on stmt: $308binary_add.3 = wait + $const306.2
2024-09-04 18:31:50,491 - on stmt: $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:50,491 - find_def var='n' stmt=$310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:50,491 - find_def_from_top label 302
2024-09-04 18:31:50,491 - idom 212 from label 302
2024-09-04 18:31:50,491 - find_def_from_bottom label 212
2024-09-04 18:31:50,491 - find_def_from_top label 212
2024-09-04 18:31:50,491 - idom 134 from label 212
2024-09-04 18:31:50,491 - find_def_from_bottom label 134
2024-09-04 18:31:50,491 - replaced with: $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.7, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:50,492 - on stmt: n.4 = $310inplace_add.4
2024-09-04 18:31:50,492 - on stmt: $318load_attr.7 = getattr(value=x, attr=shape)
2024-09-04 18:31:50,492 - on stmt: $const320.8 = const(int, 0)
2024-09-04 18:31:50,492 - on stmt: $322binary_subscr.9 = static_getitem(value=$318load_attr.7, index=0, index_var=$const320.8, fn=<built-in function getitem>)
2024-09-04 18:31:50,492 - on stmt: $324compare_op.10 = n < $322binary_subscr.9
2024-09-04 18:31:50,492 - find_def var='n' stmt=$324compare_op.10 = n < $322binary_subscr.9
2024-09-04 18:31:50,492 - replaced with: $324compare_op.10 = n.4 < $322binary_subscr.9
2024-09-04 18:31:50,492 - on stmt: bool326 = global(bool: <class 'bool'>)
2024-09-04 18:31:50,492 - on stmt: $326pred = call bool326($324compare_op.10, func=bool326, args=(Var($324compare_op.10, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,493 - on stmt: branch $326pred, 134, 328
2024-09-04 18:31:50,493 - ==== SSA block rewrite pass on 328
2024-09-04 18:31:50,493 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313594D30>
2024-09-04 18:31:50,493 - on stmt: $const328.0 = const(NoneType, None)
2024-09-04 18:31:50,493 - on stmt: $330return_value.1 = cast(value=$const328.0)
2024-09-04 18:31:50,493 - on stmt: return $330return_value.1
2024-09-04 18:31:50,493 - ==== SSA block rewrite pass on 332
2024-09-04 18:31:50,493 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313594D30>
2024-09-04 18:31:50,493 - on stmt: $const332.0 = const(NoneType, None)
2024-09-04 18:31:50,493 - on stmt: $334return_value.1 = cast(value=$const332.0)
2024-09-04 18:31:50,493 - on stmt: return $334return_value.1
2024-09-04 18:31:50,493 - ==== SSA block rewrite pass on 333
2024-09-04 18:31:50,494 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313594D30>
2024-09-04 18:31:50,494 - on stmt: jump 120
2024-09-04 18:31:50,519 - bytecode dump:
>          0	NOP(arg=None, lineno=570)
           2	LOAD_FAST(arg=0, lineno=571)
           4	LOAD_ATTR(arg=0, lineno=571)
           6	LOAD_CONST(arg=1, lineno=571)
           8	COMPARE_OP(arg=2, lineno=571)
          10	POP_JUMP_IF_FALSE(arg=11, lineno=571)
          12	LOAD_GLOBAL(arg=1, lineno=572)
          14	LOAD_CONST(arg=2, lineno=572)
          16	CALL_FUNCTION(arg=1, lineno=572)
          18	RAISE_VARARGS(arg=1, lineno=572)
>         20	LOAD_GLOBAL(arg=2, lineno=575)
          22	LOAD_METHOD(arg=3, lineno=575)
          24	LOAD_FAST(arg=0, lineno=575)
          26	CALL_METHOD(arg=1, lineno=575)
          28	STORE_FAST(arg=1, lineno=575)
          30	LOAD_GLOBAL(arg=4, lineno=576)
          32	LOAD_FAST(arg=1, lineno=576)
          34	CALL_FUNCTION(arg=1, lineno=576)
          36	LOAD_METHOD(arg=5, lineno=576)
          38	LOAD_CONST(arg=1, lineno=576)
          40	CALL_METHOD(arg=1, lineno=576)
          42	STORE_FAST(arg=2, lineno=576)
          44	LOAD_DEREF(arg=1, lineno=577)
          46	LOAD_FAST(arg=2, lineno=577)
          48	CALL_FUNCTION(arg=1, lineno=577)
          50	POP_JUMP_IF_FALSE(arg=29, lineno=577)
          52	LOAD_FAST(arg=2, lineno=578)
          54	RETURN_VALUE(arg=None, lineno=578)
>         56	LOAD_FAST(arg=1, lineno=580)
          58	GET_ITER(arg=None, lineno=580)
>         60	FOR_ITER(arg=21, lineno=580)
          62	STORE_FAST(arg=3, lineno=580)
          64	LOAD_FAST(arg=3, lineno=581)
          66	LOAD_METHOD(arg=6, lineno=581)
          68	CALL_METHOD(arg=0, lineno=581)
          70	STORE_FAST(arg=4, lineno=581)
          72	LOAD_DEREF(arg=1, lineno=582)
          74	LOAD_FAST(arg=4, lineno=582)
          76	CALL_FUNCTION(arg=1, lineno=582)
          78	POP_JUMP_IF_FALSE(arg=45, lineno=582)
          80	LOAD_FAST(arg=4, lineno=583)
          82	ROT_TWO(arg=None, lineno=583)
          84	POP_TOP(arg=None, lineno=583)
          86	RETURN_VALUE(arg=None, lineno=583)
>         88	LOAD_DEREF(arg=0, lineno=584)
          90	LOAD_FAST(arg=4, lineno=584)
          92	LOAD_FAST(arg=2, lineno=584)
          94	CALL_FUNCTION(arg=2, lineno=584)
          96	POP_JUMP_IF_FALSE(arg=52, lineno=584)
          98	LOAD_FAST(arg=4, lineno=585)
         100	STORE_FAST(arg=2, lineno=585)
>        102	JUMP_ABSOLUTE(arg=31, lineno=585)
>        104	LOAD_FAST(arg=2, lineno=586)
         106	RETURN_VALUE(arg=None, lineno=586)
2024-09-04 18:31:50,519 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:50,520 - stack: []
2024-09-04 18:31:50,520 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:50,520 - dispatch pc=0, inst=NOP(arg=None, lineno=570)
2024-09-04 18:31:50,521 - stack []
2024-09-04 18:31:50,521 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=571)
2024-09-04 18:31:50,521 - stack []
2024-09-04 18:31:50,521 - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=571)
2024-09-04 18:31:50,521 - stack ['$a2.0']
2024-09-04 18:31:50,521 - dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=571)
2024-09-04 18:31:50,521 - stack ['$4load_attr.1']
2024-09-04 18:31:50,521 - dispatch pc=8, inst=COMPARE_OP(arg=2, lineno=571)
2024-09-04 18:31:50,521 - stack ['$4load_attr.1', '$const6.2']
2024-09-04 18:31:50,521 - dispatch pc=10, inst=POP_JUMP_IF_FALSE(arg=11, lineno=571)
2024-09-04 18:31:50,521 - stack ['$8compare_op.3']
2024-09-04 18:31:50,521 - end state. edges=[Edge(pc=12, stack=(), blockstack=(), npush=0), Edge(pc=20, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:50,521 - pending: deque([State(pc_initial=12 nstack_initial=0), State(pc_initial=20 nstack_initial=0)])
2024-09-04 18:31:50,521 - stack: []
2024-09-04 18:31:50,523 - state.pc_initial: State(pc_initial=12 nstack_initial=0)
2024-09-04 18:31:50,523 - dispatch pc=12, inst=LOAD_GLOBAL(arg=1, lineno=572)
2024-09-04 18:31:50,523 - stack []
2024-09-04 18:31:50,523 - dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=572)
2024-09-04 18:31:50,523 - stack ['$12load_global.0']
2024-09-04 18:31:50,524 - dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=572)
2024-09-04 18:31:50,524 - stack ['$12load_global.0', '$const14.1']
2024-09-04 18:31:50,524 - dispatch pc=18, inst=RAISE_VARARGS(arg=1, lineno=572)
2024-09-04 18:31:50,524 - stack ['$16call_function.2']
2024-09-04 18:31:50,524 - end state. edges=[]
2024-09-04 18:31:50,524 - pending: deque([State(pc_initial=20 nstack_initial=0)])
2024-09-04 18:31:50,524 - stack: []
2024-09-04 18:31:50,524 - state.pc_initial: State(pc_initial=20 nstack_initial=0)
2024-09-04 18:31:50,524 - dispatch pc=20, inst=LOAD_GLOBAL(arg=2, lineno=575)
2024-09-04 18:31:50,524 - stack []
2024-09-04 18:31:50,524 - dispatch pc=22, inst=LOAD_METHOD(arg=3, lineno=575)
2024-09-04 18:31:50,524 - stack ['$20load_global.0']
2024-09-04 18:31:50,524 - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=575)
2024-09-04 18:31:50,524 - stack ['$22load_method.1']
2024-09-04 18:31:50,524 - dispatch pc=26, inst=CALL_METHOD(arg=1, lineno=575)
2024-09-04 18:31:50,524 - stack ['$22load_method.1', '$a24.2']
2024-09-04 18:31:50,524 - dispatch pc=28, inst=STORE_FAST(arg=1, lineno=575)
2024-09-04 18:31:50,524 - stack ['$26call_method.3']
2024-09-04 18:31:50,524 - dispatch pc=30, inst=LOAD_GLOBAL(arg=4, lineno=576)
2024-09-04 18:31:50,524 - stack []
2024-09-04 18:31:50,526 - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=576)
2024-09-04 18:31:50,526 - stack ['$30load_global.4']
2024-09-04 18:31:50,526 - dispatch pc=34, inst=CALL_FUNCTION(arg=1, lineno=576)
2024-09-04 18:31:50,526 - stack ['$30load_global.4', '$it32.5']
2024-09-04 18:31:50,526 - dispatch pc=36, inst=LOAD_METHOD(arg=5, lineno=576)
2024-09-04 18:31:50,526 - stack ['$34call_function.6']
2024-09-04 18:31:50,526 - dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=576)
2024-09-04 18:31:50,526 - stack ['$36load_method.7']
2024-09-04 18:31:50,526 - dispatch pc=40, inst=CALL_METHOD(arg=1, lineno=576)
2024-09-04 18:31:50,527 - stack ['$36load_method.7', '$const38.8']
2024-09-04 18:31:50,527 - dispatch pc=42, inst=STORE_FAST(arg=2, lineno=576)
2024-09-04 18:31:50,527 - stack ['$40call_method.9']
2024-09-04 18:31:50,527 - dispatch pc=44, inst=LOAD_DEREF(arg=1, lineno=577)
2024-09-04 18:31:50,527 - stack []
2024-09-04 18:31:50,527 - dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=577)
2024-09-04 18:31:50,527 - stack ['$44load_deref.10']
2024-09-04 18:31:50,527 - dispatch pc=48, inst=CALL_FUNCTION(arg=1, lineno=577)
2024-09-04 18:31:50,527 - stack ['$44load_deref.10', '$max_value46.11']
2024-09-04 18:31:50,527 - dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=29, lineno=577)
2024-09-04 18:31:50,528 - stack ['$48call_function.12']
2024-09-04 18:31:50,528 - end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=56, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:50,528 - pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=56 nstack_initial=0)])
2024-09-04 18:31:50,528 - stack: []
2024-09-04 18:31:50,528 - state.pc_initial: State(pc_initial=52 nstack_initial=0)
2024-09-04 18:31:50,528 - dispatch pc=52, inst=LOAD_FAST(arg=2, lineno=578)
2024-09-04 18:31:50,528 - stack []
2024-09-04 18:31:50,528 - dispatch pc=54, inst=RETURN_VALUE(arg=None, lineno=578)
2024-09-04 18:31:50,528 - stack ['$max_value52.0']
2024-09-04 18:31:50,529 - end state. edges=[]
2024-09-04 18:31:50,529 - pending: deque([State(pc_initial=56 nstack_initial=0)])
2024-09-04 18:31:50,529 - stack: []
2024-09-04 18:31:50,529 - state.pc_initial: State(pc_initial=56 nstack_initial=0)
2024-09-04 18:31:50,529 - dispatch pc=56, inst=LOAD_FAST(arg=1, lineno=580)
2024-09-04 18:31:50,529 - stack []
2024-09-04 18:31:50,529 - dispatch pc=58, inst=GET_ITER(arg=None, lineno=580)
2024-09-04 18:31:50,529 - stack ['$it56.0']
2024-09-04 18:31:50,529 - end state. edges=[Edge(pc=60, stack=('$58get_iter.1',), blockstack=(), npush=0)]
2024-09-04 18:31:50,529 - pending: deque([State(pc_initial=60 nstack_initial=1)])
2024-09-04 18:31:50,530 - stack: ['$phi60.0']
2024-09-04 18:31:50,530 - state.pc_initial: State(pc_initial=60 nstack_initial=1)
2024-09-04 18:31:50,530 - dispatch pc=60, inst=FOR_ITER(arg=21, lineno=580)
2024-09-04 18:31:50,530 - stack ['$phi60.0']
2024-09-04 18:31:50,530 - end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=('$phi60.0', '$60for_iter.2'), blockstack=(), npush=0)]
2024-09-04 18:31:50,530 - pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=62 nstack_initial=2)])
2024-09-04 18:31:50,531 - stack: []
2024-09-04 18:31:50,531 - state.pc_initial: State(pc_initial=104 nstack_initial=0)
2024-09-04 18:31:50,531 - dispatch pc=104, inst=LOAD_FAST(arg=2, lineno=586)
2024-09-04 18:31:50,531 - stack []
2024-09-04 18:31:50,531 - dispatch pc=106, inst=RETURN_VALUE(arg=None, lineno=586)
2024-09-04 18:31:50,531 - stack ['$max_value104.0']
2024-09-04 18:31:50,531 - end state. edges=[]
2024-09-04 18:31:50,531 - pending: deque([State(pc_initial=62 nstack_initial=2)])
2024-09-04 18:31:50,531 - stack: ['$phi62.0', '$phi62.1']
2024-09-04 18:31:50,531 - state.pc_initial: State(pc_initial=62 nstack_initial=2)
2024-09-04 18:31:50,532 - dispatch pc=62, inst=STORE_FAST(arg=3, lineno=580)
2024-09-04 18:31:50,532 - stack ['$phi62.0', '$phi62.1']
2024-09-04 18:31:50,532 - dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=581)
2024-09-04 18:31:50,532 - stack ['$phi62.0']
2024-09-04 18:31:50,532 - dispatch pc=66, inst=LOAD_METHOD(arg=6, lineno=581)
2024-09-04 18:31:50,532 - stack ['$phi62.0', '$view64.2']
2024-09-04 18:31:50,532 - dispatch pc=68, inst=CALL_METHOD(arg=0, lineno=581)
2024-09-04 18:31:50,532 - stack ['$phi62.0', '$66load_method.3']
2024-09-04 18:31:50,532 - dispatch pc=70, inst=STORE_FAST(arg=4, lineno=581)
2024-09-04 18:31:50,532 - stack ['$phi62.0', '$68call_method.4']
2024-09-04 18:31:50,533 - dispatch pc=72, inst=LOAD_DEREF(arg=1, lineno=582)
2024-09-04 18:31:50,533 - stack ['$phi62.0']
2024-09-04 18:31:50,533 - dispatch pc=74, inst=LOAD_FAST(arg=4, lineno=582)
2024-09-04 18:31:50,533 - stack ['$phi62.0', '$72load_deref.5']
2024-09-04 18:31:50,533 - dispatch pc=76, inst=CALL_FUNCTION(arg=1, lineno=582)
2024-09-04 18:31:50,533 - stack ['$phi62.0', '$72load_deref.5', '$v74.6']
2024-09-04 18:31:50,533 - dispatch pc=78, inst=POP_JUMP_IF_FALSE(arg=45, lineno=582)
2024-09-04 18:31:50,533 - stack ['$phi62.0', '$76call_function.7']
2024-09-04 18:31:50,533 - end state. edges=[Edge(pc=80, stack=('$phi62.0',), blockstack=(), npush=0), Edge(pc=88, stack=('$phi62.0',), blockstack=(), npush=0)]
2024-09-04 18:31:50,534 - pending: deque([State(pc_initial=80 nstack_initial=1), State(pc_initial=88 nstack_initial=1)])
2024-09-04 18:31:50,534 - stack: ['$phi80.0']
2024-09-04 18:31:50,534 - state.pc_initial: State(pc_initial=80 nstack_initial=1)
2024-09-04 18:31:50,534 - dispatch pc=80, inst=LOAD_FAST(arg=4, lineno=583)
2024-09-04 18:31:50,534 - stack ['$phi80.0']
2024-09-04 18:31:50,534 - dispatch pc=82, inst=ROT_TWO(arg=None, lineno=583)
2024-09-04 18:31:50,535 - stack ['$phi80.0', '$v80.1']
2024-09-04 18:31:50,535 - dispatch pc=84, inst=POP_TOP(arg=None, lineno=583)
2024-09-04 18:31:50,535 - stack ['$v80.1', '$phi80.0']
2024-09-04 18:31:50,535 - dispatch pc=86, inst=RETURN_VALUE(arg=None, lineno=583)
2024-09-04 18:31:50,535 - stack ['$v80.1']
2024-09-04 18:31:50,535 - end state. edges=[]
2024-09-04 18:31:50,535 - pending: deque([State(pc_initial=88 nstack_initial=1)])
2024-09-04 18:31:50,535 - stack: ['$phi88.0']
2024-09-04 18:31:50,535 - state.pc_initial: State(pc_initial=88 nstack_initial=1)
2024-09-04 18:31:50,536 - dispatch pc=88, inst=LOAD_DEREF(arg=0, lineno=584)
2024-09-04 18:31:50,536 - stack ['$phi88.0']
2024-09-04 18:31:50,536 - dispatch pc=90, inst=LOAD_FAST(arg=4, lineno=584)
2024-09-04 18:31:50,536 - stack ['$phi88.0', '$88load_deref.1']
2024-09-04 18:31:50,536 - dispatch pc=92, inst=LOAD_FAST(arg=2, lineno=584)
2024-09-04 18:31:50,536 - stack ['$phi88.0', '$88load_deref.1', '$v90.2']
2024-09-04 18:31:50,536 - dispatch pc=94, inst=CALL_FUNCTION(arg=2, lineno=584)
2024-09-04 18:31:50,536 - stack ['$phi88.0', '$88load_deref.1', '$v90.2', '$max_value92.3']
2024-09-04 18:31:50,536 - dispatch pc=96, inst=POP_JUMP_IF_FALSE(arg=52, lineno=584)
2024-09-04 18:31:50,537 - stack ['$phi88.0', '$94call_function.4']
2024-09-04 18:31:50,537 - end state. edges=[Edge(pc=98, stack=('$phi88.0',), blockstack=(), npush=0), Edge(pc=102, stack=('$phi88.0',), blockstack=(), npush=0)]
2024-09-04 18:31:50,537 - pending: deque([State(pc_initial=98 nstack_initial=1), State(pc_initial=102 nstack_initial=1)])
2024-09-04 18:31:50,537 - stack: ['$phi98.0']
2024-09-04 18:31:50,537 - state.pc_initial: State(pc_initial=98 nstack_initial=1)
2024-09-04 18:31:50,537 - dispatch pc=98, inst=LOAD_FAST(arg=4, lineno=585)
2024-09-04 18:31:50,537 - stack ['$phi98.0']
2024-09-04 18:31:50,537 - dispatch pc=100, inst=STORE_FAST(arg=2, lineno=585)
2024-09-04 18:31:50,537 - stack ['$phi98.0', '$v98.1']
2024-09-04 18:31:50,538 - end state. edges=[Edge(pc=102, stack=('$phi98.0',), blockstack=(), npush=0)]
2024-09-04 18:31:50,538 - pending: deque([State(pc_initial=102 nstack_initial=1), State(pc_initial=102 nstack_initial=1)])
2024-09-04 18:31:50,538 - stack: ['$phi102.0']
2024-09-04 18:31:50,538 - state.pc_initial: State(pc_initial=102 nstack_initial=1)
2024-09-04 18:31:50,538 - dispatch pc=102, inst=JUMP_ABSOLUTE(arg=31, lineno=585)
2024-09-04 18:31:50,538 - stack ['$phi102.0']
2024-09-04 18:31:50,538 - end state. edges=[Edge(pc=60, stack=('$phi102.0',), blockstack=(), npush=0)]
2024-09-04 18:31:50,538 - pending: deque([State(pc_initial=102 nstack_initial=1), State(pc_initial=60 nstack_initial=1)])
2024-09-04 18:31:50,538 - pending: deque([State(pc_initial=60 nstack_initial=1)])
2024-09-04 18:31:50,539 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:50,539 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=56 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=1): {'$phi60.0'},
             State(pc_initial=62 nstack_initial=2): {'$phi62.1'},
             State(pc_initial=80 nstack_initial=1): set(),
             State(pc_initial=88 nstack_initial=1): set(),
             State(pc_initial=98 nstack_initial=1): set(),
             State(pc_initial=102 nstack_initial=1): set(),
             State(pc_initial=104 nstack_initial=0): set()})
2024-09-04 18:31:50,539 - defmap: {'$phi60.0': State(pc_initial=56 nstack_initial=0),
 '$phi62.1': State(pc_initial=60 nstack_initial=1)}
2024-09-04 18:31:50,540 - phismap: defaultdict(<class 'set'>,
            {'$phi102.0': {('$phi88.0', State(pc_initial=88 nstack_initial=1)),
                           ('$phi98.0', State(pc_initial=98 nstack_initial=1))},
             '$phi60.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0)),
                          ('$phi102.0',
                           State(pc_initial=102 nstack_initial=1))},
             '$phi62.0': {('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi80.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi88.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi98.0': {('$phi88.0', State(pc_initial=88 nstack_initial=1))}})
2024-09-04 18:31:50,540 - changing phismap: defaultdict(<class 'set'>,
            {'$phi102.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi60.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi80.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi88.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi98.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))}})
2024-09-04 18:31:50,541 - changing phismap: defaultdict(<class 'set'>,
            {'$phi102.0': {('$58get_iter.1',
                            State(pc_initial=56 nstack_initial=0))},
             '$phi60.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi80.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi88.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi98.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))}})
2024-09-04 18:31:50,541 - changing phismap: defaultdict(<class 'set'>,
            {'$phi102.0': {('$58get_iter.1',
                            State(pc_initial=56 nstack_initial=0))},
             '$phi60.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi80.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi88.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi98.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))}})
2024-09-04 18:31:50,542 - keep phismap: {'$phi60.0': {('$58get_iter.1', State(pc_initial=56 nstack_initial=0))},
 '$phi62.1': {('$60for_iter.2', State(pc_initial=60 nstack_initial=1))}}
2024-09-04 18:31:50,542 - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=56 nstack_initial=0): {'$phi60.0': '$58get_iter.1'},
             State(pc_initial=60 nstack_initial=1): {'$phi62.1': '$60for_iter.2'}})
2024-09-04 18:31:50,542 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:50,543 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'item': '$a2.0', 'res': '$4load_attr.1'}), (6, {'res': '$const6.2'}), (8, {'lhs': '$4load_attr.1', 'rhs': '$const6.2', 'res': '$8compare_op.3'}), (10, {'pred': '$8compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: (), 20: ()})
2024-09-04 18:31:50,543 - block_infos State(pc_initial=12 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$const14.1'}), (16, {'func': '$12load_global.0', 'args': ['$const14.1'], 'res': '$16call_function.2'}), (18, {'exc': '$16call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:50,543 - block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$20load_global.0'}), (22, {'item': '$20load_global.0', 'res': '$22load_method.1'}), (24, {'res': '$a24.2'}), (26, {'func': '$22load_method.1', 'args': ['$a24.2'], 'res': '$26call_method.3'}), (28, {'value': '$26call_method.3'}), (30, {'res': '$30load_global.4'}), (32, {'res': '$it32.5'}), (34, {'func': '$30load_global.4', 'args': ['$it32.5'], 'res': '$34call_function.6'}), (36, {'item': '$34call_function.6', 'res': '$36load_method.7'}), (38, {'res': '$const38.8'}), (40, {'func': '$36load_method.7', 'args': ['$const38.8'], 'res': '$40call_method.9'}), (42, {'value': '$40call_method.9'}), (44, {'res': '$44load_deref.10'}), (46, {'res': '$max_value46.11'}), (48, {'func': '$44load_deref.10', 'args': ['$max_value46.11'], 'res': '$48call_function.12'}), (50, {'pred': '$48call_function.12'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 56: ()})
2024-09-04 18:31:50,543 - block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$max_value52.0'}), (54, {'retval': '$max_value52.0', 'castval': '$54return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:50,543 - block_infos State(pc_initial=56 nstack_initial=0):
AdaptBlockInfo(insts=((56, {'res': '$it56.0'}), (58, {'value': '$it56.0', 'res': '$58get_iter.1'})), outgoing_phis={'$phi60.0': '$58get_iter.1'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$58get_iter.1',)})
2024-09-04 18:31:50,543 - block_infos State(pc_initial=60 nstack_initial=1):
AdaptBlockInfo(insts=((60, {'iterator': '$phi60.0', 'pair': '$60for_iter.1', 'indval': '$60for_iter.2', 'pred': '$60for_iter.3'}),), outgoing_phis={'$phi62.1': '$60for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 62: ('$phi60.0', '$60for_iter.2')})
2024-09-04 18:31:50,543 - block_infos State(pc_initial=62 nstack_initial=2):
AdaptBlockInfo(insts=((62, {'value': '$phi62.1'}), (64, {'res': '$view64.2'}), (66, {'item': '$view64.2', 'res': '$66load_method.3'}), (68, {'func': '$66load_method.3', 'args': [], 'res': '$68call_method.4'}), (70, {'value': '$68call_method.4'}), (72, {'res': '$72load_deref.5'}), (74, {'res': '$v74.6'}), (76, {'func': '$72load_deref.5', 'args': ['$v74.6'], 'res': '$76call_function.7'}), (78, {'pred': '$76call_function.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi62.0',), 88: ('$phi62.0',)})
2024-09-04 18:31:50,544 - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'res': '$v80.1'}), (86, {'retval': '$v80.1', 'castval': '$86return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:50,544 - block_infos State(pc_initial=88 nstack_initial=1):
AdaptBlockInfo(insts=((88, {'res': '$88load_deref.1'}), (90, {'res': '$v90.2'}), (92, {'res': '$max_value92.3'}), (94, {'func': '$88load_deref.1', 'args': ['$v90.2', '$max_value92.3'], 'res': '$94call_function.4'}), (96, {'pred': '$94call_function.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={98: ('$phi88.0',), 102: ('$phi88.0',)})
2024-09-04 18:31:50,544 - block_infos State(pc_initial=98 nstack_initial=1):
AdaptBlockInfo(insts=((98, {'res': '$v98.1'}), (100, {'value': '$v98.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={102: ('$phi98.0',)})
2024-09-04 18:31:50,544 - block_infos State(pc_initial=102 nstack_initial=1):
AdaptBlockInfo(insts=((102, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$phi102.0',)})
2024-09-04 18:31:50,544 - block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$max_value104.0'}), (106, {'retval': '$max_value104.0', 'castval': '$106return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:50,549 - label 0:
    a = arg(0, name=a)                       ['a']
    $4load_attr.1 = getattr(value=a, attr=size) ['$4load_attr.1', 'a']
    $const6.2 = const(int, 0)                ['$const6.2']
    $8compare_op.3 = $4load_attr.1 == $const6.2 ['$4load_attr.1', '$8compare_op.3', '$const6.2']
    bool10 = global(bool: <class 'bool'>)    ['bool10']
    $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:571),), kws=(), vararg=None, varkwarg=None, target=None) ['$10pred', '$8compare_op.3', 'bool10']
    branch $10pred, 12, 20                   ['$10pred']
label 12:
    $12load_global.0 = global(ValueError: <class 'ValueError'>) ['$12load_global.0']
    $const14.1 = const(str, zero-size array to reduction operation maximum which has no identity) ['$const14.1']
    $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:572)], kws=(), vararg=None, varkwarg=None, target=None) ['$12load_global.0', '$16call_function.2', '$const14.1']
    raise $16call_function.2                 ['$16call_function.2']
label 20:
    $20load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$20load_global.0']
    $22load_method.1 = getattr(value=$20load_global.0, attr=nditer) ['$20load_global.0', '$22load_method.1']
    it = call $22load_method.1(a, func=$22load_method.1, args=[Var(a, arraymath.py:570)], kws=(), vararg=None, varkwarg=None, target=None) ['$22load_method.1', 'a', 'it']
    $30load_global.4 = global(next: <built-in function next>) ['$30load_global.4']
    $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.4', '$34call_function.6', 'it']
    $36load_method.7 = getattr(value=$34call_function.6, attr=take) ['$34call_function.6', '$36load_method.7']
    $const38.8 = const(int, 0)               ['$const38.8']
    max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None) ['$36load_method.7', '$const38.8', 'max_value']
    $44load_deref.10 = freevar(pre_return_func: <function return_false at 0x0000024317C80940>) ['$44load_deref.10']
    $48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None) ['$44load_deref.10', '$48call_function.12', 'max_value']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48call_function.12, func=bool50, args=(Var($48call_function.12, arraymath.py:577),), kws=(), vararg=None, varkwarg=None, target=None) ['$48call_function.12', '$50pred', 'bool50']
    branch $50pred, 52, 56                   ['$50pred']
label 52:
    $54return_value.1 = cast(value=max_value) ['$54return_value.1', 'max_value']
    return $54return_value.1                 ['$54return_value.1']
label 56:
    $58get_iter.1 = getiter(value=it)        ['$58get_iter.1', 'it']
    $phi60.0 = $58get_iter.1                 ['$58get_iter.1', '$phi60.0']
    jump 60                                  []
label 60:
    $60for_iter.1 = iternext(value=$phi60.0) ['$60for_iter.1', '$phi60.0']
    $60for_iter.2 = pair_first(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.2']
    $60for_iter.3 = pair_second(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.3']
    $phi62.1 = $60for_iter.2                 ['$60for_iter.2', '$phi62.1']
    branch $60for_iter.3, 62, 104            ['$60for_iter.3']
label 62:
    view = $phi62.1                          ['$phi62.1', 'view']
    $66load_method.3 = getattr(value=view, attr=item) ['$66load_method.3', 'view']
    v = call $66load_method.3(func=$66load_method.3, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_method.3', 'v']
    $72load_deref.5 = freevar(pre_return_func: <function return_false at 0x0000024317C80940>) ['$72load_deref.5']
    $76call_function.7 = call $72load_deref.5(v, func=$72load_deref.5, args=[Var(v, arraymath.py:581)], kws=(), vararg=None, varkwarg=None, target=None) ['$72load_deref.5', '$76call_function.7', 'v']
    bool78 = global(bool: <class 'bool'>)    ['bool78']
    $78pred = call bool78($76call_function.7, func=bool78, args=(Var($76call_function.7, arraymath.py:582),), kws=(), vararg=None, varkwarg=None, target=None) ['$76call_function.7', '$78pred', 'bool78']
    branch $78pred, 80, 88                   ['$78pred']
label 80:
    $86return_value.2 = cast(value=v)        ['$86return_value.2', 'v']
    return $86return_value.2                 ['$86return_value.2']
label 88:
    $88load_deref.1 = freevar(comparator: <function max_comparator at 0x0000024317C80430>) ['$88load_deref.1']
    $94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None) ['$88load_deref.1', '$94call_function.4', 'max_value', 'v']
    bool96 = global(bool: <class 'bool'>)    ['bool96']
    $96pred = call bool96($94call_function.4, func=bool96, args=(Var($94call_function.4, arraymath.py:584),), kws=(), vararg=None, varkwarg=None, target=None) ['$94call_function.4', '$96pred', 'bool96']
    branch $96pred, 98, 102                  ['$96pred']
label 98:
    max_value = v                            ['max_value', 'v']
    jump 102                                 []
label 102:
    jump 60                                  []
label 104:
    $106return_value.1 = cast(value=max_value) ['$106return_value.1', 'max_value']
    return $106return_value.1                ['$106return_value.1']

2024-09-04 18:31:50,585 - ==== SSA block analysis pass on 0
2024-09-04 18:31:50,585 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313652680>
2024-09-04 18:31:50,585 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:50,586 - on stmt: $4load_attr.1 = getattr(value=a, attr=size)
2024-09-04 18:31:50,586 - on stmt: $const6.2 = const(int, 0)
2024-09-04 18:31:50,586 - on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2024-09-04 18:31:50,586 - on stmt: bool10 = global(bool: <class 'bool'>)
2024-09-04 18:31:50,586 - on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:571),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,586 - on stmt: branch $10pred, 12, 20
2024-09-04 18:31:50,587 - ==== SSA block analysis pass on 12
2024-09-04 18:31:50,587 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313652680>
2024-09-04 18:31:50,587 - on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:50,587 - on stmt: $const14.1 = const(str, zero-size array to reduction operation maximum which has no identity)
2024-09-04 18:31:50,587 - on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:572)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,587 - on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
2024-09-04 18:31:50,587 - ==== SSA block analysis pass on 20
2024-09-04 18:31:50,587 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313652680>
2024-09-04 18:31:50,588 - on stmt: $20load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:50,588 - on stmt: $22load_method.1 = getattr(value=$20load_global.0, attr=nditer)
2024-09-04 18:31:50,588 - on stmt: it = call $22load_method.1(a, func=$22load_method.1, args=[Var(a, arraymath.py:570)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,588 - on stmt: $30load_global.4 = global(next: <built-in function next>)
2024-09-04 18:31:50,588 - on stmt: $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,588 - on stmt: $36load_method.7 = getattr(value=$34call_function.6, attr=take)
2024-09-04 18:31:50,588 - on stmt: $const38.8 = const(int, 0)
2024-09-04 18:31:50,589 - on stmt: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,589 - on stmt: $44load_deref.10 = freevar(pre_return_func: <function return_false at 0x0000024317C80940>)
2024-09-04 18:31:50,589 - on stmt: $48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,591 - on stmt: bool50 = global(bool: <class 'bool'>)
2024-09-04 18:31:50,591 - on stmt: $50pred = call bool50($48call_function.12, func=bool50, args=(Var($48call_function.12, arraymath.py:577),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,591 - on stmt: branch $50pred, 52, 56
2024-09-04 18:31:50,592 - ==== SSA block analysis pass on 52
2024-09-04 18:31:50,592 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313652680>
2024-09-04 18:31:50,592 - on stmt: $54return_value.1 = cast(value=max_value)
2024-09-04 18:31:50,592 - on stmt: return $54return_value.1
2024-09-04 18:31:50,592 - ==== SSA block analysis pass on 56
2024-09-04 18:31:50,592 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313652680>
2024-09-04 18:31:50,592 - on stmt: $58get_iter.1 = getiter(value=it)
2024-09-04 18:31:50,592 - on stmt: $phi60.0 = $58get_iter.1
2024-09-04 18:31:50,592 - on stmt: jump 60
2024-09-04 18:31:50,593 - ==== SSA block analysis pass on 60
2024-09-04 18:31:50,593 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313652680>
2024-09-04 18:31:50,593 - on stmt: $60for_iter.1 = iternext(value=$phi60.0)
2024-09-04 18:31:50,593 - on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
2024-09-04 18:31:50,593 - on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
2024-09-04 18:31:50,593 - on stmt: $phi62.1 = $60for_iter.2
2024-09-04 18:31:50,593 - on stmt: branch $60for_iter.3, 62, 104
2024-09-04 18:31:50,593 - ==== SSA block analysis pass on 62
2024-09-04 18:31:50,593 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313652680>
2024-09-04 18:31:50,594 - on stmt: view = $phi62.1
2024-09-04 18:31:50,594 - on stmt: $66load_method.3 = getattr(value=view, attr=item)
2024-09-04 18:31:50,594 - on stmt: v = call $66load_method.3(func=$66load_method.3, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,594 - on stmt: $72load_deref.5 = freevar(pre_return_func: <function return_false at 0x0000024317C80940>)
2024-09-04 18:31:50,594 - on stmt: $76call_function.7 = call $72load_deref.5(v, func=$72load_deref.5, args=[Var(v, arraymath.py:581)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,594 - on stmt: bool78 = global(bool: <class 'bool'>)
2024-09-04 18:31:50,594 - on stmt: $78pred = call bool78($76call_function.7, func=bool78, args=(Var($76call_function.7, arraymath.py:582),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,595 - on stmt: branch $78pred, 80, 88
2024-09-04 18:31:50,595 - ==== SSA block analysis pass on 80
2024-09-04 18:31:50,595 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313652680>
2024-09-04 18:31:50,595 - on stmt: $86return_value.2 = cast(value=v)
2024-09-04 18:31:50,595 - on stmt: return $86return_value.2
2024-09-04 18:31:50,595 - ==== SSA block analysis pass on 88
2024-09-04 18:31:50,595 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313652680>
2024-09-04 18:31:50,595 - on stmt: $88load_deref.1 = freevar(comparator: <function max_comparator at 0x0000024317C80430>)
2024-09-04 18:31:50,595 - on stmt: $94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,596 - on stmt: bool96 = global(bool: <class 'bool'>)
2024-09-04 18:31:50,596 - on stmt: $96pred = call bool96($94call_function.4, func=bool96, args=(Var($94call_function.4, arraymath.py:584),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,596 - on stmt: branch $96pred, 98, 102
2024-09-04 18:31:50,596 - ==== SSA block analysis pass on 98
2024-09-04 18:31:50,596 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313652680>
2024-09-04 18:31:50,596 - on stmt: max_value = v
2024-09-04 18:31:50,596 - on stmt: jump 102
2024-09-04 18:31:50,597 - ==== SSA block analysis pass on 102
2024-09-04 18:31:50,597 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313652680>
2024-09-04 18:31:50,597 - on stmt: jump 60
2024-09-04 18:31:50,597 - ==== SSA block analysis pass on 104
2024-09-04 18:31:50,597 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313652680>
2024-09-04 18:31:50,597 - on stmt: $106return_value.1 = cast(value=max_value)
2024-09-04 18:31:50,597 - on stmt: return $106return_value.1
2024-09-04 18:31:50,599 - defs defaultdict(<class 'list'>,
            {'$106return_value.1': [(<numba.core.ir.Assign object at 0x0000024313632680>,
                                     104)],
             '$10pred': [(<numba.core.ir.Assign object at 0x0000024313A4CDF0>,
                          0)],
             '$12load_global.0': [(<numba.core.ir.Assign object at 0x0000024313A4C0A0>,
                                   12)],
             '$16call_function.2': [(<numba.core.ir.Assign object at 0x0000024313A4D090>,
                                     12)],
             '$20load_global.0': [(<numba.core.ir.Assign object at 0x0000024313A4C430>,
                                   20)],
             '$22load_method.1': [(<numba.core.ir.Assign object at 0x0000024313A4E980>,
                                   20)],
             '$30load_global.4': [(<numba.core.ir.Assign object at 0x0000024313A4E590>,
                                   20)],
             '$34call_function.6': [(<numba.core.ir.Assign object at 0x0000024313A4C250>,
                                     20)],
             '$36load_method.7': [(<numba.core.ir.Assign object at 0x0000024313A4CE20>,
                                   20)],
             '$44load_deref.10': [(<numba.core.ir.Assign object at 0x0000024313A4C8B0>,
                                   20)],
             '$48call_function.12': [(<numba.core.ir.Assign object at 0x0000024313A4E4A0>,
                                      20)],
             '$4load_attr.1': [(<numba.core.ir.Assign object at 0x00000243131F5900>,
                                0)],
             '$50pred': [(<numba.core.ir.Assign object at 0x0000024313A4F7F0>,
                          20)],
             '$54return_value.1': [(<numba.core.ir.Assign object at 0x0000024313A4FC10>,
                                    52)],
             '$58get_iter.1': [(<numba.core.ir.Assign object at 0x0000024313A4FB20>,
                                56)],
             '$60for_iter.1': [(<numba.core.ir.Assign object at 0x0000024313633B80>,
                                60)],
             '$60for_iter.2': [(<numba.core.ir.Assign object at 0x00000243136336D0>,
                                60)],
             '$60for_iter.3': [(<numba.core.ir.Assign object at 0x0000024313633130>,
                                60)],
             '$66load_method.3': [(<numba.core.ir.Assign object at 0x0000024313631390>,
                                   62)],
             '$72load_deref.5': [(<numba.core.ir.Assign object at 0x0000024313631000>,
                                  62)],
             '$76call_function.7': [(<numba.core.ir.Assign object at 0x0000024313630CD0>,
                                     62)],
             '$78pred': [(<numba.core.ir.Assign object at 0x0000024313630D90>,
                          62)],
             '$86return_value.2': [(<numba.core.ir.Assign object at 0x00000243136338B0>,
                                    80)],
             '$88load_deref.1': [(<numba.core.ir.Assign object at 0x0000024313630550>,
                                  88)],
             '$8compare_op.3': [(<numba.core.ir.Assign object at 0x00000243131F5CF0>,
                                 0)],
             '$94call_function.4': [(<numba.core.ir.Assign object at 0x0000024313630790>,
                                     88)],
             '$96pred': [(<numba.core.ir.Assign object at 0x0000024313630AF0>,
                          88)],
             '$const14.1': [(<numba.core.ir.Assign object at 0x0000024313A4DED0>,
                             12)],
             '$const38.8': [(<numba.core.ir.Assign object at 0x0000024313A4CB50>,
                             20)],
             '$const6.2': [(<numba.core.ir.Assign object at 0x00000243131F73D0>,
                            0)],
             '$phi60.0': [(<numba.core.ir.Assign object at 0x0000024313A4FEB0>,
                           56)],
             '$phi62.1': [(<numba.core.ir.Assign object at 0x0000024313633D30>,
                           60)],
             'a': [(<numba.core.ir.Assign object at 0x00000243131F5390>, 0)],
             'bool10': [(<numba.core.ir.Assign object at 0x0000024313A4C7C0>,
                         0)],
             'bool50': [(<numba.core.ir.Assign object at 0x0000024313A4FD60>,
                         20)],
             'bool78': [(<numba.core.ir.Assign object at 0x0000024313630E50>,
                         62)],
             'bool96': [(<numba.core.ir.Assign object at 0x0000024313630880>,
                         88)],
             'it': [(<numba.core.ir.Assign object at 0x0000024313A4C490>, 20)],
             'max_value': [(<numba.core.ir.Assign object at 0x0000024313A4CD60>,
                            20),
                           (<numba.core.ir.Assign object at 0x0000024313631AE0>,
                            98)],
             'v': [(<numba.core.ir.Assign object at 0x0000024313631660>, 62)],
             'view': [(<numba.core.ir.Assign object at 0x0000024313631960>,
                       62)]})
2024-09-04 18:31:50,603 - SSA violators <numba.core.utils.OrderedSet object at 0x0000024313A4D2D0>
2024-09-04 18:31:50,603 - Fix SSA violator on var max_value
2024-09-04 18:31:50,603 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:50,603 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A4D690>
2024-09-04 18:31:50,603 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:50,603 - on stmt: $4load_attr.1 = getattr(value=a, attr=size)
2024-09-04 18:31:50,604 - on stmt: $const6.2 = const(int, 0)
2024-09-04 18:31:50,604 - on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2024-09-04 18:31:50,604 - on stmt: bool10 = global(bool: <class 'bool'>)
2024-09-04 18:31:50,604 - on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:571),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,604 - on stmt: branch $10pred, 12, 20
2024-09-04 18:31:50,604 - ==== SSA block rewrite pass on 12
2024-09-04 18:31:50,604 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A4D690>
2024-09-04 18:31:50,604 - on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:50,604 - on stmt: $const14.1 = const(str, zero-size array to reduction operation maximum which has no identity)
2024-09-04 18:31:50,604 - on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:572)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,604 - on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
2024-09-04 18:31:50,604 - ==== SSA block rewrite pass on 20
2024-09-04 18:31:50,604 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A4D690>
2024-09-04 18:31:50,604 - on stmt: $20load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:50,604 - on stmt: $22load_method.1 = getattr(value=$20load_global.0, attr=nditer)
2024-09-04 18:31:50,604 - on stmt: it = call $22load_method.1(a, func=$22load_method.1, args=[Var(a, arraymath.py:570)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,604 - on stmt: $30load_global.4 = global(next: <built-in function next>)
2024-09-04 18:31:50,604 - on stmt: $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,604 - on stmt: $36load_method.7 = getattr(value=$34call_function.6, attr=take)
2024-09-04 18:31:50,604 - on stmt: $const38.8 = const(int, 0)
2024-09-04 18:31:50,604 - on stmt: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,604 - first assign: max_value
2024-09-04 18:31:50,604 - replaced with: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,604 - on stmt: $44load_deref.10 = freevar(pre_return_func: <function return_false at 0x0000024317C80940>)
2024-09-04 18:31:50,604 - on stmt: $48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,604 - on stmt: bool50 = global(bool: <class 'bool'>)
2024-09-04 18:31:50,604 - on stmt: $50pred = call bool50($48call_function.12, func=bool50, args=(Var($48call_function.12, arraymath.py:577),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,604 - on stmt: branch $50pred, 52, 56
2024-09-04 18:31:50,604 - ==== SSA block rewrite pass on 52
2024-09-04 18:31:50,604 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A4D690>
2024-09-04 18:31:50,604 - on stmt: $54return_value.1 = cast(value=max_value)
2024-09-04 18:31:50,604 - on stmt: return $54return_value.1
2024-09-04 18:31:50,604 - ==== SSA block rewrite pass on 56
2024-09-04 18:31:50,604 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A4D690>
2024-09-04 18:31:50,604 - on stmt: $58get_iter.1 = getiter(value=it)
2024-09-04 18:31:50,604 - on stmt: $phi60.0 = $58get_iter.1
2024-09-04 18:31:50,604 - on stmt: jump 60
2024-09-04 18:31:50,604 - ==== SSA block rewrite pass on 60
2024-09-04 18:31:50,604 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A4D690>
2024-09-04 18:31:50,604 - on stmt: $60for_iter.1 = iternext(value=$phi60.0)
2024-09-04 18:31:50,604 - on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
2024-09-04 18:31:50,604 - on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
2024-09-04 18:31:50,604 - on stmt: $phi62.1 = $60for_iter.2
2024-09-04 18:31:50,604 - on stmt: branch $60for_iter.3, 62, 104
2024-09-04 18:31:50,604 - ==== SSA block rewrite pass on 62
2024-09-04 18:31:50,604 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A4D690>
2024-09-04 18:31:50,604 - on stmt: view = $phi62.1
2024-09-04 18:31:50,604 - on stmt: $66load_method.3 = getattr(value=view, attr=item)
2024-09-04 18:31:50,604 - on stmt: v = call $66load_method.3(func=$66load_method.3, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,604 - on stmt: $72load_deref.5 = freevar(pre_return_func: <function return_false at 0x0000024317C80940>)
2024-09-04 18:31:50,604 - on stmt: $76call_function.7 = call $72load_deref.5(v, func=$72load_deref.5, args=[Var(v, arraymath.py:581)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,604 - on stmt: bool78 = global(bool: <class 'bool'>)
2024-09-04 18:31:50,604 - on stmt: $78pred = call bool78($76call_function.7, func=bool78, args=(Var($76call_function.7, arraymath.py:582),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,604 - on stmt: branch $78pred, 80, 88
2024-09-04 18:31:50,604 - ==== SSA block rewrite pass on 80
2024-09-04 18:31:50,604 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A4D690>
2024-09-04 18:31:50,604 - on stmt: $86return_value.2 = cast(value=v)
2024-09-04 18:31:50,604 - on stmt: return $86return_value.2
2024-09-04 18:31:50,604 - ==== SSA block rewrite pass on 88
2024-09-04 18:31:50,604 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A4D690>
2024-09-04 18:31:50,604 - on stmt: $88load_deref.1 = freevar(comparator: <function max_comparator at 0x0000024317C80430>)
2024-09-04 18:31:50,604 - on stmt: $94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,604 - on stmt: bool96 = global(bool: <class 'bool'>)
2024-09-04 18:31:50,604 - on stmt: $96pred = call bool96($94call_function.4, func=bool96, args=(Var($94call_function.4, arraymath.py:584),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,604 - on stmt: branch $96pred, 98, 102
2024-09-04 18:31:50,604 - ==== SSA block rewrite pass on 98
2024-09-04 18:31:50,604 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A4D690>
2024-09-04 18:31:50,604 - on stmt: max_value = v
2024-09-04 18:31:50,604 - replaced with: max_value.1 = v
2024-09-04 18:31:50,604 - on stmt: jump 102
2024-09-04 18:31:50,604 - ==== SSA block rewrite pass on 102
2024-09-04 18:31:50,604 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A4D690>
2024-09-04 18:31:50,604 - on stmt: jump 60
2024-09-04 18:31:50,604 - ==== SSA block rewrite pass on 104
2024-09-04 18:31:50,604 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A4D690>
2024-09-04 18:31:50,604 - on stmt: $106return_value.1 = cast(value=max_value)
2024-09-04 18:31:50,604 - on stmt: return $106return_value.1
2024-09-04 18:31:50,604 - Replaced assignments: defaultdict(<class 'list'>,
            {20: [<numba.core.ir.Assign object at 0x0000024313632DD0>],
             98: [<numba.core.ir.Assign object at 0x00000243136326E0>]})
2024-09-04 18:31:50,604 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:50,604 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A4D690>
2024-09-04 18:31:50,604 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:50,604 - on stmt: $4load_attr.1 = getattr(value=a, attr=size)
2024-09-04 18:31:50,604 - on stmt: $const6.2 = const(int, 0)
2024-09-04 18:31:50,604 - on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2024-09-04 18:31:50,604 - on stmt: bool10 = global(bool: <class 'bool'>)
2024-09-04 18:31:50,604 - on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:571),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,604 - on stmt: branch $10pred, 12, 20
2024-09-04 18:31:50,604 - ==== SSA block rewrite pass on 12
2024-09-04 18:31:50,604 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A4D690>
2024-09-04 18:31:50,604 - on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:50,604 - on stmt: $const14.1 = const(str, zero-size array to reduction operation maximum which has no identity)
2024-09-04 18:31:50,604 - on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:572)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,604 - on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
2024-09-04 18:31:50,604 - ==== SSA block rewrite pass on 20
2024-09-04 18:31:50,604 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A4D690>
2024-09-04 18:31:50,604 - on stmt: $20load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:50,620 - on stmt: $22load_method.1 = getattr(value=$20load_global.0, attr=nditer)
2024-09-04 18:31:50,620 - on stmt: it = call $22load_method.1(a, func=$22load_method.1, args=[Var(a, arraymath.py:570)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,620 - on stmt: $30load_global.4 = global(next: <built-in function next>)
2024-09-04 18:31:50,620 - on stmt: $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,620 - on stmt: $36load_method.7 = getattr(value=$34call_function.6, attr=take)
2024-09-04 18:31:50,620 - on stmt: $const38.8 = const(int, 0)
2024-09-04 18:31:50,620 - on stmt: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,620 - on stmt: $44load_deref.10 = freevar(pre_return_func: <function return_false at 0x0000024317C80940>)
2024-09-04 18:31:50,620 - on stmt: $48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,620 - find_def var='max_value' stmt=$48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,620 - on stmt: bool50 = global(bool: <class 'bool'>)
2024-09-04 18:31:50,620 - on stmt: $50pred = call bool50($48call_function.12, func=bool50, args=(Var($48call_function.12, arraymath.py:577),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,620 - on stmt: branch $50pred, 52, 56
2024-09-04 18:31:50,620 - ==== SSA block rewrite pass on 52
2024-09-04 18:31:50,620 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A4D690>
2024-09-04 18:31:50,620 - on stmt: $54return_value.1 = cast(value=max_value)
2024-09-04 18:31:50,620 - find_def var='max_value' stmt=$54return_value.1 = cast(value=max_value)
2024-09-04 18:31:50,620 - find_def_from_top label 52
2024-09-04 18:31:50,620 - idom 20 from label 52
2024-09-04 18:31:50,620 - find_def_from_bottom label 20
2024-09-04 18:31:50,620 - on stmt: return $54return_value.1
2024-09-04 18:31:50,620 - ==== SSA block rewrite pass on 56
2024-09-04 18:31:50,620 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A4D690>
2024-09-04 18:31:50,620 - on stmt: $58get_iter.1 = getiter(value=it)
2024-09-04 18:31:50,620 - on stmt: $phi60.0 = $58get_iter.1
2024-09-04 18:31:50,620 - on stmt: jump 60
2024-09-04 18:31:50,620 - ==== SSA block rewrite pass on 60
2024-09-04 18:31:50,620 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A4D690>
2024-09-04 18:31:50,620 - on stmt: $60for_iter.1 = iternext(value=$phi60.0)
2024-09-04 18:31:50,620 - on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
2024-09-04 18:31:50,620 - on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
2024-09-04 18:31:50,620 - on stmt: $phi62.1 = $60for_iter.2
2024-09-04 18:31:50,620 - on stmt: branch $60for_iter.3, 62, 104
2024-09-04 18:31:50,620 - ==== SSA block rewrite pass on 62
2024-09-04 18:31:50,620 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A4D690>
2024-09-04 18:31:50,620 - on stmt: view = $phi62.1
2024-09-04 18:31:50,620 - on stmt: $66load_method.3 = getattr(value=view, attr=item)
2024-09-04 18:31:50,620 - on stmt: v = call $66load_method.3(func=$66load_method.3, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,620 - on stmt: $72load_deref.5 = freevar(pre_return_func: <function return_false at 0x0000024317C80940>)
2024-09-04 18:31:50,620 - on stmt: $76call_function.7 = call $72load_deref.5(v, func=$72load_deref.5, args=[Var(v, arraymath.py:581)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,620 - on stmt: bool78 = global(bool: <class 'bool'>)
2024-09-04 18:31:50,620 - on stmt: $78pred = call bool78($76call_function.7, func=bool78, args=(Var($76call_function.7, arraymath.py:582),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,620 - on stmt: branch $78pred, 80, 88
2024-09-04 18:31:50,620 - ==== SSA block rewrite pass on 80
2024-09-04 18:31:50,620 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A4D690>
2024-09-04 18:31:50,620 - on stmt: $86return_value.2 = cast(value=v)
2024-09-04 18:31:50,620 - on stmt: return $86return_value.2
2024-09-04 18:31:50,620 - ==== SSA block rewrite pass on 88
2024-09-04 18:31:50,620 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A4D690>
2024-09-04 18:31:50,620 - on stmt: $88load_deref.1 = freevar(comparator: <function max_comparator at 0x0000024317C80430>)
2024-09-04 18:31:50,620 - on stmt: $94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,620 - find_def var='max_value' stmt=$94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,620 - find_def_from_top label 88
2024-09-04 18:31:50,620 - idom 62 from label 88
2024-09-04 18:31:50,620 - find_def_from_bottom label 62
2024-09-04 18:31:50,620 - find_def_from_top label 62
2024-09-04 18:31:50,620 - idom 60 from label 62
2024-09-04 18:31:50,620 - find_def_from_bottom label 60
2024-09-04 18:31:50,620 - find_def_from_top label 60
2024-09-04 18:31:50,620 - insert phi node max_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 60
2024-09-04 18:31:50,620 - find_def_from_bottom label 56
2024-09-04 18:31:50,620 - find_def_from_top label 56
2024-09-04 18:31:50,620 - idom 20 from label 56
2024-09-04 18:31:50,620 - find_def_from_bottom label 20
2024-09-04 18:31:50,620 - incoming_def max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,620 - find_def_from_bottom label 102
2024-09-04 18:31:50,620 - find_def_from_top label 102
2024-09-04 18:31:50,620 - insert phi node max_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 102
2024-09-04 18:31:50,620 - find_def_from_bottom label 88
2024-09-04 18:31:50,620 - find_def_from_top label 88
2024-09-04 18:31:50,620 - idom 62 from label 88
2024-09-04 18:31:50,620 - find_def_from_bottom label 62
2024-09-04 18:31:50,620 - find_def_from_top label 62
2024-09-04 18:31:50,620 - idom 60 from label 62
2024-09-04 18:31:50,620 - find_def_from_bottom label 60
2024-09-04 18:31:50,620 - incoming_def max_value.2 = phi(incoming_values=[Var(max_value, arraymath.py:576)], incoming_blocks=[56])
2024-09-04 18:31:50,620 - find_def_from_bottom label 98
2024-09-04 18:31:50,620 - incoming_def max_value.1 = v
2024-09-04 18:31:50,620 - incoming_def max_value.3 = phi(incoming_values=[Var(max_value.2, arraymath.py:584), Var(max_value.1, arraymath.py:585)], incoming_blocks=[88, 98])
2024-09-04 18:31:50,620 - replaced with: $94call_function.4 = call $88load_deref.1(v, max_value.2, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value.2, arraymath.py:584)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,620 - on stmt: bool96 = global(bool: <class 'bool'>)
2024-09-04 18:31:50,620 - on stmt: $96pred = call bool96($94call_function.4, func=bool96, args=(Var($94call_function.4, arraymath.py:584),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,620 - on stmt: branch $96pred, 98, 102
2024-09-04 18:31:50,620 - ==== SSA block rewrite pass on 98
2024-09-04 18:31:50,620 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A4D690>
2024-09-04 18:31:50,620 - on stmt: max_value.1 = v
2024-09-04 18:31:50,620 - on stmt: jump 102
2024-09-04 18:31:50,620 - ==== SSA block rewrite pass on 102
2024-09-04 18:31:50,620 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A4D690>
2024-09-04 18:31:50,620 - on stmt: jump 60
2024-09-04 18:31:50,620 - ==== SSA block rewrite pass on 104
2024-09-04 18:31:50,620 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A4D690>
2024-09-04 18:31:50,620 - on stmt: $106return_value.1 = cast(value=max_value)
2024-09-04 18:31:50,620 - find_def var='max_value' stmt=$106return_value.1 = cast(value=max_value)
2024-09-04 18:31:50,620 - find_def_from_top label 104
2024-09-04 18:31:50,620 - idom 60 from label 104
2024-09-04 18:31:50,620 - find_def_from_bottom label 60
2024-09-04 18:31:50,620 - replaced with: $106return_value.1 = cast(value=max_value.2)
2024-09-04 18:31:50,620 - on stmt: return $106return_value.1
2024-09-04 18:31:50,635 - bytecode dump:
>          0	NOP(arg=None, lineno=4691)
           2	LOAD_FAST(arg=1, lineno=4692)
           4	LOAD_FAST(arg=0, lineno=4692)
           6	LOAD_ATTR(arg=0, lineno=4692)
           8	LOAD_CONST(arg=1, lineno=4692)
          10	BINARY_SUBTRACT(arg=None, lineno=4692)
          12	COMPARE_OP(arg=4, lineno=4692)
          14	POP_JUMP_IF_TRUE(arg=15, lineno=4692)
          16	LOAD_FAST(arg=1, lineno=4692)
          18	LOAD_FAST(arg=0, lineno=4692)
          20	LOAD_ATTR(arg=0, lineno=4692)
          22	UNARY_NEGATIVE(arg=None, lineno=4692)
          24	COMPARE_OP(arg=0, lineno=4692)
          26	POP_JUMP_IF_FALSE(arg=19, lineno=4692)
>         28	LOAD_GLOBAL(arg=1, lineno=4693)
          30	LOAD_CONST(arg=2, lineno=4693)
          32	CALL_FUNCTION(arg=1, lineno=4693)
          34	RAISE_VARARGS(arg=1, lineno=4693)
>         36	LOAD_FAST(arg=0, lineno=4694)
          38	LOAD_METHOD(arg=2, lineno=4694)
          40	CALL_METHOD(arg=0, lineno=4694)
          42	LOAD_FAST(arg=1, lineno=4694)
          44	BINARY_SUBSCR(arg=None, lineno=4694)
          46	RETURN_VALUE(arg=None, lineno=4694)
2024-09-04 18:31:50,635 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:50,635 - stack: []
2024-09-04 18:31:50,635 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:50,635 - dispatch pc=0, inst=NOP(arg=None, lineno=4691)
2024-09-04 18:31:50,651 - stack []
2024-09-04 18:31:50,651 - dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=4692)
2024-09-04 18:31:50,651 - stack []
2024-09-04 18:31:50,651 - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4692)
2024-09-04 18:31:50,651 - stack ['$indices2.0']
2024-09-04 18:31:50,651 - dispatch pc=6, inst=LOAD_ATTR(arg=0, lineno=4692)
2024-09-04 18:31:50,651 - stack ['$indices2.0', '$a4.1']
2024-09-04 18:31:50,651 - dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=4692)
2024-09-04 18:31:50,651 - stack ['$indices2.0', '$6load_attr.2']
2024-09-04 18:31:50,651 - dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=4692)
2024-09-04 18:31:50,651 - stack ['$indices2.0', '$6load_attr.2', '$const8.3']
2024-09-04 18:31:50,651 - dispatch pc=12, inst=COMPARE_OP(arg=4, lineno=4692)
2024-09-04 18:31:50,651 - stack ['$indices2.0', '$10binary_subtract.4']
2024-09-04 18:31:50,651 - dispatch pc=14, inst=POP_JUMP_IF_TRUE(arg=15, lineno=4692)
2024-09-04 18:31:50,651 - stack ['$12compare_op.5']
2024-09-04 18:31:50,651 - end state. edges=[Edge(pc=16, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:50,651 - pending: deque([State(pc_initial=16 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
2024-09-04 18:31:50,651 - stack: []
2024-09-04 18:31:50,651 - state.pc_initial: State(pc_initial=16 nstack_initial=0)
2024-09-04 18:31:50,651 - dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=4692)
2024-09-04 18:31:50,651 - stack []
2024-09-04 18:31:50,651 - dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=4692)
2024-09-04 18:31:50,651 - stack ['$indices16.0']
2024-09-04 18:31:50,651 - dispatch pc=20, inst=LOAD_ATTR(arg=0, lineno=4692)
2024-09-04 18:31:50,651 - stack ['$indices16.0', '$a18.1']
2024-09-04 18:31:50,651 - dispatch pc=22, inst=UNARY_NEGATIVE(arg=None, lineno=4692)
2024-09-04 18:31:50,651 - stack ['$indices16.0', '$20load_attr.2']
2024-09-04 18:31:50,651 - dispatch pc=24, inst=COMPARE_OP(arg=0, lineno=4692)
2024-09-04 18:31:50,651 - stack ['$indices16.0', '$22unary_negative.3']
2024-09-04 18:31:50,651 - dispatch pc=26, inst=POP_JUMP_IF_FALSE(arg=19, lineno=4692)
2024-09-04 18:31:50,651 - stack ['$24compare_op.4']
2024-09-04 18:31:50,651 - end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:50,651 - pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2024-09-04 18:31:50,651 - stack: []
2024-09-04 18:31:50,651 - state.pc_initial: State(pc_initial=28 nstack_initial=0)
2024-09-04 18:31:50,651 - dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=4693)
2024-09-04 18:31:50,651 - stack []
2024-09-04 18:31:50,651 - dispatch pc=30, inst=LOAD_CONST(arg=2, lineno=4693)
2024-09-04 18:31:50,651 - stack ['$28load_global.0']
2024-09-04 18:31:50,651 - dispatch pc=32, inst=CALL_FUNCTION(arg=1, lineno=4693)
2024-09-04 18:31:50,651 - stack ['$28load_global.0', '$const30.1']
2024-09-04 18:31:50,651 - dispatch pc=34, inst=RAISE_VARARGS(arg=1, lineno=4693)
2024-09-04 18:31:50,651 - stack ['$32call_function.2']
2024-09-04 18:31:50,651 - end state. edges=[]
2024-09-04 18:31:50,651 - pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2024-09-04 18:31:50,651 - pending: deque([State(pc_initial=36 nstack_initial=0)])
2024-09-04 18:31:50,651 - stack: []
2024-09-04 18:31:50,651 - state.pc_initial: State(pc_initial=36 nstack_initial=0)
2024-09-04 18:31:50,651 - dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=4694)
2024-09-04 18:31:50,651 - stack []
2024-09-04 18:31:50,651 - dispatch pc=38, inst=LOAD_METHOD(arg=2, lineno=4694)
2024-09-04 18:31:50,651 - stack ['$a36.0']
2024-09-04 18:31:50,651 - dispatch pc=40, inst=CALL_METHOD(arg=0, lineno=4694)
2024-09-04 18:31:50,651 - stack ['$38load_method.1']
2024-09-04 18:31:50,651 - dispatch pc=42, inst=LOAD_FAST(arg=1, lineno=4694)
2024-09-04 18:31:50,651 - stack ['$40call_method.2']
2024-09-04 18:31:50,651 - dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=4694)
2024-09-04 18:31:50,651 - stack ['$40call_method.2', '$indices42.3']
2024-09-04 18:31:50,651 - dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=4694)
2024-09-04 18:31:50,651 - stack ['$44binary_subscr.4']
2024-09-04 18:31:50,651 - end state. edges=[]
2024-09-04 18:31:50,651 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:50,651 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
2024-09-04 18:31:50,651 - defmap: {}
2024-09-04 18:31:50,651 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:50,651 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:50,651 - keep phismap: {}
2024-09-04 18:31:50,651 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:50,651 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:50,651 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$indices2.0'}), (4, {'res': '$a4.1'}), (6, {'item': '$a4.1', 'res': '$6load_attr.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$6load_attr.2', 'rhs': '$const8.3', 'res': '$10binary_subtract.4'}), (12, {'lhs': '$indices2.0', 'rhs': '$10binary_subtract.4', 'res': '$12compare_op.5'}), (14, {'pred': '$12compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: (), 28: ()})
2024-09-04 18:31:50,666 - block_infos State(pc_initial=16 nstack_initial=0):
AdaptBlockInfo(insts=((16, {'res': '$indices16.0'}), (18, {'res': '$a18.1'}), (20, {'item': '$a18.1', 'res': '$20load_attr.2'}), (22, {'value': '$20load_attr.2', 'res': '$22unary_negative.3'}), (24, {'lhs': '$indices16.0', 'rhs': '$22unary_negative.3', 'res': '$24compare_op.4'}), (26, {'pred': '$24compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: (), 36: ()})
2024-09-04 18:31:50,666 - block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$28load_global.0'}), (30, {'res': '$const30.1'}), (32, {'func': '$28load_global.0', 'args': ['$const30.1'], 'res': '$32call_function.2'}), (34, {'exc': '$32call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:50,666 - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$a36.0'}), (38, {'item': '$a36.0', 'res': '$38load_method.1'}), (40, {'func': '$38load_method.1', 'args': [], 'res': '$40call_method.2'}), (42, {'res': '$indices42.3'}), (44, {'index': '$indices42.3', 'target': '$40call_method.2', 'res': '$44binary_subscr.4'}), (46, {'retval': '$44binary_subscr.4', 'castval': '$46return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:50,666 - label 0:
    a = arg(0, name=a)                       ['a']
    indices = arg(1, name=indices)           ['indices']
    $6load_attr.2 = getattr(value=a, attr=size) ['$6load_attr.2', 'a']
    $const8.3 = const(int, 1)                ['$const8.3']
    $10binary_subtract.4 = $6load_attr.2 - $const8.3 ['$10binary_subtract.4', '$6load_attr.2', '$const8.3']
    $12compare_op.5 = indices > $10binary_subtract.4 ['$10binary_subtract.4', '$12compare_op.5', 'indices']
    bool14 = global(bool: <class 'bool'>)    ['bool14']
    $14pred = call bool14($12compare_op.5, func=bool14, args=(Var($12compare_op.5, arrayobj.py:4692),), kws=(), vararg=None, varkwarg=None, target=None) ['$12compare_op.5', '$14pred', 'bool14']
    branch $14pred, 28, 16                   ['$14pred']
label 16:
    $20load_attr.2 = getattr(value=a, attr=size) ['$20load_attr.2', 'a']
    $22unary_negative.3 = unary(fn=<built-in function neg>, value=$20load_attr.2) ['$20load_attr.2', '$22unary_negative.3']
    $24compare_op.4 = indices < $22unary_negative.3 ['$22unary_negative.3', '$24compare_op.4', 'indices']
    bool26 = global(bool: <class 'bool'>)    ['bool26']
    $26pred = call bool26($24compare_op.4, func=bool26, args=(Var($24compare_op.4, arrayobj.py:4692),), kws=(), vararg=None, varkwarg=None, target=None) ['$24compare_op.4', '$26pred', 'bool26']
    branch $26pred, 28, 36                   ['$26pred']
label 28:
    $28load_global.0 = global(IndexError: <class 'IndexError'>) ['$28load_global.0']
    $const30.1 = const(str, Index out of bounds) ['$const30.1']
    $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, arrayobj.py:4693)], kws=(), vararg=None, varkwarg=None, target=None) ['$28load_global.0', '$32call_function.2', '$const30.1']
    raise $32call_function.2                 ['$32call_function.2']
label 36:
    $38load_method.1 = getattr(value=a, attr=ravel) ['$38load_method.1', 'a']
    $40call_method.2 = call $38load_method.1(func=$38load_method.1, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$38load_method.1', '$40call_method.2']
    $44binary_subscr.4 = getitem(value=$40call_method.2, index=indices, fn=<built-in function getitem>) ['$40call_method.2', '$44binary_subscr.4', 'indices']
    $46return_value.5 = cast(value=$44binary_subscr.4) ['$44binary_subscr.4', '$46return_value.5']
    return $46return_value.5                 ['$46return_value.5']

2024-09-04 18:31:50,692 - ==== SSA block analysis pass on 0
2024-09-04 18:31:50,692 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024316C44430>
2024-09-04 18:31:50,693 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:50,693 - on stmt: indices = arg(1, name=indices)
2024-09-04 18:31:50,693 - on stmt: $6load_attr.2 = getattr(value=a, attr=size)
2024-09-04 18:31:50,693 - on stmt: $const8.3 = const(int, 1)
2024-09-04 18:31:50,693 - on stmt: $10binary_subtract.4 = $6load_attr.2 - $const8.3
2024-09-04 18:31:50,693 - on stmt: $12compare_op.5 = indices > $10binary_subtract.4
2024-09-04 18:31:50,693 - on stmt: bool14 = global(bool: <class 'bool'>)
2024-09-04 18:31:50,693 - on stmt: $14pred = call bool14($12compare_op.5, func=bool14, args=(Var($12compare_op.5, arrayobj.py:4692),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,693 - on stmt: branch $14pred, 28, 16
2024-09-04 18:31:50,693 - ==== SSA block analysis pass on 16
2024-09-04 18:31:50,693 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024316C44430>
2024-09-04 18:31:50,693 - on stmt: $20load_attr.2 = getattr(value=a, attr=size)
2024-09-04 18:31:50,694 - on stmt: $22unary_negative.3 = unary(fn=<built-in function neg>, value=$20load_attr.2)
2024-09-04 18:31:50,694 - on stmt: $24compare_op.4 = indices < $22unary_negative.3
2024-09-04 18:31:50,694 - on stmt: bool26 = global(bool: <class 'bool'>)
2024-09-04 18:31:50,694 - on stmt: $26pred = call bool26($24compare_op.4, func=bool26, args=(Var($24compare_op.4, arrayobj.py:4692),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,694 - on stmt: branch $26pred, 28, 36
2024-09-04 18:31:50,694 - ==== SSA block analysis pass on 28
2024-09-04 18:31:50,694 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024316C44430>
2024-09-04 18:31:50,694 - on stmt: $28load_global.0 = global(IndexError: <class 'IndexError'>)
2024-09-04 18:31:50,694 - on stmt: $const30.1 = const(str, Index out of bounds)
2024-09-04 18:31:50,694 - on stmt: $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, arrayobj.py:4693)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,694 - on stmt: <static> raise <class 'IndexError'>('Index out of bounds')
2024-09-04 18:31:50,694 - ==== SSA block analysis pass on 36
2024-09-04 18:31:50,694 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024316C44430>
2024-09-04 18:31:50,695 - on stmt: $38load_method.1 = getattr(value=a, attr=ravel)
2024-09-04 18:31:50,695 - on stmt: $40call_method.2 = call $38load_method.1(func=$38load_method.1, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,695 - on stmt: $44binary_subscr.4 = getitem(value=$40call_method.2, index=indices, fn=<built-in function getitem>)
2024-09-04 18:31:50,695 - on stmt: $46return_value.5 = cast(value=$44binary_subscr.4)
2024-09-04 18:31:50,695 - on stmt: return $46return_value.5
2024-09-04 18:31:50,695 - defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [(<numba.core.ir.Assign object at 0x0000024313698D30>,
                                       0)],
             '$12compare_op.5': [(<numba.core.ir.Assign object at 0x0000024313699780>,
                                  0)],
             '$14pred': [(<numba.core.ir.Assign object at 0x0000024313699AE0>,
                          0)],
             '$20load_attr.2': [(<numba.core.ir.Assign object at 0x000002431369BC10>,
                                 16)],
             '$22unary_negative.3': [(<numba.core.ir.Assign object at 0x0000024313698850>,
                                      16)],
             '$24compare_op.4': [(<numba.core.ir.Assign object at 0x0000024313698A30>,
                                  16)],
             '$26pred': [(<numba.core.ir.Assign object at 0x000002431369B880>,
                          16)],
             '$28load_global.0': [(<numba.core.ir.Assign object at 0x0000024313698B80>,
                                   28)],
             '$32call_function.2': [(<numba.core.ir.Assign object at 0x00000243136993F0>,
                                     28)],
             '$38load_method.1': [(<numba.core.ir.Assign object at 0x000002431369A9E0>,
                                   36)],
             '$40call_method.2': [(<numba.core.ir.Assign object at 0x0000024313698070>,
                                   36)],
             '$44binary_subscr.4': [(<numba.core.ir.Assign object at 0x00000243132C7430>,
                                     36)],
             '$46return_value.5': [(<numba.core.ir.Assign object at 0x00000243132C5FC0>,
                                    36)],
             '$6load_attr.2': [(<numba.core.ir.Assign object at 0x000002431369BD60>,
                                0)],
             '$const30.1': [(<numba.core.ir.Assign object at 0x00000243136997E0>,
                             28)],
             '$const8.3': [(<numba.core.ir.Assign object at 0x0000024313699C60>,
                            0)],
             'a': [(<numba.core.ir.Assign object at 0x00000243136330A0>, 0)],
             'bool14': [(<numba.core.ir.Assign object at 0x000002431369A080>,
                         0)],
             'bool26': [(<numba.core.ir.Assign object at 0x000002431369B6D0>,
                         16)],
             'indices': [(<numba.core.ir.Assign object at 0x0000024313632890>,
                          0)]})
2024-09-04 18:31:50,695 - SSA violators <numba.core.utils.OrderedSet object at 0x0000024316C44430>
2024-09-04 18:31:50,726 - bytecode dump:
>          0	NOP(arg=None, lineno=2230)
           2	LOAD_FAST(arg=0, lineno=2232)
           4	LOAD_METHOD(arg=0, lineno=2232)
           6	LOAD_FAST(arg=0, lineno=2232)
           8	LOAD_ATTR(arg=1, lineno=2232)
          10	CALL_METHOD(arg=1, lineno=2232)
          12	RETURN_VALUE(arg=None, lineno=2232)
2024-09-04 18:31:50,726 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:50,726 - stack: []
2024-09-04 18:31:50,726 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:50,726 - dispatch pc=0, inst=NOP(arg=None, lineno=2230)
2024-09-04 18:31:50,726 - stack []
2024-09-04 18:31:50,726 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2232)
2024-09-04 18:31:50,726 - stack []
2024-09-04 18:31:50,726 - dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=2232)
2024-09-04 18:31:50,726 - stack ['$ary2.0']
2024-09-04 18:31:50,726 - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=2232)
2024-09-04 18:31:50,726 - stack ['$4load_method.1']
2024-09-04 18:31:50,726 - dispatch pc=8, inst=LOAD_ATTR(arg=1, lineno=2232)
2024-09-04 18:31:50,726 - stack ['$4load_method.1', '$ary6.2']
2024-09-04 18:31:50,726 - dispatch pc=10, inst=CALL_METHOD(arg=1, lineno=2232)
2024-09-04 18:31:50,726 - stack ['$4load_method.1', '$8load_attr.3']
2024-09-04 18:31:50,726 - dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=2232)
2024-09-04 18:31:50,726 - stack ['$10call_method.4']
2024-09-04 18:31:50,726 - end state. edges=[]
2024-09-04 18:31:50,726 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:50,742 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 18:31:50,742 - defmap: {}
2024-09-04 18:31:50,742 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:50,742 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:50,742 - keep phismap: {}
2024-09-04 18:31:50,742 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:50,742 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:50,742 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$ary2.0'}), (4, {'item': '$ary2.0', 'res': '$4load_method.1'}), (6, {'res': '$ary6.2'}), (8, {'item': '$ary6.2', 'res': '$8load_attr.3'}), (10, {'func': '$4load_method.1', 'args': ['$8load_attr.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:50,742 - label 0:
    ary = arg(0, name=ary)                   ['ary']
    $4load_method.1 = getattr(value=ary, attr=reshape) ['$4load_method.1', 'ary']
    $8load_attr.3 = getattr(value=ary, attr=size) ['$8load_attr.3', 'ary']
    $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arrayobj.py:2232)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_method.4', '$4load_method.1', '$8load_attr.3']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2024-09-04 18:31:50,742 - ==== SSA block analysis pass on 0
2024-09-04 18:31:50,742 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243133352A0>
2024-09-04 18:31:50,742 - on stmt: ary = arg(0, name=ary)
2024-09-04 18:31:50,742 - on stmt: $4load_method.1 = getattr(value=ary, attr=reshape)
2024-09-04 18:31:50,742 - on stmt: $8load_attr.3 = getattr(value=ary, attr=size)
2024-09-04 18:31:50,742 - on stmt: $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arrayobj.py:2232)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:50,742 - on stmt: $12return_value.5 = cast(value=$10call_method.4)
2024-09-04 18:31:50,742 - on stmt: return $12return_value.5
2024-09-04 18:31:50,742 - defs defaultdict(<class 'list'>,
            {'$10call_method.4': [(<numba.core.ir.Assign object at 0x0000024313653BB0>,
                                   0)],
             '$12return_value.5': [(<numba.core.ir.Assign object at 0x0000024313651F90>,
                                    0)],
             '$4load_method.1': [(<numba.core.ir.Assign object at 0x0000024313650160>,
                                  0)],
             '$8load_attr.3': [(<numba.core.ir.Assign object at 0x0000024313651330>,
                                0)],
             'ary': [(<numba.core.ir.Assign object at 0x0000024313650CD0>, 0)]})
2024-09-04 18:31:50,742 - SSA violators <numba.core.utils.OrderedSet object at 0x00000243133352A0>
2024-09-04 18:31:51,010 - bytecode dump:
>          0	NOP(arg=None, lineno=486)
           2	LOAD_CONST(arg=1, lineno=488)
           4	RETURN_VALUE(arg=None, lineno=488)
2024-09-04 18:31:51,010 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:51,010 - stack: []
2024-09-04 18:31:51,010 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:51,010 - dispatch pc=0, inst=NOP(arg=None, lineno=486)
2024-09-04 18:31:51,010 - stack []
2024-09-04 18:31:51,010 - dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=488)
2024-09-04 18:31:51,010 - stack []
2024-09-04 18:31:51,010 - dispatch pc=4, inst=RETURN_VALUE(arg=None, lineno=488)
2024-09-04 18:31:51,010 - stack ['$const2.0']
2024-09-04 18:31:51,010 - end state. edges=[]
2024-09-04 18:31:51,010 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:51,010 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 18:31:51,010 - defmap: {}
2024-09-04 18:31:51,010 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:51,010 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:51,010 - keep phismap: {}
2024-09-04 18:31:51,010 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:51,010 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:51,010 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'retval': '$const2.0', 'castval': '$4return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:51,010 - label 0:
    a = arg(0, name=a)                       ['a']
    $const2.0 = const(bool, False)           ['$const2.0']
    $4return_value.1 = cast(value=$const2.0) ['$4return_value.1', '$const2.0']
    return $4return_value.1                  ['$4return_value.1']

2024-09-04 18:31:51,010 - ==== SSA block analysis pass on 0
2024-09-04 18:31:51,010 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243132C46A0>
2024-09-04 18:31:51,010 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:51,010 - on stmt: $const2.0 = const(bool, False)
2024-09-04 18:31:51,010 - on stmt: $4return_value.1 = cast(value=$const2.0)
2024-09-04 18:31:51,010 - on stmt: return $4return_value.1
2024-09-04 18:31:51,010 - defs defaultdict(<class 'list'>,
            {'$4return_value.1': [(<numba.core.ir.Assign object at 0x00000243132A67D0>,
                                   0)],
             '$const2.0': [(<numba.core.ir.Assign object at 0x00000243132A6650>,
                            0)],
             'a': [(<numba.core.ir.Assign object at 0x00000243132A5F00>, 0)]})
2024-09-04 18:31:51,010 - SSA violators <numba.core.utils.OrderedSet object at 0x00000243132C46A0>
2024-09-04 18:31:51,066 - bytecode dump:
>          0	NOP(arg=None, lineno=481)
           2	LOAD_FAST(arg=0, lineno=483)
           4	LOAD_FAST(arg=1, lineno=483)
           6	COMPARE_OP(arg=4, lineno=483)
           8	RETURN_VALUE(arg=None, lineno=483)
2024-09-04 18:31:51,066 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:51,066 - stack: []
2024-09-04 18:31:51,066 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:51,066 - dispatch pc=0, inst=NOP(arg=None, lineno=481)
2024-09-04 18:31:51,066 - stack []
2024-09-04 18:31:51,066 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=483)
2024-09-04 18:31:51,066 - stack []
2024-09-04 18:31:51,066 - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=483)
2024-09-04 18:31:51,066 - stack ['$a2.0']
2024-09-04 18:31:51,066 - dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=483)
2024-09-04 18:31:51,066 - stack ['$a2.0', '$min_val4.1']
2024-09-04 18:31:51,066 - dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=483)
2024-09-04 18:31:51,066 - stack ['$6compare_op.2']
2024-09-04 18:31:51,066 - end state. edges=[]
2024-09-04 18:31:51,066 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:51,066 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 18:31:51,066 - defmap: {}
2024-09-04 18:31:51,066 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:51,066 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:51,066 - keep phismap: {}
2024-09-04 18:31:51,066 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:51,066 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:51,066 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'res': '$min_val4.1'}), (6, {'lhs': '$a2.0', 'rhs': '$min_val4.1', 'res': '$6compare_op.2'}), (8, {'retval': '$6compare_op.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:51,066 - label 0:
    a = arg(0, name=a)                       ['a']
    min_val = arg(1, name=min_val)           ['min_val']
    $6compare_op.2 = a > min_val             ['$6compare_op.2', 'a', 'min_val']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2024-09-04 18:31:51,082 - ==== SSA block analysis pass on 0
2024-09-04 18:31:51,082 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243176FD180>
2024-09-04 18:31:51,082 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:51,082 - on stmt: min_val = arg(1, name=min_val)
2024-09-04 18:31:51,082 - on stmt: $6compare_op.2 = a > min_val
2024-09-04 18:31:51,082 - on stmt: $8return_value.3 = cast(value=$6compare_op.2)
2024-09-04 18:31:51,082 - on stmt: return $8return_value.3
2024-09-04 18:31:51,082 - defs defaultdict(<class 'list'>,
            {'$6compare_op.2': [(<numba.core.ir.Assign object at 0x00000243176FC580>,
                                 0)],
             '$8return_value.3': [(<numba.core.ir.Assign object at 0x00000243176FC070>,
                                   0)],
             'a': [(<numba.core.ir.Assign object at 0x00000243176FD3C0>, 0)],
             'min_val': [(<numba.core.ir.Assign object at 0x00000243176FD840>,
                          0)]})
2024-09-04 18:31:51,082 - SSA violators <numba.core.utils.OrderedSet object at 0x00000243176FD180>
2024-09-04 18:31:51,479 - bytecode dump:
>          0	NOP(arg=None, lineno=437)
           2	LOAD_DEREF(arg=0, lineno=440)
           4	STORE_FAST(arg=1, lineno=440)
           6	LOAD_GLOBAL(arg=0, lineno=441)
           8	LOAD_METHOD(arg=1, lineno=441)
          10	LOAD_FAST(arg=0, lineno=441)
          12	CALL_METHOD(arg=1, lineno=441)
          14	GET_ITER(arg=None, lineno=441)
>         16	FOR_ITER(arg=8, lineno=441)
          18	STORE_FAST(arg=2, lineno=441)
          20	LOAD_FAST(arg=1, lineno=442)
          22	LOAD_FAST(arg=2, lineno=442)
          24	LOAD_METHOD(arg=2, lineno=442)
          26	CALL_METHOD(arg=0, lineno=442)
          28	INPLACE_ADD(arg=None, lineno=442)
          30	STORE_FAST(arg=1, lineno=442)
          32	JUMP_ABSOLUTE(arg=9, lineno=442)
>         34	LOAD_FAST(arg=1, lineno=443)
          36	LOAD_FAST(arg=0, lineno=443)
          38	LOAD_ATTR(arg=3, lineno=443)
          40	BINARY_TRUE_DIVIDE(arg=None, lineno=443)
          42	RETURN_VALUE(arg=None, lineno=443)
2024-09-04 18:31:51,479 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:51,479 - stack: []
2024-09-04 18:31:51,479 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:51,479 - dispatch pc=0, inst=NOP(arg=None, lineno=437)
2024-09-04 18:31:51,479 - stack []
2024-09-04 18:31:51,481 - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=440)
2024-09-04 18:31:51,481 - stack []
2024-09-04 18:31:51,481 - dispatch pc=4, inst=STORE_FAST(arg=1, lineno=440)
2024-09-04 18:31:51,481 - stack ['$2load_deref.0']
2024-09-04 18:31:51,481 - dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=441)
2024-09-04 18:31:51,481 - stack []
2024-09-04 18:31:51,481 - dispatch pc=8, inst=LOAD_METHOD(arg=1, lineno=441)
2024-09-04 18:31:51,481 - stack ['$6load_global.1']
2024-09-04 18:31:51,481 - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=441)
2024-09-04 18:31:51,481 - stack ['$8load_method.2']
2024-09-04 18:31:51,481 - dispatch pc=12, inst=CALL_METHOD(arg=1, lineno=441)
2024-09-04 18:31:51,481 - stack ['$8load_method.2', '$a10.3']
2024-09-04 18:31:51,481 - dispatch pc=14, inst=GET_ITER(arg=None, lineno=441)
2024-09-04 18:31:51,481 - stack ['$12call_method.4']
2024-09-04 18:31:51,481 - end state. edges=[Edge(pc=16, stack=('$14get_iter.5',), blockstack=(), npush=0)]
2024-09-04 18:31:51,481 - pending: deque([State(pc_initial=16 nstack_initial=1)])
2024-09-04 18:31:51,481 - stack: ['$phi16.0']
2024-09-04 18:31:51,481 - state.pc_initial: State(pc_initial=16 nstack_initial=1)
2024-09-04 18:31:51,481 - dispatch pc=16, inst=FOR_ITER(arg=8, lineno=441)
2024-09-04 18:31:51,481 - stack ['$phi16.0']
2024-09-04 18:31:51,481 - end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=18, stack=('$phi16.0', '$16for_iter.2'), blockstack=(), npush=0)]
2024-09-04 18:31:51,487 - pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=18 nstack_initial=2)])
2024-09-04 18:31:51,487 - stack: []
2024-09-04 18:31:51,487 - state.pc_initial: State(pc_initial=34 nstack_initial=0)
2024-09-04 18:31:51,487 - dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=443)
2024-09-04 18:31:51,487 - stack []
2024-09-04 18:31:51,489 - dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=443)
2024-09-04 18:31:51,489 - stack ['$c34.0']
2024-09-04 18:31:51,489 - dispatch pc=38, inst=LOAD_ATTR(arg=3, lineno=443)
2024-09-04 18:31:51,489 - stack ['$c34.0', '$a36.1']
2024-09-04 18:31:51,489 - dispatch pc=40, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=443)
2024-09-04 18:31:51,491 - stack ['$c34.0', '$38load_attr.2']
2024-09-04 18:31:51,491 - dispatch pc=42, inst=RETURN_VALUE(arg=None, lineno=443)
2024-09-04 18:31:51,491 - stack ['$40binary_true_divide.3']
2024-09-04 18:31:51,491 - end state. edges=[]
2024-09-04 18:31:51,492 - pending: deque([State(pc_initial=18 nstack_initial=2)])
2024-09-04 18:31:51,492 - stack: ['$phi18.0', '$phi18.1']
2024-09-04 18:31:51,492 - state.pc_initial: State(pc_initial=18 nstack_initial=2)
2024-09-04 18:31:51,492 - dispatch pc=18, inst=STORE_FAST(arg=2, lineno=441)
2024-09-04 18:31:51,492 - stack ['$phi18.0', '$phi18.1']
2024-09-04 18:31:51,492 - dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=442)
2024-09-04 18:31:51,492 - stack ['$phi18.0']
2024-09-04 18:31:51,492 - dispatch pc=22, inst=LOAD_FAST(arg=2, lineno=442)
2024-09-04 18:31:51,492 - stack ['$phi18.0', '$c20.2']
2024-09-04 18:31:51,492 - dispatch pc=24, inst=LOAD_METHOD(arg=2, lineno=442)
2024-09-04 18:31:51,492 - stack ['$phi18.0', '$c20.2', '$v22.3']
2024-09-04 18:31:51,492 - dispatch pc=26, inst=CALL_METHOD(arg=0, lineno=442)
2024-09-04 18:31:51,492 - stack ['$phi18.0', '$c20.2', '$24load_method.4']
2024-09-04 18:31:51,492 - dispatch pc=28, inst=INPLACE_ADD(arg=None, lineno=442)
2024-09-04 18:31:51,492 - stack ['$phi18.0', '$c20.2', '$26call_method.5']
2024-09-04 18:31:51,492 - dispatch pc=30, inst=STORE_FAST(arg=1, lineno=442)
2024-09-04 18:31:51,492 - stack ['$phi18.0', '$28inplace_add.6']
2024-09-04 18:31:51,492 - dispatch pc=32, inst=JUMP_ABSOLUTE(arg=9, lineno=442)
2024-09-04 18:31:51,492 - stack ['$phi18.0']
2024-09-04 18:31:51,497 - end state. edges=[Edge(pc=16, stack=('$phi18.0',), blockstack=(), npush=0)]
2024-09-04 18:31:51,497 - pending: deque([State(pc_initial=16 nstack_initial=1)])
2024-09-04 18:31:51,497 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:51,497 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=1): {'$phi16.0'},
             State(pc_initial=18 nstack_initial=2): {'$phi18.1'},
             State(pc_initial=34 nstack_initial=0): set()})
2024-09-04 18:31:51,497 - defmap: {'$phi16.0': State(pc_initial=0 nstack_initial=0),
 '$phi18.1': State(pc_initial=16 nstack_initial=1)}
2024-09-04 18:31:51,499 - phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi18.0', State(pc_initial=18 nstack_initial=2))},
             '$phi18.0': {('$phi16.0', State(pc_initial=16 nstack_initial=1))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
2024-09-04 18:31:51,499 - changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=1))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
2024-09-04 18:31:51,501 - changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
2024-09-04 18:31:51,501 - changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
2024-09-04 18:31:51,501 - keep phismap: {'$phi16.0': {('$14get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi18.1': {('$16for_iter.2', State(pc_initial=16 nstack_initial=1))}}
2024-09-04 18:31:51,501 - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi16.0': '$14get_iter.5'},
             State(pc_initial=16 nstack_initial=1): {'$phi18.1': '$16for_iter.2'}})
2024-09-04 18:31:51,501 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:51,501 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'value': '$2load_deref.0'}), (6, {'res': '$6load_global.1'}), (8, {'item': '$6load_global.1', 'res': '$8load_method.2'}), (10, {'res': '$a10.3'}), (12, {'func': '$8load_method.2', 'args': ['$a10.3'], 'res': '$12call_method.4'}), (14, {'value': '$12call_method.4', 'res': '$14get_iter.5'})), outgoing_phis={'$phi16.0': '$14get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$14get_iter.5',)})
2024-09-04 18:31:51,501 - block_infos State(pc_initial=16 nstack_initial=1):
AdaptBlockInfo(insts=((16, {'iterator': '$phi16.0', 'pair': '$16for_iter.1', 'indval': '$16for_iter.2', 'pred': '$16for_iter.3'}),), outgoing_phis={'$phi18.1': '$16for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 18: ('$phi16.0', '$16for_iter.2')})
2024-09-04 18:31:51,501 - block_infos State(pc_initial=18 nstack_initial=2):
AdaptBlockInfo(insts=((18, {'value': '$phi18.1'}), (20, {'res': '$c20.2'}), (22, {'res': '$v22.3'}), (24, {'item': '$v22.3', 'res': '$24load_method.4'}), (26, {'func': '$24load_method.4', 'args': [], 'res': '$26call_method.5'}), (28, {'lhs': '$c20.2', 'rhs': '$26call_method.5', 'res': '$28inplace_add.6'}), (30, {'value': '$28inplace_add.6'}), (32, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$phi18.0',)})
2024-09-04 18:31:51,501 - block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$c34.0'}), (36, {'res': '$a36.1'}), (38, {'item': '$a36.1', 'res': '$38load_attr.2'}), (40, {'lhs': '$c34.0', 'rhs': '$38load_attr.2', 'res': '$40binary_true_divide.3'}), (42, {'retval': '$40binary_true_divide.3', 'castval': '$42return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:51,511 - label 0:
    a = arg(0, name=a)                       ['a']
    c = freevar(acc_init: 0.0)               ['c']
    $6load_global.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$6load_global.1']
    $8load_method.2 = getattr(value=$6load_global.1, attr=nditer) ['$6load_global.1', '$8load_method.2']
    $12call_method.4 = call $8load_method.2(a, func=$8load_method.2, args=[Var(a, arraymath.py:437)], kws=(), vararg=None, varkwarg=None, target=None) ['$12call_method.4', '$8load_method.2', 'a']
    $14get_iter.5 = getiter(value=$12call_method.4) ['$12call_method.4', '$14get_iter.5']
    $phi16.0 = $14get_iter.5                 ['$14get_iter.5', '$phi16.0']
    jump 16                                  []
label 16:
    $16for_iter.1 = iternext(value=$phi16.0) ['$16for_iter.1', '$phi16.0']
    $16for_iter.2 = pair_first(value=$16for_iter.1) ['$16for_iter.1', '$16for_iter.2']
    $16for_iter.3 = pair_second(value=$16for_iter.1) ['$16for_iter.1', '$16for_iter.3']
    $phi18.1 = $16for_iter.2                 ['$16for_iter.2', '$phi18.1']
    branch $16for_iter.3, 18, 34             ['$16for_iter.3']
label 18:
    v = $phi18.1                             ['$phi18.1', 'v']
    $24load_method.4 = getattr(value=v, attr=item) ['$24load_method.4', 'v']
    $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$24load_method.4', '$26call_method.5']
    $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined) ['$26call_method.5', '$28inplace_add.6', 'c']
    c = $28inplace_add.6                     ['$28inplace_add.6', 'c']
    jump 16                                  []
label 34:
    $38load_attr.2 = getattr(value=a, attr=size) ['$38load_attr.2', 'a']
    $40binary_true_divide.3 = c / $38load_attr.2 ['$38load_attr.2', '$40binary_true_divide.3', 'c']
    $42return_value.4 = cast(value=$40binary_true_divide.3) ['$40binary_true_divide.3', '$42return_value.4']
    return $42return_value.4                 ['$42return_value.4']

2024-09-04 18:31:51,559 - ==== SSA block analysis pass on 0
2024-09-04 18:31:51,559 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024316C7B340>
2024-09-04 18:31:51,559 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:51,559 - on stmt: c = freevar(acc_init: 0.0)
2024-09-04 18:31:51,559 - on stmt: $6load_global.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:51,559 - on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
2024-09-04 18:31:51,561 - on stmt: $12call_method.4 = call $8load_method.2(a, func=$8load_method.2, args=[Var(a, arraymath.py:437)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:51,561 - on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
2024-09-04 18:31:51,561 - on stmt: $phi16.0 = $14get_iter.5
2024-09-04 18:31:51,562 - on stmt: jump 16
2024-09-04 18:31:51,562 - ==== SSA block analysis pass on 16
2024-09-04 18:31:51,562 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024316C7B340>
2024-09-04 18:31:51,562 - on stmt: $16for_iter.1 = iternext(value=$phi16.0)
2024-09-04 18:31:51,562 - on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
2024-09-04 18:31:51,562 - on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
2024-09-04 18:31:51,562 - on stmt: $phi18.1 = $16for_iter.2
2024-09-04 18:31:51,562 - on stmt: branch $16for_iter.3, 18, 34
2024-09-04 18:31:51,562 - ==== SSA block analysis pass on 18
2024-09-04 18:31:51,562 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024316C7B340>
2024-09-04 18:31:51,562 - on stmt: v = $phi18.1
2024-09-04 18:31:51,562 - on stmt: $24load_method.4 = getattr(value=v, attr=item)
2024-09-04 18:31:51,562 - on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:51,562 - on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:51,562 - on stmt: c = $28inplace_add.6
2024-09-04 18:31:51,562 - on stmt: jump 16
2024-09-04 18:31:51,562 - ==== SSA block analysis pass on 34
2024-09-04 18:31:51,562 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024316C7B340>
2024-09-04 18:31:51,562 - on stmt: $38load_attr.2 = getattr(value=a, attr=size)
2024-09-04 18:31:51,562 - on stmt: $40binary_true_divide.3 = c / $38load_attr.2
2024-09-04 18:31:51,562 - on stmt: $42return_value.4 = cast(value=$40binary_true_divide.3)
2024-09-04 18:31:51,562 - on stmt: return $42return_value.4
2024-09-04 18:31:51,571 - defs defaultdict(<class 'list'>,
            {'$12call_method.4': [(<numba.core.ir.Assign object at 0x0000024316C789D0>,
                                   0)],
             '$14get_iter.5': [(<numba.core.ir.Assign object at 0x0000024316C78AC0>,
                                0)],
             '$16for_iter.1': [(<numba.core.ir.Assign object at 0x0000024316C78D90>,
                                16)],
             '$16for_iter.2': [(<numba.core.ir.Assign object at 0x0000024316C78EB0>,
                                16)],
             '$16for_iter.3': [(<numba.core.ir.Assign object at 0x0000024316C78FD0>,
                                16)],
             '$24load_method.4': [(<numba.core.ir.Assign object at 0x0000024316C79660>,
                                   18)],
             '$26call_method.5': [(<numba.core.ir.Assign object at 0x0000024316C79870>,
                                   18)],
             '$28inplace_add.6': [(<numba.core.ir.Assign object at 0x0000024316C79990>,
                                   18)],
             '$38load_attr.2': [(<numba.core.ir.Assign object at 0x0000024316C79EA0>,
                                 34)],
             '$40binary_true_divide.3': [(<numba.core.ir.Assign object at 0x0000024316C7A050>,
                                          34)],
             '$42return_value.4': [(<numba.core.ir.Assign object at 0x0000024316C7A1A0>,
                                    34)],
             '$6load_global.1': [(<numba.core.ir.Assign object at 0x0000024316C78520>,
                                  0)],
             '$8load_method.2': [(<numba.core.ir.Assign object at 0x0000024316C786A0>,
                                  0)],
             '$phi16.0': [(<numba.core.ir.Assign object at 0x0000024316C783A0>,
                           0)],
             '$phi18.1': [(<numba.core.ir.Assign object at 0x0000024316C78CD0>,
                           16)],
             'a': [(<numba.core.ir.Assign object at 0x00000243136D0370>, 0)],
             'c': [(<numba.core.ir.Assign object at 0x0000024316C78220>, 0),
                   (<numba.core.ir.Assign object at 0x0000024316C79A50>, 18)],
             'v': [(<numba.core.ir.Assign object at 0x0000024316C792A0>, 18)]})
2024-09-04 18:31:51,571 - SSA violators <numba.core.utils.OrderedSet object at 0x0000024316C7B340>
2024-09-04 18:31:51,571 - Fix SSA violator on var c
2024-09-04 18:31:51,571 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:51,571 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024316C7B1C0>
2024-09-04 18:31:51,571 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:51,571 - on stmt: c = freevar(acc_init: 0.0)
2024-09-04 18:31:51,571 - first assign: c
2024-09-04 18:31:51,571 - replaced with: c = freevar(acc_init: 0.0)
2024-09-04 18:31:51,571 - on stmt: $6load_global.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:51,571 - on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
2024-09-04 18:31:51,571 - on stmt: $12call_method.4 = call $8load_method.2(a, func=$8load_method.2, args=[Var(a, arraymath.py:437)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:51,571 - on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
2024-09-04 18:31:51,571 - on stmt: $phi16.0 = $14get_iter.5
2024-09-04 18:31:51,571 - on stmt: jump 16
2024-09-04 18:31:51,571 - ==== SSA block rewrite pass on 16
2024-09-04 18:31:51,571 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024316C7B1C0>
2024-09-04 18:31:51,571 - on stmt: $16for_iter.1 = iternext(value=$phi16.0)
2024-09-04 18:31:51,571 - on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
2024-09-04 18:31:51,571 - on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
2024-09-04 18:31:51,571 - on stmt: $phi18.1 = $16for_iter.2
2024-09-04 18:31:51,571 - on stmt: branch $16for_iter.3, 18, 34
2024-09-04 18:31:51,571 - ==== SSA block rewrite pass on 18
2024-09-04 18:31:51,571 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024316C7B1C0>
2024-09-04 18:31:51,571 - on stmt: v = $phi18.1
2024-09-04 18:31:51,571 - on stmt: $24load_method.4 = getattr(value=v, attr=item)
2024-09-04 18:31:51,571 - on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:51,571 - on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:51,571 - on stmt: c = $28inplace_add.6
2024-09-04 18:31:51,571 - replaced with: c.1 = $28inplace_add.6
2024-09-04 18:31:51,579 - on stmt: jump 16
2024-09-04 18:31:51,579 - ==== SSA block rewrite pass on 34
2024-09-04 18:31:51,579 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024316C7B1C0>
2024-09-04 18:31:51,579 - on stmt: $38load_attr.2 = getattr(value=a, attr=size)
2024-09-04 18:31:51,579 - on stmt: $40binary_true_divide.3 = c / $38load_attr.2
2024-09-04 18:31:51,579 - on stmt: $42return_value.4 = cast(value=$40binary_true_divide.3)
2024-09-04 18:31:51,579 - on stmt: return $42return_value.4
2024-09-04 18:31:51,579 - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000024316C7B160>],
             18: [<numba.core.ir.Assign object at 0x0000024316C7B610>]})
2024-09-04 18:31:51,579 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:51,581 - Running <numba.core.ssa._FixSSAVars object at 0x0000024316C7B1C0>
2024-09-04 18:31:51,581 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:51,581 - on stmt: c = freevar(acc_init: 0.0)
2024-09-04 18:31:51,581 - on stmt: $6load_global.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:51,581 - on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
2024-09-04 18:31:51,582 - on stmt: $12call_method.4 = call $8load_method.2(a, func=$8load_method.2, args=[Var(a, arraymath.py:437)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:51,582 - on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
2024-09-04 18:31:51,582 - on stmt: $phi16.0 = $14get_iter.5
2024-09-04 18:31:51,582 - on stmt: jump 16
2024-09-04 18:31:51,582 - ==== SSA block rewrite pass on 16
2024-09-04 18:31:51,582 - Running <numba.core.ssa._FixSSAVars object at 0x0000024316C7B1C0>
2024-09-04 18:31:51,582 - on stmt: $16for_iter.1 = iternext(value=$phi16.0)
2024-09-04 18:31:51,582 - on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
2024-09-04 18:31:51,582 - on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
2024-09-04 18:31:51,582 - on stmt: $phi18.1 = $16for_iter.2
2024-09-04 18:31:51,582 - on stmt: branch $16for_iter.3, 18, 34
2024-09-04 18:31:51,582 - ==== SSA block rewrite pass on 18
2024-09-04 18:31:51,582 - Running <numba.core.ssa._FixSSAVars object at 0x0000024316C7B1C0>
2024-09-04 18:31:51,582 - on stmt: v = $phi18.1
2024-09-04 18:31:51,582 - on stmt: $24load_method.4 = getattr(value=v, attr=item)
2024-09-04 18:31:51,582 - on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:51,582 - on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:51,582 - find_def var='c' stmt=$28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:51,582 - find_def_from_top label 18
2024-09-04 18:31:51,582 - idom 16 from label 18
2024-09-04 18:31:51,582 - find_def_from_bottom label 16
2024-09-04 18:31:51,582 - find_def_from_top label 16
2024-09-04 18:31:51,582 - insert phi node c.2 = phi(incoming_values=[], incoming_blocks=[]) at 16
2024-09-04 18:31:51,582 - find_def_from_bottom label 0
2024-09-04 18:31:51,582 - incoming_def c = freevar(acc_init: 0.0)
2024-09-04 18:31:51,582 - find_def_from_bottom label 18
2024-09-04 18:31:51,582 - incoming_def c.1 = $28inplace_add.6
2024-09-04 18:31:51,582 - replaced with: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c.2, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:51,582 - on stmt: c.1 = $28inplace_add.6
2024-09-04 18:31:51,582 - on stmt: jump 16
2024-09-04 18:31:51,582 - ==== SSA block rewrite pass on 34
2024-09-04 18:31:51,582 - Running <numba.core.ssa._FixSSAVars object at 0x0000024316C7B1C0>
2024-09-04 18:31:51,589 - on stmt: $38load_attr.2 = getattr(value=a, attr=size)
2024-09-04 18:31:51,589 - on stmt: $40binary_true_divide.3 = c / $38load_attr.2
2024-09-04 18:31:51,589 - find_def var='c' stmt=$40binary_true_divide.3 = c / $38load_attr.2
2024-09-04 18:31:51,589 - find_def_from_top label 34
2024-09-04 18:31:51,589 - idom 16 from label 34
2024-09-04 18:31:51,589 - find_def_from_bottom label 16
2024-09-04 18:31:51,589 - replaced with: $40binary_true_divide.3 = c.2 / $38load_attr.2
2024-09-04 18:31:51,591 - on stmt: $42return_value.4 = cast(value=$40binary_true_divide.3)
2024-09-04 18:31:51,591 - on stmt: return $42return_value.4
2024-09-04 18:31:52,410 - bytecode dump:
>          0	NOP(arg=None, lineno=1209)
           2	LOAD_FAST(arg=0, lineno=1221)
           4	LOAD_CONST(arg=1, lineno=1221)
           6	BINARY_SUBSCR(arg=None, lineno=1221)
           8	LOAD_GLOBAL(arg=0, lineno=1221)
          10	LOAD_METHOD(arg=1, lineno=1221)
          12	LOAD_FAST(arg=0, lineno=1221)
          14	LOAD_CONST(arg=2, lineno=1221)
          16	LOAD_GLOBAL(arg=2, lineno=1221)
          18	LOAD_FAST(arg=2, lineno=1221)
          20	LOAD_FAST(arg=0, lineno=1221)
          22	LOAD_ATTR(arg=3, lineno=1221)
          24	LOAD_CONST(arg=1, lineno=1221)
          26	BINARY_SUBSCR(arg=None, lineno=1221)
          28	CALL_FUNCTION(arg=2, lineno=1221)
          30	BUILD_SLICE(arg=2, lineno=1221)
          32	BINARY_SUBSCR(arg=None, lineno=1221)
          34	CALL_METHOD(arg=1, lineno=1221)
          36	COMPARE_OP(arg=5, lineno=1221)
          38	LOAD_FAST(arg=7, lineno=1221)
          40	LOAD_CONST(arg=1, lineno=1221)
          42	STORE_SUBSCR(arg=None, lineno=1221)
          44	LOAD_FAST(arg=7, lineno=1222)
          46	LOAD_CONST(arg=1, lineno=1222)
          48	DUP_TOP_TWO(arg=None, lineno=1222)
          50	BINARY_SUBSCR(arg=None, lineno=1222)
          52	LOAD_FAST(arg=0, lineno=1222)
          54	LOAD_CONST(arg=1, lineno=1222)
          56	BINARY_SUBSCR(arg=None, lineno=1222)
          58	LOAD_GLOBAL(arg=0, lineno=1222)
          60	LOAD_METHOD(arg=4, lineno=1222)
          62	LOAD_FAST(arg=0, lineno=1222)
          64	LOAD_CONST(arg=2, lineno=1222)
          66	LOAD_GLOBAL(arg=2, lineno=1222)
          68	LOAD_FAST(arg=4, lineno=1222)
          70	LOAD_FAST(arg=0, lineno=1222)
          72	LOAD_ATTR(arg=3, lineno=1222)
          74	LOAD_CONST(arg=1, lineno=1222)
          76	BINARY_SUBSCR(arg=None, lineno=1222)
          78	CALL_FUNCTION(arg=2, lineno=1222)
          80	BUILD_SLICE(arg=2, lineno=1222)
          82	BINARY_SUBSCR(arg=None, lineno=1222)
          84	CALL_METHOD(arg=1, lineno=1222)
          86	LOAD_FAST(arg=5, lineno=1222)
          88	BINARY_ADD(arg=None, lineno=1222)
          90	COMPARE_OP(arg=5, lineno=1222)
          92	INPLACE_AND(arg=None, lineno=1222)
          94	ROT_THREE(arg=None, lineno=1222)
          96	STORE_SUBSCR(arg=None, lineno=1222)
          98	LOAD_FAST(arg=7, lineno=1224)
         100	LOAD_CONST(arg=1, lineno=1224)
         102	BINARY_SUBSCR(arg=None, lineno=1224)
         104	POP_JUMP_IF_FALSE(arg=59, lineno=1224)
         106	LOAD_FAST(arg=6, lineno=1225)
         108	LOAD_CONST(arg=3, lineno=1225)
         110	BINARY_ADD(arg=None, lineno=1225)
         112	STORE_FAST(arg=8, lineno=1225)
         114	JUMP_FORWARD(arg=2, lineno=1225)
>        116	LOAD_CONST(arg=3, lineno=1227)
         118	STORE_FAST(arg=8, lineno=1227)
>        120	LOAD_FAST(arg=8, lineno=1229)
         122	LOAD_FAST(arg=0, lineno=1229)
         124	LOAD_ATTR(arg=3, lineno=1229)
         126	LOAD_CONST(arg=1, lineno=1229)
         128	BINARY_SUBSCR(arg=None, lineno=1229)
         130	COMPARE_OP(arg=0, lineno=1229)
         132	POP_JUMP_IF_FALSE(arg=167, lineno=1229)
>        134	LOAD_GLOBAL(arg=0, lineno=1230)
         136	LOAD_METHOD(arg=1, lineno=1230)
         138	LOAD_FAST(arg=0, lineno=1230)
         140	LOAD_GLOBAL(arg=1, lineno=1230)
         142	LOAD_CONST(arg=1, lineno=1230)
         144	LOAD_FAST(arg=8, lineno=1230)
         146	LOAD_FAST(arg=1, lineno=1230)
         148	BINARY_SUBTRACT(arg=None, lineno=1230)
         150	CALL_FUNCTION(arg=2, lineno=1230)
         152	LOAD_GLOBAL(arg=2, lineno=1230)
         154	LOAD_FAST(arg=8, lineno=1230)
         156	LOAD_FAST(arg=2, lineno=1230)
         158	BINARY_ADD(arg=None, lineno=1230)
         160	LOAD_FAST(arg=0, lineno=1230)
         162	LOAD_ATTR(arg=3, lineno=1230)
         164	LOAD_CONST(arg=1, lineno=1230)
         166	BINARY_SUBSCR(arg=None, lineno=1230)
         168	CALL_FUNCTION(arg=2, lineno=1230)
         170	BUILD_SLICE(arg=2, lineno=1230)
         172	BINARY_SUBSCR(arg=None, lineno=1230)
         174	CALL_METHOD(arg=1, lineno=1230)
         176	STORE_FAST(arg=9, lineno=1230)
         178	LOAD_FAST(arg=0, lineno=1233)
         180	LOAD_FAST(arg=8, lineno=1233)
         182	BINARY_SUBSCR(arg=None, lineno=1233)
         184	LOAD_FAST(arg=9, lineno=1233)
         186	COMPARE_OP(arg=2, lineno=1233)
         188	LOAD_FAST(arg=7, lineno=1233)
         190	LOAD_FAST(arg=8, lineno=1233)
         192	STORE_SUBSCR(arg=None, lineno=1233)
         194	LOAD_FAST(arg=7, lineno=1235)
         196	LOAD_FAST(arg=8, lineno=1235)
         198	BINARY_SUBSCR(arg=None, lineno=1235)
         200	POP_JUMP_IF_TRUE(arg=107, lineno=1235)
         202	LOAD_FAST(arg=8, lineno=1236)
         204	LOAD_CONST(arg=3, lineno=1236)
         206	INPLACE_ADD(arg=None, lineno=1236)
         208	STORE_FAST(arg=8, lineno=1236)
         210	JUMP_ABSOLUTE(arg=61, lineno=1237)
>        212	LOAD_GLOBAL(arg=0, lineno=1239)
         214	LOAD_METHOD(arg=4, lineno=1239)
         216	LOAD_FAST(arg=0, lineno=1239)
         218	LOAD_GLOBAL(arg=1, lineno=1239)
         220	LOAD_CONST(arg=1, lineno=1239)
         222	LOAD_FAST(arg=8, lineno=1239)
         224	LOAD_FAST(arg=3, lineno=1239)
         226	BINARY_SUBTRACT(arg=None, lineno=1239)
         228	CALL_FUNCTION(arg=2, lineno=1239)
         230	LOAD_GLOBAL(arg=2, lineno=1239)
         232	LOAD_FAST(arg=8, lineno=1239)
         234	LOAD_FAST(arg=4, lineno=1239)
         236	BINARY_ADD(arg=None, lineno=1239)
         238	LOAD_FAST(arg=0, lineno=1239)
         240	LOAD_ATTR(arg=3, lineno=1239)
         242	LOAD_CONST(arg=1, lineno=1239)
         244	BINARY_SUBSCR(arg=None, lineno=1239)
         246	CALL_FUNCTION(arg=2, lineno=1239)
         248	BUILD_SLICE(arg=2, lineno=1239)
         250	BINARY_SUBSCR(arg=None, lineno=1239)
         252	CALL_METHOD(arg=1, lineno=1239)
         254	STORE_FAST(arg=10, lineno=1239)
         256	LOAD_FAST(arg=7, lineno=1240)
         258	LOAD_FAST(arg=8, lineno=1240)
         260	DUP_TOP_TWO(arg=None, lineno=1240)
         262	BINARY_SUBSCR(arg=None, lineno=1240)
         264	LOAD_FAST(arg=0, lineno=1240)
         266	LOAD_FAST(arg=8, lineno=1240)
         268	BINARY_SUBSCR(arg=None, lineno=1240)
         270	LOAD_FAST(arg=10, lineno=1240)
         272	LOAD_FAST(arg=5, lineno=1240)
         274	BINARY_ADD(arg=None, lineno=1240)
         276	COMPARE_OP(arg=5, lineno=1240)
         278	INPLACE_AND(arg=None, lineno=1240)
         280	ROT_THREE(arg=None, lineno=1240)
         282	STORE_SUBSCR(arg=None, lineno=1240)
         284	LOAD_FAST(arg=7, lineno=1242)
         286	LOAD_FAST(arg=8, lineno=1242)
         288	BINARY_SUBSCR(arg=None, lineno=1242)
         290	POP_JUMP_IF_TRUE(arg=152, lineno=1242)
         292	LOAD_FAST(arg=8, lineno=1243)
         294	LOAD_CONST(arg=3, lineno=1243)
         296	INPLACE_ADD(arg=None, lineno=1243)
         298	STORE_FAST(arg=8, lineno=1243)
         300	JUMP_ABSOLUTE(arg=61, lineno=1244)
>        302	LOAD_FAST(arg=8, lineno=1247)
         304	LOAD_FAST(arg=6, lineno=1247)
         306	LOAD_CONST(arg=3, lineno=1247)
         308	BINARY_ADD(arg=None, lineno=1247)
         310	INPLACE_ADD(arg=None, lineno=1247)
         312	STORE_FAST(arg=8, lineno=1247)
         314	LOAD_FAST(arg=8, lineno=1229)
         316	LOAD_FAST(arg=0, lineno=1229)
         318	LOAD_ATTR(arg=3, lineno=1229)
         320	LOAD_CONST(arg=1, lineno=1229)
         322	BINARY_SUBSCR(arg=None, lineno=1229)
         324	COMPARE_OP(arg=0, lineno=1229)
         326	POP_JUMP_IF_TRUE(arg=68, lineno=1229)
         328	LOAD_CONST(arg=2, lineno=1229)
         330	RETURN_VALUE(arg=None, lineno=1229)
>        332	LOAD_CONST(arg=2, lineno=1229)
         334	RETURN_VALUE(arg=None, lineno=1229)
2024-09-04 18:31:52,410 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:52,410 - stack: []
2024-09-04 18:31:52,410 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:52,411 - dispatch pc=0, inst=NOP(arg=None, lineno=1209)
2024-09-04 18:31:52,411 - stack []
2024-09-04 18:31:52,411 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1221)
2024-09-04 18:31:52,411 - stack []
2024-09-04 18:31:52,411 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1221)
2024-09-04 18:31:52,411 - stack ['$x2.0']
2024-09-04 18:31:52,411 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1221)
2024-09-04 18:31:52,411 - stack ['$x2.0', '$const4.1']
2024-09-04 18:31:52,411 - dispatch pc=8, inst=LOAD_GLOBAL(arg=0, lineno=1221)
2024-09-04 18:31:52,411 - stack ['$6binary_subscr.2']
2024-09-04 18:31:52,411 - dispatch pc=10, inst=LOAD_METHOD(arg=1, lineno=1221)
2024-09-04 18:31:52,411 - stack ['$6binary_subscr.2', '$8load_global.3']
2024-09-04 18:31:52,411 - dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=1221)
2024-09-04 18:31:52,412 - stack ['$6binary_subscr.2', '$10load_method.4']
2024-09-04 18:31:52,412 - dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=1221)
2024-09-04 18:31:52,412 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5']
2024-09-04 18:31:52,412 - dispatch pc=16, inst=LOAD_GLOBAL(arg=2, lineno=1221)
2024-09-04 18:31:52,412 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6']
2024-09-04 18:31:52,412 - dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=1221)
2024-09-04 18:31:52,412 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7']
2024-09-04 18:31:52,412 - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=1221)
2024-09-04 18:31:52,412 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8']
2024-09-04 18:31:52,412 - dispatch pc=22, inst=LOAD_ATTR(arg=3, lineno=1221)
2024-09-04 18:31:52,412 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8', '$x20.9']
2024-09-04 18:31:52,412 - dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=1221)
2024-09-04 18:31:52,412 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8', '$22load_attr.10']
2024-09-04 18:31:52,412 - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1221)
2024-09-04 18:31:52,413 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8', '$22load_attr.10', '$const24.11']
2024-09-04 18:31:52,413 - dispatch pc=28, inst=CALL_FUNCTION(arg=2, lineno=1221)
2024-09-04 18:31:52,413 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8', '$26binary_subscr.12']
2024-09-04 18:31:52,413 - dispatch pc=30, inst=BUILD_SLICE(arg=2, lineno=1221)
2024-09-04 18:31:52,413 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$28call_function.13']
2024-09-04 18:31:52,413 - dispatch pc=32, inst=BINARY_SUBSCR(arg=None, lineno=1221)
2024-09-04 18:31:52,413 - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$30build_slice.15']
2024-09-04 18:31:52,413 - dispatch pc=34, inst=CALL_METHOD(arg=1, lineno=1221)
2024-09-04 18:31:52,413 - stack ['$6binary_subscr.2', '$10load_method.4', '$32binary_subscr.16']
2024-09-04 18:31:52,413 - dispatch pc=36, inst=COMPARE_OP(arg=5, lineno=1221)
2024-09-04 18:31:52,413 - stack ['$6binary_subscr.2', '$34call_method.17']
2024-09-04 18:31:52,413 - dispatch pc=38, inst=LOAD_FAST(arg=7, lineno=1221)
2024-09-04 18:31:52,413 - stack ['$36compare_op.18']
2024-09-04 18:31:52,413 - dispatch pc=40, inst=LOAD_CONST(arg=1, lineno=1221)
2024-09-04 18:31:52,414 - stack ['$36compare_op.18', '$peaks38.19']
2024-09-04 18:31:52,414 - dispatch pc=42, inst=STORE_SUBSCR(arg=None, lineno=1221)
2024-09-04 18:31:52,414 - stack ['$36compare_op.18', '$peaks38.19', '$const40.20']
2024-09-04 18:31:52,414 - dispatch pc=44, inst=LOAD_FAST(arg=7, lineno=1222)
2024-09-04 18:31:52,414 - stack []
2024-09-04 18:31:52,414 - dispatch pc=46, inst=LOAD_CONST(arg=1, lineno=1222)
2024-09-04 18:31:52,414 - stack ['$peaks44.21']
2024-09-04 18:31:52,414 - dispatch pc=48, inst=DUP_TOP_TWO(arg=None, lineno=1222)
2024-09-04 18:31:52,414 - stack ['$peaks44.21', '$const46.22']
2024-09-04 18:31:52,414 - dispatch pc=50, inst=BINARY_SUBSCR(arg=None, lineno=1222)
2024-09-04 18:31:52,414 - stack ['$peaks44.21', '$const46.22', '$48dup_top_two.23', '$48dup_top_two.24']
2024-09-04 18:31:52,415 - dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=1222)
2024-09-04 18:31:52,415 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25']
2024-09-04 18:31:52,415 - dispatch pc=54, inst=LOAD_CONST(arg=1, lineno=1222)
2024-09-04 18:31:52,415 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$x52.26']
2024-09-04 18:31:52,415 - dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=1222)
2024-09-04 18:31:52,415 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$x52.26', '$const54.27']
2024-09-04 18:31:52,415 - dispatch pc=58, inst=LOAD_GLOBAL(arg=0, lineno=1222)
2024-09-04 18:31:52,415 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28']
2024-09-04 18:31:52,415 - dispatch pc=60, inst=LOAD_METHOD(arg=4, lineno=1222)
2024-09-04 18:31:52,415 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$58load_global.29']
2024-09-04 18:31:52,415 - dispatch pc=62, inst=LOAD_FAST(arg=0, lineno=1222)
2024-09-04 18:31:52,415 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30']
2024-09-04 18:31:52,415 - dispatch pc=64, inst=LOAD_CONST(arg=2, lineno=1222)
2024-09-04 18:31:52,415 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31']
2024-09-04 18:31:52,416 - dispatch pc=66, inst=LOAD_GLOBAL(arg=2, lineno=1222)
2024-09-04 18:31:52,416 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32']
2024-09-04 18:31:52,416 - dispatch pc=68, inst=LOAD_FAST(arg=4, lineno=1222)
2024-09-04 18:31:52,416 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33']
2024-09-04 18:31:52,416 - dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1222)
2024-09-04 18:31:52,416 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34']
2024-09-04 18:31:52,416 - dispatch pc=72, inst=LOAD_ATTR(arg=3, lineno=1222)
2024-09-04 18:31:52,416 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34', '$x70.35']
2024-09-04 18:31:52,416 - dispatch pc=74, inst=LOAD_CONST(arg=1, lineno=1222)
2024-09-04 18:31:52,416 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34', '$72load_attr.36']
2024-09-04 18:31:52,416 - dispatch pc=76, inst=BINARY_SUBSCR(arg=None, lineno=1222)
2024-09-04 18:31:52,416 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34', '$72load_attr.36', '$const74.37']
2024-09-04 18:31:52,416 - dispatch pc=78, inst=CALL_FUNCTION(arg=2, lineno=1222)
2024-09-04 18:31:52,416 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34', '$76binary_subscr.38']
2024-09-04 18:31:52,417 - dispatch pc=80, inst=BUILD_SLICE(arg=2, lineno=1222)
2024-09-04 18:31:52,417 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$78call_function.39']
2024-09-04 18:31:52,417 - dispatch pc=82, inst=BINARY_SUBSCR(arg=None, lineno=1222)
2024-09-04 18:31:52,417 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$80build_slice.41']
2024-09-04 18:31:52,417 - dispatch pc=84, inst=CALL_METHOD(arg=1, lineno=1222)
2024-09-04 18:31:52,417 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$82binary_subscr.42']
2024-09-04 18:31:52,417 - dispatch pc=86, inst=LOAD_FAST(arg=5, lineno=1222)
2024-09-04 18:31:52,417 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$84call_method.43']
2024-09-04 18:31:52,417 - dispatch pc=88, inst=BINARY_ADD(arg=None, lineno=1222)
2024-09-04 18:31:52,417 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$84call_method.43', '$delta86.44']
2024-09-04 18:31:52,417 - dispatch pc=90, inst=COMPARE_OP(arg=5, lineno=1222)
2024-09-04 18:31:52,417 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$88binary_add.45']
2024-09-04 18:31:52,418 - dispatch pc=92, inst=INPLACE_AND(arg=None, lineno=1222)
2024-09-04 18:31:52,418 - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$90compare_op.46']
2024-09-04 18:31:52,418 - dispatch pc=94, inst=ROT_THREE(arg=None, lineno=1222)
2024-09-04 18:31:52,418 - stack ['$peaks44.21', '$const46.22', '$92inplace_and.47']
2024-09-04 18:31:52,418 - dispatch pc=96, inst=STORE_SUBSCR(arg=None, lineno=1222)
2024-09-04 18:31:52,418 - stack ['$92inplace_and.47', '$peaks44.21', '$const46.22']
2024-09-04 18:31:52,418 - dispatch pc=98, inst=LOAD_FAST(arg=7, lineno=1224)
2024-09-04 18:31:52,418 - stack []
2024-09-04 18:31:52,418 - dispatch pc=100, inst=LOAD_CONST(arg=1, lineno=1224)
2024-09-04 18:31:52,418 - stack ['$peaks98.48']
2024-09-04 18:31:52,418 - dispatch pc=102, inst=BINARY_SUBSCR(arg=None, lineno=1224)
2024-09-04 18:31:52,419 - stack ['$peaks98.48', '$const100.49']
2024-09-04 18:31:52,419 - dispatch pc=104, inst=POP_JUMP_IF_FALSE(arg=59, lineno=1224)
2024-09-04 18:31:52,419 - stack ['$102binary_subscr.50']
2024-09-04 18:31:52,419 - end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0), Edge(pc=116, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:52,419 - pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=116 nstack_initial=0)])
2024-09-04 18:31:52,419 - stack: []
2024-09-04 18:31:52,419 - state.pc_initial: State(pc_initial=106 nstack_initial=0)
2024-09-04 18:31:52,419 - dispatch pc=106, inst=LOAD_FAST(arg=6, lineno=1225)
2024-09-04 18:31:52,419 - stack []
2024-09-04 18:31:52,420 - dispatch pc=108, inst=LOAD_CONST(arg=3, lineno=1225)
2024-09-04 18:31:52,420 - stack ['$wait106.0']
2024-09-04 18:31:52,420 - dispatch pc=110, inst=BINARY_ADD(arg=None, lineno=1225)
2024-09-04 18:31:52,420 - stack ['$wait106.0', '$const108.1']
2024-09-04 18:31:52,420 - dispatch pc=112, inst=STORE_FAST(arg=8, lineno=1225)
2024-09-04 18:31:52,420 - stack ['$110binary_add.2']
2024-09-04 18:31:52,420 - dispatch pc=114, inst=JUMP_FORWARD(arg=2, lineno=1225)
2024-09-04 18:31:52,420 - stack []
2024-09-04 18:31:52,420 - end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:52,420 - pending: deque([State(pc_initial=116 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
2024-09-04 18:31:52,420 - stack: []
2024-09-04 18:31:52,421 - state.pc_initial: State(pc_initial=116 nstack_initial=0)
2024-09-04 18:31:52,421 - dispatch pc=116, inst=LOAD_CONST(arg=3, lineno=1227)
2024-09-04 18:31:52,421 - stack []
2024-09-04 18:31:52,421 - dispatch pc=118, inst=STORE_FAST(arg=8, lineno=1227)
2024-09-04 18:31:52,421 - stack ['$const116.0']
2024-09-04 18:31:52,421 - end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:52,421 - pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
2024-09-04 18:31:52,421 - stack: []
2024-09-04 18:31:52,421 - state.pc_initial: State(pc_initial=120 nstack_initial=0)
2024-09-04 18:31:52,421 - dispatch pc=120, inst=LOAD_FAST(arg=8, lineno=1229)
2024-09-04 18:31:52,421 - stack []
2024-09-04 18:31:52,421 - dispatch pc=122, inst=LOAD_FAST(arg=0, lineno=1229)
2024-09-04 18:31:52,421 - stack ['$n120.0']
2024-09-04 18:31:52,421 - dispatch pc=124, inst=LOAD_ATTR(arg=3, lineno=1229)
2024-09-04 18:31:52,421 - stack ['$n120.0', '$x122.1']
2024-09-04 18:31:52,422 - dispatch pc=126, inst=LOAD_CONST(arg=1, lineno=1229)
2024-09-04 18:31:52,422 - stack ['$n120.0', '$124load_attr.2']
2024-09-04 18:31:52,422 - dispatch pc=128, inst=BINARY_SUBSCR(arg=None, lineno=1229)
2024-09-04 18:31:52,422 - stack ['$n120.0', '$124load_attr.2', '$const126.3']
2024-09-04 18:31:52,422 - dispatch pc=130, inst=COMPARE_OP(arg=0, lineno=1229)
2024-09-04 18:31:52,422 - stack ['$n120.0', '$128binary_subscr.4']
2024-09-04 18:31:52,422 - dispatch pc=132, inst=POP_JUMP_IF_FALSE(arg=167, lineno=1229)
2024-09-04 18:31:52,422 - stack ['$130compare_op.5']
2024-09-04 18:31:52,422 - end state. edges=[Edge(pc=134, stack=(), blockstack=(), npush=0), Edge(pc=332, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:52,422 - pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=134 nstack_initial=0), State(pc_initial=332 nstack_initial=0)])
2024-09-04 18:31:52,422 - pending: deque([State(pc_initial=134 nstack_initial=0), State(pc_initial=332 nstack_initial=0)])
2024-09-04 18:31:52,423 - stack: []
2024-09-04 18:31:52,423 - state.pc_initial: State(pc_initial=134 nstack_initial=0)
2024-09-04 18:31:52,423 - dispatch pc=134, inst=LOAD_GLOBAL(arg=0, lineno=1230)
2024-09-04 18:31:52,423 - stack []
2024-09-04 18:31:52,423 - dispatch pc=136, inst=LOAD_METHOD(arg=1, lineno=1230)
2024-09-04 18:31:52,423 - stack ['$134load_global.0']
2024-09-04 18:31:52,423 - dispatch pc=138, inst=LOAD_FAST(arg=0, lineno=1230)
2024-09-04 18:31:52,423 - stack ['$136load_method.1']
2024-09-04 18:31:52,423 - dispatch pc=140, inst=LOAD_GLOBAL(arg=1, lineno=1230)
2024-09-04 18:31:52,423 - stack ['$136load_method.1', '$x138.2']
2024-09-04 18:31:52,423 - dispatch pc=142, inst=LOAD_CONST(arg=1, lineno=1230)
2024-09-04 18:31:52,423 - stack ['$136load_method.1', '$x138.2', '$140load_global.3']
2024-09-04 18:31:52,423 - dispatch pc=144, inst=LOAD_FAST(arg=8, lineno=1230)
2024-09-04 18:31:52,424 - stack ['$136load_method.1', '$x138.2', '$140load_global.3', '$const142.4']
2024-09-04 18:31:52,424 - dispatch pc=146, inst=LOAD_FAST(arg=1, lineno=1230)
2024-09-04 18:31:52,424 - stack ['$136load_method.1', '$x138.2', '$140load_global.3', '$const142.4', '$n144.5']
2024-09-04 18:31:52,424 - dispatch pc=148, inst=BINARY_SUBTRACT(arg=None, lineno=1230)
2024-09-04 18:31:52,424 - stack ['$136load_method.1', '$x138.2', '$140load_global.3', '$const142.4', '$n144.5', '$pre_max146.6']
2024-09-04 18:31:52,424 - dispatch pc=150, inst=CALL_FUNCTION(arg=2, lineno=1230)
2024-09-04 18:31:52,424 - stack ['$136load_method.1', '$x138.2', '$140load_global.3', '$const142.4', '$148binary_subtract.7']
2024-09-04 18:31:52,424 - dispatch pc=152, inst=LOAD_GLOBAL(arg=2, lineno=1230)
2024-09-04 18:31:52,424 - stack ['$136load_method.1', '$x138.2', '$150call_function.8']
2024-09-04 18:31:52,424 - dispatch pc=154, inst=LOAD_FAST(arg=8, lineno=1230)
2024-09-04 18:31:52,424 - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9']
2024-09-04 18:31:52,424 - dispatch pc=156, inst=LOAD_FAST(arg=2, lineno=1230)
2024-09-04 18:31:52,424 - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$n154.10']
2024-09-04 18:31:52,425 - dispatch pc=158, inst=BINARY_ADD(arg=None, lineno=1230)
2024-09-04 18:31:52,425 - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$n154.10', '$post_max156.11']
2024-09-04 18:31:52,425 - dispatch pc=160, inst=LOAD_FAST(arg=0, lineno=1230)
2024-09-04 18:31:52,425 - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12']
2024-09-04 18:31:52,425 - dispatch pc=162, inst=LOAD_ATTR(arg=3, lineno=1230)
2024-09-04 18:31:52,425 - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12', '$x160.13']
2024-09-04 18:31:52,425 - dispatch pc=164, inst=LOAD_CONST(arg=1, lineno=1230)
2024-09-04 18:31:52,425 - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12', '$162load_attr.14']
2024-09-04 18:31:52,425 - dispatch pc=166, inst=BINARY_SUBSCR(arg=None, lineno=1230)
2024-09-04 18:31:52,425 - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12', '$162load_attr.14', '$const164.15']
2024-09-04 18:31:52,425 - dispatch pc=168, inst=CALL_FUNCTION(arg=2, lineno=1230)
2024-09-04 18:31:52,425 - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12', '$166binary_subscr.16']
2024-09-04 18:31:52,426 - dispatch pc=170, inst=BUILD_SLICE(arg=2, lineno=1230)
2024-09-04 18:31:52,426 - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$168call_function.17']
2024-09-04 18:31:52,426 - dispatch pc=172, inst=BINARY_SUBSCR(arg=None, lineno=1230)
2024-09-04 18:31:52,426 - stack ['$136load_method.1', '$x138.2', '$170build_slice.19']
2024-09-04 18:31:52,426 - dispatch pc=174, inst=CALL_METHOD(arg=1, lineno=1230)
2024-09-04 18:31:52,426 - stack ['$136load_method.1', '$172binary_subscr.20']
2024-09-04 18:31:52,426 - dispatch pc=176, inst=STORE_FAST(arg=9, lineno=1230)
2024-09-04 18:31:52,426 - stack ['$174call_method.21']
2024-09-04 18:31:52,426 - dispatch pc=178, inst=LOAD_FAST(arg=0, lineno=1233)
2024-09-04 18:31:52,426 - stack []
2024-09-04 18:31:52,426 - dispatch pc=180, inst=LOAD_FAST(arg=8, lineno=1233)
2024-09-04 18:31:52,427 - stack ['$x178.22']
2024-09-04 18:31:52,427 - dispatch pc=182, inst=BINARY_SUBSCR(arg=None, lineno=1233)
2024-09-04 18:31:52,427 - stack ['$x178.22', '$n180.23']
2024-09-04 18:31:52,427 - dispatch pc=184, inst=LOAD_FAST(arg=9, lineno=1233)
2024-09-04 18:31:52,427 - stack ['$182binary_subscr.24']
2024-09-04 18:31:52,427 - dispatch pc=186, inst=COMPARE_OP(arg=2, lineno=1233)
2024-09-04 18:31:52,427 - stack ['$182binary_subscr.24', '$maxn184.25']
2024-09-04 18:31:52,427 - dispatch pc=188, inst=LOAD_FAST(arg=7, lineno=1233)
2024-09-04 18:31:52,427 - stack ['$186compare_op.26']
2024-09-04 18:31:52,427 - dispatch pc=190, inst=LOAD_FAST(arg=8, lineno=1233)
2024-09-04 18:31:52,427 - stack ['$186compare_op.26', '$peaks188.27']
2024-09-04 18:31:52,427 - dispatch pc=192, inst=STORE_SUBSCR(arg=None, lineno=1233)
2024-09-04 18:31:52,428 - stack ['$186compare_op.26', '$peaks188.27', '$n190.28']
2024-09-04 18:31:52,428 - dispatch pc=194, inst=LOAD_FAST(arg=7, lineno=1235)
2024-09-04 18:31:52,428 - stack []
2024-09-04 18:31:52,428 - dispatch pc=196, inst=LOAD_FAST(arg=8, lineno=1235)
2024-09-04 18:31:52,428 - stack ['$peaks194.29']
2024-09-04 18:31:52,428 - dispatch pc=198, inst=BINARY_SUBSCR(arg=None, lineno=1235)
2024-09-04 18:31:52,428 - stack ['$peaks194.29', '$n196.30']
2024-09-04 18:31:52,428 - dispatch pc=200, inst=POP_JUMP_IF_TRUE(arg=107, lineno=1235)
2024-09-04 18:31:52,428 - stack ['$198binary_subscr.31']
2024-09-04 18:31:52,428 - end state. edges=[Edge(pc=202, stack=(), blockstack=(), npush=0), Edge(pc=212, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:52,428 - pending: deque([State(pc_initial=332 nstack_initial=0), State(pc_initial=202 nstack_initial=0), State(pc_initial=212 nstack_initial=0)])
2024-09-04 18:31:52,429 - stack: []
2024-09-04 18:31:52,429 - state.pc_initial: State(pc_initial=332 nstack_initial=0)
2024-09-04 18:31:52,429 - dispatch pc=332, inst=LOAD_CONST(arg=2, lineno=1229)
2024-09-04 18:31:52,429 - stack []
2024-09-04 18:31:52,429 - dispatch pc=334, inst=RETURN_VALUE(arg=None, lineno=1229)
2024-09-04 18:31:52,429 - stack ['$const332.0']
2024-09-04 18:31:52,429 - end state. edges=[]
2024-09-04 18:31:52,429 - pending: deque([State(pc_initial=202 nstack_initial=0), State(pc_initial=212 nstack_initial=0)])
2024-09-04 18:31:52,429 - stack: []
2024-09-04 18:31:52,430 - state.pc_initial: State(pc_initial=202 nstack_initial=0)
2024-09-04 18:31:52,430 - dispatch pc=202, inst=LOAD_FAST(arg=8, lineno=1236)
2024-09-04 18:31:52,430 - stack []
2024-09-04 18:31:52,430 - dispatch pc=204, inst=LOAD_CONST(arg=3, lineno=1236)
2024-09-04 18:31:52,430 - stack ['$n202.0']
2024-09-04 18:31:52,430 - dispatch pc=206, inst=INPLACE_ADD(arg=None, lineno=1236)
2024-09-04 18:31:52,430 - stack ['$n202.0', '$const204.1']
2024-09-04 18:31:52,430 - dispatch pc=208, inst=STORE_FAST(arg=8, lineno=1236)
2024-09-04 18:31:52,430 - stack ['$206inplace_add.2']
2024-09-04 18:31:52,430 - dispatch pc=210, inst=JUMP_ABSOLUTE(arg=61, lineno=1237)
2024-09-04 18:31:52,430 - stack []
2024-09-04 18:31:52,431 - end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:52,431 - pending: deque([State(pc_initial=212 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
2024-09-04 18:31:52,431 - stack: []
2024-09-04 18:31:52,431 - state.pc_initial: State(pc_initial=212 nstack_initial=0)
2024-09-04 18:31:52,431 - dispatch pc=212, inst=LOAD_GLOBAL(arg=0, lineno=1239)
2024-09-04 18:31:52,431 - stack []
2024-09-04 18:31:52,432 - dispatch pc=214, inst=LOAD_METHOD(arg=4, lineno=1239)
2024-09-04 18:31:52,432 - stack ['$212load_global.0']
2024-09-04 18:31:52,432 - dispatch pc=216, inst=LOAD_FAST(arg=0, lineno=1239)
2024-09-04 18:31:52,432 - stack ['$214load_method.1']
2024-09-04 18:31:52,432 - dispatch pc=218, inst=LOAD_GLOBAL(arg=1, lineno=1239)
2024-09-04 18:31:52,432 - stack ['$214load_method.1', '$x216.2']
2024-09-04 18:31:52,432 - dispatch pc=220, inst=LOAD_CONST(arg=1, lineno=1239)
2024-09-04 18:31:52,433 - stack ['$214load_method.1', '$x216.2', '$218load_global.3']
2024-09-04 18:31:52,433 - dispatch pc=222, inst=LOAD_FAST(arg=8, lineno=1239)
2024-09-04 18:31:52,433 - stack ['$214load_method.1', '$x216.2', '$218load_global.3', '$const220.4']
2024-09-04 18:31:52,433 - dispatch pc=224, inst=LOAD_FAST(arg=3, lineno=1239)
2024-09-04 18:31:52,433 - stack ['$214load_method.1', '$x216.2', '$218load_global.3', '$const220.4', '$n222.5']
2024-09-04 18:31:52,433 - dispatch pc=226, inst=BINARY_SUBTRACT(arg=None, lineno=1239)
2024-09-04 18:31:52,433 - stack ['$214load_method.1', '$x216.2', '$218load_global.3', '$const220.4', '$n222.5', '$pre_avg224.6']
2024-09-04 18:31:52,433 - dispatch pc=228, inst=CALL_FUNCTION(arg=2, lineno=1239)
2024-09-04 18:31:52,433 - stack ['$214load_method.1', '$x216.2', '$218load_global.3', '$const220.4', '$226binary_subtract.7']
2024-09-04 18:31:52,433 - dispatch pc=230, inst=LOAD_GLOBAL(arg=2, lineno=1239)
2024-09-04 18:31:52,434 - stack ['$214load_method.1', '$x216.2', '$228call_function.8']
2024-09-04 18:31:52,434 - dispatch pc=232, inst=LOAD_FAST(arg=8, lineno=1239)
2024-09-04 18:31:52,434 - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9']
2024-09-04 18:31:52,434 - dispatch pc=234, inst=LOAD_FAST(arg=4, lineno=1239)
2024-09-04 18:31:52,434 - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$n232.10']
2024-09-04 18:31:52,434 - dispatch pc=236, inst=BINARY_ADD(arg=None, lineno=1239)
2024-09-04 18:31:52,434 - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$n232.10', '$post_avg234.11']
2024-09-04 18:31:52,434 - dispatch pc=238, inst=LOAD_FAST(arg=0, lineno=1239)
2024-09-04 18:31:52,434 - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12']
2024-09-04 18:31:52,435 - dispatch pc=240, inst=LOAD_ATTR(arg=3, lineno=1239)
2024-09-04 18:31:52,435 - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12', '$x238.13']
2024-09-04 18:31:52,435 - dispatch pc=242, inst=LOAD_CONST(arg=1, lineno=1239)
2024-09-04 18:31:52,435 - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12', '$240load_attr.14']
2024-09-04 18:31:52,435 - dispatch pc=244, inst=BINARY_SUBSCR(arg=None, lineno=1239)
2024-09-04 18:31:52,435 - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12', '$240load_attr.14', '$const242.15']
2024-09-04 18:31:52,436 - dispatch pc=246, inst=CALL_FUNCTION(arg=2, lineno=1239)
2024-09-04 18:31:52,436 - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12', '$244binary_subscr.16']
2024-09-04 18:31:52,436 - dispatch pc=248, inst=BUILD_SLICE(arg=2, lineno=1239)
2024-09-04 18:31:52,436 - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$246call_function.17']
2024-09-04 18:31:52,436 - dispatch pc=250, inst=BINARY_SUBSCR(arg=None, lineno=1239)
2024-09-04 18:31:52,436 - stack ['$214load_method.1', '$x216.2', '$248build_slice.19']
2024-09-04 18:31:52,437 - dispatch pc=252, inst=CALL_METHOD(arg=1, lineno=1239)
2024-09-04 18:31:52,437 - stack ['$214load_method.1', '$250binary_subscr.20']
2024-09-04 18:31:52,437 - dispatch pc=254, inst=STORE_FAST(arg=10, lineno=1239)
2024-09-04 18:31:52,437 - stack ['$252call_method.21']
2024-09-04 18:31:52,437 - dispatch pc=256, inst=LOAD_FAST(arg=7, lineno=1240)
2024-09-04 18:31:52,437 - stack []
2024-09-04 18:31:52,437 - dispatch pc=258, inst=LOAD_FAST(arg=8, lineno=1240)
2024-09-04 18:31:52,438 - stack ['$peaks256.22']
2024-09-04 18:31:52,438 - dispatch pc=260, inst=DUP_TOP_TWO(arg=None, lineno=1240)
2024-09-04 18:31:52,438 - stack ['$peaks256.22', '$n258.23']
2024-09-04 18:31:52,438 - dispatch pc=262, inst=BINARY_SUBSCR(arg=None, lineno=1240)
2024-09-04 18:31:52,438 - stack ['$peaks256.22', '$n258.23', '$260dup_top_two.24', '$260dup_top_two.25']
2024-09-04 18:31:52,438 - dispatch pc=264, inst=LOAD_FAST(arg=0, lineno=1240)
2024-09-04 18:31:52,438 - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26']
2024-09-04 18:31:52,439 - dispatch pc=266, inst=LOAD_FAST(arg=8, lineno=1240)
2024-09-04 18:31:52,439 - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$x264.27']
2024-09-04 18:31:52,439 - dispatch pc=268, inst=BINARY_SUBSCR(arg=None, lineno=1240)
2024-09-04 18:31:52,439 - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$x264.27', '$n266.28']
2024-09-04 18:31:52,439 - dispatch pc=270, inst=LOAD_FAST(arg=10, lineno=1240)
2024-09-04 18:31:52,439 - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$268binary_subscr.29']
2024-09-04 18:31:52,439 - dispatch pc=272, inst=LOAD_FAST(arg=5, lineno=1240)
2024-09-04 18:31:52,440 - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$268binary_subscr.29', '$avgn270.30']
2024-09-04 18:31:52,440 - dispatch pc=274, inst=BINARY_ADD(arg=None, lineno=1240)
2024-09-04 18:31:52,440 - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$268binary_subscr.29', '$avgn270.30', '$delta272.31']
2024-09-04 18:31:52,440 - dispatch pc=276, inst=COMPARE_OP(arg=5, lineno=1240)
2024-09-04 18:31:52,440 - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$268binary_subscr.29', '$274binary_add.32']
2024-09-04 18:31:52,440 - dispatch pc=278, inst=INPLACE_AND(arg=None, lineno=1240)
2024-09-04 18:31:52,440 - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$276compare_op.33']
2024-09-04 18:31:52,441 - dispatch pc=280, inst=ROT_THREE(arg=None, lineno=1240)
2024-09-04 18:31:52,441 - stack ['$peaks256.22', '$n258.23', '$278inplace_and.34']
2024-09-04 18:31:52,441 - dispatch pc=282, inst=STORE_SUBSCR(arg=None, lineno=1240)
2024-09-04 18:31:52,441 - stack ['$278inplace_and.34', '$peaks256.22', '$n258.23']
2024-09-04 18:31:52,441 - dispatch pc=284, inst=LOAD_FAST(arg=7, lineno=1242)
2024-09-04 18:31:52,441 - stack []
2024-09-04 18:31:52,441 - dispatch pc=286, inst=LOAD_FAST(arg=8, lineno=1242)
2024-09-04 18:31:52,441 - stack ['$peaks284.35']
2024-09-04 18:31:52,441 - dispatch pc=288, inst=BINARY_SUBSCR(arg=None, lineno=1242)
2024-09-04 18:31:52,442 - stack ['$peaks284.35', '$n286.36']
2024-09-04 18:31:52,442 - dispatch pc=290, inst=POP_JUMP_IF_TRUE(arg=152, lineno=1242)
2024-09-04 18:31:52,442 - stack ['$288binary_subscr.37']
2024-09-04 18:31:52,442 - end state. edges=[Edge(pc=292, stack=(), blockstack=(), npush=0), Edge(pc=302, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:52,442 - pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0)])
2024-09-04 18:31:52,442 - pending: deque([State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0)])
2024-09-04 18:31:52,442 - stack: []
2024-09-04 18:31:52,442 - state.pc_initial: State(pc_initial=292 nstack_initial=0)
2024-09-04 18:31:52,442 - dispatch pc=292, inst=LOAD_FAST(arg=8, lineno=1243)
2024-09-04 18:31:52,443 - stack []
2024-09-04 18:31:52,443 - dispatch pc=294, inst=LOAD_CONST(arg=3, lineno=1243)
2024-09-04 18:31:52,443 - stack ['$n292.0']
2024-09-04 18:31:52,443 - dispatch pc=296, inst=INPLACE_ADD(arg=None, lineno=1243)
2024-09-04 18:31:52,444 - stack ['$n292.0', '$const294.1']
2024-09-04 18:31:52,444 - dispatch pc=298, inst=STORE_FAST(arg=8, lineno=1243)
2024-09-04 18:31:52,444 - stack ['$296inplace_add.2']
2024-09-04 18:31:52,444 - dispatch pc=300, inst=JUMP_ABSOLUTE(arg=61, lineno=1244)
2024-09-04 18:31:52,444 - stack []
2024-09-04 18:31:52,444 - end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:52,444 - pending: deque([State(pc_initial=302 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
2024-09-04 18:31:52,444 - stack: []
2024-09-04 18:31:52,444 - state.pc_initial: State(pc_initial=302 nstack_initial=0)
2024-09-04 18:31:52,444 - dispatch pc=302, inst=LOAD_FAST(arg=8, lineno=1247)
2024-09-04 18:31:52,444 - stack []
2024-09-04 18:31:52,445 - dispatch pc=304, inst=LOAD_FAST(arg=6, lineno=1247)
2024-09-04 18:31:52,445 - stack ['$n302.0']
2024-09-04 18:31:52,445 - dispatch pc=306, inst=LOAD_CONST(arg=3, lineno=1247)
2024-09-04 18:31:52,445 - stack ['$n302.0', '$wait304.1']
2024-09-04 18:31:52,445 - dispatch pc=308, inst=BINARY_ADD(arg=None, lineno=1247)
2024-09-04 18:31:52,445 - stack ['$n302.0', '$wait304.1', '$const306.2']
2024-09-04 18:31:52,445 - dispatch pc=310, inst=INPLACE_ADD(arg=None, lineno=1247)
2024-09-04 18:31:52,445 - stack ['$n302.0', '$308binary_add.3']
2024-09-04 18:31:52,446 - dispatch pc=312, inst=STORE_FAST(arg=8, lineno=1247)
2024-09-04 18:31:52,446 - stack ['$310inplace_add.4']
2024-09-04 18:31:52,446 - dispatch pc=314, inst=LOAD_FAST(arg=8, lineno=1229)
2024-09-04 18:31:52,446 - stack []
2024-09-04 18:31:52,446 - dispatch pc=316, inst=LOAD_FAST(arg=0, lineno=1229)
2024-09-04 18:31:52,446 - stack ['$n314.5']
2024-09-04 18:31:52,446 - dispatch pc=318, inst=LOAD_ATTR(arg=3, lineno=1229)
2024-09-04 18:31:52,446 - stack ['$n314.5', '$x316.6']
2024-09-04 18:31:52,446 - dispatch pc=320, inst=LOAD_CONST(arg=1, lineno=1229)
2024-09-04 18:31:52,446 - stack ['$n314.5', '$318load_attr.7']
2024-09-04 18:31:52,446 - dispatch pc=322, inst=BINARY_SUBSCR(arg=None, lineno=1229)
2024-09-04 18:31:52,446 - stack ['$n314.5', '$318load_attr.7', '$const320.8']
2024-09-04 18:31:52,447 - dispatch pc=324, inst=COMPARE_OP(arg=0, lineno=1229)
2024-09-04 18:31:52,447 - stack ['$n314.5', '$322binary_subscr.9']
2024-09-04 18:31:52,447 - dispatch pc=326, inst=POP_JUMP_IF_TRUE(arg=68, lineno=1229)
2024-09-04 18:31:52,447 - stack ['$324compare_op.10']
2024-09-04 18:31:52,447 - end state. edges=[Edge(pc=328, stack=(), blockstack=(), npush=0), Edge(pc=134, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:52,447 - pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=328 nstack_initial=0), State(pc_initial=134 nstack_initial=0)])
2024-09-04 18:31:52,447 - pending: deque([State(pc_initial=328 nstack_initial=0), State(pc_initial=134 nstack_initial=0)])
2024-09-04 18:31:52,447 - stack: []
2024-09-04 18:31:52,447 - state.pc_initial: State(pc_initial=328 nstack_initial=0)
2024-09-04 18:31:52,447 - dispatch pc=328, inst=LOAD_CONST(arg=2, lineno=1229)
2024-09-04 18:31:52,447 - stack []
2024-09-04 18:31:52,447 - dispatch pc=330, inst=RETURN_VALUE(arg=None, lineno=1229)
2024-09-04 18:31:52,447 - stack ['$const328.0']
2024-09-04 18:31:52,448 - end state. edges=[]
2024-09-04 18:31:52,448 - pending: deque([State(pc_initial=134 nstack_initial=0)])
2024-09-04 18:31:52,448 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:52,448 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=116 nstack_initial=0): set(),
             State(pc_initial=120 nstack_initial=0): set(),
             State(pc_initial=134 nstack_initial=0): set(),
             State(pc_initial=202 nstack_initial=0): set(),
             State(pc_initial=212 nstack_initial=0): set(),
             State(pc_initial=292 nstack_initial=0): set(),
             State(pc_initial=302 nstack_initial=0): set(),
             State(pc_initial=328 nstack_initial=0): set(),
             State(pc_initial=332 nstack_initial=0): set()})
2024-09-04 18:31:52,448 - defmap: {}
2024-09-04 18:31:52,448 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:52,448 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:52,449 - keep phismap: {}
2024-09-04 18:31:52,449 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:52,449 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:52,449 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$8load_global.3'}), (10, {'item': '$8load_global.3', 'res': '$10load_method.4'}), (12, {'res': '$x12.5'}), (14, {'res': '$const14.6'}), (16, {'res': '$16load_global.7'}), (18, {'res': '$post_max18.8'}), (20, {'res': '$x20.9'}), (22, {'item': '$x20.9', 'res': '$22load_attr.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$22load_attr.10', 'res': '$26binary_subscr.12'}), (28, {'func': '$16load_global.7', 'args': ['$post_max18.8', '$26binary_subscr.12'], 'res': '$28call_function.13'}), (30, {'start': '$const14.6', 'stop': '$28call_function.13', 'step': None, 'res': '$30build_slice.15', 'slicevar': '$30build_slice.14'}), (32, {'index': '$30build_slice.15', 'target': '$x12.5', 'res': '$32binary_subscr.16'}), (34, {'func': '$10load_method.4', 'args': ['$32binary_subscr.16'], 'res': '$34call_method.17'}), (36, {'lhs': '$6binary_subscr.2', 'rhs': '$34call_method.17', 'res': '$36compare_op.18'}), (38, {'res': '$peaks38.19'}), (40, {'res': '$const40.20'}), (42, {'target': '$peaks38.19', 'index': '$const40.20', 'value': '$36compare_op.18'}), (44, {'res': '$peaks44.21'}), (46, {'res': '$const46.22'}), (48, {'orig': ['$peaks44.21', '$const46.22'], 'duped': ['$48dup_top_two.23', '$48dup_top_two.24']}), (50, {'index': '$48dup_top_two.24', 'target': '$48dup_top_two.23', 'res': '$50binary_subscr.25'}), (52, {'res': '$x52.26'}), (54, {'res': '$const54.27'}), (56, {'index': '$const54.27', 'target': '$x52.26', 'res': '$56binary_subscr.28'}), (58, {'res': '$58load_global.29'}), (60, {'item': '$58load_global.29', 'res': '$60load_method.30'}), (62, {'res': '$x62.31'}), (64, {'res': '$const64.32'}), (66, {'res': '$66load_global.33'}), (68, {'res': '$post_avg68.34'}), (70, {'res': '$x70.35'}), (72, {'item': '$x70.35', 'res': '$72load_attr.36'}), (74, {'res': '$const74.37'}), (76, {'index': '$const74.37', 'target': '$72load_attr.36', 'res': '$76binary_subscr.38'}), (78, {'func': '$66load_global.33', 'args': ['$post_avg68.34', '$76binary_subscr.38'], 'res': '$78call_function.39'}), (80, {'start': '$const64.32', 'stop': '$78call_function.39', 'step': None, 'res': '$80build_slice.41', 'slicevar': '$80build_slice.40'}), (82, {'index': '$80build_slice.41', 'target': '$x62.31', 'res': '$82binary_subscr.42'}), (84, {'func': '$60load_method.30', 'args': ['$82binary_subscr.42'], 'res': '$84call_method.43'}), (86, {'res': '$delta86.44'}), (88, {'lhs': '$84call_method.43', 'rhs': '$delta86.44', 'res': '$88binary_add.45'}), (90, {'lhs': '$56binary_subscr.28', 'rhs': '$88binary_add.45', 'res': '$90compare_op.46'}), (92, {'lhs': '$50binary_subscr.25', 'rhs': '$90compare_op.46', 'res': '$92inplace_and.47'}), (96, {'target': '$peaks44.21', 'index': '$const46.22', 'value': '$92inplace_and.47'}), (98, {'res': '$peaks98.48'}), (100, {'res': '$const100.49'}), (102, {'index': '$const100.49', 'target': '$peaks98.48', 'res': '$102binary_subscr.50'}), (104, {'pred': '$102binary_subscr.50'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: (), 116: ()})
2024-09-04 18:31:52,449 - block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$wait106.0'}), (108, {'res': '$const108.1'}), (110, {'lhs': '$wait106.0', 'rhs': '$const108.1', 'res': '$110binary_add.2'}), (112, {'value': '$110binary_add.2'}), (114, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ()})
2024-09-04 18:31:52,449 - block_infos State(pc_initial=116 nstack_initial=0):
AdaptBlockInfo(insts=((116, {'res': '$const116.0'}), (118, {'value': '$const116.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ()})
2024-09-04 18:31:52,449 - block_infos State(pc_initial=120 nstack_initial=0):
AdaptBlockInfo(insts=((120, {'res': '$n120.0'}), (122, {'res': '$x122.1'}), (124, {'item': '$x122.1', 'res': '$124load_attr.2'}), (126, {'res': '$const126.3'}), (128, {'index': '$const126.3', 'target': '$124load_attr.2', 'res': '$128binary_subscr.4'}), (130, {'lhs': '$n120.0', 'rhs': '$128binary_subscr.4', 'res': '$130compare_op.5'}), (132, {'pred': '$130compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={134: (), 332: ()})
2024-09-04 18:31:52,449 - block_infos State(pc_initial=134 nstack_initial=0):
AdaptBlockInfo(insts=((134, {'res': '$134load_global.0'}), (136, {'item': '$134load_global.0', 'res': '$136load_method.1'}), (138, {'res': '$x138.2'}), (140, {'res': '$140load_global.3'}), (142, {'res': '$const142.4'}), (144, {'res': '$n144.5'}), (146, {'res': '$pre_max146.6'}), (148, {'lhs': '$n144.5', 'rhs': '$pre_max146.6', 'res': '$148binary_subtract.7'}), (150, {'func': '$140load_global.3', 'args': ['$const142.4', '$148binary_subtract.7'], 'res': '$150call_function.8'}), (152, {'res': '$152load_global.9'}), (154, {'res': '$n154.10'}), (156, {'res': '$post_max156.11'}), (158, {'lhs': '$n154.10', 'rhs': '$post_max156.11', 'res': '$158binary_add.12'}), (160, {'res': '$x160.13'}), (162, {'item': '$x160.13', 'res': '$162load_attr.14'}), (164, {'res': '$const164.15'}), (166, {'index': '$const164.15', 'target': '$162load_attr.14', 'res': '$166binary_subscr.16'}), (168, {'func': '$152load_global.9', 'args': ['$158binary_add.12', '$166binary_subscr.16'], 'res': '$168call_function.17'}), (170, {'start': '$150call_function.8', 'stop': '$168call_function.17', 'step': None, 'res': '$170build_slice.19', 'slicevar': '$170build_slice.18'}), (172, {'index': '$170build_slice.19', 'target': '$x138.2', 'res': '$172binary_subscr.20'}), (174, {'func': '$136load_method.1', 'args': ['$172binary_subscr.20'], 'res': '$174call_method.21'}), (176, {'value': '$174call_method.21'}), (178, {'res': '$x178.22'}), (180, {'res': '$n180.23'}), (182, {'index': '$n180.23', 'target': '$x178.22', 'res': '$182binary_subscr.24'}), (184, {'res': '$maxn184.25'}), (186, {'lhs': '$182binary_subscr.24', 'rhs': '$maxn184.25', 'res': '$186compare_op.26'}), (188, {'res': '$peaks188.27'}), (190, {'res': '$n190.28'}), (192, {'target': '$peaks188.27', 'index': '$n190.28', 'value': '$186compare_op.26'}), (194, {'res': '$peaks194.29'}), (196, {'res': '$n196.30'}), (198, {'index': '$n196.30', 'target': '$peaks194.29', 'res': '$198binary_subscr.31'}), (200, {'pred': '$198binary_subscr.31'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={202: (), 212: ()})
2024-09-04 18:31:52,450 - block_infos State(pc_initial=202 nstack_initial=0):
AdaptBlockInfo(insts=((202, {'res': '$n202.0'}), (204, {'res': '$const204.1'}), (206, {'lhs': '$n202.0', 'rhs': '$const204.1', 'res': '$206inplace_add.2'}), (208, {'value': '$206inplace_add.2'}), (210, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ()})
2024-09-04 18:31:52,450 - block_infos State(pc_initial=212 nstack_initial=0):
AdaptBlockInfo(insts=((212, {'res': '$212load_global.0'}), (214, {'item': '$212load_global.0', 'res': '$214load_method.1'}), (216, {'res': '$x216.2'}), (218, {'res': '$218load_global.3'}), (220, {'res': '$const220.4'}), (222, {'res': '$n222.5'}), (224, {'res': '$pre_avg224.6'}), (226, {'lhs': '$n222.5', 'rhs': '$pre_avg224.6', 'res': '$226binary_subtract.7'}), (228, {'func': '$218load_global.3', 'args': ['$const220.4', '$226binary_subtract.7'], 'res': '$228call_function.8'}), (230, {'res': '$230load_global.9'}), (232, {'res': '$n232.10'}), (234, {'res': '$post_avg234.11'}), (236, {'lhs': '$n232.10', 'rhs': '$post_avg234.11', 'res': '$236binary_add.12'}), (238, {'res': '$x238.13'}), (240, {'item': '$x238.13', 'res': '$240load_attr.14'}), (242, {'res': '$const242.15'}), (244, {'index': '$const242.15', 'target': '$240load_attr.14', 'res': '$244binary_subscr.16'}), (246, {'func': '$230load_global.9', 'args': ['$236binary_add.12', '$244binary_subscr.16'], 'res': '$246call_function.17'}), (248, {'start': '$228call_function.8', 'stop': '$246call_function.17', 'step': None, 'res': '$248build_slice.19', 'slicevar': '$248build_slice.18'}), (250, {'index': '$248build_slice.19', 'target': '$x216.2', 'res': '$250binary_subscr.20'}), (252, {'func': '$214load_method.1', 'args': ['$250binary_subscr.20'], 'res': '$252call_method.21'}), (254, {'value': '$252call_method.21'}), (256, {'res': '$peaks256.22'}), (258, {'res': '$n258.23'}), (260, {'orig': ['$peaks256.22', '$n258.23'], 'duped': ['$260dup_top_two.24', '$260dup_top_two.25']}), (262, {'index': '$260dup_top_two.25', 'target': '$260dup_top_two.24', 'res': '$262binary_subscr.26'}), (264, {'res': '$x264.27'}), (266, {'res': '$n266.28'}), (268, {'index': '$n266.28', 'target': '$x264.27', 'res': '$268binary_subscr.29'}), (270, {'res': '$avgn270.30'}), (272, {'res': '$delta272.31'}), (274, {'lhs': '$avgn270.30', 'rhs': '$delta272.31', 'res': '$274binary_add.32'}), (276, {'lhs': '$268binary_subscr.29', 'rhs': '$274binary_add.32', 'res': '$276compare_op.33'}), (278, {'lhs': '$262binary_subscr.26', 'rhs': '$276compare_op.33', 'res': '$278inplace_and.34'}), (282, {'target': '$peaks256.22', 'index': '$n258.23', 'value': '$278inplace_and.34'}), (284, {'res': '$peaks284.35'}), (286, {'res': '$n286.36'}), (288, {'index': '$n286.36', 'target': '$peaks284.35', 'res': '$288binary_subscr.37'}), (290, {'pred': '$288binary_subscr.37'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={292: (), 302: ()})
2024-09-04 18:31:52,450 - block_infos State(pc_initial=292 nstack_initial=0):
AdaptBlockInfo(insts=((292, {'res': '$n292.0'}), (294, {'res': '$const294.1'}), (296, {'lhs': '$n292.0', 'rhs': '$const294.1', 'res': '$296inplace_add.2'}), (298, {'value': '$296inplace_add.2'}), (300, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ()})
2024-09-04 18:31:52,450 - block_infos State(pc_initial=302 nstack_initial=0):
AdaptBlockInfo(insts=((302, {'res': '$n302.0'}), (304, {'res': '$wait304.1'}), (306, {'res': '$const306.2'}), (308, {'lhs': '$wait304.1', 'rhs': '$const306.2', 'res': '$308binary_add.3'}), (310, {'lhs': '$n302.0', 'rhs': '$308binary_add.3', 'res': '$310inplace_add.4'}), (312, {'value': '$310inplace_add.4'}), (314, {'res': '$n314.5'}), (316, {'res': '$x316.6'}), (318, {'item': '$x316.6', 'res': '$318load_attr.7'}), (320, {'res': '$const320.8'}), (322, {'index': '$const320.8', 'target': '$318load_attr.7', 'res': '$322binary_subscr.9'}), (324, {'lhs': '$n314.5', 'rhs': '$322binary_subscr.9', 'res': '$324compare_op.10'}), (326, {'pred': '$324compare_op.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={328: (), 134: ()})
2024-09-04 18:31:52,451 - block_infos State(pc_initial=328 nstack_initial=0):
AdaptBlockInfo(insts=((328, {'res': '$const328.0'}), (330, {'retval': '$const328.0', 'castval': '$330return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:52,451 - block_infos State(pc_initial=332 nstack_initial=0):
AdaptBlockInfo(insts=((332, {'res': '$const332.0'}), (334, {'retval': '$const332.0', 'castval': '$334return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:52,459 - label 0:
    x = arg(0, name=x)                       ['x']
    pre_max = arg(1, name=pre_max)           ['pre_max']
    post_max = arg(2, name=post_max)         ['post_max']
    pre_avg = arg(3, name=pre_avg)           ['pre_avg']
    post_avg = arg(4, name=post_avg)         ['post_avg']
    delta = arg(5, name=delta)               ['delta']
    wait = arg(6, name=wait)                 ['wait']
    peaks = arg(7, name=peaks)               ['peaks']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $8load_global.3 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$8load_global.3']
    $10load_method.4 = getattr(value=$8load_global.3, attr=max) ['$10load_method.4', '$8load_global.3']
    $const14.6 = const(NoneType, None)       ['$const14.6']
    $16load_global.7 = global(min: <built-in function min>) ['$16load_global.7']
    $22load_attr.10 = getattr(value=x, attr=shape) ['$22load_attr.10', 'x']
    $const24.11 = const(int, 0)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=$22load_attr.10, index=$const24.11, fn=<built-in function getitem>) ['$22load_attr.10', '$26binary_subscr.12', '$const24.11']
    $28call_function.13 = call $16load_global.7(post_max, $26binary_subscr.12, func=$16load_global.7, args=[Var(post_max, utils.py:1209), Var($26binary_subscr.12, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None) ['$16load_global.7', '$26binary_subscr.12', '$28call_function.13', 'post_max']
    $30build_slice.14 = global(slice: <class 'slice'>) ['$30build_slice.14']
    $30build_slice.15 = call $30build_slice.14($const14.6, $28call_function.13, func=$30build_slice.14, args=(Var($const14.6, utils.py:1221), Var($28call_function.13, utils.py:1221)), kws=(), vararg=None, varkwarg=None, target=None) ['$28call_function.13', '$30build_slice.14', '$30build_slice.15', '$const14.6']
    $32binary_subscr.16 = getitem(value=x, index=$30build_slice.15, fn=<built-in function getitem>) ['$30build_slice.15', '$32binary_subscr.16', 'x']
    $34call_method.17 = call $10load_method.4($32binary_subscr.16, func=$10load_method.4, args=[Var($32binary_subscr.16, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_method.4', '$32binary_subscr.16', '$34call_method.17']
    $36compare_op.18 = $6binary_subscr.2 >= $34call_method.17 ['$34call_method.17', '$36compare_op.18', '$6binary_subscr.2']
    $const40.20 = const(int, 0)              ['$const40.20']
    peaks[$const40.20] = $36compare_op.18    ['$36compare_op.18', '$const40.20', 'peaks']
    $const46.22 = const(int, 0)              ['$const46.22']
    $50binary_subscr.25 = getitem(value=peaks, index=$const46.22, fn=<built-in function getitem>) ['$50binary_subscr.25', '$const46.22', 'peaks']
    $const54.27 = const(int, 0)              ['$const54.27']
    $56binary_subscr.28 = getitem(value=x, index=$const54.27, fn=<built-in function getitem>) ['$56binary_subscr.28', '$const54.27', 'x']
    $58load_global.29 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$58load_global.29']
    $60load_method.30 = getattr(value=$58load_global.29, attr=mean) ['$58load_global.29', '$60load_method.30']
    $const64.32 = const(NoneType, None)      ['$const64.32']
    $66load_global.33 = global(min: <built-in function min>) ['$66load_global.33']
    $72load_attr.36 = getattr(value=x, attr=shape) ['$72load_attr.36', 'x']
    $const74.37 = const(int, 0)              ['$const74.37']
    $76binary_subscr.38 = getitem(value=$72load_attr.36, index=$const74.37, fn=<built-in function getitem>) ['$72load_attr.36', '$76binary_subscr.38', '$const74.37']
    $78call_function.39 = call $66load_global.33(post_avg, $76binary_subscr.38, func=$66load_global.33, args=[Var(post_avg, utils.py:1209), Var($76binary_subscr.38, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.33', '$76binary_subscr.38', '$78call_function.39', 'post_avg']
    $80build_slice.40 = global(slice: <class 'slice'>) ['$80build_slice.40']
    $80build_slice.41 = call $80build_slice.40($const64.32, $78call_function.39, func=$80build_slice.40, args=(Var($const64.32, utils.py:1222), Var($78call_function.39, utils.py:1222)), kws=(), vararg=None, varkwarg=None, target=None) ['$78call_function.39', '$80build_slice.40', '$80build_slice.41', '$const64.32']
    $82binary_subscr.42 = getitem(value=x, index=$80build_slice.41, fn=<built-in function getitem>) ['$80build_slice.41', '$82binary_subscr.42', 'x']
    $84call_method.43 = call $60load_method.30($82binary_subscr.42, func=$60load_method.30, args=[Var($82binary_subscr.42, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None) ['$60load_method.30', '$82binary_subscr.42', '$84call_method.43']
    $88binary_add.45 = $84call_method.43 + delta ['$84call_method.43', '$88binary_add.45', 'delta']
    $90compare_op.46 = $56binary_subscr.28 >= $88binary_add.45 ['$56binary_subscr.28', '$88binary_add.45', '$90compare_op.46']
    $92inplace_and.47 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$50binary_subscr.25, rhs=$90compare_op.46, static_lhs=Undefined, static_rhs=Undefined) ['$50binary_subscr.25', '$90compare_op.46', '$92inplace_and.47']
    peaks[$const46.22] = $92inplace_and.47   ['$92inplace_and.47', '$const46.22', 'peaks']
    $const100.49 = const(int, 0)             ['$const100.49']
    $102binary_subscr.50 = getitem(value=peaks, index=$const100.49, fn=<built-in function getitem>) ['$102binary_subscr.50', '$const100.49', 'peaks']
    bool104 = global(bool: <class 'bool'>)   ['bool104']
    $104pred = call bool104($102binary_subscr.50, func=bool104, args=(Var($102binary_subscr.50, utils.py:1224),), kws=(), vararg=None, varkwarg=None, target=None) ['$102binary_subscr.50', '$104pred', 'bool104']
    branch $104pred, 106, 116                ['$104pred']
label 106:
    $const108.1 = const(int, 1)              ['$const108.1']
    n = wait + $const108.1                   ['$const108.1', 'n', 'wait']
    jump 120                                 []
label 116:
    n = const(int, 1)                        ['n']
    jump 120                                 []
label 120:
    $124load_attr.2 = getattr(value=x, attr=shape) ['$124load_attr.2', 'x']
    $const126.3 = const(int, 0)              ['$const126.3']
    $128binary_subscr.4 = getitem(value=$124load_attr.2, index=$const126.3, fn=<built-in function getitem>) ['$124load_attr.2', '$128binary_subscr.4', '$const126.3']
    $130compare_op.5 = n < $128binary_subscr.4 ['$128binary_subscr.4', '$130compare_op.5', 'n']
    bool132 = global(bool: <class 'bool'>)   ['bool132']
    $132pred = call bool132($130compare_op.5, func=bool132, args=(Var($130compare_op.5, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None) ['$130compare_op.5', '$132pred', 'bool132']
    branch $132pred, 134, 332                ['$132pred']
label 134:
    $134load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$134load_global.0']
    $136load_method.1 = getattr(value=$134load_global.0, attr=max) ['$134load_global.0', '$136load_method.1']
    $140load_global.3 = global(max: <built-in function max>) ['$140load_global.3']
    $const142.4 = const(int, 0)              ['$const142.4']
    $148binary_subtract.7 = n - pre_max      ['$148binary_subtract.7', 'n', 'pre_max']
    $150call_function.8 = call $140load_global.3($const142.4, $148binary_subtract.7, func=$140load_global.3, args=[Var($const142.4, utils.py:1230), Var($148binary_subtract.7, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None) ['$140load_global.3', '$148binary_subtract.7', '$150call_function.8', '$const142.4']
    $152load_global.9 = global(min: <built-in function min>) ['$152load_global.9']
    $158binary_add.12 = n + post_max         ['$158binary_add.12', 'n', 'post_max']
    $162load_attr.14 = getattr(value=x, attr=shape) ['$162load_attr.14', 'x']
    $const164.15 = const(int, 0)             ['$const164.15']
    $166binary_subscr.16 = getitem(value=$162load_attr.14, index=$const164.15, fn=<built-in function getitem>) ['$162load_attr.14', '$166binary_subscr.16', '$const164.15']
    $168call_function.17 = call $152load_global.9($158binary_add.12, $166binary_subscr.16, func=$152load_global.9, args=[Var($158binary_add.12, utils.py:1230), Var($166binary_subscr.16, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None) ['$152load_global.9', '$158binary_add.12', '$166binary_subscr.16', '$168call_function.17']
    $170build_slice.18 = global(slice: <class 'slice'>) ['$170build_slice.18']
    $170build_slice.19 = call $170build_slice.18($150call_function.8, $168call_function.17, func=$170build_slice.18, args=(Var($150call_function.8, utils.py:1230), Var($168call_function.17, utils.py:1230)), kws=(), vararg=None, varkwarg=None, target=None) ['$150call_function.8', '$168call_function.17', '$170build_slice.18', '$170build_slice.19']
    $172binary_subscr.20 = getitem(value=x, index=$170build_slice.19, fn=<built-in function getitem>) ['$170build_slice.19', '$172binary_subscr.20', 'x']
    maxn = call $136load_method.1($172binary_subscr.20, func=$136load_method.1, args=[Var($172binary_subscr.20, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None) ['$136load_method.1', '$172binary_subscr.20', 'maxn']
    $182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>) ['$182binary_subscr.24', 'n', 'x']
    $186compare_op.26 = $182binary_subscr.24 == maxn ['$182binary_subscr.24', '$186compare_op.26', 'maxn']
    peaks[n] = $186compare_op.26             ['$186compare_op.26', 'n', 'peaks']
    $198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>) ['$198binary_subscr.31', 'n', 'peaks']
    bool200 = global(bool: <class 'bool'>)   ['bool200']
    $200pred = call bool200($198binary_subscr.31, func=bool200, args=(Var($198binary_subscr.31, utils.py:1235),), kws=(), vararg=None, varkwarg=None, target=None) ['$198binary_subscr.31', '$200pred', 'bool200']
    branch $200pred, 212, 202                ['$200pred']
label 202:
    $const204.1 = const(int, 1)              ['$const204.1']
    $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined) ['$206inplace_add.2', '$const204.1', 'n']
    n = $206inplace_add.2                    ['$206inplace_add.2', 'n']
    jump 120                                 []
label 212:
    $212load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$212load_global.0']
    $214load_method.1 = getattr(value=$212load_global.0, attr=mean) ['$212load_global.0', '$214load_method.1']
    $218load_global.3 = global(max: <built-in function max>) ['$218load_global.3']
    $const220.4 = const(int, 0)              ['$const220.4']
    $226binary_subtract.7 = n - pre_avg      ['$226binary_subtract.7', 'n', 'pre_avg']
    $228call_function.8 = call $218load_global.3($const220.4, $226binary_subtract.7, func=$218load_global.3, args=[Var($const220.4, utils.py:1239), Var($226binary_subtract.7, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None) ['$218load_global.3', '$226binary_subtract.7', '$228call_function.8', '$const220.4']
    $230load_global.9 = global(min: <built-in function min>) ['$230load_global.9']
    $236binary_add.12 = n + post_avg         ['$236binary_add.12', 'n', 'post_avg']
    $240load_attr.14 = getattr(value=x, attr=shape) ['$240load_attr.14', 'x']
    $const242.15 = const(int, 0)             ['$const242.15']
    $244binary_subscr.16 = getitem(value=$240load_attr.14, index=$const242.15, fn=<built-in function getitem>) ['$240load_attr.14', '$244binary_subscr.16', '$const242.15']
    $246call_function.17 = call $230load_global.9($236binary_add.12, $244binary_subscr.16, func=$230load_global.9, args=[Var($236binary_add.12, utils.py:1239), Var($244binary_subscr.16, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None) ['$230load_global.9', '$236binary_add.12', '$244binary_subscr.16', '$246call_function.17']
    $248build_slice.18 = global(slice: <class 'slice'>) ['$248build_slice.18']
    $248build_slice.19 = call $248build_slice.18($228call_function.8, $246call_function.17, func=$248build_slice.18, args=(Var($228call_function.8, utils.py:1239), Var($246call_function.17, utils.py:1239)), kws=(), vararg=None, varkwarg=None, target=None) ['$228call_function.8', '$246call_function.17', '$248build_slice.18', '$248build_slice.19']
    $250binary_subscr.20 = getitem(value=x, index=$248build_slice.19, fn=<built-in function getitem>) ['$248build_slice.19', '$250binary_subscr.20', 'x']
    avgn = call $214load_method.1($250binary_subscr.20, func=$214load_method.1, args=[Var($250binary_subscr.20, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None) ['$214load_method.1', '$250binary_subscr.20', 'avgn']
    $262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>) ['$262binary_subscr.26', 'n', 'peaks']
    $268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>) ['$268binary_subscr.29', 'n', 'x']
    $274binary_add.32 = avgn + delta         ['$274binary_add.32', 'avgn', 'delta']
    $276compare_op.33 = $268binary_subscr.29 >= $274binary_add.32 ['$268binary_subscr.29', '$274binary_add.32', '$276compare_op.33']
    $278inplace_and.34 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$262binary_subscr.26, rhs=$276compare_op.33, static_lhs=Undefined, static_rhs=Undefined) ['$262binary_subscr.26', '$276compare_op.33', '$278inplace_and.34']
    peaks[n] = $278inplace_and.34            ['$278inplace_and.34', 'n', 'peaks']
    $288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>) ['$288binary_subscr.37', 'n', 'peaks']
    bool290 = global(bool: <class 'bool'>)   ['bool290']
    $290pred = call bool290($288binary_subscr.37, func=bool290, args=(Var($288binary_subscr.37, utils.py:1242),), kws=(), vararg=None, varkwarg=None, target=None) ['$288binary_subscr.37', '$290pred', 'bool290']
    branch $290pred, 302, 292                ['$290pred']
label 292:
    $const294.1 = const(int, 1)              ['$const294.1']
    $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined) ['$296inplace_add.2', '$const294.1', 'n']
    n = $296inplace_add.2                    ['$296inplace_add.2', 'n']
    jump 120                                 []
label 302:
    $const306.2 = const(int, 1)              ['$const306.2']
    $308binary_add.3 = wait + $const306.2    ['$308binary_add.3', '$const306.2', 'wait']
    $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined) ['$308binary_add.3', '$310inplace_add.4', 'n']
    n = $310inplace_add.4                    ['$310inplace_add.4', 'n']
    $318load_attr.7 = getattr(value=x, attr=shape) ['$318load_attr.7', 'x']
    $const320.8 = const(int, 0)              ['$const320.8']
    $322binary_subscr.9 = getitem(value=$318load_attr.7, index=$const320.8, fn=<built-in function getitem>) ['$318load_attr.7', '$322binary_subscr.9', '$const320.8']
    $324compare_op.10 = n < $322binary_subscr.9 ['$322binary_subscr.9', '$324compare_op.10', 'n']
    bool326 = global(bool: <class 'bool'>)   ['bool326']
    $326pred = call bool326($324compare_op.10, func=bool326, args=(Var($324compare_op.10, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None) ['$324compare_op.10', '$326pred', 'bool326']
    branch $326pred, 134, 328                ['$326pred']
label 328:
    $const328.0 = const(NoneType, None)      ['$const328.0']
    $330return_value.1 = cast(value=$const328.0) ['$330return_value.1', '$const328.0']
    return $330return_value.1                ['$330return_value.1']
label 332:
    $const332.0 = const(NoneType, None)      ['$const332.0']
    $334return_value.1 = cast(value=$const332.0) ['$334return_value.1', '$const332.0']
    return $334return_value.1                ['$334return_value.1']

2024-09-04 18:31:52,506 - ==== SSA block analysis pass on 0
2024-09-04 18:31:52,506 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431B51C2B0>
2024-09-04 18:31:52,506 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:52,506 - on stmt: pre_max = arg(1, name=pre_max)
2024-09-04 18:31:52,506 - on stmt: post_max = arg(2, name=post_max)
2024-09-04 18:31:52,506 - on stmt: pre_avg = arg(3, name=pre_avg)
2024-09-04 18:31:52,506 - on stmt: post_avg = arg(4, name=post_avg)
2024-09-04 18:31:52,506 - on stmt: delta = arg(5, name=delta)
2024-09-04 18:31:52,506 - on stmt: wait = arg(6, name=wait)
2024-09-04 18:31:52,506 - on stmt: peaks = arg(7, name=peaks)
2024-09-04 18:31:52,507 - on stmt: $const4.1 = const(int, 0)
2024-09-04 18:31:52,507 - on stmt: $6binary_subscr.2 = static_getitem(value=x, index=0, index_var=$const4.1, fn=<built-in function getitem>)
2024-09-04 18:31:52,507 - on stmt: $8load_global.3 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:52,507 - on stmt: $10load_method.4 = getattr(value=$8load_global.3, attr=max)
2024-09-04 18:31:52,507 - on stmt: $const14.6 = const(NoneType, None)
2024-09-04 18:31:52,507 - on stmt: $16load_global.7 = global(min: <built-in function min>)
2024-09-04 18:31:52,507 - on stmt: $22load_attr.10 = getattr(value=x, attr=shape)
2024-09-04 18:31:52,507 - on stmt: $const24.11 = const(int, 0)
2024-09-04 18:31:52,507 - on stmt: $26binary_subscr.12 = static_getitem(value=$22load_attr.10, index=0, index_var=$const24.11, fn=<built-in function getitem>)
2024-09-04 18:31:52,508 - on stmt: $28call_function.13 = call $16load_global.7(post_max, $26binary_subscr.12, func=$16load_global.7, args=[Var(post_max, utils.py:1209), Var($26binary_subscr.12, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,508 - on stmt: $30build_slice.14 = global(slice: <class 'slice'>)
2024-09-04 18:31:52,508 - on stmt: $30build_slice.15 = call $30build_slice.14($const14.6, $28call_function.13, func=$30build_slice.14, args=(Var($const14.6, utils.py:1221), Var($28call_function.13, utils.py:1221)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,508 - on stmt: $32binary_subscr.16 = getitem(value=x, index=$30build_slice.15, fn=<built-in function getitem>)
2024-09-04 18:31:52,508 - on stmt: $34call_method.17 = call $10load_method.4($32binary_subscr.16, func=$10load_method.4, args=[Var($32binary_subscr.16, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,508 - on stmt: $36compare_op.18 = $6binary_subscr.2 >= $34call_method.17
2024-09-04 18:31:52,508 - on stmt: $const40.20 = const(int, 0)
2024-09-04 18:31:52,508 - on stmt: peaks[0] = $36compare_op.18
2024-09-04 18:31:52,508 - on stmt: $const46.22 = const(int, 0)
2024-09-04 18:31:52,508 - on stmt: $50binary_subscr.25 = static_getitem(value=peaks, index=0, index_var=$const46.22, fn=<built-in function getitem>)
2024-09-04 18:31:52,508 - on stmt: $const54.27 = const(int, 0)
2024-09-04 18:31:52,509 - on stmt: $56binary_subscr.28 = static_getitem(value=x, index=0, index_var=$const54.27, fn=<built-in function getitem>)
2024-09-04 18:31:52,509 - on stmt: $58load_global.29 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:52,509 - on stmt: $60load_method.30 = getattr(value=$58load_global.29, attr=mean)
2024-09-04 18:31:52,509 - on stmt: $const64.32 = const(NoneType, None)
2024-09-04 18:31:52,509 - on stmt: $66load_global.33 = global(min: <built-in function min>)
2024-09-04 18:31:52,509 - on stmt: $72load_attr.36 = getattr(value=x, attr=shape)
2024-09-04 18:31:52,509 - on stmt: $const74.37 = const(int, 0)
2024-09-04 18:31:52,509 - on stmt: $76binary_subscr.38 = static_getitem(value=$72load_attr.36, index=0, index_var=$const74.37, fn=<built-in function getitem>)
2024-09-04 18:31:52,509 - on stmt: $78call_function.39 = call $66load_global.33(post_avg, $76binary_subscr.38, func=$66load_global.33, args=[Var(post_avg, utils.py:1209), Var($76binary_subscr.38, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,509 - on stmt: $80build_slice.40 = global(slice: <class 'slice'>)
2024-09-04 18:31:52,510 - on stmt: $80build_slice.41 = call $80build_slice.40($const64.32, $78call_function.39, func=$80build_slice.40, args=(Var($const64.32, utils.py:1222), Var($78call_function.39, utils.py:1222)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,510 - on stmt: $82binary_subscr.42 = getitem(value=x, index=$80build_slice.41, fn=<built-in function getitem>)
2024-09-04 18:31:52,510 - on stmt: $84call_method.43 = call $60load_method.30($82binary_subscr.42, func=$60load_method.30, args=[Var($82binary_subscr.42, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,510 - on stmt: $88binary_add.45 = $84call_method.43 + delta
2024-09-04 18:31:52,510 - on stmt: $90compare_op.46 = $56binary_subscr.28 >= $88binary_add.45
2024-09-04 18:31:52,510 - on stmt: $92inplace_and.47 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$50binary_subscr.25, rhs=$90compare_op.46, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:52,510 - on stmt: peaks[0] = $92inplace_and.47
2024-09-04 18:31:52,510 - on stmt: $const100.49 = const(int, 0)
2024-09-04 18:31:52,510 - on stmt: $102binary_subscr.50 = static_getitem(value=peaks, index=0, index_var=$const100.49, fn=<built-in function getitem>)
2024-09-04 18:31:52,511 - on stmt: bool104 = global(bool: <class 'bool'>)
2024-09-04 18:31:52,511 - on stmt: $104pred = call bool104($102binary_subscr.50, func=bool104, args=(Var($102binary_subscr.50, utils.py:1224),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,511 - on stmt: branch $104pred, 106, 116
2024-09-04 18:31:52,511 - ==== SSA block analysis pass on 106
2024-09-04 18:31:52,511 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431B51C2B0>
2024-09-04 18:31:52,511 - on stmt: $const108.1 = const(int, 1)
2024-09-04 18:31:52,511 - on stmt: n = wait + $const108.1
2024-09-04 18:31:52,511 - on stmt: jump 120
2024-09-04 18:31:52,511 - ==== SSA block analysis pass on 116
2024-09-04 18:31:52,511 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431B51C2B0>
2024-09-04 18:31:52,511 - on stmt: n = const(int, 1)
2024-09-04 18:31:52,512 - on stmt: jump 120
2024-09-04 18:31:52,512 - ==== SSA block analysis pass on 120
2024-09-04 18:31:52,512 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431B51C2B0>
2024-09-04 18:31:52,512 - on stmt: $124load_attr.2 = getattr(value=x, attr=shape)
2024-09-04 18:31:52,512 - on stmt: $const126.3 = const(int, 0)
2024-09-04 18:31:52,512 - on stmt: $128binary_subscr.4 = static_getitem(value=$124load_attr.2, index=0, index_var=$const126.3, fn=<built-in function getitem>)
2024-09-04 18:31:52,512 - on stmt: $130compare_op.5 = n < $128binary_subscr.4
2024-09-04 18:31:52,512 - on stmt: bool132 = global(bool: <class 'bool'>)
2024-09-04 18:31:52,512 - on stmt: $132pred = call bool132($130compare_op.5, func=bool132, args=(Var($130compare_op.5, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,512 - on stmt: branch $132pred, 134, 332
2024-09-04 18:31:52,513 - ==== SSA block analysis pass on 134
2024-09-04 18:31:52,513 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431B51C2B0>
2024-09-04 18:31:52,513 - on stmt: $134load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:52,513 - on stmt: $136load_method.1 = getattr(value=$134load_global.0, attr=max)
2024-09-04 18:31:52,513 - on stmt: $140load_global.3 = global(max: <built-in function max>)
2024-09-04 18:31:52,513 - on stmt: $const142.4 = const(int, 0)
2024-09-04 18:31:52,513 - on stmt: $148binary_subtract.7 = n - pre_max
2024-09-04 18:31:52,513 - on stmt: $150call_function.8 = call $140load_global.3($const142.4, $148binary_subtract.7, func=$140load_global.3, args=[Var($const142.4, utils.py:1230), Var($148binary_subtract.7, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,513 - on stmt: $152load_global.9 = global(min: <built-in function min>)
2024-09-04 18:31:52,513 - on stmt: $158binary_add.12 = n + post_max
2024-09-04 18:31:52,513 - on stmt: $162load_attr.14 = getattr(value=x, attr=shape)
2024-09-04 18:31:52,514 - on stmt: $const164.15 = const(int, 0)
2024-09-04 18:31:52,514 - on stmt: $166binary_subscr.16 = static_getitem(value=$162load_attr.14, index=0, index_var=$const164.15, fn=<built-in function getitem>)
2024-09-04 18:31:52,514 - on stmt: $168call_function.17 = call $152load_global.9($158binary_add.12, $166binary_subscr.16, func=$152load_global.9, args=[Var($158binary_add.12, utils.py:1230), Var($166binary_subscr.16, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,514 - on stmt: $170build_slice.18 = global(slice: <class 'slice'>)
2024-09-04 18:31:52,514 - on stmt: $170build_slice.19 = call $170build_slice.18($150call_function.8, $168call_function.17, func=$170build_slice.18, args=(Var($150call_function.8, utils.py:1230), Var($168call_function.17, utils.py:1230)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,514 - on stmt: $172binary_subscr.20 = getitem(value=x, index=$170build_slice.19, fn=<built-in function getitem>)
2024-09-04 18:31:52,514 - on stmt: maxn = call $136load_method.1($172binary_subscr.20, func=$136load_method.1, args=[Var($172binary_subscr.20, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,514 - on stmt: $182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:52,514 - on stmt: $186compare_op.26 = $182binary_subscr.24 == maxn
2024-09-04 18:31:52,515 - on stmt: peaks[n] = $186compare_op.26
2024-09-04 18:31:52,515 - on stmt: $198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:52,515 - on stmt: bool200 = global(bool: <class 'bool'>)
2024-09-04 18:31:52,515 - on stmt: $200pred = call bool200($198binary_subscr.31, func=bool200, args=(Var($198binary_subscr.31, utils.py:1235),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,515 - on stmt: branch $200pred, 212, 202
2024-09-04 18:31:52,515 - ==== SSA block analysis pass on 202
2024-09-04 18:31:52,515 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431B51C2B0>
2024-09-04 18:31:52,515 - on stmt: $const204.1 = const(int, 1)
2024-09-04 18:31:52,515 - on stmt: $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:52,515 - on stmt: n = $206inplace_add.2
2024-09-04 18:31:52,516 - on stmt: jump 333
2024-09-04 18:31:52,516 - ==== SSA block analysis pass on 212
2024-09-04 18:31:52,516 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431B51C2B0>
2024-09-04 18:31:52,516 - on stmt: $212load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:52,516 - on stmt: $214load_method.1 = getattr(value=$212load_global.0, attr=mean)
2024-09-04 18:31:52,516 - on stmt: $218load_global.3 = global(max: <built-in function max>)
2024-09-04 18:31:52,516 - on stmt: $const220.4 = const(int, 0)
2024-09-04 18:31:52,516 - on stmt: $226binary_subtract.7 = n - pre_avg
2024-09-04 18:31:52,516 - on stmt: $228call_function.8 = call $218load_global.3($const220.4, $226binary_subtract.7, func=$218load_global.3, args=[Var($const220.4, utils.py:1239), Var($226binary_subtract.7, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,516 - on stmt: $230load_global.9 = global(min: <built-in function min>)
2024-09-04 18:31:52,516 - on stmt: $236binary_add.12 = n + post_avg
2024-09-04 18:31:52,516 - on stmt: $240load_attr.14 = getattr(value=x, attr=shape)
2024-09-04 18:31:52,517 - on stmt: $const242.15 = const(int, 0)
2024-09-04 18:31:52,517 - on stmt: $244binary_subscr.16 = static_getitem(value=$240load_attr.14, index=0, index_var=$const242.15, fn=<built-in function getitem>)
2024-09-04 18:31:52,517 - on stmt: $246call_function.17 = call $230load_global.9($236binary_add.12, $244binary_subscr.16, func=$230load_global.9, args=[Var($236binary_add.12, utils.py:1239), Var($244binary_subscr.16, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,517 - on stmt: $248build_slice.18 = global(slice: <class 'slice'>)
2024-09-04 18:31:52,517 - on stmt: $248build_slice.19 = call $248build_slice.18($228call_function.8, $246call_function.17, func=$248build_slice.18, args=(Var($228call_function.8, utils.py:1239), Var($246call_function.17, utils.py:1239)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,517 - on stmt: $250binary_subscr.20 = getitem(value=x, index=$248build_slice.19, fn=<built-in function getitem>)
2024-09-04 18:31:52,517 - on stmt: avgn = call $214load_method.1($250binary_subscr.20, func=$214load_method.1, args=[Var($250binary_subscr.20, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,517 - on stmt: $262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:52,517 - on stmt: $268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:52,517 - on stmt: $274binary_add.32 = avgn + delta
2024-09-04 18:31:52,517 - on stmt: $276compare_op.33 = $268binary_subscr.29 >= $274binary_add.32
2024-09-04 18:31:52,518 - on stmt: $278inplace_and.34 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$262binary_subscr.26, rhs=$276compare_op.33, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:52,518 - on stmt: peaks[n] = $278inplace_and.34
2024-09-04 18:31:52,518 - on stmt: $288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:52,518 - on stmt: bool290 = global(bool: <class 'bool'>)
2024-09-04 18:31:52,518 - on stmt: $290pred = call bool290($288binary_subscr.37, func=bool290, args=(Var($288binary_subscr.37, utils.py:1242),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,518 - on stmt: branch $290pred, 302, 292
2024-09-04 18:31:52,518 - ==== SSA block analysis pass on 292
2024-09-04 18:31:52,518 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431B51C2B0>
2024-09-04 18:31:52,518 - on stmt: $const294.1 = const(int, 1)
2024-09-04 18:31:52,518 - on stmt: $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:52,519 - on stmt: n = $296inplace_add.2
2024-09-04 18:31:52,519 - on stmt: jump 333
2024-09-04 18:31:52,519 - ==== SSA block analysis pass on 302
2024-09-04 18:31:52,519 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431B51C2B0>
2024-09-04 18:31:52,519 - on stmt: $const306.2 = const(int, 1)
2024-09-04 18:31:52,519 - on stmt: $308binary_add.3 = wait + $const306.2
2024-09-04 18:31:52,519 - on stmt: $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:52,519 - on stmt: n = $310inplace_add.4
2024-09-04 18:31:52,519 - on stmt: $318load_attr.7 = getattr(value=x, attr=shape)
2024-09-04 18:31:52,519 - on stmt: $const320.8 = const(int, 0)
2024-09-04 18:31:52,519 - on stmt: $322binary_subscr.9 = static_getitem(value=$318load_attr.7, index=0, index_var=$const320.8, fn=<built-in function getitem>)
2024-09-04 18:31:52,519 - on stmt: $324compare_op.10 = n < $322binary_subscr.9
2024-09-04 18:31:52,520 - on stmt: bool326 = global(bool: <class 'bool'>)
2024-09-04 18:31:52,520 - on stmt: $326pred = call bool326($324compare_op.10, func=bool326, args=(Var($324compare_op.10, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,520 - on stmt: branch $326pred, 134, 328
2024-09-04 18:31:52,520 - ==== SSA block analysis pass on 328
2024-09-04 18:31:52,520 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431B51C2B0>
2024-09-04 18:31:52,520 - on stmt: $const328.0 = const(NoneType, None)
2024-09-04 18:31:52,520 - on stmt: $330return_value.1 = cast(value=$const328.0)
2024-09-04 18:31:52,520 - on stmt: return $330return_value.1
2024-09-04 18:31:52,520 - ==== SSA block analysis pass on 332
2024-09-04 18:31:52,520 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431B51C2B0>
2024-09-04 18:31:52,520 - on stmt: $const332.0 = const(NoneType, None)
2024-09-04 18:31:52,520 - on stmt: $334return_value.1 = cast(value=$const332.0)
2024-09-04 18:31:52,520 - on stmt: return $334return_value.1
2024-09-04 18:31:52,521 - ==== SSA block analysis pass on 333
2024-09-04 18:31:52,521 - Running <numba.core.ssa._GatherDefsHandler object at 0x000002431B51C2B0>
2024-09-04 18:31:52,521 - on stmt: jump 120
2024-09-04 18:31:52,526 - defs defaultdict(<class 'list'>,
            {'$102binary_subscr.50': [(<numba.core.ir.Assign object at 0x000002431B4C8250>,
                                       0)],
             '$104pred': [(<numba.core.ir.Assign object at 0x000002431B5AB250>,
                           0)],
             '$10load_method.4': [(<numba.core.ir.Assign object at 0x0000024313653D00>,
                                   0)],
             '$124load_attr.2': [(<numba.core.ir.Assign object at 0x000002431B5AB3A0>,
                                  120)],
             '$128binary_subscr.4': [(<numba.core.ir.Assign object at 0x00000243136B4AC0>,
                                      120)],
             '$130compare_op.5': [(<numba.core.ir.Assign object at 0x000002431B5AB160>,
                                   120)],
             '$132pred': [(<numba.core.ir.Assign object at 0x000002431B5AAE60>,
                           120)],
             '$134load_global.0': [(<numba.core.ir.Assign object at 0x000002431B5AA890>,
                                    134)],
             '$136load_method.1': [(<numba.core.ir.Assign object at 0x000002431B5A8D60>,
                                    134)],
             '$140load_global.3': [(<numba.core.ir.Assign object at 0x000002431B5A9030>,
                                    134)],
             '$148binary_subtract.7': [(<numba.core.ir.Assign object at 0x000002431D181060>,
                                        134)],
             '$150call_function.8': [(<numba.core.ir.Assign object at 0x000002431D181630>,
                                      134)],
             '$152load_global.9': [(<numba.core.ir.Assign object at 0x000002431D1815D0>,
                                    134)],
             '$158binary_add.12': [(<numba.core.ir.Assign object at 0x000002431D181540>,
                                    134)],
             '$162load_attr.14': [(<numba.core.ir.Assign object at 0x000002431D1816F0>,
                                   134)],
             '$166binary_subscr.16': [(<numba.core.ir.Assign object at 0x00000243136B4760>,
                                       134)],
             '$168call_function.17': [(<numba.core.ir.Assign object at 0x000002431D181D80>,
                                       134)],
             '$16load_global.7': [(<numba.core.ir.Assign object at 0x00000243176FD8D0>,
                                   0)],
             '$170build_slice.18': [(<numba.core.ir.Assign object at 0x000002431D180FD0>,
                                     134)],
             '$170build_slice.19': [(<numba.core.ir.Assign object at 0x000002431D183730>,
                                     134)],
             '$172binary_subscr.20': [(<numba.core.ir.Assign object at 0x000002431D181CC0>,
                                       134)],
             '$182binary_subscr.24': [(<numba.core.ir.Assign object at 0x000002431D1830D0>,
                                       134)],
             '$186compare_op.26': [(<numba.core.ir.Assign object at 0x000002431D182710>,
                                    134)],
             '$198binary_subscr.31': [(<numba.core.ir.Assign object at 0x00000243132902E0>,
                                       134)],
             '$200pred': [(<numba.core.ir.Assign object at 0x0000024313291A80>,
                           134)],
             '$206inplace_add.2': [(<numba.core.ir.Assign object at 0x000002431B5AA8F0>,
                                    202)],
             '$212load_global.0': [(<numba.core.ir.Assign object at 0x0000024313293040>,
                                    212)],
             '$214load_method.1': [(<numba.core.ir.Assign object at 0x0000024313292C20>,
                                    212)],
             '$218load_global.3': [(<numba.core.ir.Assign object at 0x0000024313292530>,
                                    212)],
             '$226binary_subtract.7': [(<numba.core.ir.Assign object at 0x0000024313292DA0>,
                                        212)],
             '$228call_function.8': [(<numba.core.ir.Assign object at 0x0000024313290760>,
                                      212)],
             '$22load_attr.10': [(<numba.core.ir.Assign object at 0x0000024313335F90>,
                                  0)],
             '$230load_global.9': [(<numba.core.ir.Assign object at 0x00000243132926E0>,
                                    212)],
             '$236binary_add.12': [(<numba.core.ir.Assign object at 0x0000024313290070>,
                                    212)],
             '$240load_attr.14': [(<numba.core.ir.Assign object at 0x00000243132902B0>,
                                   212)],
             '$244binary_subscr.16': [(<numba.core.ir.Assign object at 0x000002431B4C98A0>,
                                       212)],
             '$246call_function.17': [(<numba.core.ir.Assign object at 0x0000024313291810>,
                                       212)],
             '$248build_slice.18': [(<numba.core.ir.Assign object at 0x0000024313290DF0>,
                                     212)],
             '$248build_slice.19': [(<numba.core.ir.Assign object at 0x00000243132900A0>,
                                     212)],
             '$250binary_subscr.20': [(<numba.core.ir.Assign object at 0x0000024313290F40>,
                                       212)],
             '$262binary_subscr.26': [(<numba.core.ir.Assign object at 0x00000243132904F0>,
                                       212)],
             '$268binary_subscr.29': [(<numba.core.ir.Assign object at 0x0000024313292470>,
                                       212)],
             '$26binary_subscr.12': [(<numba.core.ir.Assign object at 0x000002431B4CB970>,
                                      0)],
             '$274binary_add.32': [(<numba.core.ir.Assign object at 0x0000024312DA26B0>,
                                    212)],
             '$276compare_op.33': [(<numba.core.ir.Assign object at 0x0000024312DA3280>,
                                    212)],
             '$278inplace_and.34': [(<numba.core.ir.Assign object at 0x0000024312DA31C0>,
                                     212)],
             '$288binary_subscr.37': [(<numba.core.ir.Assign object at 0x0000024312DA3670>,
                                       212)],
             '$28call_function.13': [(<numba.core.ir.Assign object at 0x0000024313640C10>,
                                      0)],
             '$290pred': [(<numba.core.ir.Assign object at 0x0000024312DA3850>,
                           212)],
             '$296inplace_add.2': [(<numba.core.ir.Assign object at 0x0000024313291C90>,
                                    292)],
             '$308binary_add.3': [(<numba.core.ir.Assign object at 0x0000024312DA3310>,
                                   302)],
             '$30build_slice.14': [(<numba.core.ir.Assign object at 0x00000243136421A0>,
                                    0)],
             '$30build_slice.15': [(<numba.core.ir.Assign object at 0x0000024313643A60>,
                                    0)],
             '$310inplace_add.4': [(<numba.core.ir.Assign object at 0x0000024312DA0BE0>,
                                    302)],
             '$318load_attr.7': [(<numba.core.ir.Assign object at 0x000002431B4C8D60>,
                                  302)],
             '$322binary_subscr.9': [(<numba.core.ir.Assign object at 0x000002431368DFC0>,
                                      302)],
             '$324compare_op.10': [(<numba.core.ir.Assign object at 0x000002431B4CB460>,
                                    302)],
             '$326pred': [(<numba.core.ir.Assign object at 0x000002431B4CB850>,
                           302)],
             '$32binary_subscr.16': [(<numba.core.ir.Assign object at 0x00000243136408E0>,
                                      0)],
             '$330return_value.1': [(<numba.core.ir.Assign object at 0x000002431B4CB340>,
                                     328)],
             '$334return_value.1': [(<numba.core.ir.Assign object at 0x000002431B4C9240>,
                                     332)],
             '$34call_method.17': [(<numba.core.ir.Assign object at 0x0000024313642650>,
                                    0)],
             '$36compare_op.18': [(<numba.core.ir.Assign object at 0x00000243136438E0>,
                                   0)],
             '$50binary_subscr.25': [(<numba.core.ir.Assign object at 0x000002431B4C9060>,
                                      0)],
             '$56binary_subscr.28': [(<numba.core.ir.Assign object at 0x000002431B4C90C0>,
                                      0)],
             '$58load_global.29': [(<numba.core.ir.Assign object at 0x0000024316E5AAA0>,
                                    0)],
             '$60load_method.30': [(<numba.core.ir.Assign object at 0x0000024316E59210>,
                                    0)],
             '$66load_global.33': [(<numba.core.ir.Assign object at 0x00000243131E5AE0>,
                                    0)],
             '$6binary_subscr.2': [(<numba.core.ir.Assign object at 0x000002431B4CBFA0>,
                                    0)],
             '$72load_attr.36': [(<numba.core.ir.Assign object at 0x00000243131E5480>,
                                  0)],
             '$76binary_subscr.38': [(<numba.core.ir.Assign object at 0x000002431B4CBE80>,
                                      0)],
             '$78call_function.39': [(<numba.core.ir.Assign object at 0x00000243131E4D60>,
                                      0)],
             '$80build_slice.40': [(<numba.core.ir.Assign object at 0x00000243131E60E0>,
                                    0)],
             '$80build_slice.41': [(<numba.core.ir.Assign object at 0x00000243131E4340>,
                                    0)],
             '$82binary_subscr.42': [(<numba.core.ir.Assign object at 0x000002431B5A96F0>,
                                      0)],
             '$84call_method.43': [(<numba.core.ir.Assign object at 0x000002431B5A9750>,
                                    0)],
             '$88binary_add.45': [(<numba.core.ir.Assign object at 0x000002431B5AB370>,
                                   0)],
             '$8load_global.3': [(<numba.core.ir.Assign object at 0x00000243132C4610>,
                                  0)],
             '$90compare_op.46': [(<numba.core.ir.Assign object at 0x000002431B5A9BA0>,
                                   0)],
             '$92inplace_and.47': [(<numba.core.ir.Assign object at 0x000002431B5A9C90>,
                                    0)],
             '$const100.49': [(<numba.core.ir.Assign object at 0x000002431B5A9C00>,
                               0)],
             '$const108.1': [(<numba.core.ir.Assign object at 0x00000243131E54B0>,
                              106)],
             '$const126.3': [(<numba.core.ir.Assign object at 0x000002431B5A9B10>,
                              120)],
             '$const14.6': [(<numba.core.ir.Assign object at 0x00000243132A5030>,
                             0)],
             '$const142.4': [(<numba.core.ir.Assign object at 0x000002431B5AB880>,
                              134)],
             '$const164.15': [(<numba.core.ir.Assign object at 0x000002431D1823B0>,
                               134)],
             '$const204.1': [(<numba.core.ir.Assign object at 0x000002431D181DB0>,
                              202)],
             '$const220.4': [(<numba.core.ir.Assign object at 0x0000024313290430>,
                              212)],
             '$const24.11': [(<numba.core.ir.Assign object at 0x00000243133352D0>,
                              0)],
             '$const242.15': [(<numba.core.ir.Assign object at 0x00000243132932E0>,
                               212)],
             '$const294.1': [(<numba.core.ir.Assign object at 0x0000024313290490>,
                              292)],
             '$const306.2': [(<numba.core.ir.Assign object at 0x0000024312DA2E00>,
                              302)],
             '$const320.8': [(<numba.core.ir.Assign object at 0x000002431B4CB550>,
                              302)],
             '$const328.0': [(<numba.core.ir.Assign object at 0x000002431B4CAA70>,
                              328)],
             '$const332.0': [(<numba.core.ir.Assign object at 0x000002431B4CAC50>,
                              332)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x0000024313A65BD0>,
                            0)],
             '$const40.20': [(<numba.core.ir.Assign object at 0x00000243136417B0>,
                              0)],
             '$const46.22': [(<numba.core.ir.Assign object at 0x00000243131F7A60>,
                              0)],
             '$const54.27': [(<numba.core.ir.Assign object at 0x0000024316D1A8F0>,
                              0)],
             '$const64.32': [(<numba.core.ir.Assign object at 0x00000243131E4550>,
                              0)],
             '$const74.37': [(<numba.core.ir.Assign object at 0x00000243131E4430>,
                              0)],
             'avgn': [(<numba.core.ir.Assign object at 0x0000024313291390>,
                       212)],
             'bool104': [(<numba.core.ir.Assign object at 0x000002431B5A9090>,
                          0)],
             'bool132': [(<numba.core.ir.Assign object at 0x000002431B5AB3D0>,
                          120)],
             'bool200': [(<numba.core.ir.Assign object at 0x0000024313290040>,
                          134)],
             'bool290': [(<numba.core.ir.Assign object at 0x0000024312DA2FE0>,
                          212)],
             'bool326': [(<numba.core.ir.Assign object at 0x000002431B4CAE30>,
                          302)],
             'delta': [(<numba.core.ir.Assign object at 0x00000243136E0F10>,
                        0)],
             'maxn': [(<numba.core.ir.Assign object at 0x000002431D182980>,
                       134)],
             'n': [(<numba.core.ir.Assign object at 0x000002431B5A9FF0>, 106),
                   (<numba.core.ir.Assign object at 0x000002431B5AAA70>, 116),
                   (<numba.core.ir.Assign object at 0x0000024313293C40>, 202),
                   (<numba.core.ir.Assign object at 0x0000024313293190>, 292),
                   (<numba.core.ir.Assign object at 0x0000024312DA3D60>, 302)],
             'peaks': [(<numba.core.ir.Assign object at 0x0000024313A66E30>,
                        0)],
             'post_avg': [(<numba.core.ir.Assign object at 0x00000243136E1060>,
                           0)],
             'post_max': [(<numba.core.ir.Assign object at 0x00000243136E2EF0>,
                           0)],
             'pre_avg': [(<numba.core.ir.Assign object at 0x00000243136E1930>,
                          0)],
             'pre_max': [(<numba.core.ir.Assign object at 0x00000243136E22F0>,
                          0)],
             'wait': [(<numba.core.ir.Assign object at 0x0000024313A679D0>, 0)],
             'x': [(<numba.core.ir.Assign object at 0x0000024316C57220>, 0)]})
2024-09-04 18:31:52,526 - SSA violators <numba.core.utils.OrderedSet object at 0x0000024316D07A30>
2024-09-04 18:31:52,527 - Fix SSA violator on var n
2024-09-04 18:31:52,527 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:52,527 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431B51C2B0>
2024-09-04 18:31:52,527 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:52,527 - on stmt: pre_max = arg(1, name=pre_max)
2024-09-04 18:31:52,527 - on stmt: post_max = arg(2, name=post_max)
2024-09-04 18:31:52,527 - on stmt: pre_avg = arg(3, name=pre_avg)
2024-09-04 18:31:52,527 - on stmt: post_avg = arg(4, name=post_avg)
2024-09-04 18:31:52,527 - on stmt: delta = arg(5, name=delta)
2024-09-04 18:31:52,527 - on stmt: wait = arg(6, name=wait)
2024-09-04 18:31:52,527 - on stmt: peaks = arg(7, name=peaks)
2024-09-04 18:31:52,527 - on stmt: $const4.1 = const(int, 0)
2024-09-04 18:31:52,527 - on stmt: $6binary_subscr.2 = static_getitem(value=x, index=0, index_var=$const4.1, fn=<built-in function getitem>)
2024-09-04 18:31:52,527 - on stmt: $8load_global.3 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:52,528 - on stmt: $10load_method.4 = getattr(value=$8load_global.3, attr=max)
2024-09-04 18:31:52,528 - on stmt: $const14.6 = const(NoneType, None)
2024-09-04 18:31:52,528 - on stmt: $16load_global.7 = global(min: <built-in function min>)
2024-09-04 18:31:52,528 - on stmt: $22load_attr.10 = getattr(value=x, attr=shape)
2024-09-04 18:31:52,528 - on stmt: $const24.11 = const(int, 0)
2024-09-04 18:31:52,528 - on stmt: $26binary_subscr.12 = static_getitem(value=$22load_attr.10, index=0, index_var=$const24.11, fn=<built-in function getitem>)
2024-09-04 18:31:52,528 - on stmt: $28call_function.13 = call $16load_global.7(post_max, $26binary_subscr.12, func=$16load_global.7, args=[Var(post_max, utils.py:1209), Var($26binary_subscr.12, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,528 - on stmt: $30build_slice.14 = global(slice: <class 'slice'>)
2024-09-04 18:31:52,528 - on stmt: $30build_slice.15 = call $30build_slice.14($const14.6, $28call_function.13, func=$30build_slice.14, args=(Var($const14.6, utils.py:1221), Var($28call_function.13, utils.py:1221)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,528 - on stmt: $32binary_subscr.16 = getitem(value=x, index=$30build_slice.15, fn=<built-in function getitem>)
2024-09-04 18:31:52,528 - on stmt: $34call_method.17 = call $10load_method.4($32binary_subscr.16, func=$10load_method.4, args=[Var($32binary_subscr.16, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,528 - on stmt: $36compare_op.18 = $6binary_subscr.2 >= $34call_method.17
2024-09-04 18:31:52,528 - on stmt: $const40.20 = const(int, 0)
2024-09-04 18:31:52,529 - on stmt: peaks[0] = $36compare_op.18
2024-09-04 18:31:52,529 - on stmt: $const46.22 = const(int, 0)
2024-09-04 18:31:52,529 - on stmt: $50binary_subscr.25 = static_getitem(value=peaks, index=0, index_var=$const46.22, fn=<built-in function getitem>)
2024-09-04 18:31:52,529 - on stmt: $const54.27 = const(int, 0)
2024-09-04 18:31:52,529 - on stmt: $56binary_subscr.28 = static_getitem(value=x, index=0, index_var=$const54.27, fn=<built-in function getitem>)
2024-09-04 18:31:52,529 - on stmt: $58load_global.29 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:52,529 - on stmt: $60load_method.30 = getattr(value=$58load_global.29, attr=mean)
2024-09-04 18:31:52,529 - on stmt: $const64.32 = const(NoneType, None)
2024-09-04 18:31:52,529 - on stmt: $66load_global.33 = global(min: <built-in function min>)
2024-09-04 18:31:52,529 - on stmt: $72load_attr.36 = getattr(value=x, attr=shape)
2024-09-04 18:31:52,529 - on stmt: $const74.37 = const(int, 0)
2024-09-04 18:31:52,529 - on stmt: $76binary_subscr.38 = static_getitem(value=$72load_attr.36, index=0, index_var=$const74.37, fn=<built-in function getitem>)
2024-09-04 18:31:52,529 - on stmt: $78call_function.39 = call $66load_global.33(post_avg, $76binary_subscr.38, func=$66load_global.33, args=[Var(post_avg, utils.py:1209), Var($76binary_subscr.38, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,529 - on stmt: $80build_slice.40 = global(slice: <class 'slice'>)
2024-09-04 18:31:52,530 - on stmt: $80build_slice.41 = call $80build_slice.40($const64.32, $78call_function.39, func=$80build_slice.40, args=(Var($const64.32, utils.py:1222), Var($78call_function.39, utils.py:1222)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,530 - on stmt: $82binary_subscr.42 = getitem(value=x, index=$80build_slice.41, fn=<built-in function getitem>)
2024-09-04 18:31:52,530 - on stmt: $84call_method.43 = call $60load_method.30($82binary_subscr.42, func=$60load_method.30, args=[Var($82binary_subscr.42, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,530 - on stmt: $88binary_add.45 = $84call_method.43 + delta
2024-09-04 18:31:52,530 - on stmt: $90compare_op.46 = $56binary_subscr.28 >= $88binary_add.45
2024-09-04 18:31:52,530 - on stmt: $92inplace_and.47 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$50binary_subscr.25, rhs=$90compare_op.46, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:52,530 - on stmt: peaks[0] = $92inplace_and.47
2024-09-04 18:31:52,530 - on stmt: $const100.49 = const(int, 0)
2024-09-04 18:31:52,530 - on stmt: $102binary_subscr.50 = static_getitem(value=peaks, index=0, index_var=$const100.49, fn=<built-in function getitem>)
2024-09-04 18:31:52,530 - on stmt: bool104 = global(bool: <class 'bool'>)
2024-09-04 18:31:52,530 - on stmt: $104pred = call bool104($102binary_subscr.50, func=bool104, args=(Var($102binary_subscr.50, utils.py:1224),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,530 - on stmt: branch $104pred, 106, 116
2024-09-04 18:31:52,530 - ==== SSA block rewrite pass on 106
2024-09-04 18:31:52,531 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431B51C2B0>
2024-09-04 18:31:52,531 - on stmt: $const108.1 = const(int, 1)
2024-09-04 18:31:52,531 - on stmt: n = wait + $const108.1
2024-09-04 18:31:52,531 - first assign: n
2024-09-04 18:31:52,531 - replaced with: n = wait + $const108.1
2024-09-04 18:31:52,531 - on stmt: jump 120
2024-09-04 18:31:52,531 - ==== SSA block rewrite pass on 116
2024-09-04 18:31:52,531 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431B51C2B0>
2024-09-04 18:31:52,531 - on stmt: n = const(int, 1)
2024-09-04 18:31:52,531 - replaced with: n.1 = const(int, 1)
2024-09-04 18:31:52,531 - on stmt: jump 120
2024-09-04 18:31:52,531 - ==== SSA block rewrite pass on 120
2024-09-04 18:31:52,531 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431B51C2B0>
2024-09-04 18:31:52,532 - on stmt: $124load_attr.2 = getattr(value=x, attr=shape)
2024-09-04 18:31:52,532 - on stmt: $const126.3 = const(int, 0)
2024-09-04 18:31:52,532 - on stmt: $128binary_subscr.4 = static_getitem(value=$124load_attr.2, index=0, index_var=$const126.3, fn=<built-in function getitem>)
2024-09-04 18:31:52,532 - on stmt: $130compare_op.5 = n < $128binary_subscr.4
2024-09-04 18:31:52,532 - on stmt: bool132 = global(bool: <class 'bool'>)
2024-09-04 18:31:52,532 - on stmt: $132pred = call bool132($130compare_op.5, func=bool132, args=(Var($130compare_op.5, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,532 - on stmt: branch $132pred, 134, 332
2024-09-04 18:31:52,532 - ==== SSA block rewrite pass on 134
2024-09-04 18:31:52,532 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431B51C2B0>
2024-09-04 18:31:52,532 - on stmt: $134load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:52,532 - on stmt: $136load_method.1 = getattr(value=$134load_global.0, attr=max)
2024-09-04 18:31:52,532 - on stmt: $140load_global.3 = global(max: <built-in function max>)
2024-09-04 18:31:52,532 - on stmt: $const142.4 = const(int, 0)
2024-09-04 18:31:52,532 - on stmt: $148binary_subtract.7 = n - pre_max
2024-09-04 18:31:52,533 - on stmt: $150call_function.8 = call $140load_global.3($const142.4, $148binary_subtract.7, func=$140load_global.3, args=[Var($const142.4, utils.py:1230), Var($148binary_subtract.7, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,533 - on stmt: $152load_global.9 = global(min: <built-in function min>)
2024-09-04 18:31:52,533 - on stmt: $158binary_add.12 = n + post_max
2024-09-04 18:31:52,533 - on stmt: $162load_attr.14 = getattr(value=x, attr=shape)
2024-09-04 18:31:52,533 - on stmt: $const164.15 = const(int, 0)
2024-09-04 18:31:52,533 - on stmt: $166binary_subscr.16 = static_getitem(value=$162load_attr.14, index=0, index_var=$const164.15, fn=<built-in function getitem>)
2024-09-04 18:31:52,533 - on stmt: $168call_function.17 = call $152load_global.9($158binary_add.12, $166binary_subscr.16, func=$152load_global.9, args=[Var($158binary_add.12, utils.py:1230), Var($166binary_subscr.16, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,533 - on stmt: $170build_slice.18 = global(slice: <class 'slice'>)
2024-09-04 18:31:52,533 - on stmt: $170build_slice.19 = call $170build_slice.18($150call_function.8, $168call_function.17, func=$170build_slice.18, args=(Var($150call_function.8, utils.py:1230), Var($168call_function.17, utils.py:1230)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,533 - on stmt: $172binary_subscr.20 = getitem(value=x, index=$170build_slice.19, fn=<built-in function getitem>)
2024-09-04 18:31:52,533 - on stmt: maxn = call $136load_method.1($172binary_subscr.20, func=$136load_method.1, args=[Var($172binary_subscr.20, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,533 - on stmt: $182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:52,534 - on stmt: $186compare_op.26 = $182binary_subscr.24 == maxn
2024-09-04 18:31:52,534 - on stmt: peaks[n] = $186compare_op.26
2024-09-04 18:31:52,534 - on stmt: $198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:52,534 - on stmt: bool200 = global(bool: <class 'bool'>)
2024-09-04 18:31:52,534 - on stmt: $200pred = call bool200($198binary_subscr.31, func=bool200, args=(Var($198binary_subscr.31, utils.py:1235),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,534 - on stmt: branch $200pred, 212, 202
2024-09-04 18:31:52,534 - ==== SSA block rewrite pass on 202
2024-09-04 18:31:52,534 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431B51C2B0>
2024-09-04 18:31:52,534 - on stmt: $const204.1 = const(int, 1)
2024-09-04 18:31:52,535 - on stmt: $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:52,535 - on stmt: n = $206inplace_add.2
2024-09-04 18:31:52,535 - replaced with: n.2 = $206inplace_add.2
2024-09-04 18:31:52,536 - on stmt: jump 333
2024-09-04 18:31:52,536 - ==== SSA block rewrite pass on 212
2024-09-04 18:31:52,536 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431B51C2B0>
2024-09-04 18:31:52,536 - on stmt: $212load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:52,536 - on stmt: $214load_method.1 = getattr(value=$212load_global.0, attr=mean)
2024-09-04 18:31:52,537 - on stmt: $218load_global.3 = global(max: <built-in function max>)
2024-09-04 18:31:52,537 - on stmt: $const220.4 = const(int, 0)
2024-09-04 18:31:52,537 - on stmt: $226binary_subtract.7 = n - pre_avg
2024-09-04 18:31:52,537 - on stmt: $228call_function.8 = call $218load_global.3($const220.4, $226binary_subtract.7, func=$218load_global.3, args=[Var($const220.4, utils.py:1239), Var($226binary_subtract.7, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,537 - on stmt: $230load_global.9 = global(min: <built-in function min>)
2024-09-04 18:31:52,537 - on stmt: $236binary_add.12 = n + post_avg
2024-09-04 18:31:52,537 - on stmt: $240load_attr.14 = getattr(value=x, attr=shape)
2024-09-04 18:31:52,538 - on stmt: $const242.15 = const(int, 0)
2024-09-04 18:31:52,538 - on stmt: $244binary_subscr.16 = static_getitem(value=$240load_attr.14, index=0, index_var=$const242.15, fn=<built-in function getitem>)
2024-09-04 18:31:52,538 - on stmt: $246call_function.17 = call $230load_global.9($236binary_add.12, $244binary_subscr.16, func=$230load_global.9, args=[Var($236binary_add.12, utils.py:1239), Var($244binary_subscr.16, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,538 - on stmt: $248build_slice.18 = global(slice: <class 'slice'>)
2024-09-04 18:31:52,538 - on stmt: $248build_slice.19 = call $248build_slice.18($228call_function.8, $246call_function.17, func=$248build_slice.18, args=(Var($228call_function.8, utils.py:1239), Var($246call_function.17, utils.py:1239)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,538 - on stmt: $250binary_subscr.20 = getitem(value=x, index=$248build_slice.19, fn=<built-in function getitem>)
2024-09-04 18:31:52,538 - on stmt: avgn = call $214load_method.1($250binary_subscr.20, func=$214load_method.1, args=[Var($250binary_subscr.20, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,539 - on stmt: $262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:52,539 - on stmt: $268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:52,539 - on stmt: $274binary_add.32 = avgn + delta
2024-09-04 18:31:52,539 - on stmt: $276compare_op.33 = $268binary_subscr.29 >= $274binary_add.32
2024-09-04 18:31:52,539 - on stmt: $278inplace_and.34 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$262binary_subscr.26, rhs=$276compare_op.33, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:52,539 - on stmt: peaks[n] = $278inplace_and.34
2024-09-04 18:31:52,539 - on stmt: $288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:52,539 - on stmt: bool290 = global(bool: <class 'bool'>)
2024-09-04 18:31:52,540 - on stmt: $290pred = call bool290($288binary_subscr.37, func=bool290, args=(Var($288binary_subscr.37, utils.py:1242),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,540 - on stmt: branch $290pred, 302, 292
2024-09-04 18:31:52,540 - ==== SSA block rewrite pass on 292
2024-09-04 18:31:52,540 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431B51C2B0>
2024-09-04 18:31:52,540 - on stmt: $const294.1 = const(int, 1)
2024-09-04 18:31:52,540 - on stmt: $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:52,540 - on stmt: n = $296inplace_add.2
2024-09-04 18:31:52,540 - replaced with: n.3 = $296inplace_add.2
2024-09-04 18:31:52,540 - on stmt: jump 333
2024-09-04 18:31:52,541 - ==== SSA block rewrite pass on 302
2024-09-04 18:31:52,541 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431B51C2B0>
2024-09-04 18:31:52,541 - on stmt: $const306.2 = const(int, 1)
2024-09-04 18:31:52,541 - on stmt: $308binary_add.3 = wait + $const306.2
2024-09-04 18:31:52,541 - on stmt: $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:52,541 - on stmt: n = $310inplace_add.4
2024-09-04 18:31:52,541 - replaced with: n.4 = $310inplace_add.4
2024-09-04 18:31:52,541 - on stmt: $318load_attr.7 = getattr(value=x, attr=shape)
2024-09-04 18:31:52,541 - on stmt: $const320.8 = const(int, 0)
2024-09-04 18:31:52,541 - on stmt: $322binary_subscr.9 = static_getitem(value=$318load_attr.7, index=0, index_var=$const320.8, fn=<built-in function getitem>)
2024-09-04 18:31:52,541 - on stmt: $324compare_op.10 = n < $322binary_subscr.9
2024-09-04 18:31:52,542 - on stmt: bool326 = global(bool: <class 'bool'>)
2024-09-04 18:31:52,542 - on stmt: $326pred = call bool326($324compare_op.10, func=bool326, args=(Var($324compare_op.10, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,542 - on stmt: branch $326pred, 134, 328
2024-09-04 18:31:52,542 - ==== SSA block rewrite pass on 328
2024-09-04 18:31:52,542 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431B51C2B0>
2024-09-04 18:31:52,542 - on stmt: $const328.0 = const(NoneType, None)
2024-09-04 18:31:52,542 - on stmt: $330return_value.1 = cast(value=$const328.0)
2024-09-04 18:31:52,542 - on stmt: return $330return_value.1
2024-09-04 18:31:52,542 - ==== SSA block rewrite pass on 332
2024-09-04 18:31:52,542 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431B51C2B0>
2024-09-04 18:31:52,542 - on stmt: $const332.0 = const(NoneType, None)
2024-09-04 18:31:52,542 - on stmt: $334return_value.1 = cast(value=$const332.0)
2024-09-04 18:31:52,542 - on stmt: return $334return_value.1
2024-09-04 18:31:52,542 - ==== SSA block rewrite pass on 333
2024-09-04 18:31:52,543 - Running <numba.core.ssa._FreshVarHandler object at 0x000002431B51C2B0>
2024-09-04 18:31:52,543 - on stmt: jump 120
2024-09-04 18:31:52,543 - Replaced assignments: defaultdict(<class 'list'>,
            {106: [<numba.core.ir.Assign object at 0x000002431B51C9A0>],
             116: [<numba.core.ir.Assign object at 0x000002431B51C970>],
             202: [<numba.core.ir.Assign object at 0x00000243131B0E80>],
             292: [<numba.core.ir.Assign object at 0x00000243136B4AF0>],
             302: [<numba.core.ir.Assign object at 0x00000243136B4460>]})
2024-09-04 18:31:52,543 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:52,543 - Running <numba.core.ssa._FixSSAVars object at 0x000002431B51C2B0>
2024-09-04 18:31:52,543 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:52,543 - on stmt: pre_max = arg(1, name=pre_max)
2024-09-04 18:31:52,543 - on stmt: post_max = arg(2, name=post_max)
2024-09-04 18:31:52,543 - on stmt: pre_avg = arg(3, name=pre_avg)
2024-09-04 18:31:52,543 - on stmt: post_avg = arg(4, name=post_avg)
2024-09-04 18:31:52,543 - on stmt: delta = arg(5, name=delta)
2024-09-04 18:31:52,543 - on stmt: wait = arg(6, name=wait)
2024-09-04 18:31:52,544 - on stmt: peaks = arg(7, name=peaks)
2024-09-04 18:31:52,544 - on stmt: $const4.1 = const(int, 0)
2024-09-04 18:31:52,544 - on stmt: $6binary_subscr.2 = static_getitem(value=x, index=0, index_var=$const4.1, fn=<built-in function getitem>)
2024-09-04 18:31:52,544 - on stmt: $8load_global.3 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:52,544 - on stmt: $10load_method.4 = getattr(value=$8load_global.3, attr=max)
2024-09-04 18:31:52,544 - on stmt: $const14.6 = const(NoneType, None)
2024-09-04 18:31:52,544 - on stmt: $16load_global.7 = global(min: <built-in function min>)
2024-09-04 18:31:52,544 - on stmt: $22load_attr.10 = getattr(value=x, attr=shape)
2024-09-04 18:31:52,544 - on stmt: $const24.11 = const(int, 0)
2024-09-04 18:31:52,544 - on stmt: $26binary_subscr.12 = static_getitem(value=$22load_attr.10, index=0, index_var=$const24.11, fn=<built-in function getitem>)
2024-09-04 18:31:52,544 - on stmt: $28call_function.13 = call $16load_global.7(post_max, $26binary_subscr.12, func=$16load_global.7, args=[Var(post_max, utils.py:1209), Var($26binary_subscr.12, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,544 - on stmt: $30build_slice.14 = global(slice: <class 'slice'>)
2024-09-04 18:31:52,544 - on stmt: $30build_slice.15 = call $30build_slice.14($const14.6, $28call_function.13, func=$30build_slice.14, args=(Var($const14.6, utils.py:1221), Var($28call_function.13, utils.py:1221)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,545 - on stmt: $32binary_subscr.16 = getitem(value=x, index=$30build_slice.15, fn=<built-in function getitem>)
2024-09-04 18:31:52,545 - on stmt: $34call_method.17 = call $10load_method.4($32binary_subscr.16, func=$10load_method.4, args=[Var($32binary_subscr.16, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,545 - on stmt: $36compare_op.18 = $6binary_subscr.2 >= $34call_method.17
2024-09-04 18:31:52,545 - on stmt: $const40.20 = const(int, 0)
2024-09-04 18:31:52,545 - on stmt: peaks[0] = $36compare_op.18
2024-09-04 18:31:52,545 - on stmt: $const46.22 = const(int, 0)
2024-09-04 18:31:52,545 - on stmt: $50binary_subscr.25 = static_getitem(value=peaks, index=0, index_var=$const46.22, fn=<built-in function getitem>)
2024-09-04 18:31:52,545 - on stmt: $const54.27 = const(int, 0)
2024-09-04 18:31:52,545 - on stmt: $56binary_subscr.28 = static_getitem(value=x, index=0, index_var=$const54.27, fn=<built-in function getitem>)
2024-09-04 18:31:52,545 - on stmt: $58load_global.29 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:52,545 - on stmt: $60load_method.30 = getattr(value=$58load_global.29, attr=mean)
2024-09-04 18:31:52,546 - on stmt: $const64.32 = const(NoneType, None)
2024-09-04 18:31:52,546 - on stmt: $66load_global.33 = global(min: <built-in function min>)
2024-09-04 18:31:52,546 - on stmt: $72load_attr.36 = getattr(value=x, attr=shape)
2024-09-04 18:31:52,546 - on stmt: $const74.37 = const(int, 0)
2024-09-04 18:31:52,546 - on stmt: $76binary_subscr.38 = static_getitem(value=$72load_attr.36, index=0, index_var=$const74.37, fn=<built-in function getitem>)
2024-09-04 18:31:52,546 - on stmt: $78call_function.39 = call $66load_global.33(post_avg, $76binary_subscr.38, func=$66load_global.33, args=[Var(post_avg, utils.py:1209), Var($76binary_subscr.38, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,546 - on stmt: $80build_slice.40 = global(slice: <class 'slice'>)
2024-09-04 18:31:52,546 - on stmt: $80build_slice.41 = call $80build_slice.40($const64.32, $78call_function.39, func=$80build_slice.40, args=(Var($const64.32, utils.py:1222), Var($78call_function.39, utils.py:1222)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,546 - on stmt: $82binary_subscr.42 = getitem(value=x, index=$80build_slice.41, fn=<built-in function getitem>)
2024-09-04 18:31:52,546 - on stmt: $84call_method.43 = call $60load_method.30($82binary_subscr.42, func=$60load_method.30, args=[Var($82binary_subscr.42, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,546 - on stmt: $88binary_add.45 = $84call_method.43 + delta
2024-09-04 18:31:52,546 - on stmt: $90compare_op.46 = $56binary_subscr.28 >= $88binary_add.45
2024-09-04 18:31:52,547 - on stmt: $92inplace_and.47 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$50binary_subscr.25, rhs=$90compare_op.46, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:52,547 - on stmt: peaks[0] = $92inplace_and.47
2024-09-04 18:31:52,547 - on stmt: $const100.49 = const(int, 0)
2024-09-04 18:31:52,547 - on stmt: $102binary_subscr.50 = static_getitem(value=peaks, index=0, index_var=$const100.49, fn=<built-in function getitem>)
2024-09-04 18:31:52,547 - on stmt: bool104 = global(bool: <class 'bool'>)
2024-09-04 18:31:52,547 - on stmt: $104pred = call bool104($102binary_subscr.50, func=bool104, args=(Var($102binary_subscr.50, utils.py:1224),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,547 - on stmt: branch $104pred, 106, 116
2024-09-04 18:31:52,547 - ==== SSA block rewrite pass on 106
2024-09-04 18:31:52,547 - Running <numba.core.ssa._FixSSAVars object at 0x000002431B51C2B0>
2024-09-04 18:31:52,547 - on stmt: $const108.1 = const(int, 1)
2024-09-04 18:31:52,547 - on stmt: n = wait + $const108.1
2024-09-04 18:31:52,547 - on stmt: jump 120
2024-09-04 18:31:52,547 - ==== SSA block rewrite pass on 116
2024-09-04 18:31:52,548 - Running <numba.core.ssa._FixSSAVars object at 0x000002431B51C2B0>
2024-09-04 18:31:52,548 - on stmt: n.1 = const(int, 1)
2024-09-04 18:31:52,548 - on stmt: jump 120
2024-09-04 18:31:52,548 - ==== SSA block rewrite pass on 120
2024-09-04 18:31:52,548 - Running <numba.core.ssa._FixSSAVars object at 0x000002431B51C2B0>
2024-09-04 18:31:52,548 - on stmt: $124load_attr.2 = getattr(value=x, attr=shape)
2024-09-04 18:31:52,548 - on stmt: $const126.3 = const(int, 0)
2024-09-04 18:31:52,548 - on stmt: $128binary_subscr.4 = static_getitem(value=$124load_attr.2, index=0, index_var=$const126.3, fn=<built-in function getitem>)
2024-09-04 18:31:52,548 - on stmt: $130compare_op.5 = n < $128binary_subscr.4
2024-09-04 18:31:52,548 - find_def var='n' stmt=$130compare_op.5 = n < $128binary_subscr.4
2024-09-04 18:31:52,548 - find_def_from_top label 120
2024-09-04 18:31:52,548 - insert phi node n.5 = phi(incoming_values=[], incoming_blocks=[]) at 120
2024-09-04 18:31:52,548 - find_def_from_bottom label 106
2024-09-04 18:31:52,549 - incoming_def n = wait + $const108.1
2024-09-04 18:31:52,549 - find_def_from_bottom label 116
2024-09-04 18:31:52,549 - incoming_def n.1 = const(int, 1)
2024-09-04 18:31:52,549 - find_def_from_bottom label 333
2024-09-04 18:31:52,549 - find_def_from_top label 333
2024-09-04 18:31:52,549 - insert phi node n.6 = phi(incoming_values=[], incoming_blocks=[]) at 333
2024-09-04 18:31:52,549 - find_def_from_bottom label 202
2024-09-04 18:31:52,549 - incoming_def n.2 = $206inplace_add.2
2024-09-04 18:31:52,549 - find_def_from_bottom label 292
2024-09-04 18:31:52,549 - incoming_def n.3 = $296inplace_add.2
2024-09-04 18:31:52,549 - incoming_def n.6 = phi(incoming_values=[Var(n.2, utils.py:1236), Var(n.3, utils.py:1243)], incoming_blocks=[202, 292])
2024-09-04 18:31:52,549 - replaced with: $130compare_op.5 = n.5 < $128binary_subscr.4
2024-09-04 18:31:52,550 - on stmt: bool132 = global(bool: <class 'bool'>)
2024-09-04 18:31:52,550 - on stmt: $132pred = call bool132($130compare_op.5, func=bool132, args=(Var($130compare_op.5, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,550 - on stmt: branch $132pred, 134, 332
2024-09-04 18:31:52,550 - ==== SSA block rewrite pass on 134
2024-09-04 18:31:52,550 - Running <numba.core.ssa._FixSSAVars object at 0x000002431B51C2B0>
2024-09-04 18:31:52,550 - on stmt: $134load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:52,550 - on stmt: $136load_method.1 = getattr(value=$134load_global.0, attr=max)
2024-09-04 18:31:52,551 - on stmt: $140load_global.3 = global(max: <built-in function max>)
2024-09-04 18:31:52,551 - on stmt: $const142.4 = const(int, 0)
2024-09-04 18:31:52,551 - on stmt: $148binary_subtract.7 = n - pre_max
2024-09-04 18:31:52,551 - find_def var='n' stmt=$148binary_subtract.7 = n - pre_max
2024-09-04 18:31:52,551 - find_def_from_top label 134
2024-09-04 18:31:52,551 - insert phi node n.7 = phi(incoming_values=[], incoming_blocks=[]) at 134
2024-09-04 18:31:52,551 - find_def_from_bottom label 120
2024-09-04 18:31:52,551 - incoming_def n.5 = phi(incoming_values=[Var(n, utils.py:1225), Var(n.1, utils.py:1227), Var(n.6, utils.py:1229)], incoming_blocks=[106, 116, 333])
2024-09-04 18:31:52,551 - find_def_from_bottom label 302
2024-09-04 18:31:52,551 - incoming_def n.4 = $310inplace_add.4
2024-09-04 18:31:52,551 - replaced with: $148binary_subtract.7 = n.7 - pre_max
2024-09-04 18:31:52,551 - on stmt: $150call_function.8 = call $140load_global.3($const142.4, $148binary_subtract.7, func=$140load_global.3, args=[Var($const142.4, utils.py:1230), Var($148binary_subtract.7, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,552 - on stmt: $152load_global.9 = global(min: <built-in function min>)
2024-09-04 18:31:52,552 - on stmt: $158binary_add.12 = n + post_max
2024-09-04 18:31:52,552 - find_def var='n' stmt=$158binary_add.12 = n + post_max
2024-09-04 18:31:52,552 - replaced with: $158binary_add.12 = n.7 + post_max
2024-09-04 18:31:52,552 - on stmt: $162load_attr.14 = getattr(value=x, attr=shape)
2024-09-04 18:31:52,552 - on stmt: $const164.15 = const(int, 0)
2024-09-04 18:31:52,552 - on stmt: $166binary_subscr.16 = static_getitem(value=$162load_attr.14, index=0, index_var=$const164.15, fn=<built-in function getitem>)
2024-09-04 18:31:52,552 - on stmt: $168call_function.17 = call $152load_global.9($158binary_add.12, $166binary_subscr.16, func=$152load_global.9, args=[Var($158binary_add.12, utils.py:1230), Var($166binary_subscr.16, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,552 - on stmt: $170build_slice.18 = global(slice: <class 'slice'>)
2024-09-04 18:31:52,552 - on stmt: $170build_slice.19 = call $170build_slice.18($150call_function.8, $168call_function.17, func=$170build_slice.18, args=(Var($150call_function.8, utils.py:1230), Var($168call_function.17, utils.py:1230)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,552 - on stmt: $172binary_subscr.20 = getitem(value=x, index=$170build_slice.19, fn=<built-in function getitem>)
2024-09-04 18:31:52,552 - on stmt: maxn = call $136load_method.1($172binary_subscr.20, func=$136load_method.1, args=[Var($172binary_subscr.20, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,552 - on stmt: $182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:52,552 - find_def var='n' stmt=$182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:52,552 - replaced with: $182binary_subscr.24 = getitem(value=x, index=n.7, fn=<built-in function getitem>)
2024-09-04 18:31:52,552 - on stmt: $186compare_op.26 = $182binary_subscr.24 == maxn
2024-09-04 18:31:52,552 - on stmt: peaks[n] = $186compare_op.26
2024-09-04 18:31:52,552 - find_def var='n' stmt=peaks[n] = $186compare_op.26
2024-09-04 18:31:52,552 - replaced with: peaks[n.7] = $186compare_op.26
2024-09-04 18:31:52,552 - on stmt: $198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:52,552 - find_def var='n' stmt=$198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:52,552 - replaced with: $198binary_subscr.31 = getitem(value=peaks, index=n.7, fn=<built-in function getitem>)
2024-09-04 18:31:52,552 - on stmt: bool200 = global(bool: <class 'bool'>)
2024-09-04 18:31:52,552 - on stmt: $200pred = call bool200($198binary_subscr.31, func=bool200, args=(Var($198binary_subscr.31, utils.py:1235),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,552 - on stmt: branch $200pred, 212, 202
2024-09-04 18:31:52,552 - ==== SSA block rewrite pass on 202
2024-09-04 18:31:52,552 - Running <numba.core.ssa._FixSSAVars object at 0x000002431B51C2B0>
2024-09-04 18:31:52,552 - on stmt: $const204.1 = const(int, 1)
2024-09-04 18:31:52,552 - on stmt: $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:52,552 - find_def var='n' stmt=$206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:52,552 - find_def_from_top label 202
2024-09-04 18:31:52,552 - idom 134 from label 202
2024-09-04 18:31:52,552 - find_def_from_bottom label 134
2024-09-04 18:31:52,552 - replaced with: $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.7, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:52,552 - on stmt: n.2 = $206inplace_add.2
2024-09-04 18:31:52,552 - on stmt: jump 333
2024-09-04 18:31:52,552 - ==== SSA block rewrite pass on 212
2024-09-04 18:31:52,552 - Running <numba.core.ssa._FixSSAVars object at 0x000002431B51C2B0>
2024-09-04 18:31:52,552 - on stmt: $212load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:52,552 - on stmt: $214load_method.1 = getattr(value=$212load_global.0, attr=mean)
2024-09-04 18:31:52,552 - on stmt: $218load_global.3 = global(max: <built-in function max>)
2024-09-04 18:31:52,552 - on stmt: $const220.4 = const(int, 0)
2024-09-04 18:31:52,552 - on stmt: $226binary_subtract.7 = n - pre_avg
2024-09-04 18:31:52,552 - find_def var='n' stmt=$226binary_subtract.7 = n - pre_avg
2024-09-04 18:31:52,552 - find_def_from_top label 212
2024-09-04 18:31:52,552 - idom 134 from label 212
2024-09-04 18:31:52,552 - find_def_from_bottom label 134
2024-09-04 18:31:52,552 - replaced with: $226binary_subtract.7 = n.7 - pre_avg
2024-09-04 18:31:52,552 - on stmt: $228call_function.8 = call $218load_global.3($const220.4, $226binary_subtract.7, func=$218load_global.3, args=[Var($const220.4, utils.py:1239), Var($226binary_subtract.7, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,552 - on stmt: $230load_global.9 = global(min: <built-in function min>)
2024-09-04 18:31:52,552 - on stmt: $236binary_add.12 = n + post_avg
2024-09-04 18:31:52,552 - find_def var='n' stmt=$236binary_add.12 = n + post_avg
2024-09-04 18:31:52,552 - find_def_from_top label 212
2024-09-04 18:31:52,552 - idom 134 from label 212
2024-09-04 18:31:52,552 - find_def_from_bottom label 134
2024-09-04 18:31:52,552 - replaced with: $236binary_add.12 = n.7 + post_avg
2024-09-04 18:31:52,552 - on stmt: $240load_attr.14 = getattr(value=x, attr=shape)
2024-09-04 18:31:52,552 - on stmt: $const242.15 = const(int, 0)
2024-09-04 18:31:52,552 - on stmt: $244binary_subscr.16 = static_getitem(value=$240load_attr.14, index=0, index_var=$const242.15, fn=<built-in function getitem>)
2024-09-04 18:31:52,552 - on stmt: $246call_function.17 = call $230load_global.9($236binary_add.12, $244binary_subscr.16, func=$230load_global.9, args=[Var($236binary_add.12, utils.py:1239), Var($244binary_subscr.16, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,552 - on stmt: $248build_slice.18 = global(slice: <class 'slice'>)
2024-09-04 18:31:52,552 - on stmt: $248build_slice.19 = call $248build_slice.18($228call_function.8, $246call_function.17, func=$248build_slice.18, args=(Var($228call_function.8, utils.py:1239), Var($246call_function.17, utils.py:1239)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,552 - on stmt: $250binary_subscr.20 = getitem(value=x, index=$248build_slice.19, fn=<built-in function getitem>)
2024-09-04 18:31:52,552 - on stmt: avgn = call $214load_method.1($250binary_subscr.20, func=$214load_method.1, args=[Var($250binary_subscr.20, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,552 - on stmt: $262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:52,552 - find_def var='n' stmt=$262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:52,552 - find_def_from_top label 212
2024-09-04 18:31:52,552 - idom 134 from label 212
2024-09-04 18:31:52,552 - find_def_from_bottom label 134
2024-09-04 18:31:52,552 - replaced with: $262binary_subscr.26 = getitem(value=peaks, index=n.7, fn=<built-in function getitem>)
2024-09-04 18:31:52,552 - on stmt: $268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:52,552 - find_def var='n' stmt=$268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:52,552 - find_def_from_top label 212
2024-09-04 18:31:52,552 - idom 134 from label 212
2024-09-04 18:31:52,552 - find_def_from_bottom label 134
2024-09-04 18:31:52,552 - replaced with: $268binary_subscr.29 = getitem(value=x, index=n.7, fn=<built-in function getitem>)
2024-09-04 18:31:52,552 - on stmt: $274binary_add.32 = avgn + delta
2024-09-04 18:31:52,552 - on stmt: $276compare_op.33 = $268binary_subscr.29 >= $274binary_add.32
2024-09-04 18:31:52,552 - on stmt: $278inplace_and.34 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$262binary_subscr.26, rhs=$276compare_op.33, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:52,552 - on stmt: peaks[n] = $278inplace_and.34
2024-09-04 18:31:52,552 - find_def var='n' stmt=peaks[n] = $278inplace_and.34
2024-09-04 18:31:52,552 - find_def_from_top label 212
2024-09-04 18:31:52,552 - idom 134 from label 212
2024-09-04 18:31:52,552 - find_def_from_bottom label 134
2024-09-04 18:31:52,552 - replaced with: peaks[n.7] = $278inplace_and.34
2024-09-04 18:31:52,552 - on stmt: $288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:52,552 - find_def var='n' stmt=$288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2024-09-04 18:31:52,552 - find_def_from_top label 212
2024-09-04 18:31:52,552 - idom 134 from label 212
2024-09-04 18:31:52,552 - find_def_from_bottom label 134
2024-09-04 18:31:52,552 - replaced with: $288binary_subscr.37 = getitem(value=peaks, index=n.7, fn=<built-in function getitem>)
2024-09-04 18:31:52,552 - on stmt: bool290 = global(bool: <class 'bool'>)
2024-09-04 18:31:52,552 - on stmt: $290pred = call bool290($288binary_subscr.37, func=bool290, args=(Var($288binary_subscr.37, utils.py:1242),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,552 - on stmt: branch $290pred, 302, 292
2024-09-04 18:31:52,552 - ==== SSA block rewrite pass on 292
2024-09-04 18:31:52,552 - Running <numba.core.ssa._FixSSAVars object at 0x000002431B51C2B0>
2024-09-04 18:31:52,552 - on stmt: $const294.1 = const(int, 1)
2024-09-04 18:31:52,552 - on stmt: $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:52,552 - find_def var='n' stmt=$296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:52,552 - find_def_from_top label 292
2024-09-04 18:31:52,552 - idom 212 from label 292
2024-09-04 18:31:52,552 - find_def_from_bottom label 212
2024-09-04 18:31:52,552 - find_def_from_top label 212
2024-09-04 18:31:52,552 - idom 134 from label 212
2024-09-04 18:31:52,552 - find_def_from_bottom label 134
2024-09-04 18:31:52,561 - replaced with: $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.7, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:52,561 - on stmt: n.3 = $296inplace_add.2
2024-09-04 18:31:52,561 - on stmt: jump 333
2024-09-04 18:31:52,561 - ==== SSA block rewrite pass on 302
2024-09-04 18:31:52,561 - Running <numba.core.ssa._FixSSAVars object at 0x000002431B51C2B0>
2024-09-04 18:31:52,561 - on stmt: $const306.2 = const(int, 1)
2024-09-04 18:31:52,561 - on stmt: $308binary_add.3 = wait + $const306.2
2024-09-04 18:31:52,561 - on stmt: $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:52,561 - find_def var='n' stmt=$310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:52,561 - find_def_from_top label 302
2024-09-04 18:31:52,561 - idom 212 from label 302
2024-09-04 18:31:52,561 - find_def_from_bottom label 212
2024-09-04 18:31:52,561 - find_def_from_top label 212
2024-09-04 18:31:52,562 - idom 134 from label 212
2024-09-04 18:31:52,562 - find_def_from_bottom label 134
2024-09-04 18:31:52,562 - replaced with: $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.7, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:52,562 - on stmt: n.4 = $310inplace_add.4
2024-09-04 18:31:52,562 - on stmt: $318load_attr.7 = getattr(value=x, attr=shape)
2024-09-04 18:31:52,562 - on stmt: $const320.8 = const(int, 0)
2024-09-04 18:31:52,562 - on stmt: $322binary_subscr.9 = static_getitem(value=$318load_attr.7, index=0, index_var=$const320.8, fn=<built-in function getitem>)
2024-09-04 18:31:52,562 - on stmt: $324compare_op.10 = n < $322binary_subscr.9
2024-09-04 18:31:52,562 - find_def var='n' stmt=$324compare_op.10 = n < $322binary_subscr.9
2024-09-04 18:31:52,562 - replaced with: $324compare_op.10 = n.4 < $322binary_subscr.9
2024-09-04 18:31:52,562 - on stmt: bool326 = global(bool: <class 'bool'>)
2024-09-04 18:31:52,563 - on stmt: $326pred = call bool326($324compare_op.10, func=bool326, args=(Var($324compare_op.10, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,563 - on stmt: branch $326pred, 134, 328
2024-09-04 18:31:52,563 - ==== SSA block rewrite pass on 328
2024-09-04 18:31:52,563 - Running <numba.core.ssa._FixSSAVars object at 0x000002431B51C2B0>
2024-09-04 18:31:52,563 - on stmt: $const328.0 = const(NoneType, None)
2024-09-04 18:31:52,563 - on stmt: $330return_value.1 = cast(value=$const328.0)
2024-09-04 18:31:52,563 - on stmt: return $330return_value.1
2024-09-04 18:31:52,563 - ==== SSA block rewrite pass on 332
2024-09-04 18:31:52,563 - Running <numba.core.ssa._FixSSAVars object at 0x000002431B51C2B0>
2024-09-04 18:31:52,563 - on stmt: $const332.0 = const(NoneType, None)
2024-09-04 18:31:52,563 - on stmt: $334return_value.1 = cast(value=$const332.0)
2024-09-04 18:31:52,563 - on stmt: return $334return_value.1
2024-09-04 18:31:52,564 - ==== SSA block rewrite pass on 333
2024-09-04 18:31:52,564 - Running <numba.core.ssa._FixSSAVars object at 0x000002431B51C2B0>
2024-09-04 18:31:52,564 - on stmt: jump 120
2024-09-04 18:31:52,584 - bytecode dump:
>          0	NOP(arg=None, lineno=570)
           2	LOAD_FAST(arg=0, lineno=571)
           4	LOAD_ATTR(arg=0, lineno=571)
           6	LOAD_CONST(arg=1, lineno=571)
           8	COMPARE_OP(arg=2, lineno=571)
          10	POP_JUMP_IF_FALSE(arg=11, lineno=571)
          12	LOAD_GLOBAL(arg=1, lineno=572)
          14	LOAD_CONST(arg=2, lineno=572)
          16	CALL_FUNCTION(arg=1, lineno=572)
          18	RAISE_VARARGS(arg=1, lineno=572)
>         20	LOAD_GLOBAL(arg=2, lineno=575)
          22	LOAD_METHOD(arg=3, lineno=575)
          24	LOAD_FAST(arg=0, lineno=575)
          26	CALL_METHOD(arg=1, lineno=575)
          28	STORE_FAST(arg=1, lineno=575)
          30	LOAD_GLOBAL(arg=4, lineno=576)
          32	LOAD_FAST(arg=1, lineno=576)
          34	CALL_FUNCTION(arg=1, lineno=576)
          36	LOAD_METHOD(arg=5, lineno=576)
          38	LOAD_CONST(arg=1, lineno=576)
          40	CALL_METHOD(arg=1, lineno=576)
          42	STORE_FAST(arg=2, lineno=576)
          44	LOAD_DEREF(arg=1, lineno=577)
          46	LOAD_FAST(arg=2, lineno=577)
          48	CALL_FUNCTION(arg=1, lineno=577)
          50	POP_JUMP_IF_FALSE(arg=29, lineno=577)
          52	LOAD_FAST(arg=2, lineno=578)
          54	RETURN_VALUE(arg=None, lineno=578)
>         56	LOAD_FAST(arg=1, lineno=580)
          58	GET_ITER(arg=None, lineno=580)
>         60	FOR_ITER(arg=21, lineno=580)
          62	STORE_FAST(arg=3, lineno=580)
          64	LOAD_FAST(arg=3, lineno=581)
          66	LOAD_METHOD(arg=6, lineno=581)
          68	CALL_METHOD(arg=0, lineno=581)
          70	STORE_FAST(arg=4, lineno=581)
          72	LOAD_DEREF(arg=1, lineno=582)
          74	LOAD_FAST(arg=4, lineno=582)
          76	CALL_FUNCTION(arg=1, lineno=582)
          78	POP_JUMP_IF_FALSE(arg=45, lineno=582)
          80	LOAD_FAST(arg=4, lineno=583)
          82	ROT_TWO(arg=None, lineno=583)
          84	POP_TOP(arg=None, lineno=583)
          86	RETURN_VALUE(arg=None, lineno=583)
>         88	LOAD_DEREF(arg=0, lineno=584)
          90	LOAD_FAST(arg=4, lineno=584)
          92	LOAD_FAST(arg=2, lineno=584)
          94	CALL_FUNCTION(arg=2, lineno=584)
          96	POP_JUMP_IF_FALSE(arg=52, lineno=584)
          98	LOAD_FAST(arg=4, lineno=585)
         100	STORE_FAST(arg=2, lineno=585)
>        102	JUMP_ABSOLUTE(arg=31, lineno=585)
>        104	LOAD_FAST(arg=2, lineno=586)
         106	RETURN_VALUE(arg=None, lineno=586)
2024-09-04 18:31:52,584 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:52,585 - stack: []
2024-09-04 18:31:52,585 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:52,585 - dispatch pc=0, inst=NOP(arg=None, lineno=570)
2024-09-04 18:31:52,585 - stack []
2024-09-04 18:31:52,585 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=571)
2024-09-04 18:31:52,585 - stack []
2024-09-04 18:31:52,585 - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=571)
2024-09-04 18:31:52,585 - stack ['$a2.0']
2024-09-04 18:31:52,585 - dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=571)
2024-09-04 18:31:52,585 - stack ['$4load_attr.1']
2024-09-04 18:31:52,585 - dispatch pc=8, inst=COMPARE_OP(arg=2, lineno=571)
2024-09-04 18:31:52,585 - stack ['$4load_attr.1', '$const6.2']
2024-09-04 18:31:52,586 - dispatch pc=10, inst=POP_JUMP_IF_FALSE(arg=11, lineno=571)
2024-09-04 18:31:52,586 - stack ['$8compare_op.3']
2024-09-04 18:31:52,586 - end state. edges=[Edge(pc=12, stack=(), blockstack=(), npush=0), Edge(pc=20, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:52,586 - pending: deque([State(pc_initial=12 nstack_initial=0), State(pc_initial=20 nstack_initial=0)])
2024-09-04 18:31:52,586 - stack: []
2024-09-04 18:31:52,586 - state.pc_initial: State(pc_initial=12 nstack_initial=0)
2024-09-04 18:31:52,586 - dispatch pc=12, inst=LOAD_GLOBAL(arg=1, lineno=572)
2024-09-04 18:31:52,586 - stack []
2024-09-04 18:31:52,586 - dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=572)
2024-09-04 18:31:52,586 - stack ['$12load_global.0']
2024-09-04 18:31:52,586 - dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=572)
2024-09-04 18:31:52,586 - stack ['$12load_global.0', '$const14.1']
2024-09-04 18:31:52,587 - dispatch pc=18, inst=RAISE_VARARGS(arg=1, lineno=572)
2024-09-04 18:31:52,587 - stack ['$16call_function.2']
2024-09-04 18:31:52,587 - end state. edges=[]
2024-09-04 18:31:52,587 - pending: deque([State(pc_initial=20 nstack_initial=0)])
2024-09-04 18:31:52,587 - stack: []
2024-09-04 18:31:52,587 - state.pc_initial: State(pc_initial=20 nstack_initial=0)
2024-09-04 18:31:52,587 - dispatch pc=20, inst=LOAD_GLOBAL(arg=2, lineno=575)
2024-09-04 18:31:52,587 - stack []
2024-09-04 18:31:52,587 - dispatch pc=22, inst=LOAD_METHOD(arg=3, lineno=575)
2024-09-04 18:31:52,587 - stack ['$20load_global.0']
2024-09-04 18:31:52,587 - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=575)
2024-09-04 18:31:52,587 - stack ['$22load_method.1']
2024-09-04 18:31:52,588 - dispatch pc=26, inst=CALL_METHOD(arg=1, lineno=575)
2024-09-04 18:31:52,588 - stack ['$22load_method.1', '$a24.2']
2024-09-04 18:31:52,588 - dispatch pc=28, inst=STORE_FAST(arg=1, lineno=575)
2024-09-04 18:31:52,588 - stack ['$26call_method.3']
2024-09-04 18:31:52,588 - dispatch pc=30, inst=LOAD_GLOBAL(arg=4, lineno=576)
2024-09-04 18:31:52,588 - stack []
2024-09-04 18:31:52,588 - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=576)
2024-09-04 18:31:52,588 - stack ['$30load_global.4']
2024-09-04 18:31:52,588 - dispatch pc=34, inst=CALL_FUNCTION(arg=1, lineno=576)
2024-09-04 18:31:52,588 - stack ['$30load_global.4', '$it32.5']
2024-09-04 18:31:52,588 - dispatch pc=36, inst=LOAD_METHOD(arg=5, lineno=576)
2024-09-04 18:31:52,588 - stack ['$34call_function.6']
2024-09-04 18:31:52,589 - dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=576)
2024-09-04 18:31:52,589 - stack ['$36load_method.7']
2024-09-04 18:31:52,589 - dispatch pc=40, inst=CALL_METHOD(arg=1, lineno=576)
2024-09-04 18:31:52,589 - stack ['$36load_method.7', '$const38.8']
2024-09-04 18:31:52,589 - dispatch pc=42, inst=STORE_FAST(arg=2, lineno=576)
2024-09-04 18:31:52,589 - stack ['$40call_method.9']
2024-09-04 18:31:52,589 - dispatch pc=44, inst=LOAD_DEREF(arg=1, lineno=577)
2024-09-04 18:31:52,589 - stack []
2024-09-04 18:31:52,589 - dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=577)
2024-09-04 18:31:52,589 - stack ['$44load_deref.10']
2024-09-04 18:31:52,589 - dispatch pc=48, inst=CALL_FUNCTION(arg=1, lineno=577)
2024-09-04 18:31:52,589 - stack ['$44load_deref.10', '$max_value46.11']
2024-09-04 18:31:52,590 - dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=29, lineno=577)
2024-09-04 18:31:52,590 - stack ['$48call_function.12']
2024-09-04 18:31:52,590 - end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=56, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:52,590 - pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=56 nstack_initial=0)])
2024-09-04 18:31:52,590 - stack: []
2024-09-04 18:31:52,590 - state.pc_initial: State(pc_initial=52 nstack_initial=0)
2024-09-04 18:31:52,590 - dispatch pc=52, inst=LOAD_FAST(arg=2, lineno=578)
2024-09-04 18:31:52,590 - stack []
2024-09-04 18:31:52,590 - dispatch pc=54, inst=RETURN_VALUE(arg=None, lineno=578)
2024-09-04 18:31:52,590 - stack ['$max_value52.0']
2024-09-04 18:31:52,590 - end state. edges=[]
2024-09-04 18:31:52,590 - pending: deque([State(pc_initial=56 nstack_initial=0)])
2024-09-04 18:31:52,590 - stack: []
2024-09-04 18:31:52,591 - state.pc_initial: State(pc_initial=56 nstack_initial=0)
2024-09-04 18:31:52,591 - dispatch pc=56, inst=LOAD_FAST(arg=1, lineno=580)
2024-09-04 18:31:52,591 - stack []
2024-09-04 18:31:52,591 - dispatch pc=58, inst=GET_ITER(arg=None, lineno=580)
2024-09-04 18:31:52,591 - stack ['$it56.0']
2024-09-04 18:31:52,591 - end state. edges=[Edge(pc=60, stack=('$58get_iter.1',), blockstack=(), npush=0)]
2024-09-04 18:31:52,591 - pending: deque([State(pc_initial=60 nstack_initial=1)])
2024-09-04 18:31:52,591 - stack: ['$phi60.0']
2024-09-04 18:31:52,591 - state.pc_initial: State(pc_initial=60 nstack_initial=1)
2024-09-04 18:31:52,591 - dispatch pc=60, inst=FOR_ITER(arg=21, lineno=580)
2024-09-04 18:31:52,591 - stack ['$phi60.0']
2024-09-04 18:31:52,591 - end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=('$phi60.0', '$60for_iter.2'), blockstack=(), npush=0)]
2024-09-04 18:31:52,592 - pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=62 nstack_initial=2)])
2024-09-04 18:31:52,592 - stack: []
2024-09-04 18:31:52,592 - state.pc_initial: State(pc_initial=104 nstack_initial=0)
2024-09-04 18:31:52,592 - dispatch pc=104, inst=LOAD_FAST(arg=2, lineno=586)
2024-09-04 18:31:52,592 - stack []
2024-09-04 18:31:52,592 - dispatch pc=106, inst=RETURN_VALUE(arg=None, lineno=586)
2024-09-04 18:31:52,592 - stack ['$max_value104.0']
2024-09-04 18:31:52,592 - end state. edges=[]
2024-09-04 18:31:52,592 - pending: deque([State(pc_initial=62 nstack_initial=2)])
2024-09-04 18:31:52,592 - stack: ['$phi62.0', '$phi62.1']
2024-09-04 18:31:52,592 - state.pc_initial: State(pc_initial=62 nstack_initial=2)
2024-09-04 18:31:52,592 - dispatch pc=62, inst=STORE_FAST(arg=3, lineno=580)
2024-09-04 18:31:52,592 - stack ['$phi62.0', '$phi62.1']
2024-09-04 18:31:52,593 - dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=581)
2024-09-04 18:31:52,593 - stack ['$phi62.0']
2024-09-04 18:31:52,593 - dispatch pc=66, inst=LOAD_METHOD(arg=6, lineno=581)
2024-09-04 18:31:52,593 - stack ['$phi62.0', '$view64.2']
2024-09-04 18:31:52,593 - dispatch pc=68, inst=CALL_METHOD(arg=0, lineno=581)
2024-09-04 18:31:52,593 - stack ['$phi62.0', '$66load_method.3']
2024-09-04 18:31:52,593 - dispatch pc=70, inst=STORE_FAST(arg=4, lineno=581)
2024-09-04 18:31:52,593 - stack ['$phi62.0', '$68call_method.4']
2024-09-04 18:31:52,593 - dispatch pc=72, inst=LOAD_DEREF(arg=1, lineno=582)
2024-09-04 18:31:52,593 - stack ['$phi62.0']
2024-09-04 18:31:52,593 - dispatch pc=74, inst=LOAD_FAST(arg=4, lineno=582)
2024-09-04 18:31:52,593 - stack ['$phi62.0', '$72load_deref.5']
2024-09-04 18:31:52,594 - dispatch pc=76, inst=CALL_FUNCTION(arg=1, lineno=582)
2024-09-04 18:31:52,594 - stack ['$phi62.0', '$72load_deref.5', '$v74.6']
2024-09-04 18:31:52,594 - dispatch pc=78, inst=POP_JUMP_IF_FALSE(arg=45, lineno=582)
2024-09-04 18:31:52,594 - stack ['$phi62.0', '$76call_function.7']
2024-09-04 18:31:52,594 - end state. edges=[Edge(pc=80, stack=('$phi62.0',), blockstack=(), npush=0), Edge(pc=88, stack=('$phi62.0',), blockstack=(), npush=0)]
2024-09-04 18:31:52,594 - pending: deque([State(pc_initial=80 nstack_initial=1), State(pc_initial=88 nstack_initial=1)])
2024-09-04 18:31:52,594 - stack: ['$phi80.0']
2024-09-04 18:31:52,594 - state.pc_initial: State(pc_initial=80 nstack_initial=1)
2024-09-04 18:31:52,594 - dispatch pc=80, inst=LOAD_FAST(arg=4, lineno=583)
2024-09-04 18:31:52,594 - stack ['$phi80.0']
2024-09-04 18:31:52,594 - dispatch pc=82, inst=ROT_TWO(arg=None, lineno=583)
2024-09-04 18:31:52,594 - stack ['$phi80.0', '$v80.1']
2024-09-04 18:31:52,595 - dispatch pc=84, inst=POP_TOP(arg=None, lineno=583)
2024-09-04 18:31:52,595 - stack ['$v80.1', '$phi80.0']
2024-09-04 18:31:52,595 - dispatch pc=86, inst=RETURN_VALUE(arg=None, lineno=583)
2024-09-04 18:31:52,595 - stack ['$v80.1']
2024-09-04 18:31:52,595 - end state. edges=[]
2024-09-04 18:31:52,595 - pending: deque([State(pc_initial=88 nstack_initial=1)])
2024-09-04 18:31:52,595 - stack: ['$phi88.0']
2024-09-04 18:31:52,595 - state.pc_initial: State(pc_initial=88 nstack_initial=1)
2024-09-04 18:31:52,595 - dispatch pc=88, inst=LOAD_DEREF(arg=0, lineno=584)
2024-09-04 18:31:52,595 - stack ['$phi88.0']
2024-09-04 18:31:52,595 - dispatch pc=90, inst=LOAD_FAST(arg=4, lineno=584)
2024-09-04 18:31:52,595 - stack ['$phi88.0', '$88load_deref.1']
2024-09-04 18:31:52,595 - dispatch pc=92, inst=LOAD_FAST(arg=2, lineno=584)
2024-09-04 18:31:52,596 - stack ['$phi88.0', '$88load_deref.1', '$v90.2']
2024-09-04 18:31:52,596 - dispatch pc=94, inst=CALL_FUNCTION(arg=2, lineno=584)
2024-09-04 18:31:52,596 - stack ['$phi88.0', '$88load_deref.1', '$v90.2', '$max_value92.3']
2024-09-04 18:31:52,596 - dispatch pc=96, inst=POP_JUMP_IF_FALSE(arg=52, lineno=584)
2024-09-04 18:31:52,596 - stack ['$phi88.0', '$94call_function.4']
2024-09-04 18:31:52,596 - end state. edges=[Edge(pc=98, stack=('$phi88.0',), blockstack=(), npush=0), Edge(pc=102, stack=('$phi88.0',), blockstack=(), npush=0)]
2024-09-04 18:31:52,596 - pending: deque([State(pc_initial=98 nstack_initial=1), State(pc_initial=102 nstack_initial=1)])
2024-09-04 18:31:52,596 - stack: ['$phi98.0']
2024-09-04 18:31:52,596 - state.pc_initial: State(pc_initial=98 nstack_initial=1)
2024-09-04 18:31:52,596 - dispatch pc=98, inst=LOAD_FAST(arg=4, lineno=585)
2024-09-04 18:31:52,596 - stack ['$phi98.0']
2024-09-04 18:31:52,596 - dispatch pc=100, inst=STORE_FAST(arg=2, lineno=585)
2024-09-04 18:31:52,597 - stack ['$phi98.0', '$v98.1']
2024-09-04 18:31:52,597 - end state. edges=[Edge(pc=102, stack=('$phi98.0',), blockstack=(), npush=0)]
2024-09-04 18:31:52,597 - pending: deque([State(pc_initial=102 nstack_initial=1), State(pc_initial=102 nstack_initial=1)])
2024-09-04 18:31:52,597 - stack: ['$phi102.0']
2024-09-04 18:31:52,597 - state.pc_initial: State(pc_initial=102 nstack_initial=1)
2024-09-04 18:31:52,597 - dispatch pc=102, inst=JUMP_ABSOLUTE(arg=31, lineno=585)
2024-09-04 18:31:52,597 - stack ['$phi102.0']
2024-09-04 18:31:52,597 - end state. edges=[Edge(pc=60, stack=('$phi102.0',), blockstack=(), npush=0)]
2024-09-04 18:31:52,597 - pending: deque([State(pc_initial=102 nstack_initial=1), State(pc_initial=60 nstack_initial=1)])
2024-09-04 18:31:52,597 - pending: deque([State(pc_initial=60 nstack_initial=1)])
2024-09-04 18:31:52,597 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:52,597 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=56 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=1): {'$phi60.0'},
             State(pc_initial=62 nstack_initial=2): {'$phi62.1'},
             State(pc_initial=80 nstack_initial=1): set(),
             State(pc_initial=88 nstack_initial=1): set(),
             State(pc_initial=98 nstack_initial=1): set(),
             State(pc_initial=102 nstack_initial=1): set(),
             State(pc_initial=104 nstack_initial=0): set()})
2024-09-04 18:31:52,598 - defmap: {'$phi60.0': State(pc_initial=56 nstack_initial=0),
 '$phi62.1': State(pc_initial=60 nstack_initial=1)}
2024-09-04 18:31:52,598 - phismap: defaultdict(<class 'set'>,
            {'$phi102.0': {('$phi88.0', State(pc_initial=88 nstack_initial=1)),
                           ('$phi98.0', State(pc_initial=98 nstack_initial=1))},
             '$phi60.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0)),
                          ('$phi102.0',
                           State(pc_initial=102 nstack_initial=1))},
             '$phi62.0': {('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi80.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi88.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi98.0': {('$phi88.0', State(pc_initial=88 nstack_initial=1))}})
2024-09-04 18:31:52,598 - changing phismap: defaultdict(<class 'set'>,
            {'$phi102.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi60.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi80.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi88.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi98.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))}})
2024-09-04 18:31:52,599 - changing phismap: defaultdict(<class 'set'>,
            {'$phi102.0': {('$58get_iter.1',
                            State(pc_initial=56 nstack_initial=0))},
             '$phi60.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi80.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi88.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi98.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))}})
2024-09-04 18:31:52,599 - changing phismap: defaultdict(<class 'set'>,
            {'$phi102.0': {('$58get_iter.1',
                            State(pc_initial=56 nstack_initial=0))},
             '$phi60.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi80.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi88.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi98.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))}})
2024-09-04 18:31:52,599 - keep phismap: {'$phi60.0': {('$58get_iter.1', State(pc_initial=56 nstack_initial=0))},
 '$phi62.1': {('$60for_iter.2', State(pc_initial=60 nstack_initial=1))}}
2024-09-04 18:31:52,600 - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=56 nstack_initial=0): {'$phi60.0': '$58get_iter.1'},
             State(pc_initial=60 nstack_initial=1): {'$phi62.1': '$60for_iter.2'}})
2024-09-04 18:31:52,600 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:52,600 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'item': '$a2.0', 'res': '$4load_attr.1'}), (6, {'res': '$const6.2'}), (8, {'lhs': '$4load_attr.1', 'rhs': '$const6.2', 'res': '$8compare_op.3'}), (10, {'pred': '$8compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: (), 20: ()})
2024-09-04 18:31:52,600 - block_infos State(pc_initial=12 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$const14.1'}), (16, {'func': '$12load_global.0', 'args': ['$const14.1'], 'res': '$16call_function.2'}), (18, {'exc': '$16call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:52,600 - block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$20load_global.0'}), (22, {'item': '$20load_global.0', 'res': '$22load_method.1'}), (24, {'res': '$a24.2'}), (26, {'func': '$22load_method.1', 'args': ['$a24.2'], 'res': '$26call_method.3'}), (28, {'value': '$26call_method.3'}), (30, {'res': '$30load_global.4'}), (32, {'res': '$it32.5'}), (34, {'func': '$30load_global.4', 'args': ['$it32.5'], 'res': '$34call_function.6'}), (36, {'item': '$34call_function.6', 'res': '$36load_method.7'}), (38, {'res': '$const38.8'}), (40, {'func': '$36load_method.7', 'args': ['$const38.8'], 'res': '$40call_method.9'}), (42, {'value': '$40call_method.9'}), (44, {'res': '$44load_deref.10'}), (46, {'res': '$max_value46.11'}), (48, {'func': '$44load_deref.10', 'args': ['$max_value46.11'], 'res': '$48call_function.12'}), (50, {'pred': '$48call_function.12'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 56: ()})
2024-09-04 18:31:52,600 - block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$max_value52.0'}), (54, {'retval': '$max_value52.0', 'castval': '$54return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:52,600 - block_infos State(pc_initial=56 nstack_initial=0):
AdaptBlockInfo(insts=((56, {'res': '$it56.0'}), (58, {'value': '$it56.0', 'res': '$58get_iter.1'})), outgoing_phis={'$phi60.0': '$58get_iter.1'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$58get_iter.1',)})
2024-09-04 18:31:52,600 - block_infos State(pc_initial=60 nstack_initial=1):
AdaptBlockInfo(insts=((60, {'iterator': '$phi60.0', 'pair': '$60for_iter.1', 'indval': '$60for_iter.2', 'pred': '$60for_iter.3'}),), outgoing_phis={'$phi62.1': '$60for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 62: ('$phi60.0', '$60for_iter.2')})
2024-09-04 18:31:52,601 - block_infos State(pc_initial=62 nstack_initial=2):
AdaptBlockInfo(insts=((62, {'value': '$phi62.1'}), (64, {'res': '$view64.2'}), (66, {'item': '$view64.2', 'res': '$66load_method.3'}), (68, {'func': '$66load_method.3', 'args': [], 'res': '$68call_method.4'}), (70, {'value': '$68call_method.4'}), (72, {'res': '$72load_deref.5'}), (74, {'res': '$v74.6'}), (76, {'func': '$72load_deref.5', 'args': ['$v74.6'], 'res': '$76call_function.7'}), (78, {'pred': '$76call_function.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi62.0',), 88: ('$phi62.0',)})
2024-09-04 18:31:52,601 - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'res': '$v80.1'}), (86, {'retval': '$v80.1', 'castval': '$86return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:52,601 - block_infos State(pc_initial=88 nstack_initial=1):
AdaptBlockInfo(insts=((88, {'res': '$88load_deref.1'}), (90, {'res': '$v90.2'}), (92, {'res': '$max_value92.3'}), (94, {'func': '$88load_deref.1', 'args': ['$v90.2', '$max_value92.3'], 'res': '$94call_function.4'}), (96, {'pred': '$94call_function.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={98: ('$phi88.0',), 102: ('$phi88.0',)})
2024-09-04 18:31:52,601 - block_infos State(pc_initial=98 nstack_initial=1):
AdaptBlockInfo(insts=((98, {'res': '$v98.1'}), (100, {'value': '$v98.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={102: ('$phi98.0',)})
2024-09-04 18:31:52,601 - block_infos State(pc_initial=102 nstack_initial=1):
AdaptBlockInfo(insts=((102, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$phi102.0',)})
2024-09-04 18:31:52,601 - block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$max_value104.0'}), (106, {'retval': '$max_value104.0', 'castval': '$106return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:52,604 - label 0:
    a = arg(0, name=a)                       ['a']
    $4load_attr.1 = getattr(value=a, attr=size) ['$4load_attr.1', 'a']
    $const6.2 = const(int, 0)                ['$const6.2']
    $8compare_op.3 = $4load_attr.1 == $const6.2 ['$4load_attr.1', '$8compare_op.3', '$const6.2']
    bool10 = global(bool: <class 'bool'>)    ['bool10']
    $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:571),), kws=(), vararg=None, varkwarg=None, target=None) ['$10pred', '$8compare_op.3', 'bool10']
    branch $10pred, 12, 20                   ['$10pred']
label 12:
    $12load_global.0 = global(ValueError: <class 'ValueError'>) ['$12load_global.0']
    $const14.1 = const(str, zero-size array to reduction operation maximum which has no identity) ['$const14.1']
    $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:572)], kws=(), vararg=None, varkwarg=None, target=None) ['$12load_global.0', '$16call_function.2', '$const14.1']
    raise $16call_function.2                 ['$16call_function.2']
label 20:
    $20load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$20load_global.0']
    $22load_method.1 = getattr(value=$20load_global.0, attr=nditer) ['$20load_global.0', '$22load_method.1']
    it = call $22load_method.1(a, func=$22load_method.1, args=[Var(a, arraymath.py:570)], kws=(), vararg=None, varkwarg=None, target=None) ['$22load_method.1', 'a', 'it']
    $30load_global.4 = global(next: <built-in function next>) ['$30load_global.4']
    $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.4', '$34call_function.6', 'it']
    $36load_method.7 = getattr(value=$34call_function.6, attr=take) ['$34call_function.6', '$36load_method.7']
    $const38.8 = const(int, 0)               ['$const38.8']
    max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None) ['$36load_method.7', '$const38.8', 'max_value']
    $44load_deref.10 = freevar(pre_return_func: <function return_false at 0x0000024317C80940>) ['$44load_deref.10']
    $48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None) ['$44load_deref.10', '$48call_function.12', 'max_value']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48call_function.12, func=bool50, args=(Var($48call_function.12, arraymath.py:577),), kws=(), vararg=None, varkwarg=None, target=None) ['$48call_function.12', '$50pred', 'bool50']
    branch $50pred, 52, 56                   ['$50pred']
label 52:
    $54return_value.1 = cast(value=max_value) ['$54return_value.1', 'max_value']
    return $54return_value.1                 ['$54return_value.1']
label 56:
    $58get_iter.1 = getiter(value=it)        ['$58get_iter.1', 'it']
    $phi60.0 = $58get_iter.1                 ['$58get_iter.1', '$phi60.0']
    jump 60                                  []
label 60:
    $60for_iter.1 = iternext(value=$phi60.0) ['$60for_iter.1', '$phi60.0']
    $60for_iter.2 = pair_first(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.2']
    $60for_iter.3 = pair_second(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.3']
    $phi62.1 = $60for_iter.2                 ['$60for_iter.2', '$phi62.1']
    branch $60for_iter.3, 62, 104            ['$60for_iter.3']
label 62:
    view = $phi62.1                          ['$phi62.1', 'view']
    $66load_method.3 = getattr(value=view, attr=item) ['$66load_method.3', 'view']
    v = call $66load_method.3(func=$66load_method.3, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_method.3', 'v']
    $72load_deref.5 = freevar(pre_return_func: <function return_false at 0x0000024317C80940>) ['$72load_deref.5']
    $76call_function.7 = call $72load_deref.5(v, func=$72load_deref.5, args=[Var(v, arraymath.py:581)], kws=(), vararg=None, varkwarg=None, target=None) ['$72load_deref.5', '$76call_function.7', 'v']
    bool78 = global(bool: <class 'bool'>)    ['bool78']
    $78pred = call bool78($76call_function.7, func=bool78, args=(Var($76call_function.7, arraymath.py:582),), kws=(), vararg=None, varkwarg=None, target=None) ['$76call_function.7', '$78pred', 'bool78']
    branch $78pred, 80, 88                   ['$78pred']
label 80:
    $86return_value.2 = cast(value=v)        ['$86return_value.2', 'v']
    return $86return_value.2                 ['$86return_value.2']
label 88:
    $88load_deref.1 = freevar(comparator: <function max_comparator at 0x0000024317C80430>) ['$88load_deref.1']
    $94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None) ['$88load_deref.1', '$94call_function.4', 'max_value', 'v']
    bool96 = global(bool: <class 'bool'>)    ['bool96']
    $96pred = call bool96($94call_function.4, func=bool96, args=(Var($94call_function.4, arraymath.py:584),), kws=(), vararg=None, varkwarg=None, target=None) ['$94call_function.4', '$96pred', 'bool96']
    branch $96pred, 98, 102                  ['$96pred']
label 98:
    max_value = v                            ['max_value', 'v']
    jump 102                                 []
label 102:
    jump 60                                  []
label 104:
    $106return_value.1 = cast(value=max_value) ['$106return_value.1', 'max_value']
    return $106return_value.1                ['$106return_value.1']

2024-09-04 18:31:52,628 - ==== SSA block analysis pass on 0
2024-09-04 18:31:52,628 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243135EA890>
2024-09-04 18:31:52,628 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:52,628 - on stmt: $4load_attr.1 = getattr(value=a, attr=size)
2024-09-04 18:31:52,628 - on stmt: $const6.2 = const(int, 0)
2024-09-04 18:31:52,628 - on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2024-09-04 18:31:52,628 - on stmt: bool10 = global(bool: <class 'bool'>)
2024-09-04 18:31:52,629 - on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:571),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,629 - on stmt: branch $10pred, 12, 20
2024-09-04 18:31:52,629 - ==== SSA block analysis pass on 12
2024-09-04 18:31:52,629 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243135EA890>
2024-09-04 18:31:52,629 - on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:52,629 - on stmt: $const14.1 = const(str, zero-size array to reduction operation maximum which has no identity)
2024-09-04 18:31:52,629 - on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:572)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,629 - on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
2024-09-04 18:31:52,629 - ==== SSA block analysis pass on 20
2024-09-04 18:31:52,629 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243135EA890>
2024-09-04 18:31:52,629 - on stmt: $20load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:52,630 - on stmt: $22load_method.1 = getattr(value=$20load_global.0, attr=nditer)
2024-09-04 18:31:52,630 - on stmt: it = call $22load_method.1(a, func=$22load_method.1, args=[Var(a, arraymath.py:570)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,630 - on stmt: $30load_global.4 = global(next: <built-in function next>)
2024-09-04 18:31:52,630 - on stmt: $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,630 - on stmt: $36load_method.7 = getattr(value=$34call_function.6, attr=take)
2024-09-04 18:31:52,630 - on stmt: $const38.8 = const(int, 0)
2024-09-04 18:31:52,630 - on stmt: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,630 - on stmt: $44load_deref.10 = freevar(pre_return_func: <function return_false at 0x0000024317C80940>)
2024-09-04 18:31:52,630 - on stmt: $48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,630 - on stmt: bool50 = global(bool: <class 'bool'>)
2024-09-04 18:31:52,630 - on stmt: $50pred = call bool50($48call_function.12, func=bool50, args=(Var($48call_function.12, arraymath.py:577),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,631 - on stmt: branch $50pred, 52, 56
2024-09-04 18:31:52,631 - ==== SSA block analysis pass on 52
2024-09-04 18:31:52,631 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243135EA890>
2024-09-04 18:31:52,631 - on stmt: $54return_value.1 = cast(value=max_value)
2024-09-04 18:31:52,631 - on stmt: return $54return_value.1
2024-09-04 18:31:52,631 - ==== SSA block analysis pass on 56
2024-09-04 18:31:52,631 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243135EA890>
2024-09-04 18:31:52,631 - on stmt: $58get_iter.1 = getiter(value=it)
2024-09-04 18:31:52,631 - on stmt: $phi60.0 = $58get_iter.1
2024-09-04 18:31:52,631 - on stmt: jump 60
2024-09-04 18:31:52,631 - ==== SSA block analysis pass on 60
2024-09-04 18:31:52,631 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243135EA890>
2024-09-04 18:31:52,632 - on stmt: $60for_iter.1 = iternext(value=$phi60.0)
2024-09-04 18:31:52,632 - on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
2024-09-04 18:31:52,632 - on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
2024-09-04 18:31:52,632 - on stmt: $phi62.1 = $60for_iter.2
2024-09-04 18:31:52,632 - on stmt: branch $60for_iter.3, 62, 104
2024-09-04 18:31:52,632 - ==== SSA block analysis pass on 62
2024-09-04 18:31:52,632 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243135EA890>
2024-09-04 18:31:52,632 - on stmt: view = $phi62.1
2024-09-04 18:31:52,632 - on stmt: $66load_method.3 = getattr(value=view, attr=item)
2024-09-04 18:31:52,632 - on stmt: v = call $66load_method.3(func=$66load_method.3, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,632 - on stmt: $72load_deref.5 = freevar(pre_return_func: <function return_false at 0x0000024317C80940>)
2024-09-04 18:31:52,632 - on stmt: $76call_function.7 = call $72load_deref.5(v, func=$72load_deref.5, args=[Var(v, arraymath.py:581)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,633 - on stmt: bool78 = global(bool: <class 'bool'>)
2024-09-04 18:31:52,633 - on stmt: $78pred = call bool78($76call_function.7, func=bool78, args=(Var($76call_function.7, arraymath.py:582),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,633 - on stmt: branch $78pred, 80, 88
2024-09-04 18:31:52,633 - ==== SSA block analysis pass on 80
2024-09-04 18:31:52,633 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243135EA890>
2024-09-04 18:31:52,633 - on stmt: $86return_value.2 = cast(value=v)
2024-09-04 18:31:52,633 - on stmt: return $86return_value.2
2024-09-04 18:31:52,633 - ==== SSA block analysis pass on 88
2024-09-04 18:31:52,633 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243135EA890>
2024-09-04 18:31:52,633 - on stmt: $88load_deref.1 = freevar(comparator: <function max_comparator at 0x0000024317C80430>)
2024-09-04 18:31:52,633 - on stmt: $94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,634 - on stmt: bool96 = global(bool: <class 'bool'>)
2024-09-04 18:31:52,634 - on stmt: $96pred = call bool96($94call_function.4, func=bool96, args=(Var($94call_function.4, arraymath.py:584),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,634 - on stmt: branch $96pred, 98, 102
2024-09-04 18:31:52,634 - ==== SSA block analysis pass on 98
2024-09-04 18:31:52,634 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243135EA890>
2024-09-04 18:31:52,634 - on stmt: max_value = v
2024-09-04 18:31:52,634 - on stmt: jump 102
2024-09-04 18:31:52,634 - ==== SSA block analysis pass on 102
2024-09-04 18:31:52,634 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243135EA890>
2024-09-04 18:31:52,634 - on stmt: jump 60
2024-09-04 18:31:52,634 - ==== SSA block analysis pass on 104
2024-09-04 18:31:52,634 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243135EA890>
2024-09-04 18:31:52,635 - on stmt: $106return_value.1 = cast(value=max_value)
2024-09-04 18:31:52,635 - on stmt: return $106return_value.1
2024-09-04 18:31:52,637 - defs defaultdict(<class 'list'>,
            {'$106return_value.1': [(<numba.core.ir.Assign object at 0x0000024313723490>,
                                     104)],
             '$10pred': [(<numba.core.ir.Assign object at 0x0000024313746620>,
                          0)],
             '$12load_global.0': [(<numba.core.ir.Assign object at 0x0000024313746350>,
                                   12)],
             '$16call_function.2': [(<numba.core.ir.Assign object at 0x00000243137442B0>,
                                     12)],
             '$20load_global.0': [(<numba.core.ir.Assign object at 0x0000024313744940>,
                                   20)],
             '$22load_method.1': [(<numba.core.ir.Assign object at 0x0000024313744730>,
                                   20)],
             '$30load_global.4': [(<numba.core.ir.Assign object at 0x0000024316C499C0>,
                                   20)],
             '$34call_function.6': [(<numba.core.ir.Assign object at 0x0000024316C4A410>,
                                     20)],
             '$36load_method.7': [(<numba.core.ir.Assign object at 0x0000024316C48E20>,
                                   20)],
             '$44load_deref.10': [(<numba.core.ir.Assign object at 0x0000024316C49090>,
                                   20)],
             '$48call_function.12': [(<numba.core.ir.Assign object at 0x0000024316C48550>,
                                      20)],
             '$4load_attr.1': [(<numba.core.ir.Assign object at 0x0000024313746830>,
                                0)],
             '$50pred': [(<numba.core.ir.Assign object at 0x00000243137230A0>,
                          20)],
             '$54return_value.1': [(<numba.core.ir.Assign object at 0x00000243137214E0>,
                                    52)],
             '$58get_iter.1': [(<numba.core.ir.Assign object at 0x0000024313721750>,
                                56)],
             '$60for_iter.1': [(<numba.core.ir.Assign object at 0x0000024313723D60>,
                                60)],
             '$60for_iter.2': [(<numba.core.ir.Assign object at 0x00000243137230D0>,
                                60)],
             '$60for_iter.3': [(<numba.core.ir.Assign object at 0x0000024313723400>,
                                60)],
             '$66load_method.3': [(<numba.core.ir.Assign object at 0x00000243137205B0>,
                                   62)],
             '$72load_deref.5': [(<numba.core.ir.Assign object at 0x0000024313723EB0>,
                                  62)],
             '$76call_function.7': [(<numba.core.ir.Assign object at 0x00000243137221A0>,
                                     62)],
             '$78pred': [(<numba.core.ir.Assign object at 0x0000024313722200>,
                          62)],
             '$86return_value.2': [(<numba.core.ir.Assign object at 0x0000024313722440>,
                                    80)],
             '$88load_deref.1': [(<numba.core.ir.Assign object at 0x0000024313722D70>,
                                  88)],
             '$8compare_op.3': [(<numba.core.ir.Assign object at 0x0000024313745C30>,
                                 0)],
             '$94call_function.4': [(<numba.core.ir.Assign object at 0x0000024313722F20>,
                                     88)],
             '$96pred': [(<numba.core.ir.Assign object at 0x0000024313723A00>,
                          88)],
             '$const14.1': [(<numba.core.ir.Assign object at 0x0000024313746BC0>,
                             12)],
             '$const38.8': [(<numba.core.ir.Assign object at 0x0000024316C4AD70>,
                             20)],
             '$const6.2': [(<numba.core.ir.Assign object at 0x0000024313746950>,
                            0)],
             '$phi60.0': [(<numba.core.ir.Assign object at 0x00000243137234F0>,
                           56)],
             '$phi62.1': [(<numba.core.ir.Assign object at 0x0000024313723370>,
                           60)],
             'a': [(<numba.core.ir.Assign object at 0x0000024313747B50>, 0)],
             'bool10': [(<numba.core.ir.Assign object at 0x0000024313745840>,
                         0)],
             'bool50': [(<numba.core.ir.Assign object at 0x0000024316C4B040>,
                         20)],
             'bool78': [(<numba.core.ir.Assign object at 0x0000024313722230>,
                         62)],
             'bool96': [(<numba.core.ir.Assign object at 0x00000243137232E0>,
                         88)],
             'it': [(<numba.core.ir.Assign object at 0x00000243137472B0>, 20)],
             'max_value': [(<numba.core.ir.Assign object at 0x0000024316C4B700>,
                            20),
                           (<numba.core.ir.Assign object at 0x000002431B4C9540>,
                            98)],
             'v': [(<numba.core.ir.Assign object at 0x0000024313722F80>, 62)],
             'view': [(<numba.core.ir.Assign object at 0x0000024313720340>,
                       62)]})
2024-09-04 18:31:52,637 - SSA violators <numba.core.utils.OrderedSet object at 0x00000243135EA890>
2024-09-04 18:31:52,637 - Fix SSA violator on var max_value
2024-09-04 18:31:52,637 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:52,638 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243135EAA40>
2024-09-04 18:31:52,638 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:52,638 - on stmt: $4load_attr.1 = getattr(value=a, attr=size)
2024-09-04 18:31:52,638 - on stmt: $const6.2 = const(int, 0)
2024-09-04 18:31:52,638 - on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2024-09-04 18:31:52,638 - on stmt: bool10 = global(bool: <class 'bool'>)
2024-09-04 18:31:52,638 - on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:571),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,638 - on stmt: branch $10pred, 12, 20
2024-09-04 18:31:52,638 - ==== SSA block rewrite pass on 12
2024-09-04 18:31:52,638 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243135EAA40>
2024-09-04 18:31:52,638 - on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:52,638 - on stmt: $const14.1 = const(str, zero-size array to reduction operation maximum which has no identity)
2024-09-04 18:31:52,638 - on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:572)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,639 - on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
2024-09-04 18:31:52,639 - ==== SSA block rewrite pass on 20
2024-09-04 18:31:52,639 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243135EAA40>
2024-09-04 18:31:52,639 - on stmt: $20load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:52,639 - on stmt: $22load_method.1 = getattr(value=$20load_global.0, attr=nditer)
2024-09-04 18:31:52,639 - on stmt: it = call $22load_method.1(a, func=$22load_method.1, args=[Var(a, arraymath.py:570)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,639 - on stmt: $30load_global.4 = global(next: <built-in function next>)
2024-09-04 18:31:52,639 - on stmt: $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,639 - on stmt: $36load_method.7 = getattr(value=$34call_function.6, attr=take)
2024-09-04 18:31:52,639 - on stmt: $const38.8 = const(int, 0)
2024-09-04 18:31:52,639 - on stmt: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,640 - first assign: max_value
2024-09-04 18:31:52,640 - replaced with: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,640 - on stmt: $44load_deref.10 = freevar(pre_return_func: <function return_false at 0x0000024317C80940>)
2024-09-04 18:31:52,640 - on stmt: $48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,640 - on stmt: bool50 = global(bool: <class 'bool'>)
2024-09-04 18:31:52,640 - on stmt: $50pred = call bool50($48call_function.12, func=bool50, args=(Var($48call_function.12, arraymath.py:577),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,640 - on stmt: branch $50pred, 52, 56
2024-09-04 18:31:52,640 - ==== SSA block rewrite pass on 52
2024-09-04 18:31:52,640 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243135EAA40>
2024-09-04 18:31:52,640 - on stmt: $54return_value.1 = cast(value=max_value)
2024-09-04 18:31:52,640 - on stmt: return $54return_value.1
2024-09-04 18:31:52,640 - ==== SSA block rewrite pass on 56
2024-09-04 18:31:52,641 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243135EAA40>
2024-09-04 18:31:52,641 - on stmt: $58get_iter.1 = getiter(value=it)
2024-09-04 18:31:52,641 - on stmt: $phi60.0 = $58get_iter.1
2024-09-04 18:31:52,641 - on stmt: jump 60
2024-09-04 18:31:52,641 - ==== SSA block rewrite pass on 60
2024-09-04 18:31:52,641 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243135EAA40>
2024-09-04 18:31:52,641 - on stmt: $60for_iter.1 = iternext(value=$phi60.0)
2024-09-04 18:31:52,641 - on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
2024-09-04 18:31:52,641 - on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
2024-09-04 18:31:52,641 - on stmt: $phi62.1 = $60for_iter.2
2024-09-04 18:31:52,641 - on stmt: branch $60for_iter.3, 62, 104
2024-09-04 18:31:52,641 - ==== SSA block rewrite pass on 62
2024-09-04 18:31:52,641 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243135EAA40>
2024-09-04 18:31:52,641 - on stmt: view = $phi62.1
2024-09-04 18:31:52,642 - on stmt: $66load_method.3 = getattr(value=view, attr=item)
2024-09-04 18:31:52,642 - on stmt: v = call $66load_method.3(func=$66load_method.3, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,642 - on stmt: $72load_deref.5 = freevar(pre_return_func: <function return_false at 0x0000024317C80940>)
2024-09-04 18:31:52,642 - on stmt: $76call_function.7 = call $72load_deref.5(v, func=$72load_deref.5, args=[Var(v, arraymath.py:581)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,642 - on stmt: bool78 = global(bool: <class 'bool'>)
2024-09-04 18:31:52,642 - on stmt: $78pred = call bool78($76call_function.7, func=bool78, args=(Var($76call_function.7, arraymath.py:582),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,642 - on stmt: branch $78pred, 80, 88
2024-09-04 18:31:52,642 - ==== SSA block rewrite pass on 80
2024-09-04 18:31:52,642 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243135EAA40>
2024-09-04 18:31:52,642 - on stmt: $86return_value.2 = cast(value=v)
2024-09-04 18:31:52,642 - on stmt: return $86return_value.2
2024-09-04 18:31:52,642 - ==== SSA block rewrite pass on 88
2024-09-04 18:31:52,643 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243135EAA40>
2024-09-04 18:31:52,643 - on stmt: $88load_deref.1 = freevar(comparator: <function max_comparator at 0x0000024317C80430>)
2024-09-04 18:31:52,643 - on stmt: $94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,643 - on stmt: bool96 = global(bool: <class 'bool'>)
2024-09-04 18:31:52,643 - on stmt: $96pred = call bool96($94call_function.4, func=bool96, args=(Var($94call_function.4, arraymath.py:584),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,643 - on stmt: branch $96pred, 98, 102
2024-09-04 18:31:52,643 - ==== SSA block rewrite pass on 98
2024-09-04 18:31:52,643 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243135EAA40>
2024-09-04 18:31:52,643 - on stmt: max_value = v
2024-09-04 18:31:52,643 - replaced with: max_value.1 = v
2024-09-04 18:31:52,643 - on stmt: jump 102
2024-09-04 18:31:52,643 - ==== SSA block rewrite pass on 102
2024-09-04 18:31:52,643 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243135EAA40>
2024-09-04 18:31:52,644 - on stmt: jump 60
2024-09-04 18:31:52,644 - ==== SSA block rewrite pass on 104
2024-09-04 18:31:52,644 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243135EAA40>
2024-09-04 18:31:52,644 - on stmt: $106return_value.1 = cast(value=max_value)
2024-09-04 18:31:52,644 - on stmt: return $106return_value.1
2024-09-04 18:31:52,644 - Replaced assignments: defaultdict(<class 'list'>,
            {20: [<numba.core.ir.Assign object at 0x00000243135E8C10>],
             98: [<numba.core.ir.Assign object at 0x00000243135E8220>]})
2024-09-04 18:31:52,644 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:52,644 - Running <numba.core.ssa._FixSSAVars object at 0x00000243135EAA40>
2024-09-04 18:31:52,644 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:52,644 - on stmt: $4load_attr.1 = getattr(value=a, attr=size)
2024-09-04 18:31:52,644 - on stmt: $const6.2 = const(int, 0)
2024-09-04 18:31:52,644 - on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2024-09-04 18:31:52,645 - on stmt: bool10 = global(bool: <class 'bool'>)
2024-09-04 18:31:52,645 - on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:571),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,645 - on stmt: branch $10pred, 12, 20
2024-09-04 18:31:52,645 - ==== SSA block rewrite pass on 12
2024-09-04 18:31:52,645 - Running <numba.core.ssa._FixSSAVars object at 0x00000243135EAA40>
2024-09-04 18:31:52,645 - on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2024-09-04 18:31:52,645 - on stmt: $const14.1 = const(str, zero-size array to reduction operation maximum which has no identity)
2024-09-04 18:31:52,645 - on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:572)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,645 - on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
2024-09-04 18:31:52,645 - ==== SSA block rewrite pass on 20
2024-09-04 18:31:52,645 - Running <numba.core.ssa._FixSSAVars object at 0x00000243135EAA40>
2024-09-04 18:31:52,645 - on stmt: $20load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:52,646 - on stmt: $22load_method.1 = getattr(value=$20load_global.0, attr=nditer)
2024-09-04 18:31:52,646 - on stmt: it = call $22load_method.1(a, func=$22load_method.1, args=[Var(a, arraymath.py:570)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,646 - on stmt: $30load_global.4 = global(next: <built-in function next>)
2024-09-04 18:31:52,646 - on stmt: $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,646 - on stmt: $36load_method.7 = getattr(value=$34call_function.6, attr=take)
2024-09-04 18:31:52,646 - on stmt: $const38.8 = const(int, 0)
2024-09-04 18:31:52,646 - on stmt: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,646 - on stmt: $44load_deref.10 = freevar(pre_return_func: <function return_false at 0x0000024317C80940>)
2024-09-04 18:31:52,646 - on stmt: $48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,646 - find_def var='max_value' stmt=$48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,647 - on stmt: bool50 = global(bool: <class 'bool'>)
2024-09-04 18:31:52,647 - on stmt: $50pred = call bool50($48call_function.12, func=bool50, args=(Var($48call_function.12, arraymath.py:577),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,647 - on stmt: branch $50pred, 52, 56
2024-09-04 18:31:52,647 - ==== SSA block rewrite pass on 52
2024-09-04 18:31:52,647 - Running <numba.core.ssa._FixSSAVars object at 0x00000243135EAA40>
2024-09-04 18:31:52,647 - on stmt: $54return_value.1 = cast(value=max_value)
2024-09-04 18:31:52,647 - find_def var='max_value' stmt=$54return_value.1 = cast(value=max_value)
2024-09-04 18:31:52,647 - find_def_from_top label 52
2024-09-04 18:31:52,647 - idom 20 from label 52
2024-09-04 18:31:52,647 - find_def_from_bottom label 20
2024-09-04 18:31:52,647 - on stmt: return $54return_value.1
2024-09-04 18:31:52,647 - ==== SSA block rewrite pass on 56
2024-09-04 18:31:52,647 - Running <numba.core.ssa._FixSSAVars object at 0x00000243135EAA40>
2024-09-04 18:31:52,647 - on stmt: $58get_iter.1 = getiter(value=it)
2024-09-04 18:31:52,648 - on stmt: $phi60.0 = $58get_iter.1
2024-09-04 18:31:52,648 - on stmt: jump 60
2024-09-04 18:31:52,648 - ==== SSA block rewrite pass on 60
2024-09-04 18:31:52,648 - Running <numba.core.ssa._FixSSAVars object at 0x00000243135EAA40>
2024-09-04 18:31:52,648 - on stmt: $60for_iter.1 = iternext(value=$phi60.0)
2024-09-04 18:31:52,648 - on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
2024-09-04 18:31:52,648 - on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
2024-09-04 18:31:52,648 - on stmt: $phi62.1 = $60for_iter.2
2024-09-04 18:31:52,648 - on stmt: branch $60for_iter.3, 62, 104
2024-09-04 18:31:52,648 - ==== SSA block rewrite pass on 62
2024-09-04 18:31:52,648 - Running <numba.core.ssa._FixSSAVars object at 0x00000243135EAA40>
2024-09-04 18:31:52,648 - on stmt: view = $phi62.1
2024-09-04 18:31:52,648 - on stmt: $66load_method.3 = getattr(value=view, attr=item)
2024-09-04 18:31:52,649 - on stmt: v = call $66load_method.3(func=$66load_method.3, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,649 - on stmt: $72load_deref.5 = freevar(pre_return_func: <function return_false at 0x0000024317C80940>)
2024-09-04 18:31:52,649 - on stmt: $76call_function.7 = call $72load_deref.5(v, func=$72load_deref.5, args=[Var(v, arraymath.py:581)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,649 - on stmt: bool78 = global(bool: <class 'bool'>)
2024-09-04 18:31:52,649 - on stmt: $78pred = call bool78($76call_function.7, func=bool78, args=(Var($76call_function.7, arraymath.py:582),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,649 - on stmt: branch $78pred, 80, 88
2024-09-04 18:31:52,649 - ==== SSA block rewrite pass on 80
2024-09-04 18:31:52,649 - Running <numba.core.ssa._FixSSAVars object at 0x00000243135EAA40>
2024-09-04 18:31:52,649 - on stmt: $86return_value.2 = cast(value=v)
2024-09-04 18:31:52,649 - on stmt: return $86return_value.2
2024-09-04 18:31:52,649 - ==== SSA block rewrite pass on 88
2024-09-04 18:31:52,650 - Running <numba.core.ssa._FixSSAVars object at 0x00000243135EAA40>
2024-09-04 18:31:52,650 - on stmt: $88load_deref.1 = freevar(comparator: <function max_comparator at 0x0000024317C80430>)
2024-09-04 18:31:52,650 - on stmt: $94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,650 - find_def var='max_value' stmt=$94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,650 - find_def_from_top label 88
2024-09-04 18:31:52,650 - idom 62 from label 88
2024-09-04 18:31:52,651 - find_def_from_bottom label 62
2024-09-04 18:31:52,651 - find_def_from_top label 62
2024-09-04 18:31:52,651 - idom 60 from label 62
2024-09-04 18:31:52,651 - find_def_from_bottom label 60
2024-09-04 18:31:52,651 - find_def_from_top label 60
2024-09-04 18:31:52,651 - insert phi node max_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 60
2024-09-04 18:31:52,651 - find_def_from_bottom label 56
2024-09-04 18:31:52,651 - find_def_from_top label 56
2024-09-04 18:31:52,651 - idom 20 from label 56
2024-09-04 18:31:52,651 - find_def_from_bottom label 20
2024-09-04 18:31:52,651 - incoming_def max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,651 - find_def_from_bottom label 102
2024-09-04 18:31:52,651 - find_def_from_top label 102
2024-09-04 18:31:52,651 - insert phi node max_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 102
2024-09-04 18:31:52,651 - find_def_from_bottom label 88
2024-09-04 18:31:52,651 - find_def_from_top label 88
2024-09-04 18:31:52,651 - idom 62 from label 88
2024-09-04 18:31:52,651 - find_def_from_bottom label 62
2024-09-04 18:31:52,651 - find_def_from_top label 62
2024-09-04 18:31:52,652 - idom 60 from label 62
2024-09-04 18:31:52,652 - find_def_from_bottom label 60
2024-09-04 18:31:52,652 - incoming_def max_value.2 = phi(incoming_values=[Var(max_value, arraymath.py:576)], incoming_blocks=[56])
2024-09-04 18:31:52,652 - find_def_from_bottom label 98
2024-09-04 18:31:52,652 - incoming_def max_value.1 = v
2024-09-04 18:31:52,652 - incoming_def max_value.3 = phi(incoming_values=[Var(max_value.2, arraymath.py:584), Var(max_value.1, arraymath.py:585)], incoming_blocks=[88, 98])
2024-09-04 18:31:52,652 - replaced with: $94call_function.4 = call $88load_deref.1(v, max_value.2, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value.2, arraymath.py:584)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,652 - on stmt: bool96 = global(bool: <class 'bool'>)
2024-09-04 18:31:52,652 - on stmt: $96pred = call bool96($94call_function.4, func=bool96, args=(Var($94call_function.4, arraymath.py:584),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,652 - on stmt: branch $96pred, 98, 102
2024-09-04 18:31:52,653 - ==== SSA block rewrite pass on 98
2024-09-04 18:31:52,653 - Running <numba.core.ssa._FixSSAVars object at 0x00000243135EAA40>
2024-09-04 18:31:52,653 - on stmt: max_value.1 = v
2024-09-04 18:31:52,653 - on stmt: jump 102
2024-09-04 18:31:52,653 - ==== SSA block rewrite pass on 102
2024-09-04 18:31:52,653 - Running <numba.core.ssa._FixSSAVars object at 0x00000243135EAA40>
2024-09-04 18:31:52,653 - on stmt: jump 60
2024-09-04 18:31:52,653 - ==== SSA block rewrite pass on 104
2024-09-04 18:31:52,653 - Running <numba.core.ssa._FixSSAVars object at 0x00000243135EAA40>
2024-09-04 18:31:52,653 - on stmt: $106return_value.1 = cast(value=max_value)
2024-09-04 18:31:52,653 - find_def var='max_value' stmt=$106return_value.1 = cast(value=max_value)
2024-09-04 18:31:52,654 - find_def_from_top label 104
2024-09-04 18:31:52,654 - idom 60 from label 104
2024-09-04 18:31:52,654 - find_def_from_bottom label 60
2024-09-04 18:31:52,654 - replaced with: $106return_value.1 = cast(value=max_value.2)
2024-09-04 18:31:52,654 - on stmt: return $106return_value.1
2024-09-04 18:31:52,667 - bytecode dump:
>          0	NOP(arg=None, lineno=4691)
           2	LOAD_FAST(arg=1, lineno=4692)
           4	LOAD_FAST(arg=0, lineno=4692)
           6	LOAD_ATTR(arg=0, lineno=4692)
           8	LOAD_CONST(arg=1, lineno=4692)
          10	BINARY_SUBTRACT(arg=None, lineno=4692)
          12	COMPARE_OP(arg=4, lineno=4692)
          14	POP_JUMP_IF_TRUE(arg=15, lineno=4692)
          16	LOAD_FAST(arg=1, lineno=4692)
          18	LOAD_FAST(arg=0, lineno=4692)
          20	LOAD_ATTR(arg=0, lineno=4692)
          22	UNARY_NEGATIVE(arg=None, lineno=4692)
          24	COMPARE_OP(arg=0, lineno=4692)
          26	POP_JUMP_IF_FALSE(arg=19, lineno=4692)
>         28	LOAD_GLOBAL(arg=1, lineno=4693)
          30	LOAD_CONST(arg=2, lineno=4693)
          32	CALL_FUNCTION(arg=1, lineno=4693)
          34	RAISE_VARARGS(arg=1, lineno=4693)
>         36	LOAD_FAST(arg=0, lineno=4694)
          38	LOAD_METHOD(arg=2, lineno=4694)
          40	CALL_METHOD(arg=0, lineno=4694)
          42	LOAD_FAST(arg=1, lineno=4694)
          44	BINARY_SUBSCR(arg=None, lineno=4694)
          46	RETURN_VALUE(arg=None, lineno=4694)
2024-09-04 18:31:52,667 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:52,667 - stack: []
2024-09-04 18:31:52,667 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:52,667 - dispatch pc=0, inst=NOP(arg=None, lineno=4691)
2024-09-04 18:31:52,667 - stack []
2024-09-04 18:31:52,668 - dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=4692)
2024-09-04 18:31:52,668 - stack []
2024-09-04 18:31:52,668 - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4692)
2024-09-04 18:31:52,668 - stack ['$indices2.0']
2024-09-04 18:31:52,668 - dispatch pc=6, inst=LOAD_ATTR(arg=0, lineno=4692)
2024-09-04 18:31:52,668 - stack ['$indices2.0', '$a4.1']
2024-09-04 18:31:52,668 - dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=4692)
2024-09-04 18:31:52,668 - stack ['$indices2.0', '$6load_attr.2']
2024-09-04 18:31:52,668 - dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=4692)
2024-09-04 18:31:52,668 - stack ['$indices2.0', '$6load_attr.2', '$const8.3']
2024-09-04 18:31:52,668 - dispatch pc=12, inst=COMPARE_OP(arg=4, lineno=4692)
2024-09-04 18:31:52,668 - stack ['$indices2.0', '$10binary_subtract.4']
2024-09-04 18:31:52,669 - dispatch pc=14, inst=POP_JUMP_IF_TRUE(arg=15, lineno=4692)
2024-09-04 18:31:52,669 - stack ['$12compare_op.5']
2024-09-04 18:31:52,669 - end state. edges=[Edge(pc=16, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:52,669 - pending: deque([State(pc_initial=16 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
2024-09-04 18:31:52,669 - stack: []
2024-09-04 18:31:52,669 - state.pc_initial: State(pc_initial=16 nstack_initial=0)
2024-09-04 18:31:52,670 - dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=4692)
2024-09-04 18:31:52,670 - stack []
2024-09-04 18:31:52,670 - dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=4692)
2024-09-04 18:31:52,670 - stack ['$indices16.0']
2024-09-04 18:31:52,670 - dispatch pc=20, inst=LOAD_ATTR(arg=0, lineno=4692)
2024-09-04 18:31:52,670 - stack ['$indices16.0', '$a18.1']
2024-09-04 18:31:52,670 - dispatch pc=22, inst=UNARY_NEGATIVE(arg=None, lineno=4692)
2024-09-04 18:31:52,670 - stack ['$indices16.0', '$20load_attr.2']
2024-09-04 18:31:52,670 - dispatch pc=24, inst=COMPARE_OP(arg=0, lineno=4692)
2024-09-04 18:31:52,671 - stack ['$indices16.0', '$22unary_negative.3']
2024-09-04 18:31:52,671 - dispatch pc=26, inst=POP_JUMP_IF_FALSE(arg=19, lineno=4692)
2024-09-04 18:31:52,671 - stack ['$24compare_op.4']
2024-09-04 18:31:52,671 - end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:52,671 - pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2024-09-04 18:31:52,671 - stack: []
2024-09-04 18:31:52,671 - state.pc_initial: State(pc_initial=28 nstack_initial=0)
2024-09-04 18:31:52,671 - dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=4693)
2024-09-04 18:31:52,671 - stack []
2024-09-04 18:31:52,672 - dispatch pc=30, inst=LOAD_CONST(arg=2, lineno=4693)
2024-09-04 18:31:52,672 - stack ['$28load_global.0']
2024-09-04 18:31:52,672 - dispatch pc=32, inst=CALL_FUNCTION(arg=1, lineno=4693)
2024-09-04 18:31:52,672 - stack ['$28load_global.0', '$const30.1']
2024-09-04 18:31:52,672 - dispatch pc=34, inst=RAISE_VARARGS(arg=1, lineno=4693)
2024-09-04 18:31:52,672 - stack ['$32call_function.2']
2024-09-04 18:31:52,672 - end state. edges=[]
2024-09-04 18:31:52,672 - pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2024-09-04 18:31:52,672 - pending: deque([State(pc_initial=36 nstack_initial=0)])
2024-09-04 18:31:52,672 - stack: []
2024-09-04 18:31:52,672 - state.pc_initial: State(pc_initial=36 nstack_initial=0)
2024-09-04 18:31:52,673 - dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=4694)
2024-09-04 18:31:52,673 - stack []
2024-09-04 18:31:52,673 - dispatch pc=38, inst=LOAD_METHOD(arg=2, lineno=4694)
2024-09-04 18:31:52,673 - stack ['$a36.0']
2024-09-04 18:31:52,673 - dispatch pc=40, inst=CALL_METHOD(arg=0, lineno=4694)
2024-09-04 18:31:52,673 - stack ['$38load_method.1']
2024-09-04 18:31:52,673 - dispatch pc=42, inst=LOAD_FAST(arg=1, lineno=4694)
2024-09-04 18:31:52,673 - stack ['$40call_method.2']
2024-09-04 18:31:52,673 - dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=4694)
2024-09-04 18:31:52,674 - stack ['$40call_method.2', '$indices42.3']
2024-09-04 18:31:52,674 - dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=4694)
2024-09-04 18:31:52,674 - stack ['$44binary_subscr.4']
2024-09-04 18:31:52,674 - end state. edges=[]
2024-09-04 18:31:52,674 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:52,674 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
2024-09-04 18:31:52,674 - defmap: {}
2024-09-04 18:31:52,674 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:52,674 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:52,675 - keep phismap: {}
2024-09-04 18:31:52,675 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:52,675 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:52,675 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$indices2.0'}), (4, {'res': '$a4.1'}), (6, {'item': '$a4.1', 'res': '$6load_attr.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$6load_attr.2', 'rhs': '$const8.3', 'res': '$10binary_subtract.4'}), (12, {'lhs': '$indices2.0', 'rhs': '$10binary_subtract.4', 'res': '$12compare_op.5'}), (14, {'pred': '$12compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: (), 28: ()})
2024-09-04 18:31:52,675 - block_infos State(pc_initial=16 nstack_initial=0):
AdaptBlockInfo(insts=((16, {'res': '$indices16.0'}), (18, {'res': '$a18.1'}), (20, {'item': '$a18.1', 'res': '$20load_attr.2'}), (22, {'value': '$20load_attr.2', 'res': '$22unary_negative.3'}), (24, {'lhs': '$indices16.0', 'rhs': '$22unary_negative.3', 'res': '$24compare_op.4'}), (26, {'pred': '$24compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: (), 36: ()})
2024-09-04 18:31:52,675 - block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$28load_global.0'}), (30, {'res': '$const30.1'}), (32, {'func': '$28load_global.0', 'args': ['$const30.1'], 'res': '$32call_function.2'}), (34, {'exc': '$32call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:52,675 - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$a36.0'}), (38, {'item': '$a36.0', 'res': '$38load_method.1'}), (40, {'func': '$38load_method.1', 'args': [], 'res': '$40call_method.2'}), (42, {'res': '$indices42.3'}), (44, {'index': '$indices42.3', 'target': '$40call_method.2', 'res': '$44binary_subscr.4'}), (46, {'retval': '$44binary_subscr.4', 'castval': '$46return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:52,675 - label 0:
    a = arg(0, name=a)                       ['a']
    indices = arg(1, name=indices)           ['indices']
    $6load_attr.2 = getattr(value=a, attr=size) ['$6load_attr.2', 'a']
    $const8.3 = const(int, 1)                ['$const8.3']
    $10binary_subtract.4 = $6load_attr.2 - $const8.3 ['$10binary_subtract.4', '$6load_attr.2', '$const8.3']
    $12compare_op.5 = indices > $10binary_subtract.4 ['$10binary_subtract.4', '$12compare_op.5', 'indices']
    bool14 = global(bool: <class 'bool'>)    ['bool14']
    $14pred = call bool14($12compare_op.5, func=bool14, args=(Var($12compare_op.5, arrayobj.py:4692),), kws=(), vararg=None, varkwarg=None, target=None) ['$12compare_op.5', '$14pred', 'bool14']
    branch $14pred, 28, 16                   ['$14pred']
label 16:
    $20load_attr.2 = getattr(value=a, attr=size) ['$20load_attr.2', 'a']
    $22unary_negative.3 = unary(fn=<built-in function neg>, value=$20load_attr.2) ['$20load_attr.2', '$22unary_negative.3']
    $24compare_op.4 = indices < $22unary_negative.3 ['$22unary_negative.3', '$24compare_op.4', 'indices']
    bool26 = global(bool: <class 'bool'>)    ['bool26']
    $26pred = call bool26($24compare_op.4, func=bool26, args=(Var($24compare_op.4, arrayobj.py:4692),), kws=(), vararg=None, varkwarg=None, target=None) ['$24compare_op.4', '$26pred', 'bool26']
    branch $26pred, 28, 36                   ['$26pred']
label 28:
    $28load_global.0 = global(IndexError: <class 'IndexError'>) ['$28load_global.0']
    $const30.1 = const(str, Index out of bounds) ['$const30.1']
    $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, arrayobj.py:4693)], kws=(), vararg=None, varkwarg=None, target=None) ['$28load_global.0', '$32call_function.2', '$const30.1']
    raise $32call_function.2                 ['$32call_function.2']
label 36:
    $38load_method.1 = getattr(value=a, attr=ravel) ['$38load_method.1', 'a']
    $40call_method.2 = call $38load_method.1(func=$38load_method.1, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$38load_method.1', '$40call_method.2']
    $44binary_subscr.4 = getitem(value=$40call_method.2, index=indices, fn=<built-in function getitem>) ['$40call_method.2', '$44binary_subscr.4', 'indices']
    $46return_value.5 = cast(value=$44binary_subscr.4) ['$44binary_subscr.4', '$46return_value.5']
    return $46return_value.5                 ['$46return_value.5']

2024-09-04 18:31:52,694 - ==== SSA block analysis pass on 0
2024-09-04 18:31:52,694 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243137219F0>
2024-09-04 18:31:52,694 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:52,694 - on stmt: indices = arg(1, name=indices)
2024-09-04 18:31:52,694 - on stmt: $6load_attr.2 = getattr(value=a, attr=size)
2024-09-04 18:31:52,694 - on stmt: $const8.3 = const(int, 1)
2024-09-04 18:31:52,695 - on stmt: $10binary_subtract.4 = $6load_attr.2 - $const8.3
2024-09-04 18:31:52,695 - on stmt: $12compare_op.5 = indices > $10binary_subtract.4
2024-09-04 18:31:52,695 - on stmt: bool14 = global(bool: <class 'bool'>)
2024-09-04 18:31:52,695 - on stmt: $14pred = call bool14($12compare_op.5, func=bool14, args=(Var($12compare_op.5, arrayobj.py:4692),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,695 - on stmt: branch $14pred, 28, 16
2024-09-04 18:31:52,695 - ==== SSA block analysis pass on 16
2024-09-04 18:31:52,695 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243137219F0>
2024-09-04 18:31:52,695 - on stmt: $20load_attr.2 = getattr(value=a, attr=size)
2024-09-04 18:31:52,695 - on stmt: $22unary_negative.3 = unary(fn=<built-in function neg>, value=$20load_attr.2)
2024-09-04 18:31:52,695 - on stmt: $24compare_op.4 = indices < $22unary_negative.3
2024-09-04 18:31:52,696 - on stmt: bool26 = global(bool: <class 'bool'>)
2024-09-04 18:31:52,696 - on stmt: $26pred = call bool26($24compare_op.4, func=bool26, args=(Var($24compare_op.4, arrayobj.py:4692),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,696 - on stmt: branch $26pred, 28, 36
2024-09-04 18:31:52,696 - ==== SSA block analysis pass on 28
2024-09-04 18:31:52,696 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243137219F0>
2024-09-04 18:31:52,696 - on stmt: $28load_global.0 = global(IndexError: <class 'IndexError'>)
2024-09-04 18:31:52,696 - on stmt: $const30.1 = const(str, Index out of bounds)
2024-09-04 18:31:52,696 - on stmt: $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, arrayobj.py:4693)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,696 - on stmt: <static> raise <class 'IndexError'>('Index out of bounds')
2024-09-04 18:31:52,696 - ==== SSA block analysis pass on 36
2024-09-04 18:31:52,697 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243137219F0>
2024-09-04 18:31:52,697 - on stmt: $38load_method.1 = getattr(value=a, attr=ravel)
2024-09-04 18:31:52,697 - on stmt: $40call_method.2 = call $38load_method.1(func=$38load_method.1, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,697 - on stmt: $44binary_subscr.4 = getitem(value=$40call_method.2, index=indices, fn=<built-in function getitem>)
2024-09-04 18:31:52,697 - on stmt: $46return_value.5 = cast(value=$44binary_subscr.4)
2024-09-04 18:31:52,697 - on stmt: return $46return_value.5
2024-09-04 18:31:52,698 - defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [(<numba.core.ir.Assign object at 0x000002431369C280>,
                                       0)],
             '$12compare_op.5': [(<numba.core.ir.Assign object at 0x000002431369D030>,
                                  0)],
             '$14pred': [(<numba.core.ir.Assign object at 0x000002431369EEF0>,
                          0)],
             '$20load_attr.2': [(<numba.core.ir.Assign object at 0x000002431369C850>,
                                 16)],
             '$22unary_negative.3': [(<numba.core.ir.Assign object at 0x00000243129FAF80>,
                                      16)],
             '$24compare_op.4': [(<numba.core.ir.Assign object at 0x00000243129FAD10>,
                                  16)],
             '$26pred': [(<numba.core.ir.Assign object at 0x00000243129FB550>,
                          16)],
             '$28load_global.0': [(<numba.core.ir.Assign object at 0x00000243129FAE30>,
                                   28)],
             '$32call_function.2': [(<numba.core.ir.Assign object at 0x00000243129F8340>,
                                     28)],
             '$38load_method.1': [(<numba.core.ir.Assign object at 0x00000243129F8490>,
                                   36)],
             '$40call_method.2': [(<numba.core.ir.Assign object at 0x00000243129F8790>,
                                   36)],
             '$44binary_subscr.4': [(<numba.core.ir.Assign object at 0x00000243129F92D0>,
                                     36)],
             '$46return_value.5': [(<numba.core.ir.Assign object at 0x00000243129F8130>,
                                    36)],
             '$6load_attr.2': [(<numba.core.ir.Assign object at 0x000002431369C040>,
                                0)],
             '$const30.1': [(<numba.core.ir.Assign object at 0x00000243129F9150>,
                             28)],
             '$const8.3': [(<numba.core.ir.Assign object at 0x000002431369C460>,
                            0)],
             'a': [(<numba.core.ir.Assign object at 0x000002431369F5B0>, 0)],
             'bool14': [(<numba.core.ir.Assign object at 0x000002431369C3D0>,
                         0)],
             'bool26': [(<numba.core.ir.Assign object at 0x00000243129FA9E0>,
                         16)],
             'indices': [(<numba.core.ir.Assign object at 0x000002431369E020>,
                          0)]})
2024-09-04 18:31:52,698 - SSA violators <numba.core.utils.OrderedSet object at 0x00000243137219F0>
2024-09-04 18:31:52,747 - bytecode dump:
>          0	NOP(arg=None, lineno=2230)
           2	LOAD_FAST(arg=0, lineno=2232)
           4	LOAD_METHOD(arg=0, lineno=2232)
           6	LOAD_FAST(arg=0, lineno=2232)
           8	LOAD_ATTR(arg=1, lineno=2232)
          10	CALL_METHOD(arg=1, lineno=2232)
          12	RETURN_VALUE(arg=None, lineno=2232)
2024-09-04 18:31:52,747 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:52,747 - stack: []
2024-09-04 18:31:52,747 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:52,747 - dispatch pc=0, inst=NOP(arg=None, lineno=2230)
2024-09-04 18:31:52,747 - stack []
2024-09-04 18:31:52,747 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2232)
2024-09-04 18:31:52,747 - stack []
2024-09-04 18:31:52,747 - dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=2232)
2024-09-04 18:31:52,747 - stack ['$ary2.0']
2024-09-04 18:31:52,747 - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=2232)
2024-09-04 18:31:52,747 - stack ['$4load_method.1']
2024-09-04 18:31:52,748 - dispatch pc=8, inst=LOAD_ATTR(arg=1, lineno=2232)
2024-09-04 18:31:52,748 - stack ['$4load_method.1', '$ary6.2']
2024-09-04 18:31:52,748 - dispatch pc=10, inst=CALL_METHOD(arg=1, lineno=2232)
2024-09-04 18:31:52,748 - stack ['$4load_method.1', '$8load_attr.3']
2024-09-04 18:31:52,748 - dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=2232)
2024-09-04 18:31:52,748 - stack ['$10call_method.4']
2024-09-04 18:31:52,748 - end state. edges=[]
2024-09-04 18:31:52,748 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:52,748 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 18:31:52,748 - defmap: {}
2024-09-04 18:31:52,748 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:52,748 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:52,749 - keep phismap: {}
2024-09-04 18:31:52,749 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:52,749 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:52,749 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$ary2.0'}), (4, {'item': '$ary2.0', 'res': '$4load_method.1'}), (6, {'res': '$ary6.2'}), (8, {'item': '$ary6.2', 'res': '$8load_attr.3'}), (10, {'func': '$4load_method.1', 'args': ['$8load_attr.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:52,749 - label 0:
    ary = arg(0, name=ary)                   ['ary']
    $4load_method.1 = getattr(value=ary, attr=reshape) ['$4load_method.1', 'ary']
    $8load_attr.3 = getattr(value=ary, attr=size) ['$8load_attr.3', 'ary']
    $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arrayobj.py:2232)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_method.4', '$4load_method.1', '$8load_attr.3']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2024-09-04 18:31:52,752 - ==== SSA block analysis pass on 0
2024-09-04 18:31:52,752 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024312A19450>
2024-09-04 18:31:52,752 - on stmt: ary = arg(0, name=ary)
2024-09-04 18:31:52,752 - on stmt: $4load_method.1 = getattr(value=ary, attr=reshape)
2024-09-04 18:31:52,752 - on stmt: $8load_attr.3 = getattr(value=ary, attr=size)
2024-09-04 18:31:52,752 - on stmt: $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arrayobj.py:2232)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:52,752 - on stmt: $12return_value.5 = cast(value=$10call_method.4)
2024-09-04 18:31:52,752 - on stmt: return $12return_value.5
2024-09-04 18:31:52,761 - defs defaultdict(<class 'list'>,
            {'$10call_method.4': [(<numba.core.ir.Assign object at 0x0000024312A18730>,
                                   0)],
             '$12return_value.5': [(<numba.core.ir.Assign object at 0x0000024312A18C70>,
                                    0)],
             '$4load_method.1': [(<numba.core.ir.Assign object at 0x0000024312A1A3B0>,
                                  0)],
             '$8load_attr.3': [(<numba.core.ir.Assign object at 0x0000024312A1A770>,
                                0)],
             'ary': [(<numba.core.ir.Assign object at 0x0000024312A198A0>, 0)]})
2024-09-04 18:31:52,761 - SSA violators <numba.core.utils.OrderedSet object at 0x0000024312A19450>
2024-09-04 18:31:52,882 - bytecode dump:
>          0	NOP(arg=None, lineno=486)
           2	LOAD_CONST(arg=1, lineno=488)
           4	RETURN_VALUE(arg=None, lineno=488)
2024-09-04 18:31:52,882 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:52,890 - stack: []
2024-09-04 18:31:52,890 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:52,890 - dispatch pc=0, inst=NOP(arg=None, lineno=486)
2024-09-04 18:31:52,890 - stack []
2024-09-04 18:31:52,890 - dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=488)
2024-09-04 18:31:52,890 - stack []
2024-09-04 18:31:52,890 - dispatch pc=4, inst=RETURN_VALUE(arg=None, lineno=488)
2024-09-04 18:31:52,890 - stack ['$const2.0']
2024-09-04 18:31:52,891 - end state. edges=[]
2024-09-04 18:31:52,891 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:52,891 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 18:31:52,891 - defmap: {}
2024-09-04 18:31:52,891 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:52,891 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:52,891 - keep phismap: {}
2024-09-04 18:31:52,891 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:52,891 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:52,891 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'retval': '$const2.0', 'castval': '$4return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:52,892 - label 0:
    a = arg(0, name=a)                       ['a']
    $const2.0 = const(bool, False)           ['$const2.0']
    $4return_value.1 = cast(value=$const2.0) ['$4return_value.1', '$const2.0']
    return $4return_value.1                  ['$4return_value.1']

2024-09-04 18:31:52,899 - ==== SSA block analysis pass on 0
2024-09-04 18:31:52,899 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024312A19690>
2024-09-04 18:31:52,899 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:52,900 - on stmt: $const2.0 = const(bool, False)
2024-09-04 18:31:52,900 - on stmt: $4return_value.1 = cast(value=$const2.0)
2024-09-04 18:31:52,900 - on stmt: return $4return_value.1
2024-09-04 18:31:52,900 - defs defaultdict(<class 'list'>,
            {'$4return_value.1': [(<numba.core.ir.Assign object at 0x000002431D1876A0>,
                                   0)],
             '$const2.0': [(<numba.core.ir.Assign object at 0x000002431D185930>,
                            0)],
             'a': [(<numba.core.ir.Assign object at 0x000002431D186C50>, 0)]})
2024-09-04 18:31:52,900 - SSA violators <numba.core.utils.OrderedSet object at 0x0000024312A19690>
2024-09-04 18:31:52,934 - bytecode dump:
>          0	NOP(arg=None, lineno=481)
           2	LOAD_FAST(arg=0, lineno=483)
           4	LOAD_FAST(arg=1, lineno=483)
           6	COMPARE_OP(arg=4, lineno=483)
           8	RETURN_VALUE(arg=None, lineno=483)
2024-09-04 18:31:52,935 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:52,935 - stack: []
2024-09-04 18:31:52,935 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:52,935 - dispatch pc=0, inst=NOP(arg=None, lineno=481)
2024-09-04 18:31:52,935 - stack []
2024-09-04 18:31:52,935 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=483)
2024-09-04 18:31:52,935 - stack []
2024-09-04 18:31:52,935 - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=483)
2024-09-04 18:31:52,935 - stack ['$a2.0']
2024-09-04 18:31:52,935 - dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=483)
2024-09-04 18:31:52,935 - stack ['$a2.0', '$min_val4.1']
2024-09-04 18:31:52,936 - dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=483)
2024-09-04 18:31:52,936 - stack ['$6compare_op.2']
2024-09-04 18:31:52,936 - end state. edges=[]
2024-09-04 18:31:52,936 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:52,936 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 18:31:52,936 - defmap: {}
2024-09-04 18:31:52,936 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:52,936 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:52,936 - keep phismap: {}
2024-09-04 18:31:52,936 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:52,937 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:52,937 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'res': '$min_val4.1'}), (6, {'lhs': '$a2.0', 'rhs': '$min_val4.1', 'res': '$6compare_op.2'}), (8, {'retval': '$6compare_op.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:52,937 - label 0:
    a = arg(0, name=a)                       ['a']
    min_val = arg(1, name=min_val)           ['min_val']
    $6compare_op.2 = a > min_val             ['$6compare_op.2', 'a', 'min_val']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2024-09-04 18:31:52,946 - ==== SSA block analysis pass on 0
2024-09-04 18:31:52,946 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024318338850>
2024-09-04 18:31:52,946 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:52,946 - on stmt: min_val = arg(1, name=min_val)
2024-09-04 18:31:52,946 - on stmt: $6compare_op.2 = a > min_val
2024-09-04 18:31:52,946 - on stmt: $8return_value.3 = cast(value=$6compare_op.2)
2024-09-04 18:31:52,946 - on stmt: return $8return_value.3
2024-09-04 18:31:52,948 - defs defaultdict(<class 'list'>,
            {'$6compare_op.2': [(<numba.core.ir.Assign object at 0x0000024318FB3EB0>,
                                 0)],
             '$8return_value.3': [(<numba.core.ir.Assign object at 0x0000024318FB0970>,
                                   0)],
             'a': [(<numba.core.ir.Assign object at 0x000002431833B2B0>, 0)],
             'min_val': [(<numba.core.ir.Assign object at 0x0000024318338D00>,
                          0)]})
2024-09-04 18:31:52,948 - SSA violators <numba.core.utils.OrderedSet object at 0x0000024318338850>
2024-09-04 18:31:53,151 - bytecode dump:
>          0	NOP(arg=None, lineno=437)
           2	LOAD_DEREF(arg=0, lineno=440)
           4	STORE_FAST(arg=1, lineno=440)
           6	LOAD_GLOBAL(arg=0, lineno=441)
           8	LOAD_METHOD(arg=1, lineno=441)
          10	LOAD_FAST(arg=0, lineno=441)
          12	CALL_METHOD(arg=1, lineno=441)
          14	GET_ITER(arg=None, lineno=441)
>         16	FOR_ITER(arg=8, lineno=441)
          18	STORE_FAST(arg=2, lineno=441)
          20	LOAD_FAST(arg=1, lineno=442)
          22	LOAD_FAST(arg=2, lineno=442)
          24	LOAD_METHOD(arg=2, lineno=442)
          26	CALL_METHOD(arg=0, lineno=442)
          28	INPLACE_ADD(arg=None, lineno=442)
          30	STORE_FAST(arg=1, lineno=442)
          32	JUMP_ABSOLUTE(arg=9, lineno=442)
>         34	LOAD_FAST(arg=1, lineno=443)
          36	LOAD_FAST(arg=0, lineno=443)
          38	LOAD_ATTR(arg=3, lineno=443)
          40	BINARY_TRUE_DIVIDE(arg=None, lineno=443)
          42	RETURN_VALUE(arg=None, lineno=443)
2024-09-04 18:31:53,151 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:53,151 - stack: []
2024-09-04 18:31:53,151 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:53,151 - dispatch pc=0, inst=NOP(arg=None, lineno=437)
2024-09-04 18:31:53,151 - stack []
2024-09-04 18:31:53,151 - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=440)
2024-09-04 18:31:53,151 - stack []
2024-09-04 18:31:53,151 - dispatch pc=4, inst=STORE_FAST(arg=1, lineno=440)
2024-09-04 18:31:53,151 - stack ['$2load_deref.0']
2024-09-04 18:31:53,151 - dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=441)
2024-09-04 18:31:53,151 - stack []
2024-09-04 18:31:53,151 - dispatch pc=8, inst=LOAD_METHOD(arg=1, lineno=441)
2024-09-04 18:31:53,151 - stack ['$6load_global.1']
2024-09-04 18:31:53,151 - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=441)
2024-09-04 18:31:53,151 - stack ['$8load_method.2']
2024-09-04 18:31:53,151 - dispatch pc=12, inst=CALL_METHOD(arg=1, lineno=441)
2024-09-04 18:31:53,151 - stack ['$8load_method.2', '$a10.3']
2024-09-04 18:31:53,151 - dispatch pc=14, inst=GET_ITER(arg=None, lineno=441)
2024-09-04 18:31:53,151 - stack ['$12call_method.4']
2024-09-04 18:31:53,151 - end state. edges=[Edge(pc=16, stack=('$14get_iter.5',), blockstack=(), npush=0)]
2024-09-04 18:31:53,151 - pending: deque([State(pc_initial=16 nstack_initial=1)])
2024-09-04 18:31:53,151 - stack: ['$phi16.0']
2024-09-04 18:31:53,151 - state.pc_initial: State(pc_initial=16 nstack_initial=1)
2024-09-04 18:31:53,151 - dispatch pc=16, inst=FOR_ITER(arg=8, lineno=441)
2024-09-04 18:31:53,151 - stack ['$phi16.0']
2024-09-04 18:31:53,151 - end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=18, stack=('$phi16.0', '$16for_iter.2'), blockstack=(), npush=0)]
2024-09-04 18:31:53,151 - pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=18 nstack_initial=2)])
2024-09-04 18:31:53,151 - stack: []
2024-09-04 18:31:53,151 - state.pc_initial: State(pc_initial=34 nstack_initial=0)
2024-09-04 18:31:53,151 - dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=443)
2024-09-04 18:31:53,151 - stack []
2024-09-04 18:31:53,151 - dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=443)
2024-09-04 18:31:53,151 - stack ['$c34.0']
2024-09-04 18:31:53,151 - dispatch pc=38, inst=LOAD_ATTR(arg=3, lineno=443)
2024-09-04 18:31:53,151 - stack ['$c34.0', '$a36.1']
2024-09-04 18:31:53,151 - dispatch pc=40, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=443)
2024-09-04 18:31:53,151 - stack ['$c34.0', '$38load_attr.2']
2024-09-04 18:31:53,151 - dispatch pc=42, inst=RETURN_VALUE(arg=None, lineno=443)
2024-09-04 18:31:53,151 - stack ['$40binary_true_divide.3']
2024-09-04 18:31:53,151 - end state. edges=[]
2024-09-04 18:31:53,151 - pending: deque([State(pc_initial=18 nstack_initial=2)])
2024-09-04 18:31:53,151 - stack: ['$phi18.0', '$phi18.1']
2024-09-04 18:31:53,151 - state.pc_initial: State(pc_initial=18 nstack_initial=2)
2024-09-04 18:31:53,151 - dispatch pc=18, inst=STORE_FAST(arg=2, lineno=441)
2024-09-04 18:31:53,151 - stack ['$phi18.0', '$phi18.1']
2024-09-04 18:31:53,151 - dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=442)
2024-09-04 18:31:53,151 - stack ['$phi18.0']
2024-09-04 18:31:53,151 - dispatch pc=22, inst=LOAD_FAST(arg=2, lineno=442)
2024-09-04 18:31:53,151 - stack ['$phi18.0', '$c20.2']
2024-09-04 18:31:53,151 - dispatch pc=24, inst=LOAD_METHOD(arg=2, lineno=442)
2024-09-04 18:31:53,151 - stack ['$phi18.0', '$c20.2', '$v22.3']
2024-09-04 18:31:53,151 - dispatch pc=26, inst=CALL_METHOD(arg=0, lineno=442)
2024-09-04 18:31:53,151 - stack ['$phi18.0', '$c20.2', '$24load_method.4']
2024-09-04 18:31:53,151 - dispatch pc=28, inst=INPLACE_ADD(arg=None, lineno=442)
2024-09-04 18:31:53,151 - stack ['$phi18.0', '$c20.2', '$26call_method.5']
2024-09-04 18:31:53,151 - dispatch pc=30, inst=STORE_FAST(arg=1, lineno=442)
2024-09-04 18:31:53,151 - stack ['$phi18.0', '$28inplace_add.6']
2024-09-04 18:31:53,151 - dispatch pc=32, inst=JUMP_ABSOLUTE(arg=9, lineno=442)
2024-09-04 18:31:53,151 - stack ['$phi18.0']
2024-09-04 18:31:53,151 - end state. edges=[Edge(pc=16, stack=('$phi18.0',), blockstack=(), npush=0)]
2024-09-04 18:31:53,151 - pending: deque([State(pc_initial=16 nstack_initial=1)])
2024-09-04 18:31:53,151 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:53,151 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=1): {'$phi16.0'},
             State(pc_initial=18 nstack_initial=2): {'$phi18.1'},
             State(pc_initial=34 nstack_initial=0): set()})
2024-09-04 18:31:53,151 - defmap: {'$phi16.0': State(pc_initial=0 nstack_initial=0),
 '$phi18.1': State(pc_initial=16 nstack_initial=1)}
2024-09-04 18:31:53,151 - phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi18.0', State(pc_initial=18 nstack_initial=2))},
             '$phi18.0': {('$phi16.0', State(pc_initial=16 nstack_initial=1))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
2024-09-04 18:31:53,151 - changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=1))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
2024-09-04 18:31:53,151 - changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
2024-09-04 18:31:53,151 - changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
2024-09-04 18:31:53,151 - keep phismap: {'$phi16.0': {('$14get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi18.1': {('$16for_iter.2', State(pc_initial=16 nstack_initial=1))}}
2024-09-04 18:31:53,151 - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi16.0': '$14get_iter.5'},
             State(pc_initial=16 nstack_initial=1): {'$phi18.1': '$16for_iter.2'}})
2024-09-04 18:31:53,151 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:53,151 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'value': '$2load_deref.0'}), (6, {'res': '$6load_global.1'}), (8, {'item': '$6load_global.1', 'res': '$8load_method.2'}), (10, {'res': '$a10.3'}), (12, {'func': '$8load_method.2', 'args': ['$a10.3'], 'res': '$12call_method.4'}), (14, {'value': '$12call_method.4', 'res': '$14get_iter.5'})), outgoing_phis={'$phi16.0': '$14get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$14get_iter.5',)})
2024-09-04 18:31:53,151 - block_infos State(pc_initial=16 nstack_initial=1):
AdaptBlockInfo(insts=((16, {'iterator': '$phi16.0', 'pair': '$16for_iter.1', 'indval': '$16for_iter.2', 'pred': '$16for_iter.3'}),), outgoing_phis={'$phi18.1': '$16for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 18: ('$phi16.0', '$16for_iter.2')})
2024-09-04 18:31:53,151 - block_infos State(pc_initial=18 nstack_initial=2):
AdaptBlockInfo(insts=((18, {'value': '$phi18.1'}), (20, {'res': '$c20.2'}), (22, {'res': '$v22.3'}), (24, {'item': '$v22.3', 'res': '$24load_method.4'}), (26, {'func': '$24load_method.4', 'args': [], 'res': '$26call_method.5'}), (28, {'lhs': '$c20.2', 'rhs': '$26call_method.5', 'res': '$28inplace_add.6'}), (30, {'value': '$28inplace_add.6'}), (32, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$phi18.0',)})
2024-09-04 18:31:53,151 - block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$c34.0'}), (36, {'res': '$a36.1'}), (38, {'item': '$a36.1', 'res': '$38load_attr.2'}), (40, {'lhs': '$c34.0', 'rhs': '$38load_attr.2', 'res': '$40binary_true_divide.3'}), (42, {'retval': '$40binary_true_divide.3', 'castval': '$42return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:53,151 - label 0:
    a = arg(0, name=a)                       ['a']
    c = freevar(acc_init: 0.0)               ['c']
    $6load_global.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$6load_global.1']
    $8load_method.2 = getattr(value=$6load_global.1, attr=nditer) ['$6load_global.1', '$8load_method.2']
    $12call_method.4 = call $8load_method.2(a, func=$8load_method.2, args=[Var(a, arraymath.py:437)], kws=(), vararg=None, varkwarg=None, target=None) ['$12call_method.4', '$8load_method.2', 'a']
    $14get_iter.5 = getiter(value=$12call_method.4) ['$12call_method.4', '$14get_iter.5']
    $phi16.0 = $14get_iter.5                 ['$14get_iter.5', '$phi16.0']
    jump 16                                  []
label 16:
    $16for_iter.1 = iternext(value=$phi16.0) ['$16for_iter.1', '$phi16.0']
    $16for_iter.2 = pair_first(value=$16for_iter.1) ['$16for_iter.1', '$16for_iter.2']
    $16for_iter.3 = pair_second(value=$16for_iter.1) ['$16for_iter.1', '$16for_iter.3']
    $phi18.1 = $16for_iter.2                 ['$16for_iter.2', '$phi18.1']
    branch $16for_iter.3, 18, 34             ['$16for_iter.3']
label 18:
    v = $phi18.1                             ['$phi18.1', 'v']
    $24load_method.4 = getattr(value=v, attr=item) ['$24load_method.4', 'v']
    $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$24load_method.4', '$26call_method.5']
    $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined) ['$26call_method.5', '$28inplace_add.6', 'c']
    c = $28inplace_add.6                     ['$28inplace_add.6', 'c']
    jump 16                                  []
label 34:
    $38load_attr.2 = getattr(value=a, attr=size) ['$38load_attr.2', 'a']
    $40binary_true_divide.3 = c / $38load_attr.2 ['$38load_attr.2', '$40binary_true_divide.3', 'c']
    $42return_value.4 = cast(value=$40binary_true_divide.3) ['$40binary_true_divide.3', '$42return_value.4']
    return $42return_value.4                 ['$42return_value.4']

2024-09-04 18:31:53,172 - ==== SSA block analysis pass on 0
2024-09-04 18:31:53,172 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243132DA410>
2024-09-04 18:31:53,172 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:53,172 - on stmt: c = freevar(acc_init: 0.0)
2024-09-04 18:31:53,172 - on stmt: $6load_global.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:53,172 - on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
2024-09-04 18:31:53,172 - on stmt: $12call_method.4 = call $8load_method.2(a, func=$8load_method.2, args=[Var(a, arraymath.py:437)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:53,172 - on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
2024-09-04 18:31:53,172 - on stmt: $phi16.0 = $14get_iter.5
2024-09-04 18:31:53,173 - on stmt: jump 16
2024-09-04 18:31:53,173 - ==== SSA block analysis pass on 16
2024-09-04 18:31:53,173 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243132DA410>
2024-09-04 18:31:53,173 - on stmt: $16for_iter.1 = iternext(value=$phi16.0)
2024-09-04 18:31:53,173 - on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
2024-09-04 18:31:53,173 - on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
2024-09-04 18:31:53,173 - on stmt: $phi18.1 = $16for_iter.2
2024-09-04 18:31:53,173 - on stmt: branch $16for_iter.3, 18, 34
2024-09-04 18:31:53,173 - ==== SSA block analysis pass on 18
2024-09-04 18:31:53,173 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243132DA410>
2024-09-04 18:31:53,173 - on stmt: v = $phi18.1
2024-09-04 18:31:53,173 - on stmt: $24load_method.4 = getattr(value=v, attr=item)
2024-09-04 18:31:53,173 - on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:53,173 - on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:53,173 - on stmt: c = $28inplace_add.6
2024-09-04 18:31:53,174 - on stmt: jump 16
2024-09-04 18:31:53,174 - ==== SSA block analysis pass on 34
2024-09-04 18:31:53,174 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243132DA410>
2024-09-04 18:31:53,174 - on stmt: $38load_attr.2 = getattr(value=a, attr=size)
2024-09-04 18:31:53,174 - on stmt: $40binary_true_divide.3 = c / $38load_attr.2
2024-09-04 18:31:53,174 - on stmt: $42return_value.4 = cast(value=$40binary_true_divide.3)
2024-09-04 18:31:53,174 - on stmt: return $42return_value.4
2024-09-04 18:31:53,175 - defs defaultdict(<class 'list'>,
            {'$12call_method.4': [(<numba.core.ir.Assign object at 0x000002431777C1C0>,
                                   0)],
             '$14get_iter.5': [(<numba.core.ir.Assign object at 0x000002431777C5B0>,
                                0)],
             '$16for_iter.1': [(<numba.core.ir.Assign object at 0x00000243132A1720>,
                                16)],
             '$16for_iter.2': [(<numba.core.ir.Assign object at 0x00000243132A2950>,
                                16)],
             '$16for_iter.3': [(<numba.core.ir.Assign object at 0x00000243132A2500>,
                                16)],
             '$24load_method.4': [(<numba.core.ir.Assign object at 0x0000024317710130>,
                                   18)],
             '$26call_method.5': [(<numba.core.ir.Assign object at 0x0000024317712620>,
                                   18)],
             '$28inplace_add.6': [(<numba.core.ir.Assign object at 0x0000024317711030>,
                                   18)],
             '$38load_attr.2': [(<numba.core.ir.Assign object at 0x0000024317711A50>,
                                 34)],
             '$40binary_true_divide.3': [(<numba.core.ir.Assign object at 0x0000024317713EE0>,
                                          34)],
             '$42return_value.4': [(<numba.core.ir.Assign object at 0x0000024317713880>,
                                    34)],
             '$6load_global.1': [(<numba.core.ir.Assign object at 0x00000243176E4550>,
                                  0)],
             '$8load_method.2': [(<numba.core.ir.Assign object at 0x00000243176E5DE0>,
                                  0)],
             '$phi16.0': [(<numba.core.ir.Assign object at 0x00000243176E5450>,
                           0)],
             '$phi18.1': [(<numba.core.ir.Assign object at 0x00000243132A1DB0>,
                           16)],
             'a': [(<numba.core.ir.Assign object at 0x0000024318FAAA70>, 0)],
             'c': [(<numba.core.ir.Assign object at 0x0000024318FA9AE0>, 0),
                   (<numba.core.ir.Assign object at 0x0000024317710490>, 18)],
             'v': [(<numba.core.ir.Assign object at 0x00000243132A1A50>, 18)]})
2024-09-04 18:31:53,175 - SSA violators <numba.core.utils.OrderedSet object at 0x00000243132DA410>
2024-09-04 18:31:53,175 - Fix SSA violator on var c
2024-09-04 18:31:53,175 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:53,175 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132D93C0>
2024-09-04 18:31:53,175 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:53,175 - on stmt: c = freevar(acc_init: 0.0)
2024-09-04 18:31:53,175 - first assign: c
2024-09-04 18:31:53,175 - replaced with: c = freevar(acc_init: 0.0)
2024-09-04 18:31:53,175 - on stmt: $6load_global.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:53,175 - on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
2024-09-04 18:31:53,175 - on stmt: $12call_method.4 = call $8load_method.2(a, func=$8load_method.2, args=[Var(a, arraymath.py:437)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:53,175 - on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
2024-09-04 18:31:53,175 - on stmt: $phi16.0 = $14get_iter.5
2024-09-04 18:31:53,175 - on stmt: jump 16
2024-09-04 18:31:53,175 - ==== SSA block rewrite pass on 16
2024-09-04 18:31:53,175 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132D93C0>
2024-09-04 18:31:53,175 - on stmt: $16for_iter.1 = iternext(value=$phi16.0)
2024-09-04 18:31:53,175 - on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
2024-09-04 18:31:53,175 - on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
2024-09-04 18:31:53,175 - on stmt: $phi18.1 = $16for_iter.2
2024-09-04 18:31:53,175 - on stmt: branch $16for_iter.3, 18, 34
2024-09-04 18:31:53,175 - ==== SSA block rewrite pass on 18
2024-09-04 18:31:53,175 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132D93C0>
2024-09-04 18:31:53,175 - on stmt: v = $phi18.1
2024-09-04 18:31:53,175 - on stmt: $24load_method.4 = getattr(value=v, attr=item)
2024-09-04 18:31:53,175 - on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:53,175 - on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:53,175 - on stmt: c = $28inplace_add.6
2024-09-04 18:31:53,175 - replaced with: c.1 = $28inplace_add.6
2024-09-04 18:31:53,175 - on stmt: jump 16
2024-09-04 18:31:53,175 - ==== SSA block rewrite pass on 34
2024-09-04 18:31:53,175 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243132D93C0>
2024-09-04 18:31:53,175 - on stmt: $38load_attr.2 = getattr(value=a, attr=size)
2024-09-04 18:31:53,175 - on stmt: $40binary_true_divide.3 = c / $38load_attr.2
2024-09-04 18:31:53,175 - on stmt: $42return_value.4 = cast(value=$40binary_true_divide.3)
2024-09-04 18:31:53,175 - on stmt: return $42return_value.4
2024-09-04 18:31:53,175 - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x00000243132D8F70>],
             18: [<numba.core.ir.Assign object at 0x00000243132DA980>]})
2024-09-04 18:31:53,175 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:53,175 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132D93C0>
2024-09-04 18:31:53,175 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:53,175 - on stmt: c = freevar(acc_init: 0.0)
2024-09-04 18:31:53,175 - on stmt: $6load_global.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:53,175 - on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
2024-09-04 18:31:53,175 - on stmt: $12call_method.4 = call $8load_method.2(a, func=$8load_method.2, args=[Var(a, arraymath.py:437)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:53,175 - on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
2024-09-04 18:31:53,175 - on stmt: $phi16.0 = $14get_iter.5
2024-09-04 18:31:53,175 - on stmt: jump 16
2024-09-04 18:31:53,175 - ==== SSA block rewrite pass on 16
2024-09-04 18:31:53,175 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132D93C0>
2024-09-04 18:31:53,175 - on stmt: $16for_iter.1 = iternext(value=$phi16.0)
2024-09-04 18:31:53,175 - on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
2024-09-04 18:31:53,175 - on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
2024-09-04 18:31:53,175 - on stmt: $phi18.1 = $16for_iter.2
2024-09-04 18:31:53,175 - on stmt: branch $16for_iter.3, 18, 34
2024-09-04 18:31:53,175 - ==== SSA block rewrite pass on 18
2024-09-04 18:31:53,175 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132D93C0>
2024-09-04 18:31:53,175 - on stmt: v = $phi18.1
2024-09-04 18:31:53,175 - on stmt: $24load_method.4 = getattr(value=v, attr=item)
2024-09-04 18:31:53,175 - on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:53,175 - on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:53,175 - find_def var='c' stmt=$28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:53,180 - find_def_from_top label 18
2024-09-04 18:31:53,181 - idom 16 from label 18
2024-09-04 18:31:53,181 - find_def_from_bottom label 16
2024-09-04 18:31:53,181 - find_def_from_top label 16
2024-09-04 18:31:53,181 - insert phi node c.2 = phi(incoming_values=[], incoming_blocks=[]) at 16
2024-09-04 18:31:53,181 - find_def_from_bottom label 0
2024-09-04 18:31:53,181 - incoming_def c = freevar(acc_init: 0.0)
2024-09-04 18:31:53,181 - find_def_from_bottom label 18
2024-09-04 18:31:53,181 - incoming_def c.1 = $28inplace_add.6
2024-09-04 18:31:53,181 - replaced with: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c.2, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:53,181 - on stmt: c.1 = $28inplace_add.6
2024-09-04 18:31:53,181 - on stmt: jump 16
2024-09-04 18:31:53,181 - ==== SSA block rewrite pass on 34
2024-09-04 18:31:53,182 - Running <numba.core.ssa._FixSSAVars object at 0x00000243132D93C0>
2024-09-04 18:31:53,182 - on stmt: $38load_attr.2 = getattr(value=a, attr=size)
2024-09-04 18:31:53,182 - on stmt: $40binary_true_divide.3 = c / $38load_attr.2
2024-09-04 18:31:53,182 - find_def var='c' stmt=$40binary_true_divide.3 = c / $38load_attr.2
2024-09-04 18:31:53,182 - find_def_from_top label 34
2024-09-04 18:31:53,182 - idom 16 from label 34
2024-09-04 18:31:53,182 - find_def_from_bottom label 16
2024-09-04 18:31:53,182 - replaced with: $40binary_true_divide.3 = c.2 / $38load_attr.2
2024-09-04 18:31:53,182 - on stmt: $42return_value.4 = cast(value=$40binary_true_divide.3)
2024-09-04 18:31:53,182 - on stmt: return $42return_value.4
2024-09-04 18:31:54,282 - bytecode dump:
>          0	NOP(arg=None, lineno=2452)
           2	LOAD_FAST(arg=0, lineno=2457)
           4	LOAD_ATTR(arg=0, lineno=2457)
           6	LOAD_CONST(arg=1, lineno=2457)
           8	BINARY_POWER(arg=None, lineno=2457)
          10	LOAD_FAST(arg=0, lineno=2457)
          12	LOAD_ATTR(arg=1, lineno=2457)
          14	LOAD_CONST(arg=1, lineno=2457)
          16	BINARY_POWER(arg=None, lineno=2457)
          18	BINARY_ADD(arg=None, lineno=2457)
          20	RETURN_VALUE(arg=None, lineno=2457)
2024-09-04 18:31:54,282 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:54,282 - stack: []
2024-09-04 18:31:54,282 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:54,282 - dispatch pc=0, inst=NOP(arg=None, lineno=2452)
2024-09-04 18:31:54,282 - stack []
2024-09-04 18:31:54,283 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2457)
2024-09-04 18:31:54,283 - stack []
2024-09-04 18:31:54,283 - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2457)
2024-09-04 18:31:54,283 - stack ['$x2.0']
2024-09-04 18:31:54,283 - dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=2457)
2024-09-04 18:31:54,283 - stack ['$4load_attr.1']
2024-09-04 18:31:54,283 - dispatch pc=8, inst=BINARY_POWER(arg=None, lineno=2457)
2024-09-04 18:31:54,283 - stack ['$4load_attr.1', '$const6.2']
2024-09-04 18:31:54,283 - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=2457)
2024-09-04 18:31:54,283 - stack ['$8binary_power.3']
2024-09-04 18:31:54,283 - dispatch pc=12, inst=LOAD_ATTR(arg=1, lineno=2457)
2024-09-04 18:31:54,283 - stack ['$8binary_power.3', '$x10.4']
2024-09-04 18:31:54,283 - dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=2457)
2024-09-04 18:31:54,284 - stack ['$8binary_power.3', '$12load_attr.5']
2024-09-04 18:31:54,284 - dispatch pc=16, inst=BINARY_POWER(arg=None, lineno=2457)
2024-09-04 18:31:54,284 - stack ['$8binary_power.3', '$12load_attr.5', '$const14.6']
2024-09-04 18:31:54,284 - dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=2457)
2024-09-04 18:31:54,284 - stack ['$8binary_power.3', '$16binary_power.7']
2024-09-04 18:31:54,284 - dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=2457)
2024-09-04 18:31:54,284 - stack ['$18binary_add.8']
2024-09-04 18:31:54,284 - end state. edges=[]
2024-09-04 18:31:54,284 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:54,284 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 18:31:54,284 - defmap: {}
2024-09-04 18:31:54,284 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:54,284 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:54,285 - keep phismap: {}
2024-09-04 18:31:54,285 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:54,285 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:54,285 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'res': '$const6.2'}), (8, {'lhs': '$4load_attr.1', 'rhs': '$const6.2', 'res': '$8binary_power.3'}), (10, {'res': '$x10.4'}), (12, {'item': '$x10.4', 'res': '$12load_attr.5'}), (14, {'res': '$const14.6'}), (16, {'lhs': '$12load_attr.5', 'rhs': '$const14.6', 'res': '$16binary_power.7'}), (18, {'lhs': '$8binary_power.3', 'rhs': '$16binary_power.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:54,286 - label 0:
    x = arg(0, name=x)                       ['x']
    $4load_attr.1 = getattr(value=x, attr=real) ['$4load_attr.1', 'x']
    $const6.2 = const(int, 2)                ['$const6.2']
    $8binary_power.3 = $4load_attr.1 ** $const6.2 ['$4load_attr.1', '$8binary_power.3', '$const6.2']
    $12load_attr.5 = getattr(value=x, attr=imag) ['$12load_attr.5', 'x']
    $const14.6 = const(int, 2)               ['$const14.6']
    $16binary_power.7 = $12load_attr.5 ** $const14.6 ['$12load_attr.5', '$16binary_power.7', '$const14.6']
    $18binary_add.8 = $8binary_power.3 + $16binary_power.7 ['$16binary_power.7', '$18binary_add.8', '$8binary_power.3']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

2024-09-04 18:31:54,293 - ==== SSA block analysis pass on 0
2024-09-04 18:31:54,293 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243134ED5D0>
2024-09-04 18:31:54,293 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:54,293 - on stmt: $4load_attr.1 = getattr(value=x, attr=real)
2024-09-04 18:31:54,293 - on stmt: $const6.2 = const(int, 2)
2024-09-04 18:31:54,293 - on stmt: $8binary_power.3 = $4load_attr.1 ** $const6.2
2024-09-04 18:31:54,294 - on stmt: $12load_attr.5 = getattr(value=x, attr=imag)
2024-09-04 18:31:54,294 - on stmt: $const14.6 = const(int, 2)
2024-09-04 18:31:54,294 - on stmt: $16binary_power.7 = $12load_attr.5 ** $const14.6
2024-09-04 18:31:54,294 - on stmt: $18binary_add.8 = $8binary_power.3 + $16binary_power.7
2024-09-04 18:31:54,294 - on stmt: $20return_value.9 = cast(value=$18binary_add.8)
2024-09-04 18:31:54,294 - on stmt: return $20return_value.9
2024-09-04 18:31:54,294 - defs defaultdict(<class 'list'>,
            {'$12load_attr.5': [(<numba.core.ir.Assign object at 0x00000243134EF9A0>,
                                 0)],
             '$16binary_power.7': [(<numba.core.ir.Assign object at 0x00000243139F2D70>,
                                    0)],
             '$18binary_add.8': [(<numba.core.ir.Assign object at 0x00000243139F3070>,
                                  0)],
             '$20return_value.9': [(<numba.core.ir.Assign object at 0x00000243139F2E00>,
                                    0)],
             '$4load_attr.1': [(<numba.core.ir.Assign object at 0x00000243139F2FB0>,
                                0)],
             '$8binary_power.3': [(<numba.core.ir.Assign object at 0x00000243139F3C10>,
                                   0)],
             '$const14.6': [(<numba.core.ir.Assign object at 0x00000243134ED300>,
                             0)],
             '$const6.2': [(<numba.core.ir.Assign object at 0x00000243139F31C0>,
                            0)],
             'x': [(<numba.core.ir.Assign object at 0x00000243139F1F90>, 0)]})
2024-09-04 18:31:54,295 - SSA violators <numba.core.utils.OrderedSet object at 0x00000243134ED5D0>
2024-09-04 18:31:54,312 - bytecode dump:
>          0	NOP(arg=None, lineno=214)
           2	LOAD_DEREF(arg=1, lineno=216)
           4	LOAD_CONST(arg=1, lineno=216)
           6	CALL_FUNCTION(arg=1, lineno=216)
           8	STORE_FAST(arg=2, lineno=216)
          10	LOAD_DEREF(arg=1, lineno=217)
          12	LOAD_FAST(arg=0, lineno=217)
          14	CALL_FUNCTION(arg=1, lineno=217)
          16	STORE_FAST(arg=0, lineno=217)
          18	LOAD_FAST(arg=1, lineno=218)
          20	LOAD_CONST(arg=2, lineno=218)
          22	COMPARE_OP(arg=0, lineno=218)
          24	POP_JUMP_IF_FALSE(arg=50, lineno=218)
          26	LOAD_CONST(arg=3, lineno=219)
          28	STORE_FAST(arg=3, lineno=219)
          30	LOAD_FAST(arg=1, lineno=220)
          32	UNARY_NEGATIVE(arg=None, lineno=220)
          34	STORE_FAST(arg=4, lineno=220)
          36	LOAD_FAST(arg=4, lineno=221)
          38	LOAD_CONST(arg=2, lineno=221)
          40	COMPARE_OP(arg=0, lineno=221)
          42	POP_JUMP_IF_FALSE(arg=25, lineno=221)
          44	LOAD_GLOBAL(arg=0, lineno=222)
          46	RAISE_VARARGS(arg=1, lineno=222)
>         48	LOAD_DEREF(arg=0, lineno=223)
          50	POP_JUMP_IF_FALSE(arg=49, lineno=223)
          52	LOAD_FAST(arg=0, lineno=224)
          54	LOAD_CONST(arg=2, lineno=224)
          56	COMPARE_OP(arg=2, lineno=224)
          58	POP_JUMP_IF_FALSE(arg=39, lineno=224)
          60	LOAD_DEREF(arg=2, lineno=225)
          62	POP_JUMP_IF_FALSE(arg=35, lineno=225)
          64	LOAD_DEREF(arg=2, lineno=226)
          66	RETURN_VALUE(arg=None, lineno=226)
>         68	LOAD_GLOBAL(arg=1, lineno=228)
          70	LOAD_CONST(arg=4, lineno=228)
          72	CALL_FUNCTION(arg=1, lineno=228)
          74	RAISE_VARARGS(arg=1, lineno=228)
>         76	LOAD_FAST(arg=0, lineno=229)
          78	LOAD_CONST(arg=1, lineno=229)
          80	COMPARE_OP(arg=3, lineno=229)
          82	POP_JUMP_IF_FALSE(arg=49, lineno=229)
          84	LOAD_FAST(arg=0, lineno=229)
          86	LOAD_CONST(arg=5, lineno=229)
          88	COMPARE_OP(arg=3, lineno=229)
          90	POP_JUMP_IF_FALSE(arg=49, lineno=229)
          92	LOAD_CONST(arg=2, lineno=230)
          94	RETURN_VALUE(arg=None, lineno=230)
>         96	JUMP_FORWARD(arg=4, lineno=230)
>         98	LOAD_CONST(arg=6, lineno=232)
         100	STORE_FAST(arg=3, lineno=232)
         102	LOAD_FAST(arg=1, lineno=233)
         104	STORE_FAST(arg=4, lineno=233)
>        106	LOAD_FAST(arg=4, lineno=234)
         108	LOAD_CONST(arg=7, lineno=234)
         110	COMPARE_OP(arg=4, lineno=234)
         112	POP_JUMP_IF_FALSE(arg=66, lineno=234)
         114	LOAD_GLOBAL(arg=2, lineno=236)
         116	LOAD_METHOD(arg=3, lineno=236)
         118	LOAD_FAST(arg=0, lineno=236)
         120	LOAD_GLOBAL(arg=4, lineno=236)
         122	LOAD_FAST(arg=1, lineno=236)
         124	CALL_FUNCTION(arg=1, lineno=236)
         126	CALL_METHOD(arg=2, lineno=236)
         128	RETURN_VALUE(arg=None, lineno=236)
>        130	LOAD_FAST(arg=4, lineno=237)
         132	LOAD_CONST(arg=2, lineno=237)
         134	COMPARE_OP(arg=3, lineno=237)
         136	POP_JUMP_IF_FALSE(arg=90, lineno=237)
>        138	LOAD_FAST(arg=4, lineno=238)
         140	LOAD_CONST(arg=1, lineno=238)
         142	BINARY_AND(arg=None, lineno=238)
         144	POP_JUMP_IF_FALSE(arg=78, lineno=238)
         146	LOAD_FAST(arg=2, lineno=239)
         148	LOAD_FAST(arg=0, lineno=239)
         150	INPLACE_MULTIPLY(arg=None, lineno=239)
         152	STORE_FAST(arg=2, lineno=239)
>        154	LOAD_FAST(arg=4, lineno=240)
         156	LOAD_CONST(arg=1, lineno=240)
         158	INPLACE_RSHIFT(arg=None, lineno=240)
         160	STORE_FAST(arg=4, lineno=240)
         162	LOAD_FAST(arg=0, lineno=241)
         164	LOAD_FAST(arg=0, lineno=241)
         166	INPLACE_MULTIPLY(arg=None, lineno=241)
         168	STORE_FAST(arg=0, lineno=241)
         170	LOAD_FAST(arg=4, lineno=237)
         172	LOAD_CONST(arg=2, lineno=237)
         174	COMPARE_OP(arg=3, lineno=237)
         176	POP_JUMP_IF_TRUE(arg=70, lineno=237)
>        178	LOAD_FAST(arg=3, lineno=243)
         180	POP_JUMP_IF_FALSE(arg=96, lineno=243)
         182	LOAD_CONST(arg=8, lineno=243)
         184	LOAD_FAST(arg=2, lineno=243)
         186	BINARY_TRUE_DIVIDE(arg=None, lineno=243)
         188	RETURN_VALUE(arg=None, lineno=243)
>        190	LOAD_FAST(arg=2, lineno=243)
         192	RETURN_VALUE(arg=None, lineno=243)
2024-09-04 18:31:54,312 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:54,312 - stack: []
2024-09-04 18:31:54,312 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:54,312 - dispatch pc=0, inst=NOP(arg=None, lineno=214)
2024-09-04 18:31:54,312 - stack []
2024-09-04 18:31:54,313 - dispatch pc=2, inst=LOAD_DEREF(arg=1, lineno=216)
2024-09-04 18:31:54,313 - stack []
2024-09-04 18:31:54,313 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=216)
2024-09-04 18:31:54,313 - stack ['$2load_deref.0']
2024-09-04 18:31:54,313 - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=216)
2024-09-04 18:31:54,313 - stack ['$2load_deref.0', '$const4.1']
2024-09-04 18:31:54,313 - dispatch pc=8, inst=STORE_FAST(arg=2, lineno=216)
2024-09-04 18:31:54,313 - stack ['$6call_function.2']
2024-09-04 18:31:54,313 - dispatch pc=10, inst=LOAD_DEREF(arg=1, lineno=217)
2024-09-04 18:31:54,313 - stack []
2024-09-04 18:31:54,313 - dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=217)
2024-09-04 18:31:54,313 - stack ['$10load_deref.3']
2024-09-04 18:31:54,313 - dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=217)
2024-09-04 18:31:54,313 - stack ['$10load_deref.3', '$a12.4']
2024-09-04 18:31:54,314 - dispatch pc=16, inst=STORE_FAST(arg=0, lineno=217)
2024-09-04 18:31:54,314 - stack ['$14call_function.5']
2024-09-04 18:31:54,314 - dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=218)
2024-09-04 18:31:54,314 - stack []
2024-09-04 18:31:54,314 - dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=218)
2024-09-04 18:31:54,314 - stack ['$b18.6']
2024-09-04 18:31:54,314 - dispatch pc=22, inst=COMPARE_OP(arg=0, lineno=218)
2024-09-04 18:31:54,314 - stack ['$b18.6', '$const20.7']
2024-09-04 18:31:54,314 - dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=50, lineno=218)
2024-09-04 18:31:54,314 - stack ['$22compare_op.8']
2024-09-04 18:31:54,314 - end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:54,314 - pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
2024-09-04 18:31:54,314 - stack: []
2024-09-04 18:31:54,315 - state.pc_initial: State(pc_initial=26 nstack_initial=0)
2024-09-04 18:31:54,315 - dispatch pc=26, inst=LOAD_CONST(arg=3, lineno=219)
2024-09-04 18:31:54,315 - stack []
2024-09-04 18:31:54,315 - dispatch pc=28, inst=STORE_FAST(arg=3, lineno=219)
2024-09-04 18:31:54,315 - stack ['$const26.0']
2024-09-04 18:31:54,315 - dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=220)
2024-09-04 18:31:54,315 - stack []
2024-09-04 18:31:54,315 - dispatch pc=32, inst=UNARY_NEGATIVE(arg=None, lineno=220)
2024-09-04 18:31:54,315 - stack ['$b30.1']
2024-09-04 18:31:54,315 - dispatch pc=34, inst=STORE_FAST(arg=4, lineno=220)
2024-09-04 18:31:54,315 - stack ['$32unary_negative.2']
2024-09-04 18:31:54,315 - dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=221)
2024-09-04 18:31:54,315 - stack []
2024-09-04 18:31:54,315 - dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=221)
2024-09-04 18:31:54,315 - stack ['$exp36.3']
2024-09-04 18:31:54,316 - dispatch pc=40, inst=COMPARE_OP(arg=0, lineno=221)
2024-09-04 18:31:54,316 - stack ['$exp36.3', '$const38.4']
2024-09-04 18:31:54,316 - dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=25, lineno=221)
2024-09-04 18:31:54,316 - stack ['$40compare_op.5']
2024-09-04 18:31:54,316 - end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:54,316 - pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0)])
2024-09-04 18:31:54,316 - stack: []
2024-09-04 18:31:54,316 - state.pc_initial: State(pc_initial=98 nstack_initial=0)
2024-09-04 18:31:54,316 - dispatch pc=98, inst=LOAD_CONST(arg=6, lineno=232)
2024-09-04 18:31:54,316 - stack []
2024-09-04 18:31:54,316 - dispatch pc=100, inst=STORE_FAST(arg=3, lineno=232)
2024-09-04 18:31:54,316 - stack ['$const98.0']
2024-09-04 18:31:54,316 - dispatch pc=102, inst=LOAD_FAST(arg=1, lineno=233)
2024-09-04 18:31:54,316 - stack []
2024-09-04 18:31:54,317 - dispatch pc=104, inst=STORE_FAST(arg=4, lineno=233)
2024-09-04 18:31:54,317 - stack ['$b102.1']
2024-09-04 18:31:54,317 - end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:54,317 - pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
2024-09-04 18:31:54,317 - stack: []
2024-09-04 18:31:54,317 - state.pc_initial: State(pc_initial=44 nstack_initial=0)
2024-09-04 18:31:54,317 - dispatch pc=44, inst=LOAD_GLOBAL(arg=0, lineno=222)
2024-09-04 18:31:54,317 - stack []
2024-09-04 18:31:54,317 - dispatch pc=46, inst=RAISE_VARARGS(arg=1, lineno=222)
2024-09-04 18:31:54,317 - stack ['$44load_global.0']
2024-09-04 18:31:54,317 - end state. edges=[]
2024-09-04 18:31:54,317 - pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
2024-09-04 18:31:54,317 - stack: []
2024-09-04 18:31:54,317 - state.pc_initial: State(pc_initial=48 nstack_initial=0)
2024-09-04 18:31:54,318 - dispatch pc=48, inst=LOAD_DEREF(arg=0, lineno=223)
2024-09-04 18:31:54,318 - stack []
2024-09-04 18:31:54,318 - dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=49, lineno=223)
2024-09-04 18:31:54,318 - stack ['$48load_deref.0']
2024-09-04 18:31:54,318 - end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=96, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:54,318 - pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=96 nstack_initial=0)])
2024-09-04 18:31:54,318 - stack: []
2024-09-04 18:31:54,318 - state.pc_initial: State(pc_initial=106 nstack_initial=0)
2024-09-04 18:31:54,318 - dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=234)
2024-09-04 18:31:54,318 - stack []
2024-09-04 18:31:54,318 - dispatch pc=108, inst=LOAD_CONST(arg=7, lineno=234)
2024-09-04 18:31:54,318 - stack ['$exp106.0']
2024-09-04 18:31:54,318 - dispatch pc=110, inst=COMPARE_OP(arg=4, lineno=234)
2024-09-04 18:31:54,318 - stack ['$exp106.0', '$const108.1']
2024-09-04 18:31:54,319 - dispatch pc=112, inst=POP_JUMP_IF_FALSE(arg=66, lineno=234)
2024-09-04 18:31:54,319 - stack ['$110compare_op.2']
2024-09-04 18:31:54,319 - end state. edges=[Edge(pc=114, stack=(), blockstack=(), npush=0), Edge(pc=130, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:54,319 - pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
2024-09-04 18:31:54,319 - stack: []
2024-09-04 18:31:54,319 - state.pc_initial: State(pc_initial=52 nstack_initial=0)
2024-09-04 18:31:54,319 - dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=224)
2024-09-04 18:31:54,319 - stack []
2024-09-04 18:31:54,319 - dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=224)
2024-09-04 18:31:54,319 - stack ['$a52.0']
2024-09-04 18:31:54,319 - dispatch pc=56, inst=COMPARE_OP(arg=2, lineno=224)
2024-09-04 18:31:54,319 - stack ['$a52.0', '$const54.1']
2024-09-04 18:31:54,319 - dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=39, lineno=224)
2024-09-04 18:31:54,320 - stack ['$56compare_op.2']
2024-09-04 18:31:54,320 - end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=76, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:54,320 - pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
2024-09-04 18:31:54,320 - stack: []
2024-09-04 18:31:54,320 - state.pc_initial: State(pc_initial=96 nstack_initial=0)
2024-09-04 18:31:54,320 - dispatch pc=96, inst=JUMP_FORWARD(arg=4, lineno=230)
2024-09-04 18:31:54,320 - stack []
2024-09-04 18:31:54,320 - end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:54,320 - pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
2024-09-04 18:31:54,320 - stack: []
2024-09-04 18:31:54,320 - state.pc_initial: State(pc_initial=114 nstack_initial=0)
2024-09-04 18:31:54,320 - dispatch pc=114, inst=LOAD_GLOBAL(arg=2, lineno=236)
2024-09-04 18:31:54,320 - stack []
2024-09-04 18:31:54,321 - dispatch pc=116, inst=LOAD_METHOD(arg=3, lineno=236)
2024-09-04 18:31:54,321 - stack ['$114load_global.0']
2024-09-04 18:31:54,321 - dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=236)
2024-09-04 18:31:54,321 - stack ['$116load_method.1']
2024-09-04 18:31:54,321 - dispatch pc=120, inst=LOAD_GLOBAL(arg=4, lineno=236)
2024-09-04 18:31:54,321 - stack ['$116load_method.1', '$a118.2']
2024-09-04 18:31:54,321 - dispatch pc=122, inst=LOAD_FAST(arg=1, lineno=236)
2024-09-04 18:31:54,321 - stack ['$116load_method.1', '$a118.2', '$120load_global.3']
2024-09-04 18:31:54,321 - dispatch pc=124, inst=CALL_FUNCTION(arg=1, lineno=236)
2024-09-04 18:31:54,321 - stack ['$116load_method.1', '$a118.2', '$120load_global.3', '$b122.4']
2024-09-04 18:31:54,321 - dispatch pc=126, inst=CALL_METHOD(arg=2, lineno=236)
2024-09-04 18:31:54,321 - stack ['$116load_method.1', '$a118.2', '$124call_function.5']
2024-09-04 18:31:54,321 - dispatch pc=128, inst=RETURN_VALUE(arg=None, lineno=236)
2024-09-04 18:31:54,322 - stack ['$126call_method.6']
2024-09-04 18:31:54,322 - end state. edges=[]
2024-09-04 18:31:54,322 - pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
2024-09-04 18:31:54,322 - stack: []
2024-09-04 18:31:54,322 - state.pc_initial: State(pc_initial=130 nstack_initial=0)
2024-09-04 18:31:54,322 - dispatch pc=130, inst=LOAD_FAST(arg=4, lineno=237)
2024-09-04 18:31:54,322 - stack []
2024-09-04 18:31:54,322 - dispatch pc=132, inst=LOAD_CONST(arg=2, lineno=237)
2024-09-04 18:31:54,322 - stack ['$exp130.0']
2024-09-04 18:31:54,322 - dispatch pc=134, inst=COMPARE_OP(arg=3, lineno=237)
2024-09-04 18:31:54,322 - stack ['$exp130.0', '$const132.1']
2024-09-04 18:31:54,322 - dispatch pc=136, inst=POP_JUMP_IF_FALSE(arg=90, lineno=237)
2024-09-04 18:31:54,322 - stack ['$134compare_op.2']
2024-09-04 18:31:54,322 - end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0), Edge(pc=178, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:54,323 - pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=178 nstack_initial=0)])
2024-09-04 18:31:54,323 - stack: []
2024-09-04 18:31:54,323 - state.pc_initial: State(pc_initial=60 nstack_initial=0)
2024-09-04 18:31:54,323 - dispatch pc=60, inst=LOAD_DEREF(arg=2, lineno=225)
2024-09-04 18:31:54,323 - stack []
2024-09-04 18:31:54,323 - dispatch pc=62, inst=POP_JUMP_IF_FALSE(arg=35, lineno=225)
2024-09-04 18:31:54,323 - stack ['$60load_deref.0']
2024-09-04 18:31:54,323 - end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:54,323 - pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=178 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
2024-09-04 18:31:54,323 - stack: []
2024-09-04 18:31:54,323 - state.pc_initial: State(pc_initial=76 nstack_initial=0)
2024-09-04 18:31:54,323 - dispatch pc=76, inst=LOAD_FAST(arg=0, lineno=229)
2024-09-04 18:31:54,323 - stack []
2024-09-04 18:31:54,323 - dispatch pc=78, inst=LOAD_CONST(arg=1, lineno=229)
2024-09-04 18:31:54,324 - stack ['$a76.0']
2024-09-04 18:31:54,324 - dispatch pc=80, inst=COMPARE_OP(arg=3, lineno=229)
2024-09-04 18:31:54,324 - stack ['$a76.0', '$const78.1']
2024-09-04 18:31:54,324 - dispatch pc=82, inst=POP_JUMP_IF_FALSE(arg=49, lineno=229)
2024-09-04 18:31:54,324 - stack ['$80compare_op.2']
2024-09-04 18:31:54,324 - end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=96, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:54,324 - pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=178 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=96 nstack_initial=0)])
2024-09-04 18:31:54,324 - pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=178 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=96 nstack_initial=0)])
2024-09-04 18:31:54,324 - stack: []
2024-09-04 18:31:54,324 - state.pc_initial: State(pc_initial=138 nstack_initial=0)
2024-09-04 18:31:54,324 - dispatch pc=138, inst=LOAD_FAST(arg=4, lineno=238)
2024-09-04 18:31:54,324 - stack []
2024-09-04 18:31:54,324 - dispatch pc=140, inst=LOAD_CONST(arg=1, lineno=238)
2024-09-04 18:31:54,324 - stack ['$exp138.0']
2024-09-04 18:31:54,325 - dispatch pc=142, inst=BINARY_AND(arg=None, lineno=238)
2024-09-04 18:31:54,325 - stack ['$exp138.0', '$const140.1']
2024-09-04 18:31:54,325 - dispatch pc=144, inst=POP_JUMP_IF_FALSE(arg=78, lineno=238)
2024-09-04 18:31:54,325 - stack ['$142binary_and.2']
2024-09-04 18:31:54,325 - end state. edges=[Edge(pc=146, stack=(), blockstack=(), npush=0), Edge(pc=154, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:54,325 - pending: deque([State(pc_initial=178 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
2024-09-04 18:31:54,325 - stack: []
2024-09-04 18:31:54,325 - state.pc_initial: State(pc_initial=178 nstack_initial=0)
2024-09-04 18:31:54,325 - dispatch pc=178, inst=LOAD_FAST(arg=3, lineno=243)
2024-09-04 18:31:54,325 - stack []
2024-09-04 18:31:54,325 - dispatch pc=180, inst=POP_JUMP_IF_FALSE(arg=96, lineno=243)
2024-09-04 18:31:54,325 - stack ['$invert178.0']
2024-09-04 18:31:54,325 - end state. edges=[Edge(pc=182, stack=(), blockstack=(), npush=0), Edge(pc=190, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:54,325 - pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=182 nstack_initial=0), State(pc_initial=190 nstack_initial=0)])
2024-09-04 18:31:54,326 - stack: []
2024-09-04 18:31:54,326 - state.pc_initial: State(pc_initial=64 nstack_initial=0)
2024-09-04 18:31:54,326 - dispatch pc=64, inst=LOAD_DEREF(arg=2, lineno=226)
2024-09-04 18:31:54,326 - stack []
2024-09-04 18:31:54,326 - dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=226)
2024-09-04 18:31:54,326 - stack ['$64load_deref.0']
2024-09-04 18:31:54,326 - end state. edges=[]
2024-09-04 18:31:54,326 - pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=182 nstack_initial=0), State(pc_initial=190 nstack_initial=0)])
2024-09-04 18:31:54,326 - stack: []
2024-09-04 18:31:54,326 - state.pc_initial: State(pc_initial=68 nstack_initial=0)
2024-09-04 18:31:54,326 - dispatch pc=68, inst=LOAD_GLOBAL(arg=1, lineno=228)
2024-09-04 18:31:54,326 - stack []
2024-09-04 18:31:54,326 - dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=228)
2024-09-04 18:31:54,326 - stack ['$68load_global.0']
2024-09-04 18:31:54,326 - dispatch pc=72, inst=CALL_FUNCTION(arg=1, lineno=228)
2024-09-04 18:31:54,327 - stack ['$68load_global.0', '$const70.1']
2024-09-04 18:31:54,327 - dispatch pc=74, inst=RAISE_VARARGS(arg=1, lineno=228)
2024-09-04 18:31:54,327 - stack ['$72call_function.2']
2024-09-04 18:31:54,327 - end state. edges=[]
2024-09-04 18:31:54,327 - pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=182 nstack_initial=0), State(pc_initial=190 nstack_initial=0)])
2024-09-04 18:31:54,327 - stack: []
2024-09-04 18:31:54,327 - state.pc_initial: State(pc_initial=84 nstack_initial=0)
2024-09-04 18:31:54,327 - dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=229)
2024-09-04 18:31:54,327 - stack []
2024-09-04 18:31:54,327 - dispatch pc=86, inst=LOAD_CONST(arg=5, lineno=229)
2024-09-04 18:31:54,327 - stack ['$a84.0']
2024-09-04 18:31:54,327 - dispatch pc=88, inst=COMPARE_OP(arg=3, lineno=229)
2024-09-04 18:31:54,327 - stack ['$a84.0', '$const86.1']
2024-09-04 18:31:54,327 - dispatch pc=90, inst=POP_JUMP_IF_FALSE(arg=49, lineno=229)
2024-09-04 18:31:54,328 - stack ['$88compare_op.2']
2024-09-04 18:31:54,328 - end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0), Edge(pc=96, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:54,328 - pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=182 nstack_initial=0), State(pc_initial=190 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=96 nstack_initial=0)])
2024-09-04 18:31:54,328 - pending: deque([State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=182 nstack_initial=0), State(pc_initial=190 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=96 nstack_initial=0)])
2024-09-04 18:31:54,328 - stack: []
2024-09-04 18:31:54,328 - state.pc_initial: State(pc_initial=146 nstack_initial=0)
2024-09-04 18:31:54,328 - dispatch pc=146, inst=LOAD_FAST(arg=2, lineno=239)
2024-09-04 18:31:54,328 - stack []
2024-09-04 18:31:54,328 - dispatch pc=148, inst=LOAD_FAST(arg=0, lineno=239)
2024-09-04 18:31:54,328 - stack ['$r146.0']
2024-09-04 18:31:54,328 - dispatch pc=150, inst=INPLACE_MULTIPLY(arg=None, lineno=239)
2024-09-04 18:31:54,328 - stack ['$r146.0', '$a148.1']
2024-09-04 18:31:54,328 - dispatch pc=152, inst=STORE_FAST(arg=2, lineno=239)
2024-09-04 18:31:54,328 - stack ['$150inplace_multiply.2']
2024-09-04 18:31:54,329 - end state. edges=[Edge(pc=154, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:54,329 - pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=182 nstack_initial=0), State(pc_initial=190 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
2024-09-04 18:31:54,329 - stack: []
2024-09-04 18:31:54,329 - state.pc_initial: State(pc_initial=154 nstack_initial=0)
2024-09-04 18:31:54,329 - dispatch pc=154, inst=LOAD_FAST(arg=4, lineno=240)
2024-09-04 18:31:54,329 - stack []
2024-09-04 18:31:54,329 - dispatch pc=156, inst=LOAD_CONST(arg=1, lineno=240)
2024-09-04 18:31:54,329 - stack ['$exp154.0']
2024-09-04 18:31:54,329 - dispatch pc=158, inst=INPLACE_RSHIFT(arg=None, lineno=240)
2024-09-04 18:31:54,329 - stack ['$exp154.0', '$const156.1']
2024-09-04 18:31:54,329 - dispatch pc=160, inst=STORE_FAST(arg=4, lineno=240)
2024-09-04 18:31:54,329 - stack ['$158inplace_rshift.2']
2024-09-04 18:31:54,329 - dispatch pc=162, inst=LOAD_FAST(arg=0, lineno=241)
2024-09-04 18:31:54,329 - stack []
2024-09-04 18:31:54,330 - dispatch pc=164, inst=LOAD_FAST(arg=0, lineno=241)
2024-09-04 18:31:54,330 - stack ['$a162.3']
2024-09-04 18:31:54,330 - dispatch pc=166, inst=INPLACE_MULTIPLY(arg=None, lineno=241)
2024-09-04 18:31:54,330 - stack ['$a162.3', '$a164.4']
2024-09-04 18:31:54,330 - dispatch pc=168, inst=STORE_FAST(arg=0, lineno=241)
2024-09-04 18:31:54,330 - stack ['$166inplace_multiply.5']
2024-09-04 18:31:54,330 - dispatch pc=170, inst=LOAD_FAST(arg=4, lineno=237)
2024-09-04 18:31:54,330 - stack []
2024-09-04 18:31:54,330 - dispatch pc=172, inst=LOAD_CONST(arg=2, lineno=237)
2024-09-04 18:31:54,330 - stack ['$exp170.6']
2024-09-04 18:31:54,330 - dispatch pc=174, inst=COMPARE_OP(arg=3, lineno=237)
2024-09-04 18:31:54,330 - stack ['$exp170.6', '$const172.7']
2024-09-04 18:31:54,330 - dispatch pc=176, inst=POP_JUMP_IF_TRUE(arg=70, lineno=237)
2024-09-04 18:31:54,330 - stack ['$174compare_op.8']
2024-09-04 18:31:54,331 - end state. edges=[Edge(pc=178, stack=(), blockstack=(), npush=0), Edge(pc=138, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:54,331 - pending: deque([State(pc_initial=182 nstack_initial=0), State(pc_initial=190 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=178 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
2024-09-04 18:31:54,331 - stack: []
2024-09-04 18:31:54,331 - state.pc_initial: State(pc_initial=182 nstack_initial=0)
2024-09-04 18:31:54,331 - dispatch pc=182, inst=LOAD_CONST(arg=8, lineno=243)
2024-09-04 18:31:54,331 - stack []
2024-09-04 18:31:54,331 - dispatch pc=184, inst=LOAD_FAST(arg=2, lineno=243)
2024-09-04 18:31:54,331 - stack ['$const182.0']
2024-09-04 18:31:54,331 - dispatch pc=186, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=243)
2024-09-04 18:31:54,331 - stack ['$const182.0', '$r184.1']
2024-09-04 18:31:54,331 - dispatch pc=188, inst=RETURN_VALUE(arg=None, lineno=243)
2024-09-04 18:31:54,331 - stack ['$186binary_true_divide.2']
2024-09-04 18:31:54,331 - end state. edges=[]
2024-09-04 18:31:54,331 - pending: deque([State(pc_initial=190 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=178 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
2024-09-04 18:31:54,331 - stack: []
2024-09-04 18:31:54,332 - state.pc_initial: State(pc_initial=190 nstack_initial=0)
2024-09-04 18:31:54,332 - dispatch pc=190, inst=LOAD_FAST(arg=2, lineno=243)
2024-09-04 18:31:54,332 - stack []
2024-09-04 18:31:54,332 - dispatch pc=192, inst=RETURN_VALUE(arg=None, lineno=243)
2024-09-04 18:31:54,332 - stack ['$r190.0']
2024-09-04 18:31:54,332 - end state. edges=[]
2024-09-04 18:31:54,332 - pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=178 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
2024-09-04 18:31:54,332 - stack: []
2024-09-04 18:31:54,332 - state.pc_initial: State(pc_initial=92 nstack_initial=0)
2024-09-04 18:31:54,332 - dispatch pc=92, inst=LOAD_CONST(arg=2, lineno=230)
2024-09-04 18:31:54,332 - stack []
2024-09-04 18:31:54,332 - dispatch pc=94, inst=RETURN_VALUE(arg=None, lineno=230)
2024-09-04 18:31:54,332 - stack ['$const92.0']
2024-09-04 18:31:54,332 - end state. edges=[]
2024-09-04 18:31:54,333 - pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=178 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
2024-09-04 18:31:54,333 - pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=178 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
2024-09-04 18:31:54,333 - pending: deque([State(pc_initial=178 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
2024-09-04 18:31:54,333 - pending: deque([State(pc_initial=138 nstack_initial=0)])
2024-09-04 18:31:54,333 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:54,333 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=146 nstack_initial=0): set(),
             State(pc_initial=154 nstack_initial=0): set(),
             State(pc_initial=178 nstack_initial=0): set(),
             State(pc_initial=182 nstack_initial=0): set(),
             State(pc_initial=190 nstack_initial=0): set()})
2024-09-04 18:31:54,333 - defmap: {}
2024-09-04 18:31:54,334 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:54,334 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:54,334 - keep phismap: {}
2024-09-04 18:31:54,334 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:54,334 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:54,334 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$const4.1'}), (6, {'func': '$2load_deref.0', 'args': ['$const4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_deref.3'}), (12, {'res': '$a12.4'}), (14, {'func': '$10load_deref.3', 'args': ['$a12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5'}), (18, {'res': '$b18.6'}), (20, {'res': '$const20.7'}), (22, {'lhs': '$b18.6', 'rhs': '$const20.7', 'res': '$22compare_op.8'}), (24, {'pred': '$22compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 98: ()})
2024-09-04 18:31:54,334 - block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$const26.0'}), (28, {'value': '$const26.0'}), (30, {'res': '$b30.1'}), (32, {'value': '$b30.1', 'res': '$32unary_negative.2'}), (34, {'value': '$32unary_negative.2'}), (36, {'res': '$exp36.3'}), (38, {'res': '$const38.4'}), (40, {'lhs': '$exp36.3', 'rhs': '$const38.4', 'res': '$40compare_op.5'}), (42, {'pred': '$40compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 48: ()})
2024-09-04 18:31:54,334 - block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'exc': '$44load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:54,334 - block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$48load_deref.0'}), (50, {'pred': '$48load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 96: ()})
2024-09-04 18:31:54,334 - block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$a52.0'}), (54, {'res': '$const54.1'}), (56, {'lhs': '$a52.0', 'rhs': '$const54.1', 'res': '$56compare_op.2'}), (58, {'pred': '$56compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 76: ()})
2024-09-04 18:31:54,335 - block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$60load_deref.0'}), (62, {'pred': '$60load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: (), 68: ()})
2024-09-04 18:31:54,335 - block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$64load_deref.0'}), (66, {'retval': '$64load_deref.0', 'castval': '$66return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:54,335 - block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$68load_global.0'}), (70, {'res': '$const70.1'}), (72, {'func': '$68load_global.0', 'args': ['$const70.1'], 'res': '$72call_function.2'}), (74, {'exc': '$72call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:54,335 - block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$a76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$a76.0', 'rhs': '$const78.1', 'res': '$80compare_op.2'}), (82, {'pred': '$80compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 96: ()})
2024-09-04 18:31:54,335 - block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$a84.0'}), (86, {'res': '$const86.1'}), (88, {'lhs': '$a84.0', 'rhs': '$const86.1', 'res': '$88compare_op.2'}), (90, {'pred': '$88compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: (), 96: ()})
2024-09-04 18:31:54,335 - block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$const92.0'}), (94, {'retval': '$const92.0', 'castval': '$94return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:54,335 - block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ()})
2024-09-04 18:31:54,335 - block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$const98.0'}), (100, {'value': '$const98.0'}), (102, {'res': '$b102.1'}), (104, {'value': '$b102.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ()})
2024-09-04 18:31:54,335 - block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$exp106.0'}), (108, {'res': '$const108.1'}), (110, {'lhs': '$exp106.0', 'rhs': '$const108.1', 'res': '$110compare_op.2'}), (112, {'pred': '$110compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: (), 130: ()})
2024-09-04 18:31:54,335 - block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$114load_global.0'}), (116, {'item': '$114load_global.0', 'res': '$116load_method.1'}), (118, {'res': '$a118.2'}), (120, {'res': '$120load_global.3'}), (122, {'res': '$b122.4'}), (124, {'func': '$120load_global.3', 'args': ['$b122.4'], 'res': '$124call_function.5'}), (126, {'func': '$116load_method.1', 'args': ['$a118.2', '$124call_function.5'], 'res': '$126call_method.6'}), (128, {'retval': '$126call_method.6', 'castval': '$128return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:54,335 - block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=((130, {'res': '$exp130.0'}), (132, {'res': '$const132.1'}), (134, {'lhs': '$exp130.0', 'rhs': '$const132.1', 'res': '$134compare_op.2'}), (136, {'pred': '$134compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: (), 178: ()})
2024-09-04 18:31:54,335 - block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$exp138.0'}), (140, {'res': '$const140.1'}), (142, {'lhs': '$exp138.0', 'rhs': '$const140.1', 'res': '$142binary_and.2'}), (144, {'pred': '$142binary_and.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={146: (), 154: ()})
2024-09-04 18:31:54,336 - block_infos State(pc_initial=146 nstack_initial=0):
AdaptBlockInfo(insts=((146, {'res': '$r146.0'}), (148, {'res': '$a148.1'}), (150, {'lhs': '$r146.0', 'rhs': '$a148.1', 'res': '$150inplace_multiply.2'}), (152, {'value': '$150inplace_multiply.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={154: ()})
2024-09-04 18:31:54,336 - block_infos State(pc_initial=154 nstack_initial=0):
AdaptBlockInfo(insts=((154, {'res': '$exp154.0'}), (156, {'res': '$const156.1'}), (158, {'lhs': '$exp154.0', 'rhs': '$const156.1', 'res': '$158inplace_rshift.2'}), (160, {'value': '$158inplace_rshift.2'}), (162, {'res': '$a162.3'}), (164, {'res': '$a164.4'}), (166, {'lhs': '$a162.3', 'rhs': '$a164.4', 'res': '$166inplace_multiply.5'}), (168, {'value': '$166inplace_multiply.5'}), (170, {'res': '$exp170.6'}), (172, {'res': '$const172.7'}), (174, {'lhs': '$exp170.6', 'rhs': '$const172.7', 'res': '$174compare_op.8'}), (176, {'pred': '$174compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={178: (), 138: ()})
2024-09-04 18:31:54,336 - block_infos State(pc_initial=178 nstack_initial=0):
AdaptBlockInfo(insts=((178, {'res': '$invert178.0'}), (180, {'pred': '$invert178.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={182: (), 190: ()})
2024-09-04 18:31:54,336 - block_infos State(pc_initial=182 nstack_initial=0):
AdaptBlockInfo(insts=((182, {'res': '$const182.0'}), (184, {'res': '$r184.1'}), (186, {'lhs': '$const182.0', 'rhs': '$r184.1', 'res': '$186binary_true_divide.2'}), (188, {'retval': '$186binary_true_divide.2', 'castval': '$188return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:54,336 - block_infos State(pc_initial=190 nstack_initial=0):
AdaptBlockInfo(insts=((190, {'res': '$r190.0'}), (192, {'retval': '$r190.0', 'castval': '$192return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:54,343 - label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $2load_deref.0 = freevar(tp: float32)    ['$2load_deref.0']
    $const4.1 = const(int, 1)                ['$const4.1']
    r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_deref.0', '$const4.1', 'r']
    $10load_deref.3 = freevar(tp: float32)   ['$10load_deref.3']
    a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_deref.3', 'a', 'a.1']
    $const20.7 = const(int, 0)               ['$const20.7']
    $22compare_op.8 = b < $const20.7         ['$22compare_op.8', '$const20.7', 'b']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None) ['$22compare_op.8', '$24pred', 'bool24']
    branch $24pred, 26, 98                   ['$24pred']
label 26:
    invert = const(bool, True)               ['invert']
    exp = unary(fn=<built-in function neg>, value=b) ['b', 'exp']
    $const38.4 = const(int, 0)               ['$const38.4']
    $40compare_op.5 = exp < $const38.4       ['$40compare_op.5', '$const38.4', 'exp']
    bool42 = global(bool: <class 'bool'>)    ['bool42']
    $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None) ['$40compare_op.5', '$42pred', 'bool42']
    branch $42pred, 44, 48                   ['$42pred']
label 44:
    $44load_global.0 = global(OverflowError: <class 'OverflowError'>) ['$44load_global.0']
    raise $44load_global.0                   ['$44load_global.0']
label 48:
    $48load_deref.0 = freevar(is_integer: False) ['$48load_deref.0']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None) ['$48load_deref.0', '$50pred', 'bool50']
    branch $50pred, 52, 96                   ['$50pred']
label 52:
    $const54.1 = const(int, 0)               ['$const54.1']
    $56compare_op.2 = a.1 == $const54.1      ['$56compare_op.2', '$const54.1', 'a.1']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:224),), kws=(), vararg=None, varkwarg=None, target=None) ['$56compare_op.2', '$58pred', 'bool58']
    branch $58pred, 60, 76                   ['$58pred']
label 60:
    $60load_deref.0 = freevar(zerodiv_return: False) ['$60load_deref.0']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:225),), kws=(), vararg=None, varkwarg=None, target=None) ['$60load_deref.0', '$62pred', 'bool62']
    branch $62pred, 64, 68                   ['$62pred']
label 64:
    $64load_deref.0 = freevar(zerodiv_return: False) ['$64load_deref.0']
    $66return_value.1 = cast(value=$64load_deref.0) ['$64load_deref.0', '$66return_value.1']
    return $66return_value.1                 ['$66return_value.1']
label 68:
    $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$68load_global.0']
    $const70.1 = const(str, 0 cannot be raised to a negative power) ['$const70.1']
    $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:228)], kws=(), vararg=None, varkwarg=None, target=None) ['$68load_global.0', '$72call_function.2', '$const70.1']
    raise $72call_function.2                 ['$72call_function.2']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80compare_op.2 = a.1 != $const78.1      ['$80compare_op.2', '$const78.1', 'a.1']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$80compare_op.2', '$82pred', 'bool82']
    branch $82pred, 84, 96                   ['$82pred']
label 84:
    $const86.1 = const(int, -1)              ['$const86.1']
    $88compare_op.2 = a.1 != $const86.1      ['$88compare_op.2', '$const86.1', 'a.1']
    bool90 = global(bool: <class 'bool'>)    ['bool90']
    $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$88compare_op.2', '$90pred', 'bool90']
    branch $90pred, 92, 96                   ['$90pred']
label 92:
    $const92.0 = const(int, 0)               ['$const92.0']
    $94return_value.1 = cast(value=$const92.0) ['$94return_value.1', '$const92.0']
    return $94return_value.1                 ['$94return_value.1']
label 96:
    jump 106                                 []
label 98:
    invert = const(bool, False)              ['invert']
    exp = b                                  ['b', 'exp']
    jump 106                                 []
label 106:
    $const108.1 = const(int, 65536)          ['$const108.1']
    $110compare_op.2 = exp > $const108.1     ['$110compare_op.2', '$const108.1', 'exp']
    bool112 = global(bool: <class 'bool'>)   ['bool112']
    $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None) ['$110compare_op.2', '$112pred', 'bool112']
    branch $112pred, 114, 130                ['$112pred']
label 114:
    $114load_global.0 = global(math: <module 'math' (built-in)>) ['$114load_global.0']
    $116load_method.1 = getattr(value=$114load_global.0, attr=pow) ['$114load_global.0', '$116load_method.1']
    $120load_global.3 = global(float: <class 'float'>) ['$120load_global.3']
    $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None) ['$120load_global.3', '$124call_function.5', 'b']
    $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None) ['$116load_method.1', '$124call_function.5', '$126call_method.6', 'a.1']
    $128return_value.7 = cast(value=$126call_method.6) ['$126call_method.6', '$128return_value.7']
    return $128return_value.7                ['$128return_value.7']
label 130:
    $const132.1 = const(int, 0)              ['$const132.1']
    $134compare_op.2 = exp != $const132.1    ['$134compare_op.2', '$const132.1', 'exp']
    bool136 = global(bool: <class 'bool'>)   ['bool136']
    $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None) ['$134compare_op.2', '$136pred', 'bool136']
    branch $136pred, 138, 178                ['$136pred']
label 138:
    $const140.1 = const(int, 1)              ['$const140.1']
    $142binary_and.2 = exp & $const140.1     ['$142binary_and.2', '$const140.1', 'exp']
    bool144 = global(bool: <class 'bool'>)   ['bool144']
    $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None) ['$142binary_and.2', '$144pred', 'bool144']
    branch $144pred, 146, 154                ['$144pred']
label 146:
    $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$150inplace_multiply.2', 'a.1', 'r']
    r = $150inplace_multiply.2               ['$150inplace_multiply.2', 'r']
    jump 154                                 []
label 154:
    $const156.1 = const(int, 1)              ['$const156.1']
    $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined) ['$158inplace_rshift.2', '$const156.1', 'exp']
    exp = $158inplace_rshift.2               ['$158inplace_rshift.2', 'exp']
    $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$166inplace_multiply.5', 'a.1', 'a.1']
    a.1 = $166inplace_multiply.5             ['$166inplace_multiply.5', 'a.1']
    $const172.7 = const(int, 0)              ['$const172.7']
    $174compare_op.8 = exp != $const172.7    ['$174compare_op.8', '$const172.7', 'exp']
    bool176 = global(bool: <class 'bool'>)   ['bool176']
    $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None) ['$174compare_op.8', '$176pred', 'bool176']
    branch $176pred, 138, 178                ['$176pred']
label 178:
    bool180 = global(bool: <class 'bool'>)   ['bool180']
    $180pred = call bool180(invert, func=bool180, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None) ['$180pred', 'bool180', 'invert']
    branch $180pred, 182, 190                ['$180pred']
label 182:
    $const182.0 = const(float, 1.0)          ['$const182.0']
    $186binary_true_divide.2 = $const182.0 / r ['$186binary_true_divide.2', '$const182.0', 'r']
    $188return_value.3 = cast(value=$186binary_true_divide.2) ['$186binary_true_divide.2', '$188return_value.3']
    return $188return_value.3                ['$188return_value.3']
label 190:
    $192return_value.1 = cast(value=r)       ['$192return_value.1', 'r']
    return $192return_value.1                ['$192return_value.1']

2024-09-04 18:31:54,370 - ==== SSA block analysis pass on 0
2024-09-04 18:31:54,371 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243132F21D0>
2024-09-04 18:31:54,371 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:54,371 - on stmt: b = arg(1, name=b)
2024-09-04 18:31:54,371 - on stmt: $2load_deref.0 = freevar(tp: float32)
2024-09-04 18:31:54,371 - on stmt: $const4.1 = const(int, 1)
2024-09-04 18:31:54,371 - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,371 - on stmt: $10load_deref.3 = freevar(tp: float32)
2024-09-04 18:31:54,371 - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,371 - on stmt: $const20.7 = const(int, 0)
2024-09-04 18:31:54,371 - on stmt: $22compare_op.8 = b < $const20.7
2024-09-04 18:31:54,371 - on stmt: bool24 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,372 - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,372 - on stmt: branch $24pred, 26, 98
2024-09-04 18:31:54,372 - ==== SSA block analysis pass on 26
2024-09-04 18:31:54,372 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243132F21D0>
2024-09-04 18:31:54,372 - on stmt: invert = const(bool, True)
2024-09-04 18:31:54,372 - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2024-09-04 18:31:54,372 - on stmt: $const38.4 = const(int, 0)
2024-09-04 18:31:54,372 - on stmt: $40compare_op.5 = exp < $const38.4
2024-09-04 18:31:54,372 - on stmt: bool42 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,372 - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,373 - on stmt: branch $42pred, 44, 48
2024-09-04 18:31:54,373 - ==== SSA block analysis pass on 44
2024-09-04 18:31:54,373 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243132F21D0>
2024-09-04 18:31:54,373 - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2024-09-04 18:31:54,373 - on stmt: <static> raise <class 'OverflowError'>
2024-09-04 18:31:54,373 - ==== SSA block analysis pass on 48
2024-09-04 18:31:54,373 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243132F21D0>
2024-09-04 18:31:54,373 - on stmt: $48load_deref.0 = freevar(is_integer: False)
2024-09-04 18:31:54,373 - on stmt: bool50 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,373 - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,373 - on stmt: jump 96
2024-09-04 18:31:54,374 - ==== SSA block analysis pass on 96
2024-09-04 18:31:54,374 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243132F21D0>
2024-09-04 18:31:54,374 - on stmt: jump 106
2024-09-04 18:31:54,374 - ==== SSA block analysis pass on 98
2024-09-04 18:31:54,374 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243132F21D0>
2024-09-04 18:31:54,374 - on stmt: invert = const(bool, False)
2024-09-04 18:31:54,374 - on stmt: exp = b
2024-09-04 18:31:54,374 - on stmt: jump 106
2024-09-04 18:31:54,374 - ==== SSA block analysis pass on 106
2024-09-04 18:31:54,374 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243132F21D0>
2024-09-04 18:31:54,374 - on stmt: $const108.1 = const(int, 65536)
2024-09-04 18:31:54,374 - on stmt: $110compare_op.2 = exp > $const108.1
2024-09-04 18:31:54,374 - on stmt: bool112 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,374 - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,374 - on stmt: branch $112pred, 114, 130
2024-09-04 18:31:54,375 - ==== SSA block analysis pass on 114
2024-09-04 18:31:54,375 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243132F21D0>
2024-09-04 18:31:54,375 - on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2024-09-04 18:31:54,375 - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2024-09-04 18:31:54,375 - on stmt: $120load_global.3 = global(float: <class 'float'>)
2024-09-04 18:31:54,375 - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,375 - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,375 - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2024-09-04 18:31:54,375 - on stmt: return $128return_value.7
2024-09-04 18:31:54,375 - ==== SSA block analysis pass on 130
2024-09-04 18:31:54,375 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243132F21D0>
2024-09-04 18:31:54,375 - on stmt: $const132.1 = const(int, 0)
2024-09-04 18:31:54,375 - on stmt: $134compare_op.2 = exp != $const132.1
2024-09-04 18:31:54,376 - on stmt: bool136 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,376 - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,376 - on stmt: branch $136pred, 138, 178
2024-09-04 18:31:54,376 - ==== SSA block analysis pass on 138
2024-09-04 18:31:54,376 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243132F21D0>
2024-09-04 18:31:54,376 - on stmt: $const140.1 = const(int, 1)
2024-09-04 18:31:54,376 - on stmt: $142binary_and.2 = exp & $const140.1
2024-09-04 18:31:54,376 - on stmt: bool144 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,376 - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,376 - on stmt: branch $144pred, 146, 154
2024-09-04 18:31:54,376 - ==== SSA block analysis pass on 146
2024-09-04 18:31:54,376 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243132F21D0>
2024-09-04 18:31:54,376 - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,377 - on stmt: r = $150inplace_multiply.2
2024-09-04 18:31:54,377 - on stmt: jump 154
2024-09-04 18:31:54,377 - ==== SSA block analysis pass on 154
2024-09-04 18:31:54,377 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243132F21D0>
2024-09-04 18:31:54,377 - on stmt: $const156.1 = const(int, 1)
2024-09-04 18:31:54,377 - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,377 - on stmt: exp = $158inplace_rshift.2
2024-09-04 18:31:54,377 - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,377 - on stmt: a.1 = $166inplace_multiply.5
2024-09-04 18:31:54,377 - on stmt: $const172.7 = const(int, 0)
2024-09-04 18:31:54,377 - on stmt: $174compare_op.8 = exp != $const172.7
2024-09-04 18:31:54,377 - on stmt: bool176 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,377 - on stmt: $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,378 - on stmt: branch $176pred, 138, 178
2024-09-04 18:31:54,378 - ==== SSA block analysis pass on 178
2024-09-04 18:31:54,378 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243132F21D0>
2024-09-04 18:31:54,378 - on stmt: bool180 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,378 - on stmt: $180pred = call bool180(invert, func=bool180, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,378 - on stmt: branch $180pred, 182, 190
2024-09-04 18:31:54,378 - ==== SSA block analysis pass on 182
2024-09-04 18:31:54,378 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243132F21D0>
2024-09-04 18:31:54,378 - on stmt: $const182.0 = const(float, 1.0)
2024-09-04 18:31:54,378 - on stmt: $186binary_true_divide.2 = $const182.0 / r
2024-09-04 18:31:54,378 - on stmt: $188return_value.3 = cast(value=$186binary_true_divide.2)
2024-09-04 18:31:54,379 - on stmt: return $188return_value.3
2024-09-04 18:31:54,379 - ==== SSA block analysis pass on 190
2024-09-04 18:31:54,379 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243132F21D0>
2024-09-04 18:31:54,379 - on stmt: $192return_value.1 = cast(value=r)
2024-09-04 18:31:54,379 - on stmt: return $192return_value.1
2024-09-04 18:31:54,382 - defs defaultdict(<class 'list'>,
            {'$10load_deref.3': [(<numba.core.ir.Assign object at 0x0000024313A0E410>,
                                  0)],
             '$110compare_op.2': [(<numba.core.ir.Assign object at 0x000002431358AC80>,
                                   106)],
             '$112pred': [(<numba.core.ir.Assign object at 0x000002431358ABC0>,
                           106)],
             '$114load_global.0': [(<numba.core.ir.Assign object at 0x0000024313499F00>,
                                    114)],
             '$116load_method.1': [(<numba.core.ir.Assign object at 0x000002431349B730>,
                                    114)],
             '$120load_global.3': [(<numba.core.ir.Assign object at 0x00000243134983D0>,
                                    114)],
             '$124call_function.5': [(<numba.core.ir.Assign object at 0x0000024313498820>,
                                      114)],
             '$126call_method.6': [(<numba.core.ir.Assign object at 0x0000024313498520>,
                                    114)],
             '$128return_value.7': [(<numba.core.ir.Assign object at 0x0000024313498AC0>,
                                     114)],
             '$134compare_op.2': [(<numba.core.ir.Assign object at 0x000002431349B0D0>,
                                   130)],
             '$136pred': [(<numba.core.ir.Assign object at 0x000002431349B130>,
                           130)],
             '$142binary_and.2': [(<numba.core.ir.Assign object at 0x0000024313499A50>,
                                   138)],
             '$144pred': [(<numba.core.ir.Assign object at 0x000002431349AB00>,
                           138)],
             '$150inplace_multiply.2': [(<numba.core.ir.Assign object at 0x0000024313499E10>,
                                         146)],
             '$158inplace_rshift.2': [(<numba.core.ir.Assign object at 0x00000243134994E0>,
                                       154)],
             '$166inplace_multiply.5': [(<numba.core.ir.Assign object at 0x000002431349AA40>,
                                         154)],
             '$174compare_op.8': [(<numba.core.ir.Assign object at 0x000002431349A6B0>,
                                   154)],
             '$176pred': [(<numba.core.ir.Assign object at 0x0000024313499B70>,
                           154)],
             '$180pred': [(<numba.core.ir.Assign object at 0x000002431349B940>,
                           178)],
             '$186binary_true_divide.2': [(<numba.core.ir.Assign object at 0x0000024313655840>,
                                           182)],
             '$188return_value.3': [(<numba.core.ir.Assign object at 0x0000024313656500>,
                                     182)],
             '$192return_value.1': [(<numba.core.ir.Assign object at 0x0000024313654160>,
                                     190)],
             '$22compare_op.8': [(<numba.core.ir.Assign object at 0x000002431350EF20>,
                                  0)],
             '$24pred': [(<numba.core.ir.Assign object at 0x0000024313A0D600>,
                          0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x0000024313A0DFC0>,
                                 0)],
             '$40compare_op.5': [(<numba.core.ir.Assign object at 0x00000243135BF580>,
                                  26)],
             '$42pred': [(<numba.core.ir.Assign object at 0x00000243135BED40>,
                          26)],
             '$44load_global.0': [(<numba.core.ir.Assign object at 0x00000243135BE3E0>,
                                   44)],
             '$48load_deref.0': [(<numba.core.ir.Assign object at 0x00000243135BF640>,
                                  48)],
             '$50pred': [(<numba.core.ir.Assign object at 0x00000243135BE500>,
                          48)],
             '$const108.1': [(<numba.core.ir.Assign object at 0x000002431358A320>,
                              106)],
             '$const132.1': [(<numba.core.ir.Assign object at 0x000002431349BEB0>,
                              130)],
             '$const140.1': [(<numba.core.ir.Assign object at 0x000002431349B100>,
                              138)],
             '$const156.1': [(<numba.core.ir.Assign object at 0x0000024313498940>,
                              154)],
             '$const172.7': [(<numba.core.ir.Assign object at 0x0000024313499630>,
                              154)],
             '$const182.0': [(<numba.core.ir.Assign object at 0x00000243134990C0>,
                              182)],
             '$const20.7': [(<numba.core.ir.Assign object at 0x000002431350FA30>,
                             0)],
             '$const38.4': [(<numba.core.ir.Assign object at 0x00000243135BFDF0>,
                             26)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x0000024313A0F970>,
                            0)],
             'a': [(<numba.core.ir.Assign object at 0x0000024313A0DDB0>, 0)],
             'a.1': [(<numba.core.ir.Assign object at 0x000002431350C9D0>, 0),
                     (<numba.core.ir.Assign object at 0x0000024313499B10>,
                      154)],
             'b': [(<numba.core.ir.Assign object at 0x0000024313A0DDE0>, 0)],
             'bool112': [(<numba.core.ir.Assign object at 0x000002431358A530>,
                          106)],
             'bool136': [(<numba.core.ir.Assign object at 0x0000024313499960>,
                          130)],
             'bool144': [(<numba.core.ir.Assign object at 0x000002431349AC20>,
                          138)],
             'bool176': [(<numba.core.ir.Assign object at 0x0000024313499BA0>,
                          154)],
             'bool180': [(<numba.core.ir.Assign object at 0x00000243134989D0>,
                          178)],
             'bool24': [(<numba.core.ir.Assign object at 0x0000024313A0C730>,
                         0)],
             'bool42': [(<numba.core.ir.Assign object at 0x00000243135BF010>,
                         26)],
             'bool50': [(<numba.core.ir.Assign object at 0x00000243135BCA00>,
                         48)],
             'exp': [(<numba.core.ir.Assign object at 0x00000243139F3910>, 26),
                     (<numba.core.ir.Assign object at 0x000002431358BFD0>, 98),
                     (<numba.core.ir.Assign object at 0x000002431349B220>,
                      154)],
             'invert': [(<numba.core.ir.Assign object at 0x0000024313A0F7C0>,
                         26),
                        (<numba.core.ir.Assign object at 0x000002431358BC40>,
                         98)],
             'r': [(<numba.core.ir.Assign object at 0x0000024313A0E800>, 0),
                   (<numba.core.ir.Assign object at 0x0000024313499510>, 146)]})
2024-09-04 18:31:54,382 - SSA violators <numba.core.utils.OrderedSet object at 0x00000243132F21D0>
2024-09-04 18:31:54,382 - Fix SSA violator on var r
2024-09-04 18:31:54,382 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:54,382 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A23520>
2024-09-04 18:31:54,382 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:54,382 - on stmt: b = arg(1, name=b)
2024-09-04 18:31:54,382 - on stmt: $2load_deref.0 = freevar(tp: float32)
2024-09-04 18:31:54,382 - on stmt: $const4.1 = const(int, 1)
2024-09-04 18:31:54,383 - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,383 - first assign: r
2024-09-04 18:31:54,383 - replaced with: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,383 - on stmt: $10load_deref.3 = freevar(tp: float32)
2024-09-04 18:31:54,383 - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,383 - on stmt: $const20.7 = const(int, 0)
2024-09-04 18:31:54,383 - on stmt: $22compare_op.8 = b < $const20.7
2024-09-04 18:31:54,383 - on stmt: bool24 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,383 - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,383 - on stmt: branch $24pred, 26, 98
2024-09-04 18:31:54,383 - ==== SSA block rewrite pass on 26
2024-09-04 18:31:54,383 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A23520>
2024-09-04 18:31:54,383 - on stmt: invert = const(bool, True)
2024-09-04 18:31:54,383 - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2024-09-04 18:31:54,384 - on stmt: $const38.4 = const(int, 0)
2024-09-04 18:31:54,384 - on stmt: $40compare_op.5 = exp < $const38.4
2024-09-04 18:31:54,384 - on stmt: bool42 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,384 - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,384 - on stmt: branch $42pred, 44, 48
2024-09-04 18:31:54,384 - ==== SSA block rewrite pass on 44
2024-09-04 18:31:54,384 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A23520>
2024-09-04 18:31:54,384 - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2024-09-04 18:31:54,384 - on stmt: <static> raise <class 'OverflowError'>
2024-09-04 18:31:54,384 - ==== SSA block rewrite pass on 48
2024-09-04 18:31:54,384 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A23520>
2024-09-04 18:31:54,384 - on stmt: $48load_deref.0 = freevar(is_integer: False)
2024-09-04 18:31:54,384 - on stmt: bool50 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,384 - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,385 - on stmt: jump 96
2024-09-04 18:31:54,385 - ==== SSA block rewrite pass on 96
2024-09-04 18:31:54,385 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A23520>
2024-09-04 18:31:54,385 - on stmt: jump 106
2024-09-04 18:31:54,385 - ==== SSA block rewrite pass on 98
2024-09-04 18:31:54,385 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A23520>
2024-09-04 18:31:54,385 - on stmt: invert = const(bool, False)
2024-09-04 18:31:54,385 - on stmt: exp = b
2024-09-04 18:31:54,385 - on stmt: jump 106
2024-09-04 18:31:54,385 - ==== SSA block rewrite pass on 106
2024-09-04 18:31:54,385 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A23520>
2024-09-04 18:31:54,385 - on stmt: $const108.1 = const(int, 65536)
2024-09-04 18:31:54,385 - on stmt: $110compare_op.2 = exp > $const108.1
2024-09-04 18:31:54,385 - on stmt: bool112 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,385 - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,386 - on stmt: branch $112pred, 114, 130
2024-09-04 18:31:54,386 - ==== SSA block rewrite pass on 114
2024-09-04 18:31:54,386 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A23520>
2024-09-04 18:31:54,386 - on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2024-09-04 18:31:54,386 - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2024-09-04 18:31:54,386 - on stmt: $120load_global.3 = global(float: <class 'float'>)
2024-09-04 18:31:54,386 - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,386 - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,386 - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2024-09-04 18:31:54,386 - on stmt: return $128return_value.7
2024-09-04 18:31:54,386 - ==== SSA block rewrite pass on 130
2024-09-04 18:31:54,386 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A23520>
2024-09-04 18:31:54,387 - on stmt: $const132.1 = const(int, 0)
2024-09-04 18:31:54,387 - on stmt: $134compare_op.2 = exp != $const132.1
2024-09-04 18:31:54,387 - on stmt: bool136 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,387 - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,387 - on stmt: branch $136pred, 138, 178
2024-09-04 18:31:54,387 - ==== SSA block rewrite pass on 138
2024-09-04 18:31:54,387 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A23520>
2024-09-04 18:31:54,387 - on stmt: $const140.1 = const(int, 1)
2024-09-04 18:31:54,387 - on stmt: $142binary_and.2 = exp & $const140.1
2024-09-04 18:31:54,387 - on stmt: bool144 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,387 - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,387 - on stmt: branch $144pred, 146, 154
2024-09-04 18:31:54,387 - ==== SSA block rewrite pass on 146
2024-09-04 18:31:54,387 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A23520>
2024-09-04 18:31:54,388 - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,388 - on stmt: r = $150inplace_multiply.2
2024-09-04 18:31:54,388 - replaced with: r.1 = $150inplace_multiply.2
2024-09-04 18:31:54,388 - on stmt: jump 154
2024-09-04 18:31:54,388 - ==== SSA block rewrite pass on 154
2024-09-04 18:31:54,388 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A23520>
2024-09-04 18:31:54,388 - on stmt: $const156.1 = const(int, 1)
2024-09-04 18:31:54,388 - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,388 - on stmt: exp = $158inplace_rshift.2
2024-09-04 18:31:54,388 - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,388 - on stmt: a.1 = $166inplace_multiply.5
2024-09-04 18:31:54,388 - on stmt: $const172.7 = const(int, 0)
2024-09-04 18:31:54,388 - on stmt: $174compare_op.8 = exp != $const172.7
2024-09-04 18:31:54,388 - on stmt: bool176 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,389 - on stmt: $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,389 - on stmt: branch $176pred, 138, 178
2024-09-04 18:31:54,389 - ==== SSA block rewrite pass on 178
2024-09-04 18:31:54,389 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A23520>
2024-09-04 18:31:54,389 - on stmt: bool180 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,389 - on stmt: $180pred = call bool180(invert, func=bool180, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,389 - on stmt: branch $180pred, 182, 190
2024-09-04 18:31:54,389 - ==== SSA block rewrite pass on 182
2024-09-04 18:31:54,389 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A23520>
2024-09-04 18:31:54,389 - on stmt: $const182.0 = const(float, 1.0)
2024-09-04 18:31:54,389 - on stmt: $186binary_true_divide.2 = $const182.0 / r
2024-09-04 18:31:54,389 - on stmt: $188return_value.3 = cast(value=$186binary_true_divide.2)
2024-09-04 18:31:54,389 - on stmt: return $188return_value.3
2024-09-04 18:31:54,389 - ==== SSA block rewrite pass on 190
2024-09-04 18:31:54,390 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A23520>
2024-09-04 18:31:54,390 - on stmt: $192return_value.1 = cast(value=r)
2024-09-04 18:31:54,390 - on stmt: return $192return_value.1
2024-09-04 18:31:54,390 - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x00000243139F3940>],
             146: [<numba.core.ir.Assign object at 0x0000024313657190>]})
2024-09-04 18:31:54,390 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:54,390 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A23520>
2024-09-04 18:31:54,390 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:54,390 - on stmt: b = arg(1, name=b)
2024-09-04 18:31:54,390 - on stmt: $2load_deref.0 = freevar(tp: float32)
2024-09-04 18:31:54,390 - on stmt: $const4.1 = const(int, 1)
2024-09-04 18:31:54,390 - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,390 - on stmt: $10load_deref.3 = freevar(tp: float32)
2024-09-04 18:31:54,390 - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,391 - on stmt: $const20.7 = const(int, 0)
2024-09-04 18:31:54,391 - on stmt: $22compare_op.8 = b < $const20.7
2024-09-04 18:31:54,391 - on stmt: bool24 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,391 - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,391 - on stmt: branch $24pred, 26, 98
2024-09-04 18:31:54,391 - ==== SSA block rewrite pass on 26
2024-09-04 18:31:54,391 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A23520>
2024-09-04 18:31:54,391 - on stmt: invert = const(bool, True)
2024-09-04 18:31:54,391 - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2024-09-04 18:31:54,391 - on stmt: $const38.4 = const(int, 0)
2024-09-04 18:31:54,391 - on stmt: $40compare_op.5 = exp < $const38.4
2024-09-04 18:31:54,391 - on stmt: bool42 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,391 - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,392 - on stmt: branch $42pred, 44, 48
2024-09-04 18:31:54,392 - ==== SSA block rewrite pass on 44
2024-09-04 18:31:54,392 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A23520>
2024-09-04 18:31:54,392 - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2024-09-04 18:31:54,392 - on stmt: <static> raise <class 'OverflowError'>
2024-09-04 18:31:54,392 - ==== SSA block rewrite pass on 48
2024-09-04 18:31:54,392 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A23520>
2024-09-04 18:31:54,392 - on stmt: $48load_deref.0 = freevar(is_integer: False)
2024-09-04 18:31:54,392 - on stmt: bool50 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,392 - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,392 - on stmt: jump 96
2024-09-04 18:31:54,392 - ==== SSA block rewrite pass on 96
2024-09-04 18:31:54,392 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A23520>
2024-09-04 18:31:54,393 - on stmt: jump 106
2024-09-04 18:31:54,393 - ==== SSA block rewrite pass on 98
2024-09-04 18:31:54,393 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A23520>
2024-09-04 18:31:54,393 - on stmt: invert = const(bool, False)
2024-09-04 18:31:54,393 - on stmt: exp = b
2024-09-04 18:31:54,393 - on stmt: jump 106
2024-09-04 18:31:54,393 - ==== SSA block rewrite pass on 106
2024-09-04 18:31:54,393 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A23520>
2024-09-04 18:31:54,393 - on stmt: $const108.1 = const(int, 65536)
2024-09-04 18:31:54,393 - on stmt: $110compare_op.2 = exp > $const108.1
2024-09-04 18:31:54,393 - on stmt: bool112 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,393 - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,393 - on stmt: branch $112pred, 114, 130
2024-09-04 18:31:54,393 - ==== SSA block rewrite pass on 114
2024-09-04 18:31:54,393 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A23520>
2024-09-04 18:31:54,394 - on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2024-09-04 18:31:54,394 - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2024-09-04 18:31:54,394 - on stmt: $120load_global.3 = global(float: <class 'float'>)
2024-09-04 18:31:54,394 - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,394 - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,394 - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2024-09-04 18:31:54,394 - on stmt: return $128return_value.7
2024-09-04 18:31:54,394 - ==== SSA block rewrite pass on 130
2024-09-04 18:31:54,394 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A23520>
2024-09-04 18:31:54,394 - on stmt: $const132.1 = const(int, 0)
2024-09-04 18:31:54,394 - on stmt: $134compare_op.2 = exp != $const132.1
2024-09-04 18:31:54,394 - on stmt: bool136 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,395 - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,395 - on stmt: branch $136pred, 138, 178
2024-09-04 18:31:54,395 - ==== SSA block rewrite pass on 138
2024-09-04 18:31:54,395 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A23520>
2024-09-04 18:31:54,395 - on stmt: $const140.1 = const(int, 1)
2024-09-04 18:31:54,395 - on stmt: $142binary_and.2 = exp & $const140.1
2024-09-04 18:31:54,395 - on stmt: bool144 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,395 - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,395 - on stmt: branch $144pred, 146, 154
2024-09-04 18:31:54,395 - ==== SSA block rewrite pass on 146
2024-09-04 18:31:54,395 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A23520>
2024-09-04 18:31:54,395 - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,395 - find_def var='r' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,396 - find_def_from_top label 146
2024-09-04 18:31:54,396 - idom 138 from label 146
2024-09-04 18:31:54,396 - find_def_from_bottom label 138
2024-09-04 18:31:54,396 - find_def_from_top label 138
2024-09-04 18:31:54,396 - insert phi node r.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
2024-09-04 18:31:54,396 - find_def_from_bottom label 130
2024-09-04 18:31:54,396 - find_def_from_top label 130
2024-09-04 18:31:54,396 - idom 106 from label 130
2024-09-04 18:31:54,396 - find_def_from_bottom label 106
2024-09-04 18:31:54,396 - find_def_from_top label 106
2024-09-04 18:31:54,396 - idom 0 from label 106
2024-09-04 18:31:54,396 - find_def_from_bottom label 0
2024-09-04 18:31:54,396 - incoming_def r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,396 - find_def_from_bottom label 154
2024-09-04 18:31:54,396 - find_def_from_top label 154
2024-09-04 18:31:54,396 - insert phi node r.3 = phi(incoming_values=[], incoming_blocks=[]) at 154
2024-09-04 18:31:54,397 - find_def_from_bottom label 138
2024-09-04 18:31:54,397 - incoming_def r.2 = phi(incoming_values=[Var(r, numbers.py:216)], incoming_blocks=[130])
2024-09-04 18:31:54,397 - find_def_from_bottom label 146
2024-09-04 18:31:54,397 - incoming_def r.1 = $150inplace_multiply.2
2024-09-04 18:31:54,397 - incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2024-09-04 18:31:54,397 - replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,397 - on stmt: r.1 = $150inplace_multiply.2
2024-09-04 18:31:54,397 - on stmt: jump 154
2024-09-04 18:31:54,397 - ==== SSA block rewrite pass on 154
2024-09-04 18:31:54,397 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A23520>
2024-09-04 18:31:54,397 - on stmt: $const156.1 = const(int, 1)
2024-09-04 18:31:54,397 - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,397 - on stmt: exp = $158inplace_rshift.2
2024-09-04 18:31:54,397 - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,398 - on stmt: a.1 = $166inplace_multiply.5
2024-09-04 18:31:54,398 - on stmt: $const172.7 = const(int, 0)
2024-09-04 18:31:54,398 - on stmt: $174compare_op.8 = exp != $const172.7
2024-09-04 18:31:54,398 - on stmt: bool176 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,398 - on stmt: $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,398 - on stmt: branch $176pred, 138, 178
2024-09-04 18:31:54,398 - ==== SSA block rewrite pass on 178
2024-09-04 18:31:54,398 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A23520>
2024-09-04 18:31:54,398 - on stmt: bool180 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,398 - on stmt: $180pred = call bool180(invert, func=bool180, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,398 - on stmt: branch $180pred, 182, 190
2024-09-04 18:31:54,398 - ==== SSA block rewrite pass on 182
2024-09-04 18:31:54,398 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A23520>
2024-09-04 18:31:54,398 - on stmt: $const182.0 = const(float, 1.0)
2024-09-04 18:31:54,399 - on stmt: $186binary_true_divide.2 = $const182.0 / r
2024-09-04 18:31:54,399 - find_def var='r' stmt=$186binary_true_divide.2 = $const182.0 / r
2024-09-04 18:31:54,399 - find_def_from_top label 182
2024-09-04 18:31:54,399 - idom 178 from label 182
2024-09-04 18:31:54,399 - find_def_from_bottom label 178
2024-09-04 18:31:54,399 - find_def_from_top label 178
2024-09-04 18:31:54,399 - insert phi node r.4 = phi(incoming_values=[], incoming_blocks=[]) at 178
2024-09-04 18:31:54,399 - find_def_from_bottom label 130
2024-09-04 18:31:54,399 - find_def_from_top label 130
2024-09-04 18:31:54,399 - idom 106 from label 130
2024-09-04 18:31:54,399 - find_def_from_bottom label 106
2024-09-04 18:31:54,399 - find_def_from_top label 106
2024-09-04 18:31:54,399 - idom 0 from label 106
2024-09-04 18:31:54,399 - find_def_from_bottom label 0
2024-09-04 18:31:54,399 - incoming_def r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,400 - find_def_from_bottom label 154
2024-09-04 18:31:54,400 - incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2024-09-04 18:31:54,400 - replaced with: $186binary_true_divide.2 = $const182.0 / r.4
2024-09-04 18:31:54,400 - on stmt: $188return_value.3 = cast(value=$186binary_true_divide.2)
2024-09-04 18:31:54,400 - on stmt: return $188return_value.3
2024-09-04 18:31:54,400 - ==== SSA block rewrite pass on 190
2024-09-04 18:31:54,400 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A23520>
2024-09-04 18:31:54,400 - on stmt: $192return_value.1 = cast(value=r)
2024-09-04 18:31:54,400 - find_def var='r' stmt=$192return_value.1 = cast(value=r)
2024-09-04 18:31:54,400 - find_def_from_top label 190
2024-09-04 18:31:54,400 - idom 178 from label 190
2024-09-04 18:31:54,400 - find_def_from_bottom label 178
2024-09-04 18:31:54,400 - replaced with: $192return_value.1 = cast(value=r.4)
2024-09-04 18:31:54,401 - on stmt: return $192return_value.1
2024-09-04 18:31:54,401 - Fix SSA violator on var a.1
2024-09-04 18:31:54,401 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:54,401 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243139F3520>
2024-09-04 18:31:54,401 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:54,401 - on stmt: b = arg(1, name=b)
2024-09-04 18:31:54,401 - on stmt: $2load_deref.0 = freevar(tp: float32)
2024-09-04 18:31:54,401 - on stmt: $const4.1 = const(int, 1)
2024-09-04 18:31:54,401 - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,401 - on stmt: $10load_deref.3 = freevar(tp: float32)
2024-09-04 18:31:54,401 - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,401 - first assign: a.1
2024-09-04 18:31:54,401 - replaced with: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,401 - on stmt: $const20.7 = const(int, 0)
2024-09-04 18:31:54,402 - on stmt: $22compare_op.8 = b < $const20.7
2024-09-04 18:31:54,402 - on stmt: bool24 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,402 - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,402 - on stmt: branch $24pred, 26, 98
2024-09-04 18:31:54,402 - ==== SSA block rewrite pass on 26
2024-09-04 18:31:54,402 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243139F3520>
2024-09-04 18:31:54,402 - on stmt: invert = const(bool, True)
2024-09-04 18:31:54,402 - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2024-09-04 18:31:54,402 - on stmt: $const38.4 = const(int, 0)
2024-09-04 18:31:54,402 - on stmt: $40compare_op.5 = exp < $const38.4
2024-09-04 18:31:54,402 - on stmt: bool42 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,402 - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,402 - on stmt: branch $42pred, 44, 48
2024-09-04 18:31:54,402 - ==== SSA block rewrite pass on 44
2024-09-04 18:31:54,403 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243139F3520>
2024-09-04 18:31:54,403 - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2024-09-04 18:31:54,403 - on stmt: <static> raise <class 'OverflowError'>
2024-09-04 18:31:54,403 - ==== SSA block rewrite pass on 48
2024-09-04 18:31:54,403 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243139F3520>
2024-09-04 18:31:54,403 - on stmt: $48load_deref.0 = freevar(is_integer: False)
2024-09-04 18:31:54,403 - on stmt: bool50 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,403 - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,403 - on stmt: jump 96
2024-09-04 18:31:54,403 - ==== SSA block rewrite pass on 96
2024-09-04 18:31:54,403 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243139F3520>
2024-09-04 18:31:54,403 - on stmt: jump 106
2024-09-04 18:31:54,403 - ==== SSA block rewrite pass on 98
2024-09-04 18:31:54,403 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243139F3520>
2024-09-04 18:31:54,404 - on stmt: invert = const(bool, False)
2024-09-04 18:31:54,404 - on stmt: exp = b
2024-09-04 18:31:54,404 - on stmt: jump 106
2024-09-04 18:31:54,404 - ==== SSA block rewrite pass on 106
2024-09-04 18:31:54,404 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243139F3520>
2024-09-04 18:31:54,404 - on stmt: $const108.1 = const(int, 65536)
2024-09-04 18:31:54,404 - on stmt: $110compare_op.2 = exp > $const108.1
2024-09-04 18:31:54,404 - on stmt: bool112 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,404 - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,404 - on stmt: branch $112pred, 114, 130
2024-09-04 18:31:54,404 - ==== SSA block rewrite pass on 114
2024-09-04 18:31:54,404 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243139F3520>
2024-09-04 18:31:54,404 - on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2024-09-04 18:31:54,404 - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2024-09-04 18:31:54,405 - on stmt: $120load_global.3 = global(float: <class 'float'>)
2024-09-04 18:31:54,405 - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,405 - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,405 - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2024-09-04 18:31:54,405 - on stmt: return $128return_value.7
2024-09-04 18:31:54,405 - ==== SSA block rewrite pass on 130
2024-09-04 18:31:54,405 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243139F3520>
2024-09-04 18:31:54,405 - on stmt: $const132.1 = const(int, 0)
2024-09-04 18:31:54,405 - on stmt: $134compare_op.2 = exp != $const132.1
2024-09-04 18:31:54,405 - on stmt: bool136 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,405 - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,405 - on stmt: branch $136pred, 138, 178
2024-09-04 18:31:54,405 - ==== SSA block rewrite pass on 138
2024-09-04 18:31:54,406 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243139F3520>
2024-09-04 18:31:54,406 - on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2024-09-04 18:31:54,406 - on stmt: $const140.1 = const(int, 1)
2024-09-04 18:31:54,406 - on stmt: $142binary_and.2 = exp & $const140.1
2024-09-04 18:31:54,406 - on stmt: bool144 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,406 - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,406 - on stmt: branch $144pred, 146, 154
2024-09-04 18:31:54,406 - ==== SSA block rewrite pass on 146
2024-09-04 18:31:54,406 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243139F3520>
2024-09-04 18:31:54,406 - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,406 - on stmt: r.1 = $150inplace_multiply.2
2024-09-04 18:31:54,406 - on stmt: jump 154
2024-09-04 18:31:54,406 - ==== SSA block rewrite pass on 154
2024-09-04 18:31:54,406 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243139F3520>
2024-09-04 18:31:54,407 - on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2024-09-04 18:31:54,407 - on stmt: $const156.1 = const(int, 1)
2024-09-04 18:31:54,407 - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,407 - on stmt: exp = $158inplace_rshift.2
2024-09-04 18:31:54,407 - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,407 - on stmt: a.1 = $166inplace_multiply.5
2024-09-04 18:31:54,407 - replaced with: a.1.1 = $166inplace_multiply.5
2024-09-04 18:31:54,407 - on stmt: $const172.7 = const(int, 0)
2024-09-04 18:31:54,407 - on stmt: $174compare_op.8 = exp != $const172.7
2024-09-04 18:31:54,407 - on stmt: bool176 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,407 - on stmt: $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,407 - on stmt: branch $176pred, 138, 178
2024-09-04 18:31:54,407 - ==== SSA block rewrite pass on 178
2024-09-04 18:31:54,407 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243139F3520>
2024-09-04 18:31:54,408 - on stmt: r.4 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2024-09-04 18:31:54,408 - on stmt: bool180 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,408 - on stmt: $180pred = call bool180(invert, func=bool180, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,408 - on stmt: branch $180pred, 182, 190
2024-09-04 18:31:54,408 - ==== SSA block rewrite pass on 182
2024-09-04 18:31:54,408 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243139F3520>
2024-09-04 18:31:54,408 - on stmt: $const182.0 = const(float, 1.0)
2024-09-04 18:31:54,408 - on stmt: $186binary_true_divide.2 = $const182.0 / r.4
2024-09-04 18:31:54,408 - on stmt: $188return_value.3 = cast(value=$186binary_true_divide.2)
2024-09-04 18:31:54,408 - on stmt: return $188return_value.3
2024-09-04 18:31:54,408 - ==== SSA block rewrite pass on 190
2024-09-04 18:31:54,408 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243139F3520>
2024-09-04 18:31:54,408 - on stmt: $192return_value.1 = cast(value=r.4)
2024-09-04 18:31:54,408 - on stmt: return $192return_value.1
2024-09-04 18:31:54,409 - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x00000243139F3040>],
             154: [<numba.core.ir.Assign object at 0x0000024313656800>]})
2024-09-04 18:31:54,409 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:54,409 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A23520>
2024-09-04 18:31:54,409 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:54,409 - on stmt: b = arg(1, name=b)
2024-09-04 18:31:54,409 - on stmt: $2load_deref.0 = freevar(tp: float32)
2024-09-04 18:31:54,409 - on stmt: $const4.1 = const(int, 1)
2024-09-04 18:31:54,409 - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,409 - on stmt: $10load_deref.3 = freevar(tp: float32)
2024-09-04 18:31:54,409 - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,409 - on stmt: $const20.7 = const(int, 0)
2024-09-04 18:31:54,409 - on stmt: $22compare_op.8 = b < $const20.7
2024-09-04 18:31:54,410 - on stmt: bool24 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,410 - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,410 - on stmt: branch $24pred, 26, 98
2024-09-04 18:31:54,410 - ==== SSA block rewrite pass on 26
2024-09-04 18:31:54,410 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A23520>
2024-09-04 18:31:54,410 - on stmt: invert = const(bool, True)
2024-09-04 18:31:54,410 - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2024-09-04 18:31:54,410 - on stmt: $const38.4 = const(int, 0)
2024-09-04 18:31:54,410 - on stmt: $40compare_op.5 = exp < $const38.4
2024-09-04 18:31:54,410 - on stmt: bool42 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,410 - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,410 - on stmt: branch $42pred, 44, 48
2024-09-04 18:31:54,410 - ==== SSA block rewrite pass on 44
2024-09-04 18:31:54,410 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A23520>
2024-09-04 18:31:54,411 - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2024-09-04 18:31:54,411 - on stmt: <static> raise <class 'OverflowError'>
2024-09-04 18:31:54,411 - ==== SSA block rewrite pass on 48
2024-09-04 18:31:54,411 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A23520>
2024-09-04 18:31:54,411 - on stmt: $48load_deref.0 = freevar(is_integer: False)
2024-09-04 18:31:54,411 - on stmt: bool50 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,411 - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,411 - on stmt: jump 96
2024-09-04 18:31:54,411 - ==== SSA block rewrite pass on 96
2024-09-04 18:31:54,411 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A23520>
2024-09-04 18:31:54,411 - on stmt: jump 106
2024-09-04 18:31:54,411 - ==== SSA block rewrite pass on 98
2024-09-04 18:31:54,411 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A23520>
2024-09-04 18:31:54,411 - on stmt: invert = const(bool, False)
2024-09-04 18:31:54,412 - on stmt: exp = b
2024-09-04 18:31:54,412 - on stmt: jump 106
2024-09-04 18:31:54,412 - ==== SSA block rewrite pass on 106
2024-09-04 18:31:54,412 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A23520>
2024-09-04 18:31:54,412 - on stmt: $const108.1 = const(int, 65536)
2024-09-04 18:31:54,412 - on stmt: $110compare_op.2 = exp > $const108.1
2024-09-04 18:31:54,412 - on stmt: bool112 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,412 - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,412 - on stmt: branch $112pred, 114, 130
2024-09-04 18:31:54,412 - ==== SSA block rewrite pass on 114
2024-09-04 18:31:54,412 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A23520>
2024-09-04 18:31:54,412 - on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2024-09-04 18:31:54,412 - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2024-09-04 18:31:54,412 - on stmt: $120load_global.3 = global(float: <class 'float'>)
2024-09-04 18:31:54,412 - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,413 - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,413 - find_def var='a.1' stmt=$126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,413 - find_def_from_top label 114
2024-09-04 18:31:54,413 - idom 106 from label 114
2024-09-04 18:31:54,413 - find_def_from_bottom label 106
2024-09-04 18:31:54,413 - find_def_from_top label 106
2024-09-04 18:31:54,413 - idom 0 from label 106
2024-09-04 18:31:54,413 - find_def_from_bottom label 0
2024-09-04 18:31:54,413 - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2024-09-04 18:31:54,413 - on stmt: return $128return_value.7
2024-09-04 18:31:54,413 - ==== SSA block rewrite pass on 130
2024-09-04 18:31:54,413 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A23520>
2024-09-04 18:31:54,413 - on stmt: $const132.1 = const(int, 0)
2024-09-04 18:31:54,414 - on stmt: $134compare_op.2 = exp != $const132.1
2024-09-04 18:31:54,414 - on stmt: bool136 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,414 - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,414 - on stmt: branch $136pred, 138, 178
2024-09-04 18:31:54,414 - ==== SSA block rewrite pass on 138
2024-09-04 18:31:54,414 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A23520>
2024-09-04 18:31:54,414 - on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2024-09-04 18:31:54,414 - on stmt: $const140.1 = const(int, 1)
2024-09-04 18:31:54,414 - on stmt: $142binary_and.2 = exp & $const140.1
2024-09-04 18:31:54,414 - on stmt: bool144 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,414 - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,414 - on stmt: branch $144pred, 146, 154
2024-09-04 18:31:54,414 - ==== SSA block rewrite pass on 146
2024-09-04 18:31:54,414 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A23520>
2024-09-04 18:31:54,415 - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,415 - find_def var='a.1' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,415 - find_def_from_top label 146
2024-09-04 18:31:54,415 - idom 138 from label 146
2024-09-04 18:31:54,415 - find_def_from_bottom label 138
2024-09-04 18:31:54,415 - find_def_from_top label 138
2024-09-04 18:31:54,415 - insert phi node a.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
2024-09-04 18:31:54,415 - find_def_from_bottom label 130
2024-09-04 18:31:54,415 - find_def_from_top label 130
2024-09-04 18:31:54,415 - idom 106 from label 130
2024-09-04 18:31:54,415 - find_def_from_bottom label 106
2024-09-04 18:31:54,415 - find_def_from_top label 106
2024-09-04 18:31:54,415 - idom 0 from label 106
2024-09-04 18:31:54,415 - find_def_from_bottom label 0
2024-09-04 18:31:54,415 - incoming_def a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,416 - find_def_from_bottom label 154
2024-09-04 18:31:54,416 - incoming_def a.1.1 = $166inplace_multiply.5
2024-09-04 18:31:54,416 - replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,416 - on stmt: r.1 = $150inplace_multiply.2
2024-09-04 18:31:54,416 - on stmt: jump 154
2024-09-04 18:31:54,416 - ==== SSA block rewrite pass on 154
2024-09-04 18:31:54,416 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A23520>
2024-09-04 18:31:54,416 - on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2024-09-04 18:31:54,416 - on stmt: $const156.1 = const(int, 1)
2024-09-04 18:31:54,416 - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,416 - on stmt: exp = $158inplace_rshift.2
2024-09-04 18:31:54,416 - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,416 - find_def var='a.1' stmt=$166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,417 - find_def_from_top label 154
2024-09-04 18:31:54,417 - idom 138 from label 154
2024-09-04 18:31:54,417 - find_def_from_bottom label 138
2024-09-04 18:31:54,417 - replaced with: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,417 - on stmt: a.1.1 = $166inplace_multiply.5
2024-09-04 18:31:54,417 - on stmt: $const172.7 = const(int, 0)
2024-09-04 18:31:54,417 - on stmt: $174compare_op.8 = exp != $const172.7
2024-09-04 18:31:54,417 - on stmt: bool176 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,417 - on stmt: $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,417 - on stmt: branch $176pred, 138, 178
2024-09-04 18:31:54,417 - ==== SSA block rewrite pass on 178
2024-09-04 18:31:54,417 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A23520>
2024-09-04 18:31:54,417 - on stmt: r.4 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2024-09-04 18:31:54,418 - on stmt: bool180 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,418 - on stmt: $180pred = call bool180(invert, func=bool180, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,418 - on stmt: branch $180pred, 182, 190
2024-09-04 18:31:54,418 - ==== SSA block rewrite pass on 182
2024-09-04 18:31:54,418 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A23520>
2024-09-04 18:31:54,418 - on stmt: $const182.0 = const(float, 1.0)
2024-09-04 18:31:54,418 - on stmt: $186binary_true_divide.2 = $const182.0 / r.4
2024-09-04 18:31:54,418 - on stmt: $188return_value.3 = cast(value=$186binary_true_divide.2)
2024-09-04 18:31:54,418 - on stmt: return $188return_value.3
2024-09-04 18:31:54,418 - ==== SSA block rewrite pass on 190
2024-09-04 18:31:54,418 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A23520>
2024-09-04 18:31:54,418 - on stmt: $192return_value.1 = cast(value=r.4)
2024-09-04 18:31:54,418 - on stmt: return $192return_value.1
2024-09-04 18:31:54,418 - Fix SSA violator on var invert
2024-09-04 18:31:54,419 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:54,419 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A0C610>
2024-09-04 18:31:54,419 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:54,419 - on stmt: b = arg(1, name=b)
2024-09-04 18:31:54,419 - on stmt: $2load_deref.0 = freevar(tp: float32)
2024-09-04 18:31:54,419 - on stmt: $const4.1 = const(int, 1)
2024-09-04 18:31:54,419 - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,419 - on stmt: $10load_deref.3 = freevar(tp: float32)
2024-09-04 18:31:54,419 - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,419 - on stmt: $const20.7 = const(int, 0)
2024-09-04 18:31:54,419 - on stmt: $22compare_op.8 = b < $const20.7
2024-09-04 18:31:54,419 - on stmt: bool24 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,419 - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,420 - on stmt: branch $24pred, 26, 98
2024-09-04 18:31:54,420 - ==== SSA block rewrite pass on 26
2024-09-04 18:31:54,420 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A0C610>
2024-09-04 18:31:54,420 - on stmt: invert = const(bool, True)
2024-09-04 18:31:54,420 - first assign: invert
2024-09-04 18:31:54,420 - replaced with: invert = const(bool, True)
2024-09-04 18:31:54,420 - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2024-09-04 18:31:54,420 - on stmt: $const38.4 = const(int, 0)
2024-09-04 18:31:54,420 - on stmt: $40compare_op.5 = exp < $const38.4
2024-09-04 18:31:54,420 - on stmt: bool42 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,421 - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,421 - on stmt: branch $42pred, 44, 48
2024-09-04 18:31:54,421 - ==== SSA block rewrite pass on 44
2024-09-04 18:31:54,421 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A0C610>
2024-09-04 18:31:54,421 - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2024-09-04 18:31:54,421 - on stmt: <static> raise <class 'OverflowError'>
2024-09-04 18:31:54,421 - ==== SSA block rewrite pass on 48
2024-09-04 18:31:54,421 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A0C610>
2024-09-04 18:31:54,421 - on stmt: $48load_deref.0 = freevar(is_integer: False)
2024-09-04 18:31:54,421 - on stmt: bool50 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,421 - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,421 - on stmt: jump 96
2024-09-04 18:31:54,421 - ==== SSA block rewrite pass on 96
2024-09-04 18:31:54,422 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A0C610>
2024-09-04 18:31:54,422 - on stmt: jump 106
2024-09-04 18:31:54,422 - ==== SSA block rewrite pass on 98
2024-09-04 18:31:54,422 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A0C610>
2024-09-04 18:31:54,422 - on stmt: invert = const(bool, False)
2024-09-04 18:31:54,422 - replaced with: invert.1 = const(bool, False)
2024-09-04 18:31:54,422 - on stmt: exp = b
2024-09-04 18:31:54,422 - on stmt: jump 106
2024-09-04 18:31:54,422 - ==== SSA block rewrite pass on 106
2024-09-04 18:31:54,422 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A0C610>
2024-09-04 18:31:54,422 - on stmt: $const108.1 = const(int, 65536)
2024-09-04 18:31:54,422 - on stmt: $110compare_op.2 = exp > $const108.1
2024-09-04 18:31:54,422 - on stmt: bool112 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,422 - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,422 - on stmt: branch $112pred, 114, 130
2024-09-04 18:31:54,422 - ==== SSA block rewrite pass on 114
2024-09-04 18:31:54,422 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A0C610>
2024-09-04 18:31:54,422 - on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2024-09-04 18:31:54,423 - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2024-09-04 18:31:54,423 - on stmt: $120load_global.3 = global(float: <class 'float'>)
2024-09-04 18:31:54,423 - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,423 - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,423 - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2024-09-04 18:31:54,423 - on stmt: return $128return_value.7
2024-09-04 18:31:54,423 - ==== SSA block rewrite pass on 130
2024-09-04 18:31:54,423 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A0C610>
2024-09-04 18:31:54,423 - on stmt: $const132.1 = const(int, 0)
2024-09-04 18:31:54,423 - on stmt: $134compare_op.2 = exp != $const132.1
2024-09-04 18:31:54,423 - on stmt: bool136 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,423 - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,423 - on stmt: branch $136pred, 138, 178
2024-09-04 18:31:54,424 - ==== SSA block rewrite pass on 138
2024-09-04 18:31:54,424 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A0C610>
2024-09-04 18:31:54,424 - on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[130, 154])
2024-09-04 18:31:54,424 - on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2024-09-04 18:31:54,424 - on stmt: $const140.1 = const(int, 1)
2024-09-04 18:31:54,424 - on stmt: $142binary_and.2 = exp & $const140.1
2024-09-04 18:31:54,424 - on stmt: bool144 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,424 - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,424 - on stmt: branch $144pred, 146, 154
2024-09-04 18:31:54,424 - ==== SSA block rewrite pass on 146
2024-09-04 18:31:54,424 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A0C610>
2024-09-04 18:31:54,424 - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,424 - on stmt: r.1 = $150inplace_multiply.2
2024-09-04 18:31:54,424 - on stmt: jump 154
2024-09-04 18:31:54,425 - ==== SSA block rewrite pass on 154
2024-09-04 18:31:54,425 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A0C610>
2024-09-04 18:31:54,425 - on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2024-09-04 18:31:54,425 - on stmt: $const156.1 = const(int, 1)
2024-09-04 18:31:54,425 - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,425 - on stmt: exp = $158inplace_rshift.2
2024-09-04 18:31:54,425 - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,425 - on stmt: a.1.1 = $166inplace_multiply.5
2024-09-04 18:31:54,425 - on stmt: $const172.7 = const(int, 0)
2024-09-04 18:31:54,425 - on stmt: $174compare_op.8 = exp != $const172.7
2024-09-04 18:31:54,425 - on stmt: bool176 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,425 - on stmt: $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,425 - on stmt: branch $176pred, 138, 178
2024-09-04 18:31:54,425 - ==== SSA block rewrite pass on 178
2024-09-04 18:31:54,425 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A0C610>
2024-09-04 18:31:54,425 - on stmt: r.4 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2024-09-04 18:31:54,426 - on stmt: bool180 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,426 - on stmt: $180pred = call bool180(invert, func=bool180, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,426 - on stmt: branch $180pred, 182, 190
2024-09-04 18:31:54,426 - ==== SSA block rewrite pass on 182
2024-09-04 18:31:54,426 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A0C610>
2024-09-04 18:31:54,426 - on stmt: $const182.0 = const(float, 1.0)
2024-09-04 18:31:54,426 - on stmt: $186binary_true_divide.2 = $const182.0 / r.4
2024-09-04 18:31:54,426 - on stmt: $188return_value.3 = cast(value=$186binary_true_divide.2)
2024-09-04 18:31:54,426 - on stmt: return $188return_value.3
2024-09-04 18:31:54,426 - ==== SSA block rewrite pass on 190
2024-09-04 18:31:54,426 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A0C610>
2024-09-04 18:31:54,426 - on stmt: $192return_value.1 = cast(value=r.4)
2024-09-04 18:31:54,426 - on stmt: return $192return_value.1
2024-09-04 18:31:54,427 - Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x0000024313A0DC00>],
             98: [<numba.core.ir.Assign object at 0x0000024313656260>]})
2024-09-04 18:31:54,427 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:54,427 - Running <numba.core.ssa._FixSSAVars object at 0x00000243139F3520>
2024-09-04 18:31:54,427 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:54,427 - on stmt: b = arg(1, name=b)
2024-09-04 18:31:54,427 - on stmt: $2load_deref.0 = freevar(tp: float32)
2024-09-04 18:31:54,427 - on stmt: $const4.1 = const(int, 1)
2024-09-04 18:31:54,427 - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,427 - on stmt: $10load_deref.3 = freevar(tp: float32)
2024-09-04 18:31:54,427 - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,427 - on stmt: $const20.7 = const(int, 0)
2024-09-04 18:31:54,427 - on stmt: $22compare_op.8 = b < $const20.7
2024-09-04 18:31:54,427 - on stmt: bool24 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,427 - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,428 - on stmt: branch $24pred, 26, 98
2024-09-04 18:31:54,428 - ==== SSA block rewrite pass on 26
2024-09-04 18:31:54,428 - Running <numba.core.ssa._FixSSAVars object at 0x00000243139F3520>
2024-09-04 18:31:54,428 - on stmt: invert = const(bool, True)
2024-09-04 18:31:54,428 - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2024-09-04 18:31:54,428 - on stmt: $const38.4 = const(int, 0)
2024-09-04 18:31:54,428 - on stmt: $40compare_op.5 = exp < $const38.4
2024-09-04 18:31:54,428 - on stmt: bool42 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,428 - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,428 - on stmt: branch $42pred, 44, 48
2024-09-04 18:31:54,428 - ==== SSA block rewrite pass on 44
2024-09-04 18:31:54,428 - Running <numba.core.ssa._FixSSAVars object at 0x00000243139F3520>
2024-09-04 18:31:54,428 - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2024-09-04 18:31:54,428 - on stmt: <static> raise <class 'OverflowError'>
2024-09-04 18:31:54,429 - ==== SSA block rewrite pass on 48
2024-09-04 18:31:54,429 - Running <numba.core.ssa._FixSSAVars object at 0x00000243139F3520>
2024-09-04 18:31:54,429 - on stmt: $48load_deref.0 = freevar(is_integer: False)
2024-09-04 18:31:54,429 - on stmt: bool50 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,429 - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,429 - on stmt: jump 96
2024-09-04 18:31:54,429 - ==== SSA block rewrite pass on 96
2024-09-04 18:31:54,429 - Running <numba.core.ssa._FixSSAVars object at 0x00000243139F3520>
2024-09-04 18:31:54,429 - on stmt: jump 106
2024-09-04 18:31:54,429 - ==== SSA block rewrite pass on 98
2024-09-04 18:31:54,429 - Running <numba.core.ssa._FixSSAVars object at 0x00000243139F3520>
2024-09-04 18:31:54,429 - on stmt: invert.1 = const(bool, False)
2024-09-04 18:31:54,429 - on stmt: exp = b
2024-09-04 18:31:54,429 - on stmt: jump 106
2024-09-04 18:31:54,430 - ==== SSA block rewrite pass on 106
2024-09-04 18:31:54,430 - Running <numba.core.ssa._FixSSAVars object at 0x00000243139F3520>
2024-09-04 18:31:54,430 - on stmt: $const108.1 = const(int, 65536)
2024-09-04 18:31:54,430 - on stmt: $110compare_op.2 = exp > $const108.1
2024-09-04 18:31:54,430 - on stmt: bool112 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,430 - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,430 - on stmt: branch $112pred, 114, 130
2024-09-04 18:31:54,430 - ==== SSA block rewrite pass on 114
2024-09-04 18:31:54,430 - Running <numba.core.ssa._FixSSAVars object at 0x00000243139F3520>
2024-09-04 18:31:54,430 - on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2024-09-04 18:31:54,430 - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2024-09-04 18:31:54,430 - on stmt: $120load_global.3 = global(float: <class 'float'>)
2024-09-04 18:31:54,430 - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,430 - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,431 - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2024-09-04 18:31:54,431 - on stmt: return $128return_value.7
2024-09-04 18:31:54,431 - ==== SSA block rewrite pass on 130
2024-09-04 18:31:54,431 - Running <numba.core.ssa._FixSSAVars object at 0x00000243139F3520>
2024-09-04 18:31:54,431 - on stmt: $const132.1 = const(int, 0)
2024-09-04 18:31:54,431 - on stmt: $134compare_op.2 = exp != $const132.1
2024-09-04 18:31:54,431 - on stmt: bool136 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,431 - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,431 - on stmt: branch $136pred, 138, 178
2024-09-04 18:31:54,431 - ==== SSA block rewrite pass on 138
2024-09-04 18:31:54,431 - Running <numba.core.ssa._FixSSAVars object at 0x00000243139F3520>
2024-09-04 18:31:54,431 - on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[130, 154])
2024-09-04 18:31:54,431 - on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2024-09-04 18:31:54,432 - on stmt: $const140.1 = const(int, 1)
2024-09-04 18:31:54,432 - on stmt: $142binary_and.2 = exp & $const140.1
2024-09-04 18:31:54,432 - on stmt: bool144 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,432 - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,432 - on stmt: branch $144pred, 146, 154
2024-09-04 18:31:54,432 - ==== SSA block rewrite pass on 146
2024-09-04 18:31:54,432 - Running <numba.core.ssa._FixSSAVars object at 0x00000243139F3520>
2024-09-04 18:31:54,432 - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,432 - on stmt: r.1 = $150inplace_multiply.2
2024-09-04 18:31:54,432 - on stmt: jump 154
2024-09-04 18:31:54,432 - ==== SSA block rewrite pass on 154
2024-09-04 18:31:54,432 - Running <numba.core.ssa._FixSSAVars object at 0x00000243139F3520>
2024-09-04 18:31:54,432 - on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2024-09-04 18:31:54,432 - on stmt: $const156.1 = const(int, 1)
2024-09-04 18:31:54,433 - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,433 - on stmt: exp = $158inplace_rshift.2
2024-09-04 18:31:54,433 - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,433 - on stmt: a.1.1 = $166inplace_multiply.5
2024-09-04 18:31:54,433 - on stmt: $const172.7 = const(int, 0)
2024-09-04 18:31:54,433 - on stmt: $174compare_op.8 = exp != $const172.7
2024-09-04 18:31:54,433 - on stmt: bool176 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,433 - on stmt: $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,433 - on stmt: branch $176pred, 138, 178
2024-09-04 18:31:54,433 - ==== SSA block rewrite pass on 178
2024-09-04 18:31:54,433 - Running <numba.core.ssa._FixSSAVars object at 0x00000243139F3520>
2024-09-04 18:31:54,433 - on stmt: r.4 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2024-09-04 18:31:54,433 - on stmt: bool180 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,434 - on stmt: $180pred = call bool180(invert, func=bool180, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,434 - find_def var='invert' stmt=$180pred = call bool180(invert, func=bool180, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,434 - find_def_from_top label 178
2024-09-04 18:31:54,434 - idom 130 from label 178
2024-09-04 18:31:54,434 - find_def_from_bottom label 130
2024-09-04 18:31:54,434 - find_def_from_top label 130
2024-09-04 18:31:54,434 - idom 106 from label 130
2024-09-04 18:31:54,434 - find_def_from_bottom label 106
2024-09-04 18:31:54,434 - find_def_from_top label 106
2024-09-04 18:31:54,434 - insert phi node invert.2 = phi(incoming_values=[], incoming_blocks=[]) at 106
2024-09-04 18:31:54,434 - find_def_from_bottom label 96
2024-09-04 18:31:54,434 - find_def_from_top label 96
2024-09-04 18:31:54,434 - idom 48 from label 96
2024-09-04 18:31:54,434 - find_def_from_bottom label 48
2024-09-04 18:31:54,434 - find_def_from_top label 48
2024-09-04 18:31:54,435 - idom 26 from label 48
2024-09-04 18:31:54,435 - find_def_from_bottom label 26
2024-09-04 18:31:54,435 - incoming_def invert = const(bool, True)
2024-09-04 18:31:54,435 - find_def_from_bottom label 98
2024-09-04 18:31:54,435 - incoming_def invert.1 = const(bool, False)
2024-09-04 18:31:54,435 - replaced with: $180pred = call bool180(invert.2, func=bool180, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,435 - on stmt: branch $180pred, 182, 190
2024-09-04 18:31:54,435 - ==== SSA block rewrite pass on 182
2024-09-04 18:31:54,435 - Running <numba.core.ssa._FixSSAVars object at 0x00000243139F3520>
2024-09-04 18:31:54,435 - on stmt: $const182.0 = const(float, 1.0)
2024-09-04 18:31:54,435 - on stmt: $186binary_true_divide.2 = $const182.0 / r.4
2024-09-04 18:31:54,435 - on stmt: $188return_value.3 = cast(value=$186binary_true_divide.2)
2024-09-04 18:31:54,435 - on stmt: return $188return_value.3
2024-09-04 18:31:54,436 - ==== SSA block rewrite pass on 190
2024-09-04 18:31:54,436 - Running <numba.core.ssa._FixSSAVars object at 0x00000243139F3520>
2024-09-04 18:31:54,436 - on stmt: $192return_value.1 = cast(value=r.4)
2024-09-04 18:31:54,436 - on stmt: return $192return_value.1
2024-09-04 18:31:54,436 - Fix SSA violator on var exp
2024-09-04 18:31:54,436 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:54,436 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A23520>
2024-09-04 18:31:54,436 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:54,436 - on stmt: b = arg(1, name=b)
2024-09-04 18:31:54,436 - on stmt: $2load_deref.0 = freevar(tp: float32)
2024-09-04 18:31:54,436 - on stmt: $const4.1 = const(int, 1)
2024-09-04 18:31:54,436 - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,437 - on stmt: $10load_deref.3 = freevar(tp: float32)
2024-09-04 18:31:54,437 - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,437 - on stmt: $const20.7 = const(int, 0)
2024-09-04 18:31:54,437 - on stmt: $22compare_op.8 = b < $const20.7
2024-09-04 18:31:54,437 - on stmt: bool24 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,437 - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,437 - on stmt: branch $24pred, 26, 98
2024-09-04 18:31:54,437 - ==== SSA block rewrite pass on 26
2024-09-04 18:31:54,437 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A23520>
2024-09-04 18:31:54,437 - on stmt: invert = const(bool, True)
2024-09-04 18:31:54,437 - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2024-09-04 18:31:54,437 - first assign: exp
2024-09-04 18:31:54,437 - replaced with: exp = unary(fn=<built-in function neg>, value=b)
2024-09-04 18:31:54,437 - on stmt: $const38.4 = const(int, 0)
2024-09-04 18:31:54,438 - on stmt: $40compare_op.5 = exp < $const38.4
2024-09-04 18:31:54,438 - on stmt: bool42 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,438 - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,438 - on stmt: branch $42pred, 44, 48
2024-09-04 18:31:54,438 - ==== SSA block rewrite pass on 44
2024-09-04 18:31:54,438 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A23520>
2024-09-04 18:31:54,438 - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2024-09-04 18:31:54,438 - on stmt: <static> raise <class 'OverflowError'>
2024-09-04 18:31:54,438 - ==== SSA block rewrite pass on 48
2024-09-04 18:31:54,438 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A23520>
2024-09-04 18:31:54,438 - on stmt: $48load_deref.0 = freevar(is_integer: False)
2024-09-04 18:31:54,438 - on stmt: bool50 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,438 - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,438 - on stmt: jump 96
2024-09-04 18:31:54,439 - ==== SSA block rewrite pass on 96
2024-09-04 18:31:54,439 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A23520>
2024-09-04 18:31:54,439 - on stmt: jump 106
2024-09-04 18:31:54,439 - ==== SSA block rewrite pass on 98
2024-09-04 18:31:54,439 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A23520>
2024-09-04 18:31:54,439 - on stmt: invert.1 = const(bool, False)
2024-09-04 18:31:54,439 - on stmt: exp = b
2024-09-04 18:31:54,439 - replaced with: exp.1 = b
2024-09-04 18:31:54,439 - on stmt: jump 106
2024-09-04 18:31:54,439 - ==== SSA block rewrite pass on 106
2024-09-04 18:31:54,439 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A23520>
2024-09-04 18:31:54,439 - on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[96, 98])
2024-09-04 18:31:54,439 - on stmt: $const108.1 = const(int, 65536)
2024-09-04 18:31:54,439 - on stmt: $110compare_op.2 = exp > $const108.1
2024-09-04 18:31:54,440 - on stmt: bool112 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,440 - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,440 - on stmt: branch $112pred, 114, 130
2024-09-04 18:31:54,440 - ==== SSA block rewrite pass on 114
2024-09-04 18:31:54,440 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A23520>
2024-09-04 18:31:54,440 - on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2024-09-04 18:31:54,440 - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2024-09-04 18:31:54,440 - on stmt: $120load_global.3 = global(float: <class 'float'>)
2024-09-04 18:31:54,440 - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,440 - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,440 - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2024-09-04 18:31:54,440 - on stmt: return $128return_value.7
2024-09-04 18:31:54,440 - ==== SSA block rewrite pass on 130
2024-09-04 18:31:54,440 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A23520>
2024-09-04 18:31:54,441 - on stmt: $const132.1 = const(int, 0)
2024-09-04 18:31:54,441 - on stmt: $134compare_op.2 = exp != $const132.1
2024-09-04 18:31:54,441 - on stmt: bool136 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,441 - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,441 - on stmt: branch $136pred, 138, 178
2024-09-04 18:31:54,441 - ==== SSA block rewrite pass on 138
2024-09-04 18:31:54,441 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A23520>
2024-09-04 18:31:54,441 - on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[130, 154])
2024-09-04 18:31:54,441 - on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2024-09-04 18:31:54,441 - on stmt: $const140.1 = const(int, 1)
2024-09-04 18:31:54,441 - on stmt: $142binary_and.2 = exp & $const140.1
2024-09-04 18:31:54,441 - on stmt: bool144 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,442 - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,442 - on stmt: branch $144pred, 146, 154
2024-09-04 18:31:54,442 - ==== SSA block rewrite pass on 146
2024-09-04 18:31:54,442 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A23520>
2024-09-04 18:31:54,442 - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,442 - on stmt: r.1 = $150inplace_multiply.2
2024-09-04 18:31:54,442 - on stmt: jump 154
2024-09-04 18:31:54,442 - ==== SSA block rewrite pass on 154
2024-09-04 18:31:54,442 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A23520>
2024-09-04 18:31:54,442 - on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2024-09-04 18:31:54,442 - on stmt: $const156.1 = const(int, 1)
2024-09-04 18:31:54,442 - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,442 - on stmt: exp = $158inplace_rshift.2
2024-09-04 18:31:54,442 - replaced with: exp.2 = $158inplace_rshift.2
2024-09-04 18:31:54,443 - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,443 - on stmt: a.1.1 = $166inplace_multiply.5
2024-09-04 18:31:54,443 - on stmt: $const172.7 = const(int, 0)
2024-09-04 18:31:54,443 - on stmt: $174compare_op.8 = exp != $const172.7
2024-09-04 18:31:54,443 - on stmt: bool176 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,443 - on stmt: $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,443 - on stmt: branch $176pred, 138, 178
2024-09-04 18:31:54,443 - ==== SSA block rewrite pass on 178
2024-09-04 18:31:54,443 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A23520>
2024-09-04 18:31:54,443 - on stmt: r.4 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2024-09-04 18:31:54,443 - on stmt: bool180 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,443 - on stmt: $180pred = call bool180(invert.2, func=bool180, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,443 - on stmt: branch $180pred, 182, 190
2024-09-04 18:31:54,443 - ==== SSA block rewrite pass on 182
2024-09-04 18:31:54,444 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A23520>
2024-09-04 18:31:54,444 - on stmt: $const182.0 = const(float, 1.0)
2024-09-04 18:31:54,444 - on stmt: $186binary_true_divide.2 = $const182.0 / r.4
2024-09-04 18:31:54,444 - on stmt: $188return_value.3 = cast(value=$186binary_true_divide.2)
2024-09-04 18:31:54,444 - on stmt: return $188return_value.3
2024-09-04 18:31:54,444 - ==== SSA block rewrite pass on 190
2024-09-04 18:31:54,444 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024313A23520>
2024-09-04 18:31:54,444 - on stmt: $192return_value.1 = cast(value=r.4)
2024-09-04 18:31:54,444 - on stmt: return $192return_value.1
2024-09-04 18:31:54,444 - Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x00000243139F38B0>],
             98: [<numba.core.ir.Assign object at 0x00000243136560B0>],
             154: [<numba.core.ir.Assign object at 0x0000024317842B00>]})
2024-09-04 18:31:54,444 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:54,444 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A0C610>
2024-09-04 18:31:54,444 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:54,445 - on stmt: b = arg(1, name=b)
2024-09-04 18:31:54,445 - on stmt: $2load_deref.0 = freevar(tp: float32)
2024-09-04 18:31:54,445 - on stmt: $const4.1 = const(int, 1)
2024-09-04 18:31:54,445 - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,445 - on stmt: $10load_deref.3 = freevar(tp: float32)
2024-09-04 18:31:54,445 - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,445 - on stmt: $const20.7 = const(int, 0)
2024-09-04 18:31:54,445 - on stmt: $22compare_op.8 = b < $const20.7
2024-09-04 18:31:54,445 - on stmt: bool24 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,445 - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,445 - on stmt: branch $24pred, 26, 98
2024-09-04 18:31:54,445 - ==== SSA block rewrite pass on 26
2024-09-04 18:31:54,445 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A0C610>
2024-09-04 18:31:54,446 - on stmt: invert = const(bool, True)
2024-09-04 18:31:54,446 - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2024-09-04 18:31:54,446 - on stmt: $const38.4 = const(int, 0)
2024-09-04 18:31:54,446 - on stmt: $40compare_op.5 = exp < $const38.4
2024-09-04 18:31:54,446 - find_def var='exp' stmt=$40compare_op.5 = exp < $const38.4
2024-09-04 18:31:54,446 - on stmt: bool42 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,446 - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,446 - on stmt: branch $42pred, 44, 48
2024-09-04 18:31:54,446 - ==== SSA block rewrite pass on 44
2024-09-04 18:31:54,446 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A0C610>
2024-09-04 18:31:54,446 - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2024-09-04 18:31:54,446 - on stmt: <static> raise <class 'OverflowError'>
2024-09-04 18:31:54,446 - ==== SSA block rewrite pass on 48
2024-09-04 18:31:54,446 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A0C610>
2024-09-04 18:31:54,447 - on stmt: $48load_deref.0 = freevar(is_integer: False)
2024-09-04 18:31:54,447 - on stmt: bool50 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,447 - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,447 - on stmt: jump 96
2024-09-04 18:31:54,447 - ==== SSA block rewrite pass on 96
2024-09-04 18:31:54,447 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A0C610>
2024-09-04 18:31:54,447 - on stmt: jump 106
2024-09-04 18:31:54,447 - ==== SSA block rewrite pass on 98
2024-09-04 18:31:54,447 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A0C610>
2024-09-04 18:31:54,447 - on stmt: invert.1 = const(bool, False)
2024-09-04 18:31:54,447 - on stmt: exp.1 = b
2024-09-04 18:31:54,447 - on stmt: jump 106
2024-09-04 18:31:54,447 - ==== SSA block rewrite pass on 106
2024-09-04 18:31:54,447 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A0C610>
2024-09-04 18:31:54,447 - on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[96, 98])
2024-09-04 18:31:54,447 - on stmt: $const108.1 = const(int, 65536)
2024-09-04 18:31:54,448 - on stmt: $110compare_op.2 = exp > $const108.1
2024-09-04 18:31:54,448 - find_def var='exp' stmt=$110compare_op.2 = exp > $const108.1
2024-09-04 18:31:54,448 - find_def_from_top label 106
2024-09-04 18:31:54,448 - insert phi node exp.3 = phi(incoming_values=[], incoming_blocks=[]) at 106
2024-09-04 18:31:54,448 - find_def_from_bottom label 96
2024-09-04 18:31:54,448 - find_def_from_top label 96
2024-09-04 18:31:54,448 - idom 48 from label 96
2024-09-04 18:31:54,448 - find_def_from_bottom label 48
2024-09-04 18:31:54,448 - find_def_from_top label 48
2024-09-04 18:31:54,448 - idom 26 from label 48
2024-09-04 18:31:54,448 - find_def_from_bottom label 26
2024-09-04 18:31:54,448 - incoming_def exp = unary(fn=<built-in function neg>, value=b)
2024-09-04 18:31:54,448 - find_def_from_bottom label 98
2024-09-04 18:31:54,448 - incoming_def exp.1 = b
2024-09-04 18:31:54,449 - replaced with: $110compare_op.2 = exp.3 > $const108.1
2024-09-04 18:31:54,449 - on stmt: bool112 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,449 - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,449 - on stmt: branch $112pred, 114, 130
2024-09-04 18:31:54,449 - ==== SSA block rewrite pass on 114
2024-09-04 18:31:54,449 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A0C610>
2024-09-04 18:31:54,449 - on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2024-09-04 18:31:54,449 - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2024-09-04 18:31:54,449 - on stmt: $120load_global.3 = global(float: <class 'float'>)
2024-09-04 18:31:54,449 - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,449 - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,449 - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2024-09-04 18:31:54,449 - on stmt: return $128return_value.7
2024-09-04 18:31:54,450 - ==== SSA block rewrite pass on 130
2024-09-04 18:31:54,450 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A0C610>
2024-09-04 18:31:54,450 - on stmt: $const132.1 = const(int, 0)
2024-09-04 18:31:54,450 - on stmt: $134compare_op.2 = exp != $const132.1
2024-09-04 18:31:54,450 - find_def var='exp' stmt=$134compare_op.2 = exp != $const132.1
2024-09-04 18:31:54,450 - find_def_from_top label 130
2024-09-04 18:31:54,450 - idom 106 from label 130
2024-09-04 18:31:54,450 - find_def_from_bottom label 106
2024-09-04 18:31:54,451 - replaced with: $134compare_op.2 = exp.3 != $const132.1
2024-09-04 18:31:54,451 - on stmt: bool136 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,451 - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,451 - on stmt: branch $136pred, 138, 178
2024-09-04 18:31:54,451 - ==== SSA block rewrite pass on 138
2024-09-04 18:31:54,451 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A0C610>
2024-09-04 18:31:54,451 - on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[130, 154])
2024-09-04 18:31:54,451 - on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2024-09-04 18:31:54,451 - on stmt: $const140.1 = const(int, 1)
2024-09-04 18:31:54,451 - on stmt: $142binary_and.2 = exp & $const140.1
2024-09-04 18:31:54,451 - find_def var='exp' stmt=$142binary_and.2 = exp & $const140.1
2024-09-04 18:31:54,451 - find_def_from_top label 138
2024-09-04 18:31:54,451 - insert phi node exp.4 = phi(incoming_values=[], incoming_blocks=[]) at 138
2024-09-04 18:31:54,452 - find_def_from_bottom label 130
2024-09-04 18:31:54,452 - find_def_from_top label 130
2024-09-04 18:31:54,452 - idom 106 from label 130
2024-09-04 18:31:54,452 - find_def_from_bottom label 106
2024-09-04 18:31:54,452 - incoming_def exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[96, 98])
2024-09-04 18:31:54,452 - find_def_from_bottom label 154
2024-09-04 18:31:54,452 - incoming_def exp.2 = $158inplace_rshift.2
2024-09-04 18:31:54,452 - replaced with: $142binary_and.2 = exp.4 & $const140.1
2024-09-04 18:31:54,452 - on stmt: bool144 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,452 - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,452 - on stmt: branch $144pred, 146, 154
2024-09-04 18:31:54,452 - ==== SSA block rewrite pass on 146
2024-09-04 18:31:54,452 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A0C610>
2024-09-04 18:31:54,452 - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,453 - on stmt: r.1 = $150inplace_multiply.2
2024-09-04 18:31:54,453 - on stmt: jump 154
2024-09-04 18:31:54,453 - ==== SSA block rewrite pass on 154
2024-09-04 18:31:54,453 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A0C610>
2024-09-04 18:31:54,453 - on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2024-09-04 18:31:54,453 - on stmt: $const156.1 = const(int, 1)
2024-09-04 18:31:54,453 - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,453 - find_def var='exp' stmt=$158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,453 - find_def_from_top label 154
2024-09-04 18:31:54,453 - idom 138 from label 154
2024-09-04 18:31:54,453 - find_def_from_bottom label 138
2024-09-04 18:31:54,453 - replaced with: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,454 - on stmt: exp.2 = $158inplace_rshift.2
2024-09-04 18:31:54,454 - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,454 - on stmt: a.1.1 = $166inplace_multiply.5
2024-09-04 18:31:54,454 - on stmt: $const172.7 = const(int, 0)
2024-09-04 18:31:54,454 - on stmt: $174compare_op.8 = exp != $const172.7
2024-09-04 18:31:54,454 - find_def var='exp' stmt=$174compare_op.8 = exp != $const172.7
2024-09-04 18:31:54,454 - replaced with: $174compare_op.8 = exp.2 != $const172.7
2024-09-04 18:31:54,454 - on stmt: bool176 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,454 - on stmt: $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,454 - on stmt: branch $176pred, 138, 178
2024-09-04 18:31:54,454 - ==== SSA block rewrite pass on 178
2024-09-04 18:31:54,454 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A0C610>
2024-09-04 18:31:54,454 - on stmt: r.4 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2024-09-04 18:31:54,455 - on stmt: bool180 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,455 - on stmt: $180pred = call bool180(invert.2, func=bool180, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,455 - on stmt: branch $180pred, 182, 190
2024-09-04 18:31:54,455 - ==== SSA block rewrite pass on 182
2024-09-04 18:31:54,455 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A0C610>
2024-09-04 18:31:54,455 - on stmt: $const182.0 = const(float, 1.0)
2024-09-04 18:31:54,455 - on stmt: $186binary_true_divide.2 = $const182.0 / r.4
2024-09-04 18:31:54,455 - on stmt: $188return_value.3 = cast(value=$186binary_true_divide.2)
2024-09-04 18:31:54,455 - on stmt: return $188return_value.3
2024-09-04 18:31:54,455 - ==== SSA block rewrite pass on 190
2024-09-04 18:31:54,455 - Running <numba.core.ssa._FixSSAVars object at 0x0000024313A0C610>
2024-09-04 18:31:54,455 - on stmt: $192return_value.1 = cast(value=r.4)
2024-09-04 18:31:54,455 - on stmt: return $192return_value.1
2024-09-04 18:31:54,654 - bytecode dump:
>          0	NOP(arg=None, lineno=2452)
           2	LOAD_FAST(arg=0, lineno=2457)
           4	LOAD_ATTR(arg=0, lineno=2457)
           6	LOAD_CONST(arg=1, lineno=2457)
           8	BINARY_POWER(arg=None, lineno=2457)
          10	LOAD_FAST(arg=0, lineno=2457)
          12	LOAD_ATTR(arg=1, lineno=2457)
          14	LOAD_CONST(arg=1, lineno=2457)
          16	BINARY_POWER(arg=None, lineno=2457)
          18	BINARY_ADD(arg=None, lineno=2457)
          20	RETURN_VALUE(arg=None, lineno=2457)
2024-09-04 18:31:54,654 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:54,654 - stack: []
2024-09-04 18:31:54,654 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:54,654 - dispatch pc=0, inst=NOP(arg=None, lineno=2452)
2024-09-04 18:31:54,654 - stack []
2024-09-04 18:31:54,654 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2457)
2024-09-04 18:31:54,654 - stack []
2024-09-04 18:31:54,654 - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2457)
2024-09-04 18:31:54,654 - stack ['$x2.0']
2024-09-04 18:31:54,654 - dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=2457)
2024-09-04 18:31:54,654 - stack ['$4load_attr.1']
2024-09-04 18:31:54,654 - dispatch pc=8, inst=BINARY_POWER(arg=None, lineno=2457)
2024-09-04 18:31:54,654 - stack ['$4load_attr.1', '$const6.2']
2024-09-04 18:31:54,654 - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=2457)
2024-09-04 18:31:54,654 - stack ['$8binary_power.3']
2024-09-04 18:31:54,654 - dispatch pc=12, inst=LOAD_ATTR(arg=1, lineno=2457)
2024-09-04 18:31:54,654 - stack ['$8binary_power.3', '$x10.4']
2024-09-04 18:31:54,654 - dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=2457)
2024-09-04 18:31:54,654 - stack ['$8binary_power.3', '$12load_attr.5']
2024-09-04 18:31:54,654 - dispatch pc=16, inst=BINARY_POWER(arg=None, lineno=2457)
2024-09-04 18:31:54,654 - stack ['$8binary_power.3', '$12load_attr.5', '$const14.6']
2024-09-04 18:31:54,654 - dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=2457)
2024-09-04 18:31:54,654 - stack ['$8binary_power.3', '$16binary_power.7']
2024-09-04 18:31:54,662 - dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=2457)
2024-09-04 18:31:54,662 - stack ['$18binary_add.8']
2024-09-04 18:31:54,662 - end state. edges=[]
2024-09-04 18:31:54,662 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:54,662 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 18:31:54,662 - defmap: {}
2024-09-04 18:31:54,662 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:54,662 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:54,662 - keep phismap: {}
2024-09-04 18:31:54,662 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:54,662 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:54,662 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'res': '$const6.2'}), (8, {'lhs': '$4load_attr.1', 'rhs': '$const6.2', 'res': '$8binary_power.3'}), (10, {'res': '$x10.4'}), (12, {'item': '$x10.4', 'res': '$12load_attr.5'}), (14, {'res': '$const14.6'}), (16, {'lhs': '$12load_attr.5', 'rhs': '$const14.6', 'res': '$16binary_power.7'}), (18, {'lhs': '$8binary_power.3', 'rhs': '$16binary_power.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:54,662 - label 0:
    x = arg(0, name=x)                       ['x']
    $4load_attr.1 = getattr(value=x, attr=real) ['$4load_attr.1', 'x']
    $const6.2 = const(int, 2)                ['$const6.2']
    $8binary_power.3 = $4load_attr.1 ** $const6.2 ['$4load_attr.1', '$8binary_power.3', '$const6.2']
    $12load_attr.5 = getattr(value=x, attr=imag) ['$12load_attr.5', 'x']
    $const14.6 = const(int, 2)               ['$const14.6']
    $16binary_power.7 = $12load_attr.5 ** $const14.6 ['$12load_attr.5', '$16binary_power.7', '$const14.6']
    $18binary_add.8 = $8binary_power.3 + $16binary_power.7 ['$16binary_power.7', '$18binary_add.8', '$8binary_power.3']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

2024-09-04 18:31:54,674 - ==== SSA block analysis pass on 0
2024-09-04 18:31:54,674 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243136ED180>
2024-09-04 18:31:54,674 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:54,674 - on stmt: $4load_attr.1 = getattr(value=x, attr=real)
2024-09-04 18:31:54,674 - on stmt: $const6.2 = const(int, 2)
2024-09-04 18:31:54,674 - on stmt: $8binary_power.3 = $4load_attr.1 ** $const6.2
2024-09-04 18:31:54,674 - on stmt: $12load_attr.5 = getattr(value=x, attr=imag)
2024-09-04 18:31:54,674 - on stmt: $const14.6 = const(int, 2)
2024-09-04 18:31:54,674 - on stmt: $16binary_power.7 = $12load_attr.5 ** $const14.6
2024-09-04 18:31:54,674 - on stmt: $18binary_add.8 = $8binary_power.3 + $16binary_power.7
2024-09-04 18:31:54,674 - on stmt: $20return_value.9 = cast(value=$18binary_add.8)
2024-09-04 18:31:54,674 - on stmt: return $20return_value.9
2024-09-04 18:31:54,674 - defs defaultdict(<class 'list'>,
            {'$12load_attr.5': [(<numba.core.ir.Assign object at 0x00000243136EF190>,
                                 0)],
             '$16binary_power.7': [(<numba.core.ir.Assign object at 0x00000243136ED240>,
                                    0)],
             '$18binary_add.8': [(<numba.core.ir.Assign object at 0x00000243136ED8D0>,
                                  0)],
             '$20return_value.9': [(<numba.core.ir.Assign object at 0x00000243136EDAB0>,
                                    0)],
             '$4load_attr.1': [(<numba.core.ir.Assign object at 0x00000243136EE920>,
                                0)],
             '$8binary_power.3': [(<numba.core.ir.Assign object at 0x00000243136EE530>,
                                   0)],
             '$const14.6': [(<numba.core.ir.Assign object at 0x00000243136EF100>,
                             0)],
             '$const6.2': [(<numba.core.ir.Assign object at 0x00000243136EDEA0>,
                            0)],
             'x': [(<numba.core.ir.Assign object at 0x00000243136EC610>, 0)]})
2024-09-04 18:31:54,674 - SSA violators <numba.core.utils.OrderedSet object at 0x00000243136ED180>
2024-09-04 18:31:54,692 - bytecode dump:
>          0	NOP(arg=None, lineno=214)
           2	LOAD_DEREF(arg=1, lineno=216)
           4	LOAD_CONST(arg=1, lineno=216)
           6	CALL_FUNCTION(arg=1, lineno=216)
           8	STORE_FAST(arg=2, lineno=216)
          10	LOAD_DEREF(arg=1, lineno=217)
          12	LOAD_FAST(arg=0, lineno=217)
          14	CALL_FUNCTION(arg=1, lineno=217)
          16	STORE_FAST(arg=0, lineno=217)
          18	LOAD_FAST(arg=1, lineno=218)
          20	LOAD_CONST(arg=2, lineno=218)
          22	COMPARE_OP(arg=0, lineno=218)
          24	POP_JUMP_IF_FALSE(arg=50, lineno=218)
          26	LOAD_CONST(arg=3, lineno=219)
          28	STORE_FAST(arg=3, lineno=219)
          30	LOAD_FAST(arg=1, lineno=220)
          32	UNARY_NEGATIVE(arg=None, lineno=220)
          34	STORE_FAST(arg=4, lineno=220)
          36	LOAD_FAST(arg=4, lineno=221)
          38	LOAD_CONST(arg=2, lineno=221)
          40	COMPARE_OP(arg=0, lineno=221)
          42	POP_JUMP_IF_FALSE(arg=25, lineno=221)
          44	LOAD_GLOBAL(arg=0, lineno=222)
          46	RAISE_VARARGS(arg=1, lineno=222)
>         48	LOAD_DEREF(arg=0, lineno=223)
          50	POP_JUMP_IF_FALSE(arg=49, lineno=223)
          52	LOAD_FAST(arg=0, lineno=224)
          54	LOAD_CONST(arg=2, lineno=224)
          56	COMPARE_OP(arg=2, lineno=224)
          58	POP_JUMP_IF_FALSE(arg=39, lineno=224)
          60	LOAD_DEREF(arg=2, lineno=225)
          62	POP_JUMP_IF_FALSE(arg=35, lineno=225)
          64	LOAD_DEREF(arg=2, lineno=226)
          66	RETURN_VALUE(arg=None, lineno=226)
>         68	LOAD_GLOBAL(arg=1, lineno=228)
          70	LOAD_CONST(arg=4, lineno=228)
          72	CALL_FUNCTION(arg=1, lineno=228)
          74	RAISE_VARARGS(arg=1, lineno=228)
>         76	LOAD_FAST(arg=0, lineno=229)
          78	LOAD_CONST(arg=1, lineno=229)
          80	COMPARE_OP(arg=3, lineno=229)
          82	POP_JUMP_IF_FALSE(arg=49, lineno=229)
          84	LOAD_FAST(arg=0, lineno=229)
          86	LOAD_CONST(arg=5, lineno=229)
          88	COMPARE_OP(arg=3, lineno=229)
          90	POP_JUMP_IF_FALSE(arg=49, lineno=229)
          92	LOAD_CONST(arg=2, lineno=230)
          94	RETURN_VALUE(arg=None, lineno=230)
>         96	JUMP_FORWARD(arg=4, lineno=230)
>         98	LOAD_CONST(arg=6, lineno=232)
         100	STORE_FAST(arg=3, lineno=232)
         102	LOAD_FAST(arg=1, lineno=233)
         104	STORE_FAST(arg=4, lineno=233)
>        106	LOAD_FAST(arg=4, lineno=234)
         108	LOAD_CONST(arg=7, lineno=234)
         110	COMPARE_OP(arg=4, lineno=234)
         112	POP_JUMP_IF_FALSE(arg=66, lineno=234)
         114	LOAD_GLOBAL(arg=2, lineno=236)
         116	LOAD_METHOD(arg=3, lineno=236)
         118	LOAD_FAST(arg=0, lineno=236)
         120	LOAD_GLOBAL(arg=4, lineno=236)
         122	LOAD_FAST(arg=1, lineno=236)
         124	CALL_FUNCTION(arg=1, lineno=236)
         126	CALL_METHOD(arg=2, lineno=236)
         128	RETURN_VALUE(arg=None, lineno=236)
>        130	LOAD_FAST(arg=4, lineno=237)
         132	LOAD_CONST(arg=2, lineno=237)
         134	COMPARE_OP(arg=3, lineno=237)
         136	POP_JUMP_IF_FALSE(arg=90, lineno=237)
>        138	LOAD_FAST(arg=4, lineno=238)
         140	LOAD_CONST(arg=1, lineno=238)
         142	BINARY_AND(arg=None, lineno=238)
         144	POP_JUMP_IF_FALSE(arg=78, lineno=238)
         146	LOAD_FAST(arg=2, lineno=239)
         148	LOAD_FAST(arg=0, lineno=239)
         150	INPLACE_MULTIPLY(arg=None, lineno=239)
         152	STORE_FAST(arg=2, lineno=239)
>        154	LOAD_FAST(arg=4, lineno=240)
         156	LOAD_CONST(arg=1, lineno=240)
         158	INPLACE_RSHIFT(arg=None, lineno=240)
         160	STORE_FAST(arg=4, lineno=240)
         162	LOAD_FAST(arg=0, lineno=241)
         164	LOAD_FAST(arg=0, lineno=241)
         166	INPLACE_MULTIPLY(arg=None, lineno=241)
         168	STORE_FAST(arg=0, lineno=241)
         170	LOAD_FAST(arg=4, lineno=237)
         172	LOAD_CONST(arg=2, lineno=237)
         174	COMPARE_OP(arg=3, lineno=237)
         176	POP_JUMP_IF_TRUE(arg=70, lineno=237)
>        178	LOAD_FAST(arg=3, lineno=243)
         180	POP_JUMP_IF_FALSE(arg=96, lineno=243)
         182	LOAD_CONST(arg=8, lineno=243)
         184	LOAD_FAST(arg=2, lineno=243)
         186	BINARY_TRUE_DIVIDE(arg=None, lineno=243)
         188	RETURN_VALUE(arg=None, lineno=243)
>        190	LOAD_FAST(arg=2, lineno=243)
         192	RETURN_VALUE(arg=None, lineno=243)
2024-09-04 18:31:54,692 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:54,702 - stack: []
2024-09-04 18:31:54,702 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:54,702 - dispatch pc=0, inst=NOP(arg=None, lineno=214)
2024-09-04 18:31:54,702 - stack []
2024-09-04 18:31:54,702 - dispatch pc=2, inst=LOAD_DEREF(arg=1, lineno=216)
2024-09-04 18:31:54,702 - stack []
2024-09-04 18:31:54,702 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=216)
2024-09-04 18:31:54,702 - stack ['$2load_deref.0']
2024-09-04 18:31:54,702 - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=216)
2024-09-04 18:31:54,702 - stack ['$2load_deref.0', '$const4.1']
2024-09-04 18:31:54,702 - dispatch pc=8, inst=STORE_FAST(arg=2, lineno=216)
2024-09-04 18:31:54,702 - stack ['$6call_function.2']
2024-09-04 18:31:54,702 - dispatch pc=10, inst=LOAD_DEREF(arg=1, lineno=217)
2024-09-04 18:31:54,702 - stack []
2024-09-04 18:31:54,702 - dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=217)
2024-09-04 18:31:54,702 - stack ['$10load_deref.3']
2024-09-04 18:31:54,704 - dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=217)
2024-09-04 18:31:54,704 - stack ['$10load_deref.3', '$a12.4']
2024-09-04 18:31:54,704 - dispatch pc=16, inst=STORE_FAST(arg=0, lineno=217)
2024-09-04 18:31:54,704 - stack ['$14call_function.5']
2024-09-04 18:31:54,704 - dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=218)
2024-09-04 18:31:54,704 - stack []
2024-09-04 18:31:54,704 - dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=218)
2024-09-04 18:31:54,704 - stack ['$b18.6']
2024-09-04 18:31:54,704 - dispatch pc=22, inst=COMPARE_OP(arg=0, lineno=218)
2024-09-04 18:31:54,704 - stack ['$b18.6', '$const20.7']
2024-09-04 18:31:54,704 - dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=50, lineno=218)
2024-09-04 18:31:54,704 - stack ['$22compare_op.8']
2024-09-04 18:31:54,704 - end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:54,704 - pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
2024-09-04 18:31:54,704 - stack: []
2024-09-04 18:31:54,704 - state.pc_initial: State(pc_initial=26 nstack_initial=0)
2024-09-04 18:31:54,704 - dispatch pc=26, inst=LOAD_CONST(arg=3, lineno=219)
2024-09-04 18:31:54,704 - stack []
2024-09-04 18:31:54,704 - dispatch pc=28, inst=STORE_FAST(arg=3, lineno=219)
2024-09-04 18:31:54,704 - stack ['$const26.0']
2024-09-04 18:31:54,704 - dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=220)
2024-09-04 18:31:54,704 - stack []
2024-09-04 18:31:54,704 - dispatch pc=32, inst=UNARY_NEGATIVE(arg=None, lineno=220)
2024-09-04 18:31:54,704 - stack ['$b30.1']
2024-09-04 18:31:54,704 - dispatch pc=34, inst=STORE_FAST(arg=4, lineno=220)
2024-09-04 18:31:54,704 - stack ['$32unary_negative.2']
2024-09-04 18:31:54,704 - dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=221)
2024-09-04 18:31:54,704 - stack []
2024-09-04 18:31:54,704 - dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=221)
2024-09-04 18:31:54,704 - stack ['$exp36.3']
2024-09-04 18:31:54,704 - dispatch pc=40, inst=COMPARE_OP(arg=0, lineno=221)
2024-09-04 18:31:54,704 - stack ['$exp36.3', '$const38.4']
2024-09-04 18:31:54,704 - dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=25, lineno=221)
2024-09-04 18:31:54,704 - stack ['$40compare_op.5']
2024-09-04 18:31:54,704 - end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:54,704 - pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0)])
2024-09-04 18:31:54,704 - stack: []
2024-09-04 18:31:54,704 - state.pc_initial: State(pc_initial=98 nstack_initial=0)
2024-09-04 18:31:54,704 - dispatch pc=98, inst=LOAD_CONST(arg=6, lineno=232)
2024-09-04 18:31:54,704 - stack []
2024-09-04 18:31:54,704 - dispatch pc=100, inst=STORE_FAST(arg=3, lineno=232)
2024-09-04 18:31:54,704 - stack ['$const98.0']
2024-09-04 18:31:54,704 - dispatch pc=102, inst=LOAD_FAST(arg=1, lineno=233)
2024-09-04 18:31:54,704 - stack []
2024-09-04 18:31:54,704 - dispatch pc=104, inst=STORE_FAST(arg=4, lineno=233)
2024-09-04 18:31:54,704 - stack ['$b102.1']
2024-09-04 18:31:54,704 - end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:54,704 - pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
2024-09-04 18:31:54,704 - stack: []
2024-09-04 18:31:54,704 - state.pc_initial: State(pc_initial=44 nstack_initial=0)
2024-09-04 18:31:54,704 - dispatch pc=44, inst=LOAD_GLOBAL(arg=0, lineno=222)
2024-09-04 18:31:54,704 - stack []
2024-09-04 18:31:54,704 - dispatch pc=46, inst=RAISE_VARARGS(arg=1, lineno=222)
2024-09-04 18:31:54,704 - stack ['$44load_global.0']
2024-09-04 18:31:54,704 - end state. edges=[]
2024-09-04 18:31:54,704 - pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
2024-09-04 18:31:54,704 - stack: []
2024-09-04 18:31:54,704 - state.pc_initial: State(pc_initial=48 nstack_initial=0)
2024-09-04 18:31:54,704 - dispatch pc=48, inst=LOAD_DEREF(arg=0, lineno=223)
2024-09-04 18:31:54,704 - stack []
2024-09-04 18:31:54,704 - dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=49, lineno=223)
2024-09-04 18:31:54,704 - stack ['$48load_deref.0']
2024-09-04 18:31:54,704 - end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=96, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:54,704 - pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=96 nstack_initial=0)])
2024-09-04 18:31:54,704 - stack: []
2024-09-04 18:31:54,704 - state.pc_initial: State(pc_initial=106 nstack_initial=0)
2024-09-04 18:31:54,704 - dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=234)
2024-09-04 18:31:54,704 - stack []
2024-09-04 18:31:54,704 - dispatch pc=108, inst=LOAD_CONST(arg=7, lineno=234)
2024-09-04 18:31:54,704 - stack ['$exp106.0']
2024-09-04 18:31:54,704 - dispatch pc=110, inst=COMPARE_OP(arg=4, lineno=234)
2024-09-04 18:31:54,704 - stack ['$exp106.0', '$const108.1']
2024-09-04 18:31:54,704 - dispatch pc=112, inst=POP_JUMP_IF_FALSE(arg=66, lineno=234)
2024-09-04 18:31:54,704 - stack ['$110compare_op.2']
2024-09-04 18:31:54,704 - end state. edges=[Edge(pc=114, stack=(), blockstack=(), npush=0), Edge(pc=130, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:54,704 - pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
2024-09-04 18:31:54,704 - stack: []
2024-09-04 18:31:54,704 - state.pc_initial: State(pc_initial=52 nstack_initial=0)
2024-09-04 18:31:54,704 - dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=224)
2024-09-04 18:31:54,704 - stack []
2024-09-04 18:31:54,704 - dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=224)
2024-09-04 18:31:54,713 - stack ['$a52.0']
2024-09-04 18:31:54,713 - dispatch pc=56, inst=COMPARE_OP(arg=2, lineno=224)
2024-09-04 18:31:54,713 - stack ['$a52.0', '$const54.1']
2024-09-04 18:31:54,713 - dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=39, lineno=224)
2024-09-04 18:31:54,713 - stack ['$56compare_op.2']
2024-09-04 18:31:54,713 - end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=76, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:54,713 - pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
2024-09-04 18:31:54,713 - stack: []
2024-09-04 18:31:54,713 - state.pc_initial: State(pc_initial=96 nstack_initial=0)
2024-09-04 18:31:54,713 - dispatch pc=96, inst=JUMP_FORWARD(arg=4, lineno=230)
2024-09-04 18:31:54,713 - stack []
2024-09-04 18:31:54,713 - end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:54,713 - pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
2024-09-04 18:31:54,713 - stack: []
2024-09-04 18:31:54,713 - state.pc_initial: State(pc_initial=114 nstack_initial=0)
2024-09-04 18:31:54,713 - dispatch pc=114, inst=LOAD_GLOBAL(arg=2, lineno=236)
2024-09-04 18:31:54,713 - stack []
2024-09-04 18:31:54,713 - dispatch pc=116, inst=LOAD_METHOD(arg=3, lineno=236)
2024-09-04 18:31:54,713 - stack ['$114load_global.0']
2024-09-04 18:31:54,713 - dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=236)
2024-09-04 18:31:54,713 - stack ['$116load_method.1']
2024-09-04 18:31:54,713 - dispatch pc=120, inst=LOAD_GLOBAL(arg=4, lineno=236)
2024-09-04 18:31:54,713 - stack ['$116load_method.1', '$a118.2']
2024-09-04 18:31:54,713 - dispatch pc=122, inst=LOAD_FAST(arg=1, lineno=236)
2024-09-04 18:31:54,713 - stack ['$116load_method.1', '$a118.2', '$120load_global.3']
2024-09-04 18:31:54,713 - dispatch pc=124, inst=CALL_FUNCTION(arg=1, lineno=236)
2024-09-04 18:31:54,713 - stack ['$116load_method.1', '$a118.2', '$120load_global.3', '$b122.4']
2024-09-04 18:31:54,713 - dispatch pc=126, inst=CALL_METHOD(arg=2, lineno=236)
2024-09-04 18:31:54,713 - stack ['$116load_method.1', '$a118.2', '$124call_function.5']
2024-09-04 18:31:54,713 - dispatch pc=128, inst=RETURN_VALUE(arg=None, lineno=236)
2024-09-04 18:31:54,713 - stack ['$126call_method.6']
2024-09-04 18:31:54,713 - end state. edges=[]
2024-09-04 18:31:54,713 - pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
2024-09-04 18:31:54,713 - stack: []
2024-09-04 18:31:54,713 - state.pc_initial: State(pc_initial=130 nstack_initial=0)
2024-09-04 18:31:54,713 - dispatch pc=130, inst=LOAD_FAST(arg=4, lineno=237)
2024-09-04 18:31:54,713 - stack []
2024-09-04 18:31:54,713 - dispatch pc=132, inst=LOAD_CONST(arg=2, lineno=237)
2024-09-04 18:31:54,713 - stack ['$exp130.0']
2024-09-04 18:31:54,713 - dispatch pc=134, inst=COMPARE_OP(arg=3, lineno=237)
2024-09-04 18:31:54,713 - stack ['$exp130.0', '$const132.1']
2024-09-04 18:31:54,713 - dispatch pc=136, inst=POP_JUMP_IF_FALSE(arg=90, lineno=237)
2024-09-04 18:31:54,713 - stack ['$134compare_op.2']
2024-09-04 18:31:54,713 - end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0), Edge(pc=178, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:54,713 - pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=178 nstack_initial=0)])
2024-09-04 18:31:54,713 - stack: []
2024-09-04 18:31:54,713 - state.pc_initial: State(pc_initial=60 nstack_initial=0)
2024-09-04 18:31:54,713 - dispatch pc=60, inst=LOAD_DEREF(arg=2, lineno=225)
2024-09-04 18:31:54,713 - stack []
2024-09-04 18:31:54,713 - dispatch pc=62, inst=POP_JUMP_IF_FALSE(arg=35, lineno=225)
2024-09-04 18:31:54,713 - stack ['$60load_deref.0']
2024-09-04 18:31:54,713 - end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:54,713 - pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=178 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
2024-09-04 18:31:54,713 - stack: []
2024-09-04 18:31:54,713 - state.pc_initial: State(pc_initial=76 nstack_initial=0)
2024-09-04 18:31:54,713 - dispatch pc=76, inst=LOAD_FAST(arg=0, lineno=229)
2024-09-04 18:31:54,713 - stack []
2024-09-04 18:31:54,713 - dispatch pc=78, inst=LOAD_CONST(arg=1, lineno=229)
2024-09-04 18:31:54,713 - stack ['$a76.0']
2024-09-04 18:31:54,713 - dispatch pc=80, inst=COMPARE_OP(arg=3, lineno=229)
2024-09-04 18:31:54,713 - stack ['$a76.0', '$const78.1']
2024-09-04 18:31:54,713 - dispatch pc=82, inst=POP_JUMP_IF_FALSE(arg=49, lineno=229)
2024-09-04 18:31:54,713 - stack ['$80compare_op.2']
2024-09-04 18:31:54,713 - end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=96, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:54,713 - pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=178 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=96 nstack_initial=0)])
2024-09-04 18:31:54,713 - pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=178 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=96 nstack_initial=0)])
2024-09-04 18:31:54,713 - stack: []
2024-09-04 18:31:54,713 - state.pc_initial: State(pc_initial=138 nstack_initial=0)
2024-09-04 18:31:54,713 - dispatch pc=138, inst=LOAD_FAST(arg=4, lineno=238)
2024-09-04 18:31:54,713 - stack []
2024-09-04 18:31:54,713 - dispatch pc=140, inst=LOAD_CONST(arg=1, lineno=238)
2024-09-04 18:31:54,713 - stack ['$exp138.0']
2024-09-04 18:31:54,713 - dispatch pc=142, inst=BINARY_AND(arg=None, lineno=238)
2024-09-04 18:31:54,713 - stack ['$exp138.0', '$const140.1']
2024-09-04 18:31:54,713 - dispatch pc=144, inst=POP_JUMP_IF_FALSE(arg=78, lineno=238)
2024-09-04 18:31:54,720 - stack ['$142binary_and.2']
2024-09-04 18:31:54,720 - end state. edges=[Edge(pc=146, stack=(), blockstack=(), npush=0), Edge(pc=154, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:54,720 - pending: deque([State(pc_initial=178 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
2024-09-04 18:31:54,720 - stack: []
2024-09-04 18:31:54,720 - state.pc_initial: State(pc_initial=178 nstack_initial=0)
2024-09-04 18:31:54,720 - dispatch pc=178, inst=LOAD_FAST(arg=3, lineno=243)
2024-09-04 18:31:54,720 - stack []
2024-09-04 18:31:54,720 - dispatch pc=180, inst=POP_JUMP_IF_FALSE(arg=96, lineno=243)
2024-09-04 18:31:54,721 - stack ['$invert178.0']
2024-09-04 18:31:54,721 - end state. edges=[Edge(pc=182, stack=(), blockstack=(), npush=0), Edge(pc=190, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:54,721 - pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=182 nstack_initial=0), State(pc_initial=190 nstack_initial=0)])
2024-09-04 18:31:54,721 - stack: []
2024-09-04 18:31:54,721 - state.pc_initial: State(pc_initial=64 nstack_initial=0)
2024-09-04 18:31:54,722 - dispatch pc=64, inst=LOAD_DEREF(arg=2, lineno=226)
2024-09-04 18:31:54,722 - stack []
2024-09-04 18:31:54,722 - dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=226)
2024-09-04 18:31:54,722 - stack ['$64load_deref.0']
2024-09-04 18:31:54,722 - end state. edges=[]
2024-09-04 18:31:54,722 - pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=182 nstack_initial=0), State(pc_initial=190 nstack_initial=0)])
2024-09-04 18:31:54,723 - stack: []
2024-09-04 18:31:54,723 - state.pc_initial: State(pc_initial=68 nstack_initial=0)
2024-09-04 18:31:54,723 - dispatch pc=68, inst=LOAD_GLOBAL(arg=1, lineno=228)
2024-09-04 18:31:54,723 - stack []
2024-09-04 18:31:54,723 - dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=228)
2024-09-04 18:31:54,723 - stack ['$68load_global.0']
2024-09-04 18:31:54,723 - dispatch pc=72, inst=CALL_FUNCTION(arg=1, lineno=228)
2024-09-04 18:31:54,723 - stack ['$68load_global.0', '$const70.1']
2024-09-04 18:31:54,723 - dispatch pc=74, inst=RAISE_VARARGS(arg=1, lineno=228)
2024-09-04 18:31:54,723 - stack ['$72call_function.2']
2024-09-04 18:31:54,723 - end state. edges=[]
2024-09-04 18:31:54,724 - pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=182 nstack_initial=0), State(pc_initial=190 nstack_initial=0)])
2024-09-04 18:31:54,724 - stack: []
2024-09-04 18:31:54,724 - state.pc_initial: State(pc_initial=84 nstack_initial=0)
2024-09-04 18:31:54,724 - dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=229)
2024-09-04 18:31:54,724 - stack []
2024-09-04 18:31:54,724 - dispatch pc=86, inst=LOAD_CONST(arg=5, lineno=229)
2024-09-04 18:31:54,724 - stack ['$a84.0']
2024-09-04 18:31:54,725 - dispatch pc=88, inst=COMPARE_OP(arg=3, lineno=229)
2024-09-04 18:31:54,725 - stack ['$a84.0', '$const86.1']
2024-09-04 18:31:54,725 - dispatch pc=90, inst=POP_JUMP_IF_FALSE(arg=49, lineno=229)
2024-09-04 18:31:54,725 - stack ['$88compare_op.2']
2024-09-04 18:31:54,725 - end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0), Edge(pc=96, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:54,725 - pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=182 nstack_initial=0), State(pc_initial=190 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=96 nstack_initial=0)])
2024-09-04 18:31:54,726 - pending: deque([State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=182 nstack_initial=0), State(pc_initial=190 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=96 nstack_initial=0)])
2024-09-04 18:31:54,726 - stack: []
2024-09-04 18:31:54,726 - state.pc_initial: State(pc_initial=146 nstack_initial=0)
2024-09-04 18:31:54,726 - dispatch pc=146, inst=LOAD_FAST(arg=2, lineno=239)
2024-09-04 18:31:54,726 - stack []
2024-09-04 18:31:54,726 - dispatch pc=148, inst=LOAD_FAST(arg=0, lineno=239)
2024-09-04 18:31:54,726 - stack ['$r146.0']
2024-09-04 18:31:54,727 - dispatch pc=150, inst=INPLACE_MULTIPLY(arg=None, lineno=239)
2024-09-04 18:31:54,727 - stack ['$r146.0', '$a148.1']
2024-09-04 18:31:54,727 - dispatch pc=152, inst=STORE_FAST(arg=2, lineno=239)
2024-09-04 18:31:54,727 - stack ['$150inplace_multiply.2']
2024-09-04 18:31:54,727 - end state. edges=[Edge(pc=154, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:54,727 - pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=182 nstack_initial=0), State(pc_initial=190 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
2024-09-04 18:31:54,728 - stack: []
2024-09-04 18:31:54,728 - state.pc_initial: State(pc_initial=154 nstack_initial=0)
2024-09-04 18:31:54,729 - dispatch pc=154, inst=LOAD_FAST(arg=4, lineno=240)
2024-09-04 18:31:54,729 - stack []
2024-09-04 18:31:54,729 - dispatch pc=156, inst=LOAD_CONST(arg=1, lineno=240)
2024-09-04 18:31:54,729 - stack ['$exp154.0']
2024-09-04 18:31:54,729 - dispatch pc=158, inst=INPLACE_RSHIFT(arg=None, lineno=240)
2024-09-04 18:31:54,729 - stack ['$exp154.0', '$const156.1']
2024-09-04 18:31:54,729 - dispatch pc=160, inst=STORE_FAST(arg=4, lineno=240)
2024-09-04 18:31:54,729 - stack ['$158inplace_rshift.2']
2024-09-04 18:31:54,729 - dispatch pc=162, inst=LOAD_FAST(arg=0, lineno=241)
2024-09-04 18:31:54,729 - stack []
2024-09-04 18:31:54,729 - dispatch pc=164, inst=LOAD_FAST(arg=0, lineno=241)
2024-09-04 18:31:54,729 - stack ['$a162.3']
2024-09-04 18:31:54,729 - dispatch pc=166, inst=INPLACE_MULTIPLY(arg=None, lineno=241)
2024-09-04 18:31:54,729 - stack ['$a162.3', '$a164.4']
2024-09-04 18:31:54,729 - dispatch pc=168, inst=STORE_FAST(arg=0, lineno=241)
2024-09-04 18:31:54,729 - stack ['$166inplace_multiply.5']
2024-09-04 18:31:54,729 - dispatch pc=170, inst=LOAD_FAST(arg=4, lineno=237)
2024-09-04 18:31:54,729 - stack []
2024-09-04 18:31:54,729 - dispatch pc=172, inst=LOAD_CONST(arg=2, lineno=237)
2024-09-04 18:31:54,729 - stack ['$exp170.6']
2024-09-04 18:31:54,729 - dispatch pc=174, inst=COMPARE_OP(arg=3, lineno=237)
2024-09-04 18:31:54,729 - stack ['$exp170.6', '$const172.7']
2024-09-04 18:31:54,729 - dispatch pc=176, inst=POP_JUMP_IF_TRUE(arg=70, lineno=237)
2024-09-04 18:31:54,729 - stack ['$174compare_op.8']
2024-09-04 18:31:54,729 - end state. edges=[Edge(pc=178, stack=(), blockstack=(), npush=0), Edge(pc=138, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:54,729 - pending: deque([State(pc_initial=182 nstack_initial=0), State(pc_initial=190 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=178 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
2024-09-04 18:31:54,729 - stack: []
2024-09-04 18:31:54,729 - state.pc_initial: State(pc_initial=182 nstack_initial=0)
2024-09-04 18:31:54,729 - dispatch pc=182, inst=LOAD_CONST(arg=8, lineno=243)
2024-09-04 18:31:54,729 - stack []
2024-09-04 18:31:54,729 - dispatch pc=184, inst=LOAD_FAST(arg=2, lineno=243)
2024-09-04 18:31:54,729 - stack ['$const182.0']
2024-09-04 18:31:54,729 - dispatch pc=186, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=243)
2024-09-04 18:31:54,729 - stack ['$const182.0', '$r184.1']
2024-09-04 18:31:54,729 - dispatch pc=188, inst=RETURN_VALUE(arg=None, lineno=243)
2024-09-04 18:31:54,729 - stack ['$186binary_true_divide.2']
2024-09-04 18:31:54,729 - end state. edges=[]
2024-09-04 18:31:54,729 - pending: deque([State(pc_initial=190 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=178 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
2024-09-04 18:31:54,729 - stack: []
2024-09-04 18:31:54,729 - state.pc_initial: State(pc_initial=190 nstack_initial=0)
2024-09-04 18:31:54,729 - dispatch pc=190, inst=LOAD_FAST(arg=2, lineno=243)
2024-09-04 18:31:54,729 - stack []
2024-09-04 18:31:54,729 - dispatch pc=192, inst=RETURN_VALUE(arg=None, lineno=243)
2024-09-04 18:31:54,729 - stack ['$r190.0']
2024-09-04 18:31:54,729 - end state. edges=[]
2024-09-04 18:31:54,729 - pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=178 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
2024-09-04 18:31:54,729 - stack: []
2024-09-04 18:31:54,729 - state.pc_initial: State(pc_initial=92 nstack_initial=0)
2024-09-04 18:31:54,729 - dispatch pc=92, inst=LOAD_CONST(arg=2, lineno=230)
2024-09-04 18:31:54,729 - stack []
2024-09-04 18:31:54,729 - dispatch pc=94, inst=RETURN_VALUE(arg=None, lineno=230)
2024-09-04 18:31:54,729 - stack ['$const92.0']
2024-09-04 18:31:54,729 - end state. edges=[]
2024-09-04 18:31:54,729 - pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=178 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
2024-09-04 18:31:54,729 - pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=178 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
2024-09-04 18:31:54,729 - pending: deque([State(pc_initial=178 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
2024-09-04 18:31:54,729 - pending: deque([State(pc_initial=138 nstack_initial=0)])
2024-09-04 18:31:54,729 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:54,729 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=146 nstack_initial=0): set(),
             State(pc_initial=154 nstack_initial=0): set(),
             State(pc_initial=178 nstack_initial=0): set(),
             State(pc_initial=182 nstack_initial=0): set(),
             State(pc_initial=190 nstack_initial=0): set()})
2024-09-04 18:31:54,729 - defmap: {}
2024-09-04 18:31:54,729 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:54,729 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:54,729 - keep phismap: {}
2024-09-04 18:31:54,729 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:54,729 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:54,737 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$const4.1'}), (6, {'func': '$2load_deref.0', 'args': ['$const4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_deref.3'}), (12, {'res': '$a12.4'}), (14, {'func': '$10load_deref.3', 'args': ['$a12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5'}), (18, {'res': '$b18.6'}), (20, {'res': '$const20.7'}), (22, {'lhs': '$b18.6', 'rhs': '$const20.7', 'res': '$22compare_op.8'}), (24, {'pred': '$22compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 98: ()})
2024-09-04 18:31:54,737 - block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$const26.0'}), (28, {'value': '$const26.0'}), (30, {'res': '$b30.1'}), (32, {'value': '$b30.1', 'res': '$32unary_negative.2'}), (34, {'value': '$32unary_negative.2'}), (36, {'res': '$exp36.3'}), (38, {'res': '$const38.4'}), (40, {'lhs': '$exp36.3', 'rhs': '$const38.4', 'res': '$40compare_op.5'}), (42, {'pred': '$40compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 48: ()})
2024-09-04 18:31:54,738 - block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'exc': '$44load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:54,738 - block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$48load_deref.0'}), (50, {'pred': '$48load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 96: ()})
2024-09-04 18:31:54,738 - block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$a52.0'}), (54, {'res': '$const54.1'}), (56, {'lhs': '$a52.0', 'rhs': '$const54.1', 'res': '$56compare_op.2'}), (58, {'pred': '$56compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 76: ()})
2024-09-04 18:31:54,738 - block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$60load_deref.0'}), (62, {'pred': '$60load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: (), 68: ()})
2024-09-04 18:31:54,738 - block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$64load_deref.0'}), (66, {'retval': '$64load_deref.0', 'castval': '$66return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:54,738 - block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$68load_global.0'}), (70, {'res': '$const70.1'}), (72, {'func': '$68load_global.0', 'args': ['$const70.1'], 'res': '$72call_function.2'}), (74, {'exc': '$72call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:54,738 - block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$a76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$a76.0', 'rhs': '$const78.1', 'res': '$80compare_op.2'}), (82, {'pred': '$80compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 96: ()})
2024-09-04 18:31:54,739 - block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$a84.0'}), (86, {'res': '$const86.1'}), (88, {'lhs': '$a84.0', 'rhs': '$const86.1', 'res': '$88compare_op.2'}), (90, {'pred': '$88compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: (), 96: ()})
2024-09-04 18:31:54,739 - block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$const92.0'}), (94, {'retval': '$const92.0', 'castval': '$94return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:54,739 - block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ()})
2024-09-04 18:31:54,739 - block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$const98.0'}), (100, {'value': '$const98.0'}), (102, {'res': '$b102.1'}), (104, {'value': '$b102.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ()})
2024-09-04 18:31:54,739 - block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$exp106.0'}), (108, {'res': '$const108.1'}), (110, {'lhs': '$exp106.0', 'rhs': '$const108.1', 'res': '$110compare_op.2'}), (112, {'pred': '$110compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: (), 130: ()})
2024-09-04 18:31:54,739 - block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$114load_global.0'}), (116, {'item': '$114load_global.0', 'res': '$116load_method.1'}), (118, {'res': '$a118.2'}), (120, {'res': '$120load_global.3'}), (122, {'res': '$b122.4'}), (124, {'func': '$120load_global.3', 'args': ['$b122.4'], 'res': '$124call_function.5'}), (126, {'func': '$116load_method.1', 'args': ['$a118.2', '$124call_function.5'], 'res': '$126call_method.6'}), (128, {'retval': '$126call_method.6', 'castval': '$128return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:54,739 - block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=((130, {'res': '$exp130.0'}), (132, {'res': '$const132.1'}), (134, {'lhs': '$exp130.0', 'rhs': '$const132.1', 'res': '$134compare_op.2'}), (136, {'pred': '$134compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: (), 178: ()})
2024-09-04 18:31:54,739 - block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$exp138.0'}), (140, {'res': '$const140.1'}), (142, {'lhs': '$exp138.0', 'rhs': '$const140.1', 'res': '$142binary_and.2'}), (144, {'pred': '$142binary_and.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={146: (), 154: ()})
2024-09-04 18:31:54,739 - block_infos State(pc_initial=146 nstack_initial=0):
AdaptBlockInfo(insts=((146, {'res': '$r146.0'}), (148, {'res': '$a148.1'}), (150, {'lhs': '$r146.0', 'rhs': '$a148.1', 'res': '$150inplace_multiply.2'}), (152, {'value': '$150inplace_multiply.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={154: ()})
2024-09-04 18:31:54,740 - block_infos State(pc_initial=154 nstack_initial=0):
AdaptBlockInfo(insts=((154, {'res': '$exp154.0'}), (156, {'res': '$const156.1'}), (158, {'lhs': '$exp154.0', 'rhs': '$const156.1', 'res': '$158inplace_rshift.2'}), (160, {'value': '$158inplace_rshift.2'}), (162, {'res': '$a162.3'}), (164, {'res': '$a164.4'}), (166, {'lhs': '$a162.3', 'rhs': '$a164.4', 'res': '$166inplace_multiply.5'}), (168, {'value': '$166inplace_multiply.5'}), (170, {'res': '$exp170.6'}), (172, {'res': '$const172.7'}), (174, {'lhs': '$exp170.6', 'rhs': '$const172.7', 'res': '$174compare_op.8'}), (176, {'pred': '$174compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={178: (), 138: ()})
2024-09-04 18:31:54,740 - block_infos State(pc_initial=178 nstack_initial=0):
AdaptBlockInfo(insts=((178, {'res': '$invert178.0'}), (180, {'pred': '$invert178.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={182: (), 190: ()})
2024-09-04 18:31:54,740 - block_infos State(pc_initial=182 nstack_initial=0):
AdaptBlockInfo(insts=((182, {'res': '$const182.0'}), (184, {'res': '$r184.1'}), (186, {'lhs': '$const182.0', 'rhs': '$r184.1', 'res': '$186binary_true_divide.2'}), (188, {'retval': '$186binary_true_divide.2', 'castval': '$188return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:54,740 - block_infos State(pc_initial=190 nstack_initial=0):
AdaptBlockInfo(insts=((190, {'res': '$r190.0'}), (192, {'retval': '$r190.0', 'castval': '$192return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:54,746 - label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $2load_deref.0 = freevar(tp: float64)    ['$2load_deref.0']
    $const4.1 = const(int, 1)                ['$const4.1']
    r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_deref.0', '$const4.1', 'r']
    $10load_deref.3 = freevar(tp: float64)   ['$10load_deref.3']
    a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_deref.3', 'a', 'a.1']
    $const20.7 = const(int, 0)               ['$const20.7']
    $22compare_op.8 = b < $const20.7         ['$22compare_op.8', '$const20.7', 'b']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None) ['$22compare_op.8', '$24pred', 'bool24']
    branch $24pred, 26, 98                   ['$24pred']
label 26:
    invert = const(bool, True)               ['invert']
    exp = unary(fn=<built-in function neg>, value=b) ['b', 'exp']
    $const38.4 = const(int, 0)               ['$const38.4']
    $40compare_op.5 = exp < $const38.4       ['$40compare_op.5', '$const38.4', 'exp']
    bool42 = global(bool: <class 'bool'>)    ['bool42']
    $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None) ['$40compare_op.5', '$42pred', 'bool42']
    branch $42pred, 44, 48                   ['$42pred']
label 44:
    $44load_global.0 = global(OverflowError: <class 'OverflowError'>) ['$44load_global.0']
    raise $44load_global.0                   ['$44load_global.0']
label 48:
    $48load_deref.0 = freevar(is_integer: False) ['$48load_deref.0']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None) ['$48load_deref.0', '$50pred', 'bool50']
    branch $50pred, 52, 96                   ['$50pred']
label 52:
    $const54.1 = const(int, 0)               ['$const54.1']
    $56compare_op.2 = a.1 == $const54.1      ['$56compare_op.2', '$const54.1', 'a.1']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:224),), kws=(), vararg=None, varkwarg=None, target=None) ['$56compare_op.2', '$58pred', 'bool58']
    branch $58pred, 60, 76                   ['$58pred']
label 60:
    $60load_deref.0 = freevar(zerodiv_return: False) ['$60load_deref.0']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:225),), kws=(), vararg=None, varkwarg=None, target=None) ['$60load_deref.0', '$62pred', 'bool62']
    branch $62pred, 64, 68                   ['$62pred']
label 64:
    $64load_deref.0 = freevar(zerodiv_return: False) ['$64load_deref.0']
    $66return_value.1 = cast(value=$64load_deref.0) ['$64load_deref.0', '$66return_value.1']
    return $66return_value.1                 ['$66return_value.1']
label 68:
    $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$68load_global.0']
    $const70.1 = const(str, 0 cannot be raised to a negative power) ['$const70.1']
    $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:228)], kws=(), vararg=None, varkwarg=None, target=None) ['$68load_global.0', '$72call_function.2', '$const70.1']
    raise $72call_function.2                 ['$72call_function.2']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80compare_op.2 = a.1 != $const78.1      ['$80compare_op.2', '$const78.1', 'a.1']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$80compare_op.2', '$82pred', 'bool82']
    branch $82pred, 84, 96                   ['$82pred']
label 84:
    $const86.1 = const(int, -1)              ['$const86.1']
    $88compare_op.2 = a.1 != $const86.1      ['$88compare_op.2', '$const86.1', 'a.1']
    bool90 = global(bool: <class 'bool'>)    ['bool90']
    $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$88compare_op.2', '$90pred', 'bool90']
    branch $90pred, 92, 96                   ['$90pred']
label 92:
    $const92.0 = const(int, 0)               ['$const92.0']
    $94return_value.1 = cast(value=$const92.0) ['$94return_value.1', '$const92.0']
    return $94return_value.1                 ['$94return_value.1']
label 96:
    jump 106                                 []
label 98:
    invert = const(bool, False)              ['invert']
    exp = b                                  ['b', 'exp']
    jump 106                                 []
label 106:
    $const108.1 = const(int, 65536)          ['$const108.1']
    $110compare_op.2 = exp > $const108.1     ['$110compare_op.2', '$const108.1', 'exp']
    bool112 = global(bool: <class 'bool'>)   ['bool112']
    $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None) ['$110compare_op.2', '$112pred', 'bool112']
    branch $112pred, 114, 130                ['$112pred']
label 114:
    $114load_global.0 = global(math: <module 'math' (built-in)>) ['$114load_global.0']
    $116load_method.1 = getattr(value=$114load_global.0, attr=pow) ['$114load_global.0', '$116load_method.1']
    $120load_global.3 = global(float: <class 'float'>) ['$120load_global.3']
    $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None) ['$120load_global.3', '$124call_function.5', 'b']
    $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None) ['$116load_method.1', '$124call_function.5', '$126call_method.6', 'a.1']
    $128return_value.7 = cast(value=$126call_method.6) ['$126call_method.6', '$128return_value.7']
    return $128return_value.7                ['$128return_value.7']
label 130:
    $const132.1 = const(int, 0)              ['$const132.1']
    $134compare_op.2 = exp != $const132.1    ['$134compare_op.2', '$const132.1', 'exp']
    bool136 = global(bool: <class 'bool'>)   ['bool136']
    $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None) ['$134compare_op.2', '$136pred', 'bool136']
    branch $136pred, 138, 178                ['$136pred']
label 138:
    $const140.1 = const(int, 1)              ['$const140.1']
    $142binary_and.2 = exp & $const140.1     ['$142binary_and.2', '$const140.1', 'exp']
    bool144 = global(bool: <class 'bool'>)   ['bool144']
    $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None) ['$142binary_and.2', '$144pred', 'bool144']
    branch $144pred, 146, 154                ['$144pred']
label 146:
    $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$150inplace_multiply.2', 'a.1', 'r']
    r = $150inplace_multiply.2               ['$150inplace_multiply.2', 'r']
    jump 154                                 []
label 154:
    $const156.1 = const(int, 1)              ['$const156.1']
    $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined) ['$158inplace_rshift.2', '$const156.1', 'exp']
    exp = $158inplace_rshift.2               ['$158inplace_rshift.2', 'exp']
    $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$166inplace_multiply.5', 'a.1', 'a.1']
    a.1 = $166inplace_multiply.5             ['$166inplace_multiply.5', 'a.1']
    $const172.7 = const(int, 0)              ['$const172.7']
    $174compare_op.8 = exp != $const172.7    ['$174compare_op.8', '$const172.7', 'exp']
    bool176 = global(bool: <class 'bool'>)   ['bool176']
    $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None) ['$174compare_op.8', '$176pred', 'bool176']
    branch $176pred, 138, 178                ['$176pred']
label 178:
    bool180 = global(bool: <class 'bool'>)   ['bool180']
    $180pred = call bool180(invert, func=bool180, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None) ['$180pred', 'bool180', 'invert']
    branch $180pred, 182, 190                ['$180pred']
label 182:
    $const182.0 = const(float, 1.0)          ['$const182.0']
    $186binary_true_divide.2 = $const182.0 / r ['$186binary_true_divide.2', '$const182.0', 'r']
    $188return_value.3 = cast(value=$186binary_true_divide.2) ['$186binary_true_divide.2', '$188return_value.3']
    return $188return_value.3                ['$188return_value.3']
label 190:
    $192return_value.1 = cast(value=r)       ['$192return_value.1', 'r']
    return $192return_value.1                ['$192return_value.1']

2024-09-04 18:31:54,758 - ==== SSA block analysis pass on 0
2024-09-04 18:31:54,758 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243136ED1E0>
2024-09-04 18:31:54,758 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:54,758 - on stmt: b = arg(1, name=b)
2024-09-04 18:31:54,758 - on stmt: $2load_deref.0 = freevar(tp: float64)
2024-09-04 18:31:54,758 - on stmt: $const4.1 = const(int, 1)
2024-09-04 18:31:54,758 - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,758 - on stmt: $10load_deref.3 = freevar(tp: float64)
2024-09-04 18:31:54,758 - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,758 - on stmt: $const20.7 = const(int, 0)
2024-09-04 18:31:54,758 - on stmt: $22compare_op.8 = b < $const20.7
2024-09-04 18:31:54,758 - on stmt: bool24 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,758 - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,758 - on stmt: branch $24pred, 26, 98
2024-09-04 18:31:54,758 - ==== SSA block analysis pass on 26
2024-09-04 18:31:54,758 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243136ED1E0>
2024-09-04 18:31:54,758 - on stmt: invert = const(bool, True)
2024-09-04 18:31:54,758 - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2024-09-04 18:31:54,758 - on stmt: $const38.4 = const(int, 0)
2024-09-04 18:31:54,758 - on stmt: $40compare_op.5 = exp < $const38.4
2024-09-04 18:31:54,758 - on stmt: bool42 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,758 - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,758 - on stmt: branch $42pred, 44, 48
2024-09-04 18:31:54,758 - ==== SSA block analysis pass on 44
2024-09-04 18:31:54,758 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243136ED1E0>
2024-09-04 18:31:54,758 - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2024-09-04 18:31:54,758 - on stmt: <static> raise <class 'OverflowError'>
2024-09-04 18:31:54,758 - ==== SSA block analysis pass on 48
2024-09-04 18:31:54,758 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243136ED1E0>
2024-09-04 18:31:54,758 - on stmt: $48load_deref.0 = freevar(is_integer: False)
2024-09-04 18:31:54,758 - on stmt: bool50 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,758 - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,758 - on stmt: jump 96
2024-09-04 18:31:54,758 - ==== SSA block analysis pass on 96
2024-09-04 18:31:54,773 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243136ED1E0>
2024-09-04 18:31:54,773 - on stmt: jump 106
2024-09-04 18:31:54,773 - ==== SSA block analysis pass on 98
2024-09-04 18:31:54,773 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243136ED1E0>
2024-09-04 18:31:54,773 - on stmt: invert = const(bool, False)
2024-09-04 18:31:54,773 - on stmt: exp = b
2024-09-04 18:31:54,773 - on stmt: jump 106
2024-09-04 18:31:54,773 - ==== SSA block analysis pass on 106
2024-09-04 18:31:54,773 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243136ED1E0>
2024-09-04 18:31:54,773 - on stmt: $const108.1 = const(int, 65536)
2024-09-04 18:31:54,773 - on stmt: $110compare_op.2 = exp > $const108.1
2024-09-04 18:31:54,773 - on stmt: bool112 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,773 - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,773 - on stmt: branch $112pred, 114, 130
2024-09-04 18:31:54,773 - ==== SSA block analysis pass on 114
2024-09-04 18:31:54,773 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243136ED1E0>
2024-09-04 18:31:54,773 - on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2024-09-04 18:31:54,773 - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2024-09-04 18:31:54,773 - on stmt: $120load_global.3 = global(float: <class 'float'>)
2024-09-04 18:31:54,773 - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,773 - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,775 - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2024-09-04 18:31:54,775 - on stmt: return $128return_value.7
2024-09-04 18:31:54,775 - ==== SSA block analysis pass on 130
2024-09-04 18:31:54,775 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243136ED1E0>
2024-09-04 18:31:54,775 - on stmt: $const132.1 = const(int, 0)
2024-09-04 18:31:54,775 - on stmt: $134compare_op.2 = exp != $const132.1
2024-09-04 18:31:54,775 - on stmt: bool136 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,775 - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,775 - on stmt: branch $136pred, 138, 178
2024-09-04 18:31:54,775 - ==== SSA block analysis pass on 138
2024-09-04 18:31:54,775 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243136ED1E0>
2024-09-04 18:31:54,775 - on stmt: $const140.1 = const(int, 1)
2024-09-04 18:31:54,775 - on stmt: $142binary_and.2 = exp & $const140.1
2024-09-04 18:31:54,776 - on stmt: bool144 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,776 - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,776 - on stmt: branch $144pred, 146, 154
2024-09-04 18:31:54,776 - ==== SSA block analysis pass on 146
2024-09-04 18:31:54,776 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243136ED1E0>
2024-09-04 18:31:54,776 - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,776 - on stmt: r = $150inplace_multiply.2
2024-09-04 18:31:54,776 - on stmt: jump 154
2024-09-04 18:31:54,776 - ==== SSA block analysis pass on 154
2024-09-04 18:31:54,776 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243136ED1E0>
2024-09-04 18:31:54,776 - on stmt: $const156.1 = const(int, 1)
2024-09-04 18:31:54,776 - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,777 - on stmt: exp = $158inplace_rshift.2
2024-09-04 18:31:54,777 - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,777 - on stmt: a.1 = $166inplace_multiply.5
2024-09-04 18:31:54,777 - on stmt: $const172.7 = const(int, 0)
2024-09-04 18:31:54,777 - on stmt: $174compare_op.8 = exp != $const172.7
2024-09-04 18:31:54,777 - on stmt: bool176 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,777 - on stmt: $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,777 - on stmt: branch $176pred, 138, 178
2024-09-04 18:31:54,777 - ==== SSA block analysis pass on 178
2024-09-04 18:31:54,777 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243136ED1E0>
2024-09-04 18:31:54,777 - on stmt: bool180 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,777 - on stmt: $180pred = call bool180(invert, func=bool180, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,778 - on stmt: branch $180pred, 182, 190
2024-09-04 18:31:54,778 - ==== SSA block analysis pass on 182
2024-09-04 18:31:54,778 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243136ED1E0>
2024-09-04 18:31:54,778 - on stmt: $const182.0 = const(float, 1.0)
2024-09-04 18:31:54,778 - on stmt: $186binary_true_divide.2 = $const182.0 / r
2024-09-04 18:31:54,778 - on stmt: $188return_value.3 = cast(value=$186binary_true_divide.2)
2024-09-04 18:31:54,778 - on stmt: return $188return_value.3
2024-09-04 18:31:54,778 - ==== SSA block analysis pass on 190
2024-09-04 18:31:54,778 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243136ED1E0>
2024-09-04 18:31:54,778 - on stmt: $192return_value.1 = cast(value=r)
2024-09-04 18:31:54,778 - on stmt: return $192return_value.1
2024-09-04 18:31:54,779 - defs defaultdict(<class 'list'>,
            {'$10load_deref.3': [(<numba.core.ir.Assign object at 0x000002431375E6B0>,
                                  0)],
             '$110compare_op.2': [(<numba.core.ir.Assign object at 0x00000243134B1F90>,
                                   106)],
             '$112pred': [(<numba.core.ir.Assign object at 0x00000243134B36D0>,
                           106)],
             '$114load_global.0': [(<numba.core.ir.Assign object at 0x00000243134B3400>,
                                    114)],
             '$116load_method.1': [(<numba.core.ir.Assign object at 0x00000243134B3A90>,
                                    114)],
             '$120load_global.3': [(<numba.core.ir.Assign object at 0x00000243134B0460>,
                                    114)],
             '$124call_function.5': [(<numba.core.ir.Assign object at 0x00000243134B2CB0>,
                                      114)],
             '$126call_method.6': [(<numba.core.ir.Assign object at 0x00000243134B0E80>,
                                    114)],
             '$128return_value.7': [(<numba.core.ir.Assign object at 0x00000243134B16C0>,
                                     114)],
             '$134compare_op.2': [(<numba.core.ir.Assign object at 0x00000243134B1030>,
                                   130)],
             '$136pred': [(<numba.core.ir.Assign object at 0x00000243134B1360>,
                           130)],
             '$142binary_and.2': [(<numba.core.ir.Assign object at 0x00000243134B3D00>,
                                   138)],
             '$144pred': [(<numba.core.ir.Assign object at 0x00000243134B3790>,
                           138)],
             '$150inplace_multiply.2': [(<numba.core.ir.Assign object at 0x00000243134B18A0>,
                                         146)],
             '$158inplace_rshift.2': [(<numba.core.ir.Assign object at 0x00000243134B23B0>,
                                       154)],
             '$166inplace_multiply.5': [(<numba.core.ir.Assign object at 0x000002431B4CACB0>,
                                         154)],
             '$174compare_op.8': [(<numba.core.ir.Assign object at 0x00000243134493F0>,
                                   154)],
             '$176pred': [(<numba.core.ir.Assign object at 0x000002431B51C0A0>,
                           154)],
             '$180pred': [(<numba.core.ir.Assign object at 0x000002431350FF10>,
                           178)],
             '$186binary_true_divide.2': [(<numba.core.ir.Assign object at 0x000002431350F400>,
                                           182)],
             '$188return_value.3': [(<numba.core.ir.Assign object at 0x000002431350FB20>,
                                     182)],
             '$192return_value.1': [(<numba.core.ir.Assign object at 0x00000243133E7FA0>,
                                     190)],
             '$22compare_op.8': [(<numba.core.ir.Assign object at 0x000002431375DE70>,
                                  0)],
             '$24pred': [(<numba.core.ir.Assign object at 0x000002431375D4B0>,
                          0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x000002431375CC70>,
                                 0)],
             '$40compare_op.5': [(<numba.core.ir.Assign object at 0x000002431375EAA0>,
                                  26)],
             '$42pred': [(<numba.core.ir.Assign object at 0x000002431375ECE0>,
                          26)],
             '$44load_global.0': [(<numba.core.ir.Assign object at 0x000002431375EBF0>,
                                   44)],
             '$48load_deref.0': [(<numba.core.ir.Assign object at 0x000002431375CE20>,
                                  48)],
             '$50pred': [(<numba.core.ir.Assign object at 0x000002431375CB80>,
                          48)],
             '$const108.1': [(<numba.core.ir.Assign object at 0x00000243134B23E0>,
                              106)],
             '$const132.1': [(<numba.core.ir.Assign object at 0x00000243134B0970>,
                              130)],
             '$const140.1': [(<numba.core.ir.Assign object at 0x00000243134B32B0>,
                              138)],
             '$const156.1': [(<numba.core.ir.Assign object at 0x00000243134B27D0>,
                              154)],
             '$const172.7': [(<numba.core.ir.Assign object at 0x0000024313448400>,
                              154)],
             '$const182.0': [(<numba.core.ir.Assign object at 0x000002431350D9C0>,
                              182)],
             '$const20.7': [(<numba.core.ir.Assign object at 0x000002431375E410>,
                             0)],
             '$const38.4': [(<numba.core.ir.Assign object at 0x000002431375CA90>,
                             26)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x000002431375E980>,
                            0)],
             'a': [(<numba.core.ir.Assign object at 0x00000243136EF1C0>, 0)],
             'a.1': [(<numba.core.ir.Assign object at 0x000002431375E800>, 0),
                     (<numba.core.ir.Assign object at 0x000002431B4C9090>,
                      154)],
             'b': [(<numba.core.ir.Assign object at 0x00000243136EDE40>, 0)],
             'bool112': [(<numba.core.ir.Assign object at 0x00000243134B2230>,
                          106)],
             'bool136': [(<numba.core.ir.Assign object at 0x00000243134B1420>,
                          130)],
             'bool144': [(<numba.core.ir.Assign object at 0x00000243134B3DF0>,
                          138)],
             'bool176': [(<numba.core.ir.Assign object at 0x0000024313A060E0>,
                          154)],
             'bool180': [(<numba.core.ir.Assign object at 0x000002431350FE20>,
                          178)],
             'bool24': [(<numba.core.ir.Assign object at 0x000002431375D8A0>,
                         0)],
             'bool42': [(<numba.core.ir.Assign object at 0x000002431375F100>,
                         26)],
             'bool50': [(<numba.core.ir.Assign object at 0x000002431375FD30>,
                         48)],
             'exp': [(<numba.core.ir.Assign object at 0x000002431375DF60>, 26),
                     (<numba.core.ir.Assign object at 0x00000243134B2380>, 98),
                     (<numba.core.ir.Assign object at 0x00000243134B25F0>,
                      154)],
             'invert': [(<numba.core.ir.Assign object at 0x000002431375D000>,
                         26),
                        (<numba.core.ir.Assign object at 0x00000243134B3310>,
                         98)],
             'r': [(<numba.core.ir.Assign object at 0x000002431375DC90>, 0),
                   (<numba.core.ir.Assign object at 0x00000243134B1900>, 146)]})
2024-09-04 18:31:54,779 - SSA violators <numba.core.utils.OrderedSet object at 0x0000024312A86EC0>
2024-09-04 18:31:54,779 - Fix SSA violator on var r
2024-09-04 18:31:54,779 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:54,779 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024312A87FA0>
2024-09-04 18:31:54,779 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:54,779 - on stmt: b = arg(1, name=b)
2024-09-04 18:31:54,779 - on stmt: $2load_deref.0 = freevar(tp: float64)
2024-09-04 18:31:54,779 - on stmt: $const4.1 = const(int, 1)
2024-09-04 18:31:54,779 - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,779 - first assign: r
2024-09-04 18:31:54,779 - replaced with: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,779 - on stmt: $10load_deref.3 = freevar(tp: float64)
2024-09-04 18:31:54,779 - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,779 - on stmt: $const20.7 = const(int, 0)
2024-09-04 18:31:54,779 - on stmt: $22compare_op.8 = b < $const20.7
2024-09-04 18:31:54,779 - on stmt: bool24 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,779 - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,779 - on stmt: branch $24pred, 26, 98
2024-09-04 18:31:54,779 - ==== SSA block rewrite pass on 26
2024-09-04 18:31:54,779 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024312A87FA0>
2024-09-04 18:31:54,779 - on stmt: invert = const(bool, True)
2024-09-04 18:31:54,779 - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2024-09-04 18:31:54,779 - on stmt: $const38.4 = const(int, 0)
2024-09-04 18:31:54,779 - on stmt: $40compare_op.5 = exp < $const38.4
2024-09-04 18:31:54,779 - on stmt: bool42 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,779 - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,779 - on stmt: branch $42pred, 44, 48
2024-09-04 18:31:54,779 - ==== SSA block rewrite pass on 44
2024-09-04 18:31:54,779 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024312A87FA0>
2024-09-04 18:31:54,779 - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2024-09-04 18:31:54,779 - on stmt: <static> raise <class 'OverflowError'>
2024-09-04 18:31:54,779 - ==== SSA block rewrite pass on 48
2024-09-04 18:31:54,779 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024312A87FA0>
2024-09-04 18:31:54,779 - on stmt: $48load_deref.0 = freevar(is_integer: False)
2024-09-04 18:31:54,779 - on stmt: bool50 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,779 - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,779 - on stmt: jump 96
2024-09-04 18:31:54,779 - ==== SSA block rewrite pass on 96
2024-09-04 18:31:54,779 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024312A87FA0>
2024-09-04 18:31:54,779 - on stmt: jump 106
2024-09-04 18:31:54,779 - ==== SSA block rewrite pass on 98
2024-09-04 18:31:54,779 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024312A87FA0>
2024-09-04 18:31:54,779 - on stmt: invert = const(bool, False)
2024-09-04 18:31:54,779 - on stmt: exp = b
2024-09-04 18:31:54,779 - on stmt: jump 106
2024-09-04 18:31:54,779 - ==== SSA block rewrite pass on 106
2024-09-04 18:31:54,779 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024312A87FA0>
2024-09-04 18:31:54,779 - on stmt: $const108.1 = const(int, 65536)
2024-09-04 18:31:54,779 - on stmt: $110compare_op.2 = exp > $const108.1
2024-09-04 18:31:54,779 - on stmt: bool112 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,779 - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,779 - on stmt: branch $112pred, 114, 130
2024-09-04 18:31:54,779 - ==== SSA block rewrite pass on 114
2024-09-04 18:31:54,779 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024312A87FA0>
2024-09-04 18:31:54,779 - on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2024-09-04 18:31:54,779 - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2024-09-04 18:31:54,779 - on stmt: $120load_global.3 = global(float: <class 'float'>)
2024-09-04 18:31:54,779 - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,779 - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,779 - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2024-09-04 18:31:54,779 - on stmt: return $128return_value.7
2024-09-04 18:31:54,779 - ==== SSA block rewrite pass on 130
2024-09-04 18:31:54,779 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024312A87FA0>
2024-09-04 18:31:54,779 - on stmt: $const132.1 = const(int, 0)
2024-09-04 18:31:54,779 - on stmt: $134compare_op.2 = exp != $const132.1
2024-09-04 18:31:54,779 - on stmt: bool136 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,779 - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,779 - on stmt: branch $136pred, 138, 178
2024-09-04 18:31:54,779 - ==== SSA block rewrite pass on 138
2024-09-04 18:31:54,779 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024312A87FA0>
2024-09-04 18:31:54,779 - on stmt: $const140.1 = const(int, 1)
2024-09-04 18:31:54,779 - on stmt: $142binary_and.2 = exp & $const140.1
2024-09-04 18:31:54,779 - on stmt: bool144 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,779 - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,779 - on stmt: branch $144pred, 146, 154
2024-09-04 18:31:54,779 - ==== SSA block rewrite pass on 146
2024-09-04 18:31:54,779 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024312A87FA0>
2024-09-04 18:31:54,779 - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,779 - on stmt: r = $150inplace_multiply.2
2024-09-04 18:31:54,779 - replaced with: r.1 = $150inplace_multiply.2
2024-09-04 18:31:54,779 - on stmt: jump 154
2024-09-04 18:31:54,779 - ==== SSA block rewrite pass on 154
2024-09-04 18:31:54,779 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024312A87FA0>
2024-09-04 18:31:54,779 - on stmt: $const156.1 = const(int, 1)
2024-09-04 18:31:54,779 - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,779 - on stmt: exp = $158inplace_rshift.2
2024-09-04 18:31:54,779 - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,779 - on stmt: a.1 = $166inplace_multiply.5
2024-09-04 18:31:54,779 - on stmt: $const172.7 = const(int, 0)
2024-09-04 18:31:54,779 - on stmt: $174compare_op.8 = exp != $const172.7
2024-09-04 18:31:54,779 - on stmt: bool176 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,779 - on stmt: $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,779 - on stmt: branch $176pred, 138, 178
2024-09-04 18:31:54,779 - ==== SSA block rewrite pass on 178
2024-09-04 18:31:54,779 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024312A87FA0>
2024-09-04 18:31:54,779 - on stmt: bool180 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,779 - on stmt: $180pred = call bool180(invert, func=bool180, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,779 - on stmt: branch $180pred, 182, 190
2024-09-04 18:31:54,779 - ==== SSA block rewrite pass on 182
2024-09-04 18:31:54,779 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024312A87FA0>
2024-09-04 18:31:54,779 - on stmt: $const182.0 = const(float, 1.0)
2024-09-04 18:31:54,779 - on stmt: $186binary_true_divide.2 = $const182.0 / r
2024-09-04 18:31:54,779 - on stmt: $188return_value.3 = cast(value=$186binary_true_divide.2)
2024-09-04 18:31:54,779 - on stmt: return $188return_value.3
2024-09-04 18:31:54,779 - ==== SSA block rewrite pass on 190
2024-09-04 18:31:54,779 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024312A87FA0>
2024-09-04 18:31:54,779 - on stmt: $192return_value.1 = cast(value=r)
2024-09-04 18:31:54,779 - on stmt: return $192return_value.1
2024-09-04 18:31:54,779 - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x00000243133E7E20>],
             146: [<numba.core.ir.Assign object at 0x00000243136EF070>]})
2024-09-04 18:31:54,779 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:54,779 - Running <numba.core.ssa._FixSSAVars object at 0x0000024312A87FA0>
2024-09-04 18:31:54,779 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:54,779 - on stmt: b = arg(1, name=b)
2024-09-04 18:31:54,779 - on stmt: $2load_deref.0 = freevar(tp: float64)
2024-09-04 18:31:54,779 - on stmt: $const4.1 = const(int, 1)
2024-09-04 18:31:54,779 - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,779 - on stmt: $10load_deref.3 = freevar(tp: float64)
2024-09-04 18:31:54,779 - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,779 - on stmt: $const20.7 = const(int, 0)
2024-09-04 18:31:54,779 - on stmt: $22compare_op.8 = b < $const20.7
2024-09-04 18:31:54,779 - on stmt: bool24 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,779 - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,779 - on stmt: branch $24pred, 26, 98
2024-09-04 18:31:54,779 - ==== SSA block rewrite pass on 26
2024-09-04 18:31:54,779 - Running <numba.core.ssa._FixSSAVars object at 0x0000024312A87FA0>
2024-09-04 18:31:54,779 - on stmt: invert = const(bool, True)
2024-09-04 18:31:54,779 - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2024-09-04 18:31:54,779 - on stmt: $const38.4 = const(int, 0)
2024-09-04 18:31:54,779 - on stmt: $40compare_op.5 = exp < $const38.4
2024-09-04 18:31:54,779 - on stmt: bool42 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,779 - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,779 - on stmt: branch $42pred, 44, 48
2024-09-04 18:31:54,779 - ==== SSA block rewrite pass on 44
2024-09-04 18:31:54,779 - Running <numba.core.ssa._FixSSAVars object at 0x0000024312A87FA0>
2024-09-04 18:31:54,779 - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2024-09-04 18:31:54,779 - on stmt: <static> raise <class 'OverflowError'>
2024-09-04 18:31:54,779 - ==== SSA block rewrite pass on 48
2024-09-04 18:31:54,779 - Running <numba.core.ssa._FixSSAVars object at 0x0000024312A87FA0>
2024-09-04 18:31:54,779 - on stmt: $48load_deref.0 = freevar(is_integer: False)
2024-09-04 18:31:54,779 - on stmt: bool50 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,779 - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,779 - on stmt: jump 96
2024-09-04 18:31:54,779 - ==== SSA block rewrite pass on 96
2024-09-04 18:31:54,779 - Running <numba.core.ssa._FixSSAVars object at 0x0000024312A87FA0>
2024-09-04 18:31:54,779 - on stmt: jump 106
2024-09-04 18:31:54,779 - ==== SSA block rewrite pass on 98
2024-09-04 18:31:54,779 - Running <numba.core.ssa._FixSSAVars object at 0x0000024312A87FA0>
2024-09-04 18:31:54,779 - on stmt: invert = const(bool, False)
2024-09-04 18:31:54,779 - on stmt: exp = b
2024-09-04 18:31:54,779 - on stmt: jump 106
2024-09-04 18:31:54,779 - ==== SSA block rewrite pass on 106
2024-09-04 18:31:54,779 - Running <numba.core.ssa._FixSSAVars object at 0x0000024312A87FA0>
2024-09-04 18:31:54,779 - on stmt: $const108.1 = const(int, 65536)
2024-09-04 18:31:54,779 - on stmt: $110compare_op.2 = exp > $const108.1
2024-09-04 18:31:54,779 - on stmt: bool112 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,779 - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,779 - on stmt: branch $112pred, 114, 130
2024-09-04 18:31:54,779 - ==== SSA block rewrite pass on 114
2024-09-04 18:31:54,779 - Running <numba.core.ssa._FixSSAVars object at 0x0000024312A87FA0>
2024-09-04 18:31:54,779 - on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2024-09-04 18:31:54,779 - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2024-09-04 18:31:54,779 - on stmt: $120load_global.3 = global(float: <class 'float'>)
2024-09-04 18:31:54,779 - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,779 - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,795 - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2024-09-04 18:31:54,795 - on stmt: return $128return_value.7
2024-09-04 18:31:54,795 - ==== SSA block rewrite pass on 130
2024-09-04 18:31:54,795 - Running <numba.core.ssa._FixSSAVars object at 0x0000024312A87FA0>
2024-09-04 18:31:54,795 - on stmt: $const132.1 = const(int, 0)
2024-09-04 18:31:54,795 - on stmt: $134compare_op.2 = exp != $const132.1
2024-09-04 18:31:54,795 - on stmt: bool136 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,795 - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,795 - on stmt: branch $136pred, 138, 178
2024-09-04 18:31:54,795 - ==== SSA block rewrite pass on 138
2024-09-04 18:31:54,795 - Running <numba.core.ssa._FixSSAVars object at 0x0000024312A87FA0>
2024-09-04 18:31:54,795 - on stmt: $const140.1 = const(int, 1)
2024-09-04 18:31:54,795 - on stmt: $142binary_and.2 = exp & $const140.1
2024-09-04 18:31:54,795 - on stmt: bool144 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,795 - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,795 - on stmt: branch $144pred, 146, 154
2024-09-04 18:31:54,795 - ==== SSA block rewrite pass on 146
2024-09-04 18:31:54,795 - Running <numba.core.ssa._FixSSAVars object at 0x0000024312A87FA0>
2024-09-04 18:31:54,795 - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,795 - find_def var='r' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,795 - find_def_from_top label 146
2024-09-04 18:31:54,795 - idom 138 from label 146
2024-09-04 18:31:54,795 - find_def_from_bottom label 138
2024-09-04 18:31:54,795 - find_def_from_top label 138
2024-09-04 18:31:54,795 - insert phi node r.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
2024-09-04 18:31:54,795 - find_def_from_bottom label 130
2024-09-04 18:31:54,795 - find_def_from_top label 130
2024-09-04 18:31:54,795 - idom 106 from label 130
2024-09-04 18:31:54,795 - find_def_from_bottom label 106
2024-09-04 18:31:54,795 - find_def_from_top label 106
2024-09-04 18:31:54,795 - idom 0 from label 106
2024-09-04 18:31:54,795 - find_def_from_bottom label 0
2024-09-04 18:31:54,795 - incoming_def r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,795 - find_def_from_bottom label 154
2024-09-04 18:31:54,795 - find_def_from_top label 154
2024-09-04 18:31:54,795 - insert phi node r.3 = phi(incoming_values=[], incoming_blocks=[]) at 154
2024-09-04 18:31:54,795 - find_def_from_bottom label 138
2024-09-04 18:31:54,795 - incoming_def r.2 = phi(incoming_values=[Var(r, numbers.py:216)], incoming_blocks=[130])
2024-09-04 18:31:54,795 - find_def_from_bottom label 146
2024-09-04 18:31:54,795 - incoming_def r.1 = $150inplace_multiply.2
2024-09-04 18:31:54,795 - incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2024-09-04 18:31:54,795 - replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,795 - on stmt: r.1 = $150inplace_multiply.2
2024-09-04 18:31:54,795 - on stmt: jump 154
2024-09-04 18:31:54,795 - ==== SSA block rewrite pass on 154
2024-09-04 18:31:54,795 - Running <numba.core.ssa._FixSSAVars object at 0x0000024312A87FA0>
2024-09-04 18:31:54,795 - on stmt: $const156.1 = const(int, 1)
2024-09-04 18:31:54,798 - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,798 - on stmt: exp = $158inplace_rshift.2
2024-09-04 18:31:54,798 - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,798 - on stmt: a.1 = $166inplace_multiply.5
2024-09-04 18:31:54,798 - on stmt: $const172.7 = const(int, 0)
2024-09-04 18:31:54,798 - on stmt: $174compare_op.8 = exp != $const172.7
2024-09-04 18:31:54,798 - on stmt: bool176 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,798 - on stmt: $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,798 - on stmt: branch $176pred, 138, 178
2024-09-04 18:31:54,798 - ==== SSA block rewrite pass on 178
2024-09-04 18:31:54,798 - Running <numba.core.ssa._FixSSAVars object at 0x0000024312A87FA0>
2024-09-04 18:31:54,798 - on stmt: bool180 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,799 - on stmt: $180pred = call bool180(invert, func=bool180, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,799 - on stmt: branch $180pred, 182, 190
2024-09-04 18:31:54,799 - ==== SSA block rewrite pass on 182
2024-09-04 18:31:54,799 - Running <numba.core.ssa._FixSSAVars object at 0x0000024312A87FA0>
2024-09-04 18:31:54,799 - on stmt: $const182.0 = const(float, 1.0)
2024-09-04 18:31:54,799 - on stmt: $186binary_true_divide.2 = $const182.0 / r
2024-09-04 18:31:54,799 - find_def var='r' stmt=$186binary_true_divide.2 = $const182.0 / r
2024-09-04 18:31:54,799 - find_def_from_top label 182
2024-09-04 18:31:54,799 - idom 178 from label 182
2024-09-04 18:31:54,799 - find_def_from_bottom label 178
2024-09-04 18:31:54,799 - find_def_from_top label 178
2024-09-04 18:31:54,799 - insert phi node r.4 = phi(incoming_values=[], incoming_blocks=[]) at 178
2024-09-04 18:31:54,799 - find_def_from_bottom label 130
2024-09-04 18:31:54,800 - find_def_from_top label 130
2024-09-04 18:31:54,800 - idom 106 from label 130
2024-09-04 18:31:54,800 - find_def_from_bottom label 106
2024-09-04 18:31:54,801 - find_def_from_top label 106
2024-09-04 18:31:54,801 - idom 0 from label 106
2024-09-04 18:31:54,801 - find_def_from_bottom label 0
2024-09-04 18:31:54,801 - incoming_def r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,801 - find_def_from_bottom label 154
2024-09-04 18:31:54,801 - incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2024-09-04 18:31:54,801 - replaced with: $186binary_true_divide.2 = $const182.0 / r.4
2024-09-04 18:31:54,801 - on stmt: $188return_value.3 = cast(value=$186binary_true_divide.2)
2024-09-04 18:31:54,801 - on stmt: return $188return_value.3
2024-09-04 18:31:54,801 - ==== SSA block rewrite pass on 190
2024-09-04 18:31:54,801 - Running <numba.core.ssa._FixSSAVars object at 0x0000024312A87FA0>
2024-09-04 18:31:54,801 - on stmt: $192return_value.1 = cast(value=r)
2024-09-04 18:31:54,801 - find_def var='r' stmt=$192return_value.1 = cast(value=r)
2024-09-04 18:31:54,802 - find_def_from_top label 190
2024-09-04 18:31:54,802 - idom 178 from label 190
2024-09-04 18:31:54,802 - find_def_from_bottom label 178
2024-09-04 18:31:54,802 - replaced with: $192return_value.1 = cast(value=r.4)
2024-09-04 18:31:54,802 - on stmt: return $192return_value.1
2024-09-04 18:31:54,802 - Fix SSA violator on var a.1
2024-09-04 18:31:54,802 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:54,802 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024312A84F10>
2024-09-04 18:31:54,802 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:54,802 - on stmt: b = arg(1, name=b)
2024-09-04 18:31:54,802 - on stmt: $2load_deref.0 = freevar(tp: float64)
2024-09-04 18:31:54,802 - on stmt: $const4.1 = const(int, 1)
2024-09-04 18:31:54,802 - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,802 - on stmt: $10load_deref.3 = freevar(tp: float64)
2024-09-04 18:31:54,803 - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,803 - first assign: a.1
2024-09-04 18:31:54,803 - replaced with: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,803 - on stmt: $const20.7 = const(int, 0)
2024-09-04 18:31:54,803 - on stmt: $22compare_op.8 = b < $const20.7
2024-09-04 18:31:54,803 - on stmt: bool24 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,803 - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,803 - on stmt: branch $24pred, 26, 98
2024-09-04 18:31:54,803 - ==== SSA block rewrite pass on 26
2024-09-04 18:31:54,803 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024312A84F10>
2024-09-04 18:31:54,803 - on stmt: invert = const(bool, True)
2024-09-04 18:31:54,803 - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2024-09-04 18:31:54,804 - on stmt: $const38.4 = const(int, 0)
2024-09-04 18:31:54,804 - on stmt: $40compare_op.5 = exp < $const38.4
2024-09-04 18:31:54,804 - on stmt: bool42 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,804 - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,804 - on stmt: branch $42pred, 44, 48
2024-09-04 18:31:54,804 - ==== SSA block rewrite pass on 44
2024-09-04 18:31:54,804 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024312A84F10>
2024-09-04 18:31:54,804 - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2024-09-04 18:31:54,804 - on stmt: <static> raise <class 'OverflowError'>
2024-09-04 18:31:54,804 - ==== SSA block rewrite pass on 48
2024-09-04 18:31:54,804 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024312A84F10>
2024-09-04 18:31:54,804 - on stmt: $48load_deref.0 = freevar(is_integer: False)
2024-09-04 18:31:54,805 - on stmt: bool50 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,805 - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,805 - on stmt: jump 96
2024-09-04 18:31:54,805 - ==== SSA block rewrite pass on 96
2024-09-04 18:31:54,805 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024312A84F10>
2024-09-04 18:31:54,805 - on stmt: jump 106
2024-09-04 18:31:54,805 - ==== SSA block rewrite pass on 98
2024-09-04 18:31:54,805 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024312A84F10>
2024-09-04 18:31:54,805 - on stmt: invert = const(bool, False)
2024-09-04 18:31:54,805 - on stmt: exp = b
2024-09-04 18:31:54,805 - on stmt: jump 106
2024-09-04 18:31:54,805 - ==== SSA block rewrite pass on 106
2024-09-04 18:31:54,805 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024312A84F10>
2024-09-04 18:31:54,806 - on stmt: $const108.1 = const(int, 65536)
2024-09-04 18:31:54,806 - on stmt: $110compare_op.2 = exp > $const108.1
2024-09-04 18:31:54,806 - on stmt: bool112 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,806 - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,806 - on stmt: branch $112pred, 114, 130
2024-09-04 18:31:54,806 - ==== SSA block rewrite pass on 114
2024-09-04 18:31:54,806 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024312A84F10>
2024-09-04 18:31:54,806 - on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2024-09-04 18:31:54,806 - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2024-09-04 18:31:54,806 - on stmt: $120load_global.3 = global(float: <class 'float'>)
2024-09-04 18:31:54,806 - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,806 - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,807 - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2024-09-04 18:31:54,807 - on stmt: return $128return_value.7
2024-09-04 18:31:54,807 - ==== SSA block rewrite pass on 130
2024-09-04 18:31:54,807 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024312A84F10>
2024-09-04 18:31:54,807 - on stmt: $const132.1 = const(int, 0)
2024-09-04 18:31:54,807 - on stmt: $134compare_op.2 = exp != $const132.1
2024-09-04 18:31:54,807 - on stmt: bool136 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,807 - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,807 - on stmt: branch $136pred, 138, 178
2024-09-04 18:31:54,807 - ==== SSA block rewrite pass on 138
2024-09-04 18:31:54,807 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024312A84F10>
2024-09-04 18:31:54,807 - on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2024-09-04 18:31:54,807 - on stmt: $const140.1 = const(int, 1)
2024-09-04 18:31:54,807 - on stmt: $142binary_and.2 = exp & $const140.1
2024-09-04 18:31:54,808 - on stmt: bool144 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,808 - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,808 - on stmt: branch $144pred, 146, 154
2024-09-04 18:31:54,808 - ==== SSA block rewrite pass on 146
2024-09-04 18:31:54,808 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024312A84F10>
2024-09-04 18:31:54,808 - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,808 - on stmt: r.1 = $150inplace_multiply.2
2024-09-04 18:31:54,808 - on stmt: jump 154
2024-09-04 18:31:54,808 - ==== SSA block rewrite pass on 154
2024-09-04 18:31:54,808 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024312A84F10>
2024-09-04 18:31:54,808 - on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2024-09-04 18:31:54,808 - on stmt: $const156.1 = const(int, 1)
2024-09-04 18:31:54,808 - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,809 - on stmt: exp = $158inplace_rshift.2
2024-09-04 18:31:54,809 - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,809 - on stmt: a.1 = $166inplace_multiply.5
2024-09-04 18:31:54,809 - replaced with: a.1.1 = $166inplace_multiply.5
2024-09-04 18:31:54,809 - on stmt: $const172.7 = const(int, 0)
2024-09-04 18:31:54,809 - on stmt: $174compare_op.8 = exp != $const172.7
2024-09-04 18:31:54,809 - on stmt: bool176 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,809 - on stmt: $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,809 - on stmt: branch $176pred, 138, 178
2024-09-04 18:31:54,809 - ==== SSA block rewrite pass on 178
2024-09-04 18:31:54,809 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024312A84F10>
2024-09-04 18:31:54,809 - on stmt: r.4 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2024-09-04 18:31:54,809 - on stmt: bool180 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,810 - on stmt: $180pred = call bool180(invert, func=bool180, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,810 - on stmt: branch $180pred, 182, 190
2024-09-04 18:31:54,810 - ==== SSA block rewrite pass on 182
2024-09-04 18:31:54,810 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024312A84F10>
2024-09-04 18:31:54,810 - on stmt: $const182.0 = const(float, 1.0)
2024-09-04 18:31:54,810 - on stmt: $186binary_true_divide.2 = $const182.0 / r.4
2024-09-04 18:31:54,810 - on stmt: $188return_value.3 = cast(value=$186binary_true_divide.2)
2024-09-04 18:31:54,810 - on stmt: return $188return_value.3
2024-09-04 18:31:54,810 - ==== SSA block rewrite pass on 190
2024-09-04 18:31:54,810 - Running <numba.core.ssa._FreshVarHandler object at 0x0000024312A84F10>
2024-09-04 18:31:54,810 - on stmt: $192return_value.1 = cast(value=r.4)
2024-09-04 18:31:54,810 - on stmt: return $192return_value.1
2024-09-04 18:31:54,810 - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x00000243133E6290>],
             154: [<numba.core.ir.Assign object at 0x00000243136ED1E0>]})
2024-09-04 18:31:54,811 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:54,811 - Running <numba.core.ssa._FixSSAVars object at 0x00000243136EF010>
2024-09-04 18:31:54,811 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:54,811 - on stmt: b = arg(1, name=b)
2024-09-04 18:31:54,811 - on stmt: $2load_deref.0 = freevar(tp: float64)
2024-09-04 18:31:54,811 - on stmt: $const4.1 = const(int, 1)
2024-09-04 18:31:54,811 - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,811 - on stmt: $10load_deref.3 = freevar(tp: float64)
2024-09-04 18:31:54,811 - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,811 - on stmt: $const20.7 = const(int, 0)
2024-09-04 18:31:54,811 - on stmt: $22compare_op.8 = b < $const20.7
2024-09-04 18:31:54,811 - on stmt: bool24 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,811 - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,812 - on stmt: branch $24pred, 26, 98
2024-09-04 18:31:54,812 - ==== SSA block rewrite pass on 26
2024-09-04 18:31:54,812 - Running <numba.core.ssa._FixSSAVars object at 0x00000243136EF010>
2024-09-04 18:31:54,812 - on stmt: invert = const(bool, True)
2024-09-04 18:31:54,812 - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2024-09-04 18:31:54,812 - on stmt: $const38.4 = const(int, 0)
2024-09-04 18:31:54,812 - on stmt: $40compare_op.5 = exp < $const38.4
2024-09-04 18:31:54,812 - on stmt: bool42 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,812 - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,812 - on stmt: branch $42pred, 44, 48
2024-09-04 18:31:54,812 - ==== SSA block rewrite pass on 44
2024-09-04 18:31:54,812 - Running <numba.core.ssa._FixSSAVars object at 0x00000243136EF010>
2024-09-04 18:31:54,812 - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2024-09-04 18:31:54,813 - on stmt: <static> raise <class 'OverflowError'>
2024-09-04 18:31:54,813 - ==== SSA block rewrite pass on 48
2024-09-04 18:31:54,813 - Running <numba.core.ssa._FixSSAVars object at 0x00000243136EF010>
2024-09-04 18:31:54,813 - on stmt: $48load_deref.0 = freevar(is_integer: False)
2024-09-04 18:31:54,813 - on stmt: bool50 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,813 - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,813 - on stmt: jump 96
2024-09-04 18:31:54,813 - ==== SSA block rewrite pass on 96
2024-09-04 18:31:54,813 - Running <numba.core.ssa._FixSSAVars object at 0x00000243136EF010>
2024-09-04 18:31:54,813 - on stmt: jump 106
2024-09-04 18:31:54,813 - ==== SSA block rewrite pass on 98
2024-09-04 18:31:54,813 - Running <numba.core.ssa._FixSSAVars object at 0x00000243136EF010>
2024-09-04 18:31:54,813 - on stmt: invert = const(bool, False)
2024-09-04 18:31:54,813 - on stmt: exp = b
2024-09-04 18:31:54,814 - on stmt: jump 106
2024-09-04 18:31:54,814 - ==== SSA block rewrite pass on 106
2024-09-04 18:31:54,814 - Running <numba.core.ssa._FixSSAVars object at 0x00000243136EF010>
2024-09-04 18:31:54,814 - on stmt: $const108.1 = const(int, 65536)
2024-09-04 18:31:54,814 - on stmt: $110compare_op.2 = exp > $const108.1
2024-09-04 18:31:54,814 - on stmt: bool112 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,814 - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,814 - on stmt: branch $112pred, 114, 130
2024-09-04 18:31:54,814 - ==== SSA block rewrite pass on 114
2024-09-04 18:31:54,814 - Running <numba.core.ssa._FixSSAVars object at 0x00000243136EF010>
2024-09-04 18:31:54,814 - on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2024-09-04 18:31:54,814 - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2024-09-04 18:31:54,814 - on stmt: $120load_global.3 = global(float: <class 'float'>)
2024-09-04 18:31:54,814 - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,815 - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,815 - find_def var='a.1' stmt=$126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,815 - find_def_from_top label 114
2024-09-04 18:31:54,815 - idom 106 from label 114
2024-09-04 18:31:54,815 - find_def_from_bottom label 106
2024-09-04 18:31:54,815 - find_def_from_top label 106
2024-09-04 18:31:54,815 - idom 0 from label 106
2024-09-04 18:31:54,815 - find_def_from_bottom label 0
2024-09-04 18:31:54,815 - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2024-09-04 18:31:54,815 - on stmt: return $128return_value.7
2024-09-04 18:31:54,815 - ==== SSA block rewrite pass on 130
2024-09-04 18:31:54,815 - Running <numba.core.ssa._FixSSAVars object at 0x00000243136EF010>
2024-09-04 18:31:54,815 - on stmt: $const132.1 = const(int, 0)
2024-09-04 18:31:54,816 - on stmt: $134compare_op.2 = exp != $const132.1
2024-09-04 18:31:54,816 - on stmt: bool136 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,816 - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,816 - on stmt: branch $136pred, 138, 178
2024-09-04 18:31:54,816 - ==== SSA block rewrite pass on 138
2024-09-04 18:31:54,816 - Running <numba.core.ssa._FixSSAVars object at 0x00000243136EF010>
2024-09-04 18:31:54,816 - on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2024-09-04 18:31:54,816 - on stmt: $const140.1 = const(int, 1)
2024-09-04 18:31:54,816 - on stmt: $142binary_and.2 = exp & $const140.1
2024-09-04 18:31:54,816 - on stmt: bool144 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,816 - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,816 - on stmt: branch $144pred, 146, 154
2024-09-04 18:31:54,817 - ==== SSA block rewrite pass on 146
2024-09-04 18:31:54,817 - Running <numba.core.ssa._FixSSAVars object at 0x00000243136EF010>
2024-09-04 18:31:54,817 - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,817 - find_def var='a.1' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,817 - find_def_from_top label 146
2024-09-04 18:31:54,817 - idom 138 from label 146
2024-09-04 18:31:54,817 - find_def_from_bottom label 138
2024-09-04 18:31:54,817 - find_def_from_top label 138
2024-09-04 18:31:54,817 - insert phi node a.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
2024-09-04 18:31:54,817 - find_def_from_bottom label 130
2024-09-04 18:31:54,817 - find_def_from_top label 130
2024-09-04 18:31:54,817 - idom 106 from label 130
2024-09-04 18:31:54,817 - find_def_from_bottom label 106
2024-09-04 18:31:54,817 - find_def_from_top label 106
2024-09-04 18:31:54,818 - idom 0 from label 106
2024-09-04 18:31:54,818 - find_def_from_bottom label 0
2024-09-04 18:31:54,818 - incoming_def a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,818 - find_def_from_bottom label 154
2024-09-04 18:31:54,818 - incoming_def a.1.1 = $166inplace_multiply.5
2024-09-04 18:31:54,818 - replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,818 - on stmt: r.1 = $150inplace_multiply.2
2024-09-04 18:31:54,818 - on stmt: jump 154
2024-09-04 18:31:54,818 - ==== SSA block rewrite pass on 154
2024-09-04 18:31:54,818 - Running <numba.core.ssa._FixSSAVars object at 0x00000243136EF010>
2024-09-04 18:31:54,818 - on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2024-09-04 18:31:54,818 - on stmt: $const156.1 = const(int, 1)
2024-09-04 18:31:54,818 - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,819 - on stmt: exp = $158inplace_rshift.2
2024-09-04 18:31:54,819 - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,819 - find_def var='a.1' stmt=$166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,819 - find_def_from_top label 154
2024-09-04 18:31:54,819 - idom 138 from label 154
2024-09-04 18:31:54,819 - find_def_from_bottom label 138
2024-09-04 18:31:54,819 - replaced with: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,819 - on stmt: a.1.1 = $166inplace_multiply.5
2024-09-04 18:31:54,819 - on stmt: $const172.7 = const(int, 0)
2024-09-04 18:31:54,819 - on stmt: $174compare_op.8 = exp != $const172.7
2024-09-04 18:31:54,819 - on stmt: bool176 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,819 - on stmt: $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,819 - on stmt: branch $176pred, 138, 178
2024-09-04 18:31:54,820 - ==== SSA block rewrite pass on 178
2024-09-04 18:31:54,820 - Running <numba.core.ssa._FixSSAVars object at 0x00000243136EF010>
2024-09-04 18:31:54,820 - on stmt: r.4 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2024-09-04 18:31:54,820 - on stmt: bool180 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,820 - on stmt: $180pred = call bool180(invert, func=bool180, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,820 - on stmt: branch $180pred, 182, 190
2024-09-04 18:31:54,820 - ==== SSA block rewrite pass on 182
2024-09-04 18:31:54,820 - Running <numba.core.ssa._FixSSAVars object at 0x00000243136EF010>
2024-09-04 18:31:54,820 - on stmt: $const182.0 = const(float, 1.0)
2024-09-04 18:31:54,820 - on stmt: $186binary_true_divide.2 = $const182.0 / r.4
2024-09-04 18:31:54,820 - on stmt: $188return_value.3 = cast(value=$186binary_true_divide.2)
2024-09-04 18:31:54,821 - on stmt: return $188return_value.3
2024-09-04 18:31:54,821 - ==== SSA block rewrite pass on 190
2024-09-04 18:31:54,821 - Running <numba.core.ssa._FixSSAVars object at 0x00000243136EF010>
2024-09-04 18:31:54,821 - on stmt: $192return_value.1 = cast(value=r.4)
2024-09-04 18:31:54,821 - on stmt: return $192return_value.1
2024-09-04 18:31:54,821 - Fix SSA violator on var invert
2024-09-04 18:31:54,821 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:54,821 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243133E78B0>
2024-09-04 18:31:54,821 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:54,821 - on stmt: b = arg(1, name=b)
2024-09-04 18:31:54,821 - on stmt: $2load_deref.0 = freevar(tp: float64)
2024-09-04 18:31:54,821 - on stmt: $const4.1 = const(int, 1)
2024-09-04 18:31:54,821 - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,822 - on stmt: $10load_deref.3 = freevar(tp: float64)
2024-09-04 18:31:54,822 - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,822 - on stmt: $const20.7 = const(int, 0)
2024-09-04 18:31:54,822 - on stmt: $22compare_op.8 = b < $const20.7
2024-09-04 18:31:54,822 - on stmt: bool24 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,822 - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,822 - on stmt: branch $24pred, 26, 98
2024-09-04 18:31:54,822 - ==== SSA block rewrite pass on 26
2024-09-04 18:31:54,822 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243133E78B0>
2024-09-04 18:31:54,822 - on stmt: invert = const(bool, True)
2024-09-04 18:31:54,822 - first assign: invert
2024-09-04 18:31:54,822 - replaced with: invert = const(bool, True)
2024-09-04 18:31:54,822 - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2024-09-04 18:31:54,823 - on stmt: $const38.4 = const(int, 0)
2024-09-04 18:31:54,823 - on stmt: $40compare_op.5 = exp < $const38.4
2024-09-04 18:31:54,823 - on stmt: bool42 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,823 - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,823 - on stmt: branch $42pred, 44, 48
2024-09-04 18:31:54,823 - ==== SSA block rewrite pass on 44
2024-09-04 18:31:54,823 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243133E78B0>
2024-09-04 18:31:54,823 - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2024-09-04 18:31:54,823 - on stmt: <static> raise <class 'OverflowError'>
2024-09-04 18:31:54,823 - ==== SSA block rewrite pass on 48
2024-09-04 18:31:54,823 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243133E78B0>
2024-09-04 18:31:54,823 - on stmt: $48load_deref.0 = freevar(is_integer: False)
2024-09-04 18:31:54,823 - on stmt: bool50 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,823 - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,824 - on stmt: jump 96
2024-09-04 18:31:54,824 - ==== SSA block rewrite pass on 96
2024-09-04 18:31:54,824 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243133E78B0>
2024-09-04 18:31:54,824 - on stmt: jump 106
2024-09-04 18:31:54,824 - ==== SSA block rewrite pass on 98
2024-09-04 18:31:54,824 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243133E78B0>
2024-09-04 18:31:54,824 - on stmt: invert = const(bool, False)
2024-09-04 18:31:54,824 - replaced with: invert.1 = const(bool, False)
2024-09-04 18:31:54,824 - on stmt: exp = b
2024-09-04 18:31:54,824 - on stmt: jump 106
2024-09-04 18:31:54,824 - ==== SSA block rewrite pass on 106
2024-09-04 18:31:54,824 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243133E78B0>
2024-09-04 18:31:54,824 - on stmt: $const108.1 = const(int, 65536)
2024-09-04 18:31:54,825 - on stmt: $110compare_op.2 = exp > $const108.1
2024-09-04 18:31:54,825 - on stmt: bool112 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,825 - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,825 - on stmt: branch $112pred, 114, 130
2024-09-04 18:31:54,825 - ==== SSA block rewrite pass on 114
2024-09-04 18:31:54,825 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243133E78B0>
2024-09-04 18:31:54,825 - on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2024-09-04 18:31:54,825 - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2024-09-04 18:31:54,825 - on stmt: $120load_global.3 = global(float: <class 'float'>)
2024-09-04 18:31:54,825 - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,825 - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,825 - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2024-09-04 18:31:54,826 - on stmt: return $128return_value.7
2024-09-04 18:31:54,826 - ==== SSA block rewrite pass on 130
2024-09-04 18:31:54,826 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243133E78B0>
2024-09-04 18:31:54,826 - on stmt: $const132.1 = const(int, 0)
2024-09-04 18:31:54,826 - on stmt: $134compare_op.2 = exp != $const132.1
2024-09-04 18:31:54,826 - on stmt: bool136 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,826 - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,826 - on stmt: branch $136pred, 138, 178
2024-09-04 18:31:54,826 - ==== SSA block rewrite pass on 138
2024-09-04 18:31:54,826 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243133E78B0>
2024-09-04 18:31:54,826 - on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[130, 154])
2024-09-04 18:31:54,826 - on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2024-09-04 18:31:54,826 - on stmt: $const140.1 = const(int, 1)
2024-09-04 18:31:54,827 - on stmt: $142binary_and.2 = exp & $const140.1
2024-09-04 18:31:54,827 - on stmt: bool144 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,827 - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,827 - on stmt: branch $144pred, 146, 154
2024-09-04 18:31:54,827 - ==== SSA block rewrite pass on 146
2024-09-04 18:31:54,827 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243133E78B0>
2024-09-04 18:31:54,827 - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,827 - on stmt: r.1 = $150inplace_multiply.2
2024-09-04 18:31:54,827 - on stmt: jump 154
2024-09-04 18:31:54,827 - ==== SSA block rewrite pass on 154
2024-09-04 18:31:54,828 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243133E78B0>
2024-09-04 18:31:54,828 - on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2024-09-04 18:31:54,828 - on stmt: $const156.1 = const(int, 1)
2024-09-04 18:31:54,828 - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,828 - on stmt: exp = $158inplace_rshift.2
2024-09-04 18:31:54,828 - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,828 - on stmt: a.1.1 = $166inplace_multiply.5
2024-09-04 18:31:54,828 - on stmt: $const172.7 = const(int, 0)
2024-09-04 18:31:54,828 - on stmt: $174compare_op.8 = exp != $const172.7
2024-09-04 18:31:54,828 - on stmt: bool176 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,829 - on stmt: $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,829 - on stmt: branch $176pred, 138, 178
2024-09-04 18:31:54,829 - ==== SSA block rewrite pass on 178
2024-09-04 18:31:54,829 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243133E78B0>
2024-09-04 18:31:54,829 - on stmt: r.4 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2024-09-04 18:31:54,829 - on stmt: bool180 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,829 - on stmt: $180pred = call bool180(invert, func=bool180, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,829 - on stmt: branch $180pred, 182, 190
2024-09-04 18:31:54,829 - ==== SSA block rewrite pass on 182
2024-09-04 18:31:54,829 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243133E78B0>
2024-09-04 18:31:54,830 - on stmt: $const182.0 = const(float, 1.0)
2024-09-04 18:31:54,830 - on stmt: $186binary_true_divide.2 = $const182.0 / r.4
2024-09-04 18:31:54,830 - on stmt: $188return_value.3 = cast(value=$186binary_true_divide.2)
2024-09-04 18:31:54,830 - on stmt: return $188return_value.3
2024-09-04 18:31:54,830 - ==== SSA block rewrite pass on 190
2024-09-04 18:31:54,830 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243133E78B0>
2024-09-04 18:31:54,830 - on stmt: $192return_value.1 = cast(value=r.4)
2024-09-04 18:31:54,830 - on stmt: return $192return_value.1
2024-09-04 18:31:54,830 - Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x00000243133E61D0>],
             98: [<numba.core.ir.Assign object at 0x00000243136ECEB0>]})
2024-09-04 18:31:54,830 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:54,830 - Running <numba.core.ssa._FixSSAVars object at 0x0000024312A84F10>
2024-09-04 18:31:54,831 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:54,831 - on stmt: b = arg(1, name=b)
2024-09-04 18:31:54,831 - on stmt: $2load_deref.0 = freevar(tp: float64)
2024-09-04 18:31:54,831 - on stmt: $const4.1 = const(int, 1)
2024-09-04 18:31:54,831 - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,831 - on stmt: $10load_deref.3 = freevar(tp: float64)
2024-09-04 18:31:54,831 - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,831 - on stmt: $const20.7 = const(int, 0)
2024-09-04 18:31:54,831 - on stmt: $22compare_op.8 = b < $const20.7
2024-09-04 18:31:54,831 - on stmt: bool24 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,831 - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,832 - on stmt: branch $24pred, 26, 98
2024-09-04 18:31:54,832 - ==== SSA block rewrite pass on 26
2024-09-04 18:31:54,832 - Running <numba.core.ssa._FixSSAVars object at 0x0000024312A84F10>
2024-09-04 18:31:54,832 - on stmt: invert = const(bool, True)
2024-09-04 18:31:54,832 - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2024-09-04 18:31:54,832 - on stmt: $const38.4 = const(int, 0)
2024-09-04 18:31:54,832 - on stmt: $40compare_op.5 = exp < $const38.4
2024-09-04 18:31:54,832 - on stmt: bool42 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,832 - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,832 - on stmt: branch $42pred, 44, 48
2024-09-04 18:31:54,832 - ==== SSA block rewrite pass on 44
2024-09-04 18:31:54,832 - Running <numba.core.ssa._FixSSAVars object at 0x0000024312A84F10>
2024-09-04 18:31:54,832 - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2024-09-04 18:31:54,833 - on stmt: <static> raise <class 'OverflowError'>
2024-09-04 18:31:54,833 - ==== SSA block rewrite pass on 48
2024-09-04 18:31:54,833 - Running <numba.core.ssa._FixSSAVars object at 0x0000024312A84F10>
2024-09-04 18:31:54,833 - on stmt: $48load_deref.0 = freevar(is_integer: False)
2024-09-04 18:31:54,833 - on stmt: bool50 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,833 - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,833 - on stmt: jump 96
2024-09-04 18:31:54,833 - ==== SSA block rewrite pass on 96
2024-09-04 18:31:54,833 - Running <numba.core.ssa._FixSSAVars object at 0x0000024312A84F10>
2024-09-04 18:31:54,833 - on stmt: jump 106
2024-09-04 18:31:54,833 - ==== SSA block rewrite pass on 98
2024-09-04 18:31:54,833 - Running <numba.core.ssa._FixSSAVars object at 0x0000024312A84F10>
2024-09-04 18:31:54,833 - on stmt: invert.1 = const(bool, False)
2024-09-04 18:31:54,834 - on stmt: exp = b
2024-09-04 18:31:54,834 - on stmt: jump 106
2024-09-04 18:31:54,834 - ==== SSA block rewrite pass on 106
2024-09-04 18:31:54,834 - Running <numba.core.ssa._FixSSAVars object at 0x0000024312A84F10>
2024-09-04 18:31:54,834 - on stmt: $const108.1 = const(int, 65536)
2024-09-04 18:31:54,834 - on stmt: $110compare_op.2 = exp > $const108.1
2024-09-04 18:31:54,834 - on stmt: bool112 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,834 - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,834 - on stmt: branch $112pred, 114, 130
2024-09-04 18:31:54,834 - ==== SSA block rewrite pass on 114
2024-09-04 18:31:54,834 - Running <numba.core.ssa._FixSSAVars object at 0x0000024312A84F10>
2024-09-04 18:31:54,834 - on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2024-09-04 18:31:54,835 - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2024-09-04 18:31:54,835 - on stmt: $120load_global.3 = global(float: <class 'float'>)
2024-09-04 18:31:54,835 - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,835 - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,835 - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2024-09-04 18:31:54,835 - on stmt: return $128return_value.7
2024-09-04 18:31:54,835 - ==== SSA block rewrite pass on 130
2024-09-04 18:31:54,835 - Running <numba.core.ssa._FixSSAVars object at 0x0000024312A84F10>
2024-09-04 18:31:54,835 - on stmt: $const132.1 = const(int, 0)
2024-09-04 18:31:54,835 - on stmt: $134compare_op.2 = exp != $const132.1
2024-09-04 18:31:54,835 - on stmt: bool136 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,835 - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,836 - on stmt: branch $136pred, 138, 178
2024-09-04 18:31:54,836 - ==== SSA block rewrite pass on 138
2024-09-04 18:31:54,836 - Running <numba.core.ssa._FixSSAVars object at 0x0000024312A84F10>
2024-09-04 18:31:54,836 - on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[130, 154])
2024-09-04 18:31:54,836 - on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2024-09-04 18:31:54,836 - on stmt: $const140.1 = const(int, 1)
2024-09-04 18:31:54,836 - on stmt: $142binary_and.2 = exp & $const140.1
2024-09-04 18:31:54,836 - on stmt: bool144 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,836 - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,837 - on stmt: branch $144pred, 146, 154
2024-09-04 18:31:54,837 - ==== SSA block rewrite pass on 146
2024-09-04 18:31:54,837 - Running <numba.core.ssa._FixSSAVars object at 0x0000024312A84F10>
2024-09-04 18:31:54,837 - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,837 - on stmt: r.1 = $150inplace_multiply.2
2024-09-04 18:31:54,837 - on stmt: jump 154
2024-09-04 18:31:54,837 - ==== SSA block rewrite pass on 154
2024-09-04 18:31:54,837 - Running <numba.core.ssa._FixSSAVars object at 0x0000024312A84F10>
2024-09-04 18:31:54,837 - on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2024-09-04 18:31:54,838 - on stmt: $const156.1 = const(int, 1)
2024-09-04 18:31:54,838 - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,838 - on stmt: exp = $158inplace_rshift.2
2024-09-04 18:31:54,838 - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,838 - on stmt: a.1.1 = $166inplace_multiply.5
2024-09-04 18:31:54,838 - on stmt: $const172.7 = const(int, 0)
2024-09-04 18:31:54,838 - on stmt: $174compare_op.8 = exp != $const172.7
2024-09-04 18:31:54,838 - on stmt: bool176 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,838 - on stmt: $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,839 - on stmt: branch $176pred, 138, 178
2024-09-04 18:31:54,839 - ==== SSA block rewrite pass on 178
2024-09-04 18:31:54,839 - Running <numba.core.ssa._FixSSAVars object at 0x0000024312A84F10>
2024-09-04 18:31:54,839 - on stmt: r.4 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2024-09-04 18:31:54,839 - on stmt: bool180 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,839 - on stmt: $180pred = call bool180(invert, func=bool180, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,839 - find_def var='invert' stmt=$180pred = call bool180(invert, func=bool180, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,839 - find_def_from_top label 178
2024-09-04 18:31:54,839 - idom 130 from label 178
2024-09-04 18:31:54,839 - find_def_from_bottom label 130
2024-09-04 18:31:54,839 - find_def_from_top label 130
2024-09-04 18:31:54,839 - idom 106 from label 130
2024-09-04 18:31:54,840 - find_def_from_bottom label 106
2024-09-04 18:31:54,840 - find_def_from_top label 106
2024-09-04 18:31:54,840 - insert phi node invert.2 = phi(incoming_values=[], incoming_blocks=[]) at 106
2024-09-04 18:31:54,840 - find_def_from_bottom label 96
2024-09-04 18:31:54,840 - find_def_from_top label 96
2024-09-04 18:31:54,840 - idom 48 from label 96
2024-09-04 18:31:54,840 - find_def_from_bottom label 48
2024-09-04 18:31:54,840 - find_def_from_top label 48
2024-09-04 18:31:54,840 - idom 26 from label 48
2024-09-04 18:31:54,840 - find_def_from_bottom label 26
2024-09-04 18:31:54,840 - incoming_def invert = const(bool, True)
2024-09-04 18:31:54,840 - find_def_from_bottom label 98
2024-09-04 18:31:54,840 - incoming_def invert.1 = const(bool, False)
2024-09-04 18:31:54,841 - replaced with: $180pred = call bool180(invert.2, func=bool180, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,841 - on stmt: branch $180pred, 182, 190
2024-09-04 18:31:54,841 - ==== SSA block rewrite pass on 182
2024-09-04 18:31:54,841 - Running <numba.core.ssa._FixSSAVars object at 0x0000024312A84F10>
2024-09-04 18:31:54,841 - on stmt: $const182.0 = const(float, 1.0)
2024-09-04 18:31:54,841 - on stmt: $186binary_true_divide.2 = $const182.0 / r.4
2024-09-04 18:31:54,841 - on stmt: $188return_value.3 = cast(value=$186binary_true_divide.2)
2024-09-04 18:31:54,841 - on stmt: return $188return_value.3
2024-09-04 18:31:54,841 - ==== SSA block rewrite pass on 190
2024-09-04 18:31:54,841 - Running <numba.core.ssa._FixSSAVars object at 0x0000024312A84F10>
2024-09-04 18:31:54,841 - on stmt: $192return_value.1 = cast(value=r.4)
2024-09-04 18:31:54,842 - on stmt: return $192return_value.1
2024-09-04 18:31:54,842 - Fix SSA violator on var exp
2024-09-04 18:31:54,842 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:54,842 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243136EDF90>
2024-09-04 18:31:54,842 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:54,842 - on stmt: b = arg(1, name=b)
2024-09-04 18:31:54,842 - on stmt: $2load_deref.0 = freevar(tp: float64)
2024-09-04 18:31:54,842 - on stmt: $const4.1 = const(int, 1)
2024-09-04 18:31:54,842 - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,842 - on stmt: $10load_deref.3 = freevar(tp: float64)
2024-09-04 18:31:54,842 - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,842 - on stmt: $const20.7 = const(int, 0)
2024-09-04 18:31:54,842 - on stmt: $22compare_op.8 = b < $const20.7
2024-09-04 18:31:54,842 - on stmt: bool24 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,842 - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,843 - on stmt: branch $24pred, 26, 98
2024-09-04 18:31:54,843 - ==== SSA block rewrite pass on 26
2024-09-04 18:31:54,843 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243136EDF90>
2024-09-04 18:31:54,843 - on stmt: invert = const(bool, True)
2024-09-04 18:31:54,843 - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2024-09-04 18:31:54,843 - first assign: exp
2024-09-04 18:31:54,843 - replaced with: exp = unary(fn=<built-in function neg>, value=b)
2024-09-04 18:31:54,843 - on stmt: $const38.4 = const(int, 0)
2024-09-04 18:31:54,843 - on stmt: $40compare_op.5 = exp < $const38.4
2024-09-04 18:31:54,843 - on stmt: bool42 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,843 - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,843 - on stmt: branch $42pred, 44, 48
2024-09-04 18:31:54,844 - ==== SSA block rewrite pass on 44
2024-09-04 18:31:54,844 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243136EDF90>
2024-09-04 18:31:54,844 - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2024-09-04 18:31:54,844 - on stmt: <static> raise <class 'OverflowError'>
2024-09-04 18:31:54,844 - ==== SSA block rewrite pass on 48
2024-09-04 18:31:54,844 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243136EDF90>
2024-09-04 18:31:54,844 - on stmt: $48load_deref.0 = freevar(is_integer: False)
2024-09-04 18:31:54,844 - on stmt: bool50 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,844 - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,844 - on stmt: jump 96
2024-09-04 18:31:54,844 - ==== SSA block rewrite pass on 96
2024-09-04 18:31:54,844 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243136EDF90>
2024-09-04 18:31:54,844 - on stmt: jump 106
2024-09-04 18:31:54,845 - ==== SSA block rewrite pass on 98
2024-09-04 18:31:54,845 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243136EDF90>
2024-09-04 18:31:54,845 - on stmt: invert.1 = const(bool, False)
2024-09-04 18:31:54,845 - on stmt: exp = b
2024-09-04 18:31:54,845 - replaced with: exp.1 = b
2024-09-04 18:31:54,845 - on stmt: jump 106
2024-09-04 18:31:54,845 - ==== SSA block rewrite pass on 106
2024-09-04 18:31:54,845 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243136EDF90>
2024-09-04 18:31:54,845 - on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[96, 98])
2024-09-04 18:31:54,845 - on stmt: $const108.1 = const(int, 65536)
2024-09-04 18:31:54,845 - on stmt: $110compare_op.2 = exp > $const108.1
2024-09-04 18:31:54,845 - on stmt: bool112 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,845 - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,846 - on stmt: branch $112pred, 114, 130
2024-09-04 18:31:54,846 - ==== SSA block rewrite pass on 114
2024-09-04 18:31:54,846 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243136EDF90>
2024-09-04 18:31:54,846 - on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2024-09-04 18:31:54,846 - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2024-09-04 18:31:54,846 - on stmt: $120load_global.3 = global(float: <class 'float'>)
2024-09-04 18:31:54,846 - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,846 - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,846 - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2024-09-04 18:31:54,846 - on stmt: return $128return_value.7
2024-09-04 18:31:54,846 - ==== SSA block rewrite pass on 130
2024-09-04 18:31:54,847 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243136EDF90>
2024-09-04 18:31:54,847 - on stmt: $const132.1 = const(int, 0)
2024-09-04 18:31:54,847 - on stmt: $134compare_op.2 = exp != $const132.1
2024-09-04 18:31:54,847 - on stmt: bool136 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,847 - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,847 - on stmt: branch $136pred, 138, 178
2024-09-04 18:31:54,847 - ==== SSA block rewrite pass on 138
2024-09-04 18:31:54,847 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243136EDF90>
2024-09-04 18:31:54,847 - on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[130, 154])
2024-09-04 18:31:54,847 - on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2024-09-04 18:31:54,847 - on stmt: $const140.1 = const(int, 1)
2024-09-04 18:31:54,847 - on stmt: $142binary_and.2 = exp & $const140.1
2024-09-04 18:31:54,847 - on stmt: bool144 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,847 - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,848 - on stmt: branch $144pred, 146, 154
2024-09-04 18:31:54,848 - ==== SSA block rewrite pass on 146
2024-09-04 18:31:54,848 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243136EDF90>
2024-09-04 18:31:54,848 - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,848 - on stmt: r.1 = $150inplace_multiply.2
2024-09-04 18:31:54,848 - on stmt: jump 154
2024-09-04 18:31:54,848 - ==== SSA block rewrite pass on 154
2024-09-04 18:31:54,848 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243136EDF90>
2024-09-04 18:31:54,848 - on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2024-09-04 18:31:54,848 - on stmt: $const156.1 = const(int, 1)
2024-09-04 18:31:54,848 - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,848 - on stmt: exp = $158inplace_rshift.2
2024-09-04 18:31:54,848 - replaced with: exp.2 = $158inplace_rshift.2
2024-09-04 18:31:54,849 - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,849 - on stmt: a.1.1 = $166inplace_multiply.5
2024-09-04 18:31:54,849 - on stmt: $const172.7 = const(int, 0)
2024-09-04 18:31:54,849 - on stmt: $174compare_op.8 = exp != $const172.7
2024-09-04 18:31:54,849 - on stmt: bool176 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,849 - on stmt: $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,849 - on stmt: branch $176pred, 138, 178
2024-09-04 18:31:54,849 - ==== SSA block rewrite pass on 178
2024-09-04 18:31:54,849 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243136EDF90>
2024-09-04 18:31:54,849 - on stmt: r.4 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2024-09-04 18:31:54,849 - on stmt: bool180 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,849 - on stmt: $180pred = call bool180(invert.2, func=bool180, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,850 - on stmt: branch $180pred, 182, 190
2024-09-04 18:31:54,850 - ==== SSA block rewrite pass on 182
2024-09-04 18:31:54,850 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243136EDF90>
2024-09-04 18:31:54,850 - on stmt: $const182.0 = const(float, 1.0)
2024-09-04 18:31:54,850 - on stmt: $186binary_true_divide.2 = $const182.0 / r.4
2024-09-04 18:31:54,850 - on stmt: $188return_value.3 = cast(value=$186binary_true_divide.2)
2024-09-04 18:31:54,850 - on stmt: return $188return_value.3
2024-09-04 18:31:54,850 - ==== SSA block rewrite pass on 190
2024-09-04 18:31:54,850 - Running <numba.core.ssa._FreshVarHandler object at 0x00000243136EDF90>
2024-09-04 18:31:54,850 - on stmt: $192return_value.1 = cast(value=r.4)
2024-09-04 18:31:54,850 - on stmt: return $192return_value.1
2024-09-04 18:31:54,850 - Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x00000243136ECD60>],
             98: [<numba.core.ir.Assign object at 0x00000243133E7E50>],
             154: [<numba.core.ir.Assign object at 0x0000024313596E60>]})
2024-09-04 18:31:54,850 - ==== SSA block rewrite pass on 0
2024-09-04 18:31:54,850 - Running <numba.core.ssa._FixSSAVars object at 0x00000243133E78B0>
2024-09-04 18:31:54,850 - on stmt: a = arg(0, name=a)
2024-09-04 18:31:54,850 - on stmt: b = arg(1, name=b)
2024-09-04 18:31:54,850 - on stmt: $2load_deref.0 = freevar(tp: float64)
2024-09-04 18:31:54,850 - on stmt: $const4.1 = const(int, 1)
2024-09-04 18:31:54,850 - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,850 - on stmt: $10load_deref.3 = freevar(tp: float64)
2024-09-04 18:31:54,850 - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,850 - on stmt: $const20.7 = const(int, 0)
2024-09-04 18:31:54,850 - on stmt: $22compare_op.8 = b < $const20.7
2024-09-04 18:31:54,850 - on stmt: bool24 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,850 - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,850 - on stmt: branch $24pred, 26, 98
2024-09-04 18:31:54,850 - ==== SSA block rewrite pass on 26
2024-09-04 18:31:54,850 - Running <numba.core.ssa._FixSSAVars object at 0x00000243133E78B0>
2024-09-04 18:31:54,850 - on stmt: invert = const(bool, True)
2024-09-04 18:31:54,850 - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2024-09-04 18:31:54,850 - on stmt: $const38.4 = const(int, 0)
2024-09-04 18:31:54,850 - on stmt: $40compare_op.5 = exp < $const38.4
2024-09-04 18:31:54,850 - find_def var='exp' stmt=$40compare_op.5 = exp < $const38.4
2024-09-04 18:31:54,850 - on stmt: bool42 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,850 - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,850 - on stmt: branch $42pred, 44, 48
2024-09-04 18:31:54,850 - ==== SSA block rewrite pass on 44
2024-09-04 18:31:54,850 - Running <numba.core.ssa._FixSSAVars object at 0x00000243133E78B0>
2024-09-04 18:31:54,850 - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2024-09-04 18:31:54,850 - on stmt: <static> raise <class 'OverflowError'>
2024-09-04 18:31:54,850 - ==== SSA block rewrite pass on 48
2024-09-04 18:31:54,850 - Running <numba.core.ssa._FixSSAVars object at 0x00000243133E78B0>
2024-09-04 18:31:54,850 - on stmt: $48load_deref.0 = freevar(is_integer: False)
2024-09-04 18:31:54,850 - on stmt: bool50 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,850 - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,850 - on stmt: jump 96
2024-09-04 18:31:54,850 - ==== SSA block rewrite pass on 96
2024-09-04 18:31:54,850 - Running <numba.core.ssa._FixSSAVars object at 0x00000243133E78B0>
2024-09-04 18:31:54,850 - on stmt: jump 106
2024-09-04 18:31:54,850 - ==== SSA block rewrite pass on 98
2024-09-04 18:31:54,850 - Running <numba.core.ssa._FixSSAVars object at 0x00000243133E78B0>
2024-09-04 18:31:54,850 - on stmt: invert.1 = const(bool, False)
2024-09-04 18:31:54,850 - on stmt: exp.1 = b
2024-09-04 18:31:54,850 - on stmt: jump 106
2024-09-04 18:31:54,850 - ==== SSA block rewrite pass on 106
2024-09-04 18:31:54,850 - Running <numba.core.ssa._FixSSAVars object at 0x00000243133E78B0>
2024-09-04 18:31:54,850 - on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[96, 98])
2024-09-04 18:31:54,850 - on stmt: $const108.1 = const(int, 65536)
2024-09-04 18:31:54,850 - on stmt: $110compare_op.2 = exp > $const108.1
2024-09-04 18:31:54,850 - find_def var='exp' stmt=$110compare_op.2 = exp > $const108.1
2024-09-04 18:31:54,850 - find_def_from_top label 106
2024-09-04 18:31:54,850 - insert phi node exp.3 = phi(incoming_values=[], incoming_blocks=[]) at 106
2024-09-04 18:31:54,850 - find_def_from_bottom label 96
2024-09-04 18:31:54,850 - find_def_from_top label 96
2024-09-04 18:31:54,850 - idom 48 from label 96
2024-09-04 18:31:54,850 - find_def_from_bottom label 48
2024-09-04 18:31:54,850 - find_def_from_top label 48
2024-09-04 18:31:54,850 - idom 26 from label 48
2024-09-04 18:31:54,850 - find_def_from_bottom label 26
2024-09-04 18:31:54,850 - incoming_def exp = unary(fn=<built-in function neg>, value=b)
2024-09-04 18:31:54,850 - find_def_from_bottom label 98
2024-09-04 18:31:54,850 - incoming_def exp.1 = b
2024-09-04 18:31:54,850 - replaced with: $110compare_op.2 = exp.3 > $const108.1
2024-09-04 18:31:54,850 - on stmt: bool112 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,850 - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,850 - on stmt: branch $112pred, 114, 130
2024-09-04 18:31:54,850 - ==== SSA block rewrite pass on 114
2024-09-04 18:31:54,850 - Running <numba.core.ssa._FixSSAVars object at 0x00000243133E78B0>
2024-09-04 18:31:54,850 - on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2024-09-04 18:31:54,850 - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2024-09-04 18:31:54,850 - on stmt: $120load_global.3 = global(float: <class 'float'>)
2024-09-04 18:31:54,850 - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,850 - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,850 - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2024-09-04 18:31:54,850 - on stmt: return $128return_value.7
2024-09-04 18:31:54,850 - ==== SSA block rewrite pass on 130
2024-09-04 18:31:54,850 - Running <numba.core.ssa._FixSSAVars object at 0x00000243133E78B0>
2024-09-04 18:31:54,850 - on stmt: $const132.1 = const(int, 0)
2024-09-04 18:31:54,850 - on stmt: $134compare_op.2 = exp != $const132.1
2024-09-04 18:31:54,850 - find_def var='exp' stmt=$134compare_op.2 = exp != $const132.1
2024-09-04 18:31:54,850 - find_def_from_top label 130
2024-09-04 18:31:54,850 - idom 106 from label 130
2024-09-04 18:31:54,850 - find_def_from_bottom label 106
2024-09-04 18:31:54,850 - replaced with: $134compare_op.2 = exp.3 != $const132.1
2024-09-04 18:31:54,850 - on stmt: bool136 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,850 - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,850 - on stmt: branch $136pred, 138, 178
2024-09-04 18:31:54,850 - ==== SSA block rewrite pass on 138
2024-09-04 18:31:54,850 - Running <numba.core.ssa._FixSSAVars object at 0x00000243133E78B0>
2024-09-04 18:31:54,850 - on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[130, 154])
2024-09-04 18:31:54,850 - on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2024-09-04 18:31:54,850 - on stmt: $const140.1 = const(int, 1)
2024-09-04 18:31:54,850 - on stmt: $142binary_and.2 = exp & $const140.1
2024-09-04 18:31:54,850 - find_def var='exp' stmt=$142binary_and.2 = exp & $const140.1
2024-09-04 18:31:54,850 - find_def_from_top label 138
2024-09-04 18:31:54,850 - insert phi node exp.4 = phi(incoming_values=[], incoming_blocks=[]) at 138
2024-09-04 18:31:54,850 - find_def_from_bottom label 130
2024-09-04 18:31:54,850 - find_def_from_top label 130
2024-09-04 18:31:54,850 - idom 106 from label 130
2024-09-04 18:31:54,850 - find_def_from_bottom label 106
2024-09-04 18:31:54,850 - incoming_def exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[96, 98])
2024-09-04 18:31:54,850 - find_def_from_bottom label 154
2024-09-04 18:31:54,850 - incoming_def exp.2 = $158inplace_rshift.2
2024-09-04 18:31:54,850 - replaced with: $142binary_and.2 = exp.4 & $const140.1
2024-09-04 18:31:54,850 - on stmt: bool144 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,850 - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,850 - on stmt: branch $144pred, 146, 154
2024-09-04 18:31:54,850 - ==== SSA block rewrite pass on 146
2024-09-04 18:31:54,850 - Running <numba.core.ssa._FixSSAVars object at 0x00000243133E78B0>
2024-09-04 18:31:54,850 - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,850 - on stmt: r.1 = $150inplace_multiply.2
2024-09-04 18:31:54,850 - on stmt: jump 154
2024-09-04 18:31:54,850 - ==== SSA block rewrite pass on 154
2024-09-04 18:31:54,850 - Running <numba.core.ssa._FixSSAVars object at 0x00000243133E78B0>
2024-09-04 18:31:54,850 - on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2024-09-04 18:31:54,850 - on stmt: $const156.1 = const(int, 1)
2024-09-04 18:31:54,850 - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,850 - find_def var='exp' stmt=$158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,850 - find_def_from_top label 154
2024-09-04 18:31:54,850 - idom 138 from label 154
2024-09-04 18:31:54,850 - find_def_from_bottom label 138
2024-09-04 18:31:54,850 - replaced with: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,850 - on stmt: exp.2 = $158inplace_rshift.2
2024-09-04 18:31:54,850 - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2024-09-04 18:31:54,850 - on stmt: a.1.1 = $166inplace_multiply.5
2024-09-04 18:31:54,850 - on stmt: $const172.7 = const(int, 0)
2024-09-04 18:31:54,850 - on stmt: $174compare_op.8 = exp != $const172.7
2024-09-04 18:31:54,850 - find_def var='exp' stmt=$174compare_op.8 = exp != $const172.7
2024-09-04 18:31:54,850 - replaced with: $174compare_op.8 = exp.2 != $const172.7
2024-09-04 18:31:54,850 - on stmt: bool176 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,850 - on stmt: $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,850 - on stmt: branch $176pred, 138, 178
2024-09-04 18:31:54,850 - ==== SSA block rewrite pass on 178
2024-09-04 18:31:54,850 - Running <numba.core.ssa._FixSSAVars object at 0x00000243133E78B0>
2024-09-04 18:31:54,850 - on stmt: r.4 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2024-09-04 18:31:54,850 - on stmt: bool180 = global(bool: <class 'bool'>)
2024-09-04 18:31:54,850 - on stmt: $180pred = call bool180(invert.2, func=bool180, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:54,850 - on stmt: branch $180pred, 182, 190
2024-09-04 18:31:54,850 - ==== SSA block rewrite pass on 182
2024-09-04 18:31:54,850 - Running <numba.core.ssa._FixSSAVars object at 0x00000243133E78B0>
2024-09-04 18:31:54,866 - on stmt: $const182.0 = const(float, 1.0)
2024-09-04 18:31:54,866 - on stmt: $186binary_true_divide.2 = $const182.0 / r.4
2024-09-04 18:31:54,866 - on stmt: $188return_value.3 = cast(value=$186binary_true_divide.2)
2024-09-04 18:31:54,866 - on stmt: return $188return_value.3
2024-09-04 18:31:54,866 - ==== SSA block rewrite pass on 190
2024-09-04 18:31:54,866 - Running <numba.core.ssa._FixSSAVars object at 0x00000243133E78B0>
2024-09-04 18:31:54,866 - on stmt: $192return_value.1 = cast(value=r.4)
2024-09-04 18:31:54,866 - on stmt: return $192return_value.1
2024-09-04 18:31:55,272 - bytecode dump:
>          0	NOP(arg=None, lineno=2504)
           2	LOAD_GLOBAL(arg=0, lineno=2508)
           4	LOAD_METHOD(arg=1, lineno=2508)
           6	LOAD_FAST(arg=0, lineno=2508)
           8	CALL_METHOD(arg=1, lineno=2508)
          10	LOAD_CONST(arg=1, lineno=2508)
          12	LOAD_GLOBAL(arg=0, lineno=2508)
          14	LOAD_METHOD(arg=2, lineno=2508)
          16	LOAD_FAST(arg=0, lineno=2508)
          18	CALL_METHOD(arg=1, lineno=2508)
          20	BINARY_MULTIPLY(arg=None, lineno=2508)
          22	BINARY_ADD(arg=None, lineno=2508)
          24	RETURN_VALUE(arg=None, lineno=2508)
2024-09-04 18:31:55,272 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:55,272 - stack: []
2024-09-04 18:31:55,272 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:55,272 - dispatch pc=0, inst=NOP(arg=None, lineno=2504)
2024-09-04 18:31:55,272 - stack []
2024-09-04 18:31:55,272 - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2508)
2024-09-04 18:31:55,272 - stack []
2024-09-04 18:31:55,274 - dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=2508)
2024-09-04 18:31:55,274 - stack ['$2load_global.0']
2024-09-04 18:31:55,274 - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=2508)
2024-09-04 18:31:55,274 - stack ['$4load_method.1']
2024-09-04 18:31:55,274 - dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=2508)
2024-09-04 18:31:55,274 - stack ['$4load_method.1', '$x6.2']
2024-09-04 18:31:55,274 - dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=2508)
2024-09-04 18:31:55,274 - stack ['$8call_method.3']
2024-09-04 18:31:55,274 - dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=2508)
2024-09-04 18:31:55,274 - stack ['$8call_method.3', '$const10.4']
2024-09-04 18:31:55,274 - dispatch pc=14, inst=LOAD_METHOD(arg=2, lineno=2508)
2024-09-04 18:31:55,274 - stack ['$8call_method.3', '$const10.4', '$12load_global.5']
2024-09-04 18:31:55,274 - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=2508)
2024-09-04 18:31:55,274 - stack ['$8call_method.3', '$const10.4', '$14load_method.6']
2024-09-04 18:31:55,274 - dispatch pc=18, inst=CALL_METHOD(arg=1, lineno=2508)
2024-09-04 18:31:55,274 - stack ['$8call_method.3', '$const10.4', '$14load_method.6', '$x16.7']
2024-09-04 18:31:55,274 - dispatch pc=20, inst=BINARY_MULTIPLY(arg=None, lineno=2508)
2024-09-04 18:31:55,274 - stack ['$8call_method.3', '$const10.4', '$18call_method.8']
2024-09-04 18:31:55,274 - dispatch pc=22, inst=BINARY_ADD(arg=None, lineno=2508)
2024-09-04 18:31:55,274 - stack ['$8call_method.3', '$20binary_multiply.9']
2024-09-04 18:31:55,274 - dispatch pc=24, inst=RETURN_VALUE(arg=None, lineno=2508)
2024-09-04 18:31:55,274 - stack ['$22binary_add.10']
2024-09-04 18:31:55,274 - end state. edges=[]
2024-09-04 18:31:55,274 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:55,274 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 18:31:55,274 - defmap: {}
2024-09-04 18:31:55,274 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:55,274 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:55,274 - keep phismap: {}
2024-09-04 18:31:55,279 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:55,279 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:55,279 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$x6.2'}), (8, {'func': '$4load_method.1', 'args': ['$x6.2'], 'res': '$8call_method.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$12load_global.5'}), (14, {'item': '$12load_global.5', 'res': '$14load_method.6'}), (16, {'res': '$x16.7'}), (18, {'func': '$14load_method.6', 'args': ['$x16.7'], 'res': '$18call_method.8'}), (20, {'lhs': '$const10.4', 'rhs': '$18call_method.8', 'res': '$20binary_multiply.9'}), (22, {'lhs': '$8call_method.3', 'rhs': '$20binary_multiply.9', 'res': '$22binary_add.10'}), (24, {'retval': '$22binary_add.10', 'castval': '$24return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:55,279 - label 0:
    x = arg(0, name=x)                       ['x']
    $2load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=cos) ['$2load_global.0', '$4load_method.1']
    $8call_method.3 = call $4load_method.1(x, func=$4load_method.1, args=[Var(x, utils.py:2504)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_method.1', '$8call_method.3', 'x']
    $const10.4 = const(complex, 1j)          ['$const10.4']
    $12load_global.5 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$12load_global.5']
    $14load_method.6 = getattr(value=$12load_global.5, attr=sin) ['$12load_global.5', '$14load_method.6']
    $18call_method.8 = call $14load_method.6(x, func=$14load_method.6, args=[Var(x, utils.py:2504)], kws=(), vararg=None, varkwarg=None, target=None) ['$14load_method.6', '$18call_method.8', 'x']
    $20binary_multiply.9 = $const10.4 * $18call_method.8 ['$18call_method.8', '$20binary_multiply.9', '$const10.4']
    $22binary_add.10 = $8call_method.3 + $20binary_multiply.9 ['$20binary_multiply.9', '$22binary_add.10', '$8call_method.3']
    $24return_value.11 = cast(value=$22binary_add.10) ['$22binary_add.10', '$24return_value.11']
    return $24return_value.11                ['$24return_value.11']

2024-09-04 18:31:55,294 - ==== SSA block analysis pass on 0
2024-09-04 18:31:55,294 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313548790>
2024-09-04 18:31:55,294 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:55,294 - on stmt: $2load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:55,294 - on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=cos)
2024-09-04 18:31:55,294 - on stmt: $8call_method.3 = call $4load_method.1(x, func=$4load_method.1, args=[Var(x, utils.py:2504)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:55,294 - on stmt: $const10.4 = const(complex, 1j)
2024-09-04 18:31:55,294 - on stmt: $12load_global.5 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:55,294 - on stmt: $14load_method.6 = getattr(value=$12load_global.5, attr=sin)
2024-09-04 18:31:55,294 - on stmt: $18call_method.8 = call $14load_method.6(x, func=$14load_method.6, args=[Var(x, utils.py:2504)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:55,294 - on stmt: $20binary_multiply.9 = $const10.4 * $18call_method.8
2024-09-04 18:31:55,294 - on stmt: $22binary_add.10 = $8call_method.3 + $20binary_multiply.9
2024-09-04 18:31:55,294 - on stmt: $24return_value.11 = cast(value=$22binary_add.10)
2024-09-04 18:31:55,294 - on stmt: return $24return_value.11
2024-09-04 18:31:55,294 - defs defaultdict(<class 'list'>,
            {'$12load_global.5': [(<numba.core.ir.Assign object at 0x0000024313595F60>,
                                   0)],
             '$14load_method.6': [(<numba.core.ir.Assign object at 0x00000243135960E0>,
                                   0)],
             '$18call_method.8': [(<numba.core.ir.Assign object at 0x00000243178421D0>,
                                   0)],
             '$20binary_multiply.9': [(<numba.core.ir.Assign object at 0x00000243139C3F40>,
                                       0)],
             '$22binary_add.10': [(<numba.core.ir.Assign object at 0x00000243139C2B90>,
                                   0)],
             '$24return_value.11': [(<numba.core.ir.Assign object at 0x00000243139C3DF0>,
                                     0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x0000024313597070>,
                                  0)],
             '$4load_method.1': [(<numba.core.ir.Assign object at 0x0000024313596980>,
                                  0)],
             '$8call_method.3': [(<numba.core.ir.Assign object at 0x00000243135977C0>,
                                  0)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x00000243135962C0>,
                             0)],
             'x': [(<numba.core.ir.Assign object at 0x0000024313548F40>, 0)]})
2024-09-04 18:31:55,294 - SSA violators <numba.core.utils.OrderedSet object at 0x0000024313548790>
2024-09-04 18:31:55,430 - bytecode dump:
>          0	NOP(arg=None, lineno=2504)
           2	LOAD_GLOBAL(arg=0, lineno=2508)
           4	LOAD_METHOD(arg=1, lineno=2508)
           6	LOAD_FAST(arg=0, lineno=2508)
           8	CALL_METHOD(arg=1, lineno=2508)
          10	LOAD_CONST(arg=1, lineno=2508)
          12	LOAD_GLOBAL(arg=0, lineno=2508)
          14	LOAD_METHOD(arg=2, lineno=2508)
          16	LOAD_FAST(arg=0, lineno=2508)
          18	CALL_METHOD(arg=1, lineno=2508)
          20	BINARY_MULTIPLY(arg=None, lineno=2508)
          22	BINARY_ADD(arg=None, lineno=2508)
          24	RETURN_VALUE(arg=None, lineno=2508)
2024-09-04 18:31:55,430 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:55,430 - stack: []
2024-09-04 18:31:55,430 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:55,430 - dispatch pc=0, inst=NOP(arg=None, lineno=2504)
2024-09-04 18:31:55,430 - stack []
2024-09-04 18:31:55,430 - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2508)
2024-09-04 18:31:55,430 - stack []
2024-09-04 18:31:55,430 - dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=2508)
2024-09-04 18:31:55,430 - stack ['$2load_global.0']
2024-09-04 18:31:55,430 - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=2508)
2024-09-04 18:31:55,430 - stack ['$4load_method.1']
2024-09-04 18:31:55,430 - dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=2508)
2024-09-04 18:31:55,430 - stack ['$4load_method.1', '$x6.2']
2024-09-04 18:31:55,430 - dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=2508)
2024-09-04 18:31:55,430 - stack ['$8call_method.3']
2024-09-04 18:31:55,430 - dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=2508)
2024-09-04 18:31:55,430 - stack ['$8call_method.3', '$const10.4']
2024-09-04 18:31:55,430 - dispatch pc=14, inst=LOAD_METHOD(arg=2, lineno=2508)
2024-09-04 18:31:55,430 - stack ['$8call_method.3', '$const10.4', '$12load_global.5']
2024-09-04 18:31:55,430 - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=2508)
2024-09-04 18:31:55,430 - stack ['$8call_method.3', '$const10.4', '$14load_method.6']
2024-09-04 18:31:55,430 - dispatch pc=18, inst=CALL_METHOD(arg=1, lineno=2508)
2024-09-04 18:31:55,430 - stack ['$8call_method.3', '$const10.4', '$14load_method.6', '$x16.7']
2024-09-04 18:31:55,430 - dispatch pc=20, inst=BINARY_MULTIPLY(arg=None, lineno=2508)
2024-09-04 18:31:55,439 - stack ['$8call_method.3', '$const10.4', '$18call_method.8']
2024-09-04 18:31:55,439 - dispatch pc=22, inst=BINARY_ADD(arg=None, lineno=2508)
2024-09-04 18:31:55,439 - stack ['$8call_method.3', '$20binary_multiply.9']
2024-09-04 18:31:55,439 - dispatch pc=24, inst=RETURN_VALUE(arg=None, lineno=2508)
2024-09-04 18:31:55,439 - stack ['$22binary_add.10']
2024-09-04 18:31:55,439 - end state. edges=[]
2024-09-04 18:31:55,439 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:55,439 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 18:31:55,439 - defmap: {}
2024-09-04 18:31:55,439 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:55,439 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:55,439 - keep phismap: {}
2024-09-04 18:31:55,439 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:55,439 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:55,439 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$x6.2'}), (8, {'func': '$4load_method.1', 'args': ['$x6.2'], 'res': '$8call_method.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$12load_global.5'}), (14, {'item': '$12load_global.5', 'res': '$14load_method.6'}), (16, {'res': '$x16.7'}), (18, {'func': '$14load_method.6', 'args': ['$x16.7'], 'res': '$18call_method.8'}), (20, {'lhs': '$const10.4', 'rhs': '$18call_method.8', 'res': '$20binary_multiply.9'}), (22, {'lhs': '$8call_method.3', 'rhs': '$20binary_multiply.9', 'res': '$22binary_add.10'}), (24, {'retval': '$22binary_add.10', 'castval': '$24return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:55,439 - label 0:
    x = arg(0, name=x)                       ['x']
    $2load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=cos) ['$2load_global.0', '$4load_method.1']
    $8call_method.3 = call $4load_method.1(x, func=$4load_method.1, args=[Var(x, utils.py:2504)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_method.1', '$8call_method.3', 'x']
    $const10.4 = const(complex, 1j)          ['$const10.4']
    $12load_global.5 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$12load_global.5']
    $14load_method.6 = getattr(value=$12load_global.5, attr=sin) ['$12load_global.5', '$14load_method.6']
    $18call_method.8 = call $14load_method.6(x, func=$14load_method.6, args=[Var(x, utils.py:2504)], kws=(), vararg=None, varkwarg=None, target=None) ['$14load_method.6', '$18call_method.8', 'x']
    $20binary_multiply.9 = $const10.4 * $18call_method.8 ['$18call_method.8', '$20binary_multiply.9', '$const10.4']
    $22binary_add.10 = $8call_method.3 + $20binary_multiply.9 ['$20binary_multiply.9', '$22binary_add.10', '$8call_method.3']
    $24return_value.11 = cast(value=$22binary_add.10) ['$22binary_add.10', '$24return_value.11']
    return $24return_value.11                ['$24return_value.11']

2024-09-04 18:31:55,450 - ==== SSA block analysis pass on 0
2024-09-04 18:31:55,450 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024316C99000>
2024-09-04 18:31:55,450 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:55,450 - on stmt: $2load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:55,453 - on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=cos)
2024-09-04 18:31:55,453 - on stmt: $8call_method.3 = call $4load_method.1(x, func=$4load_method.1, args=[Var(x, utils.py:2504)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:55,453 - on stmt: $const10.4 = const(complex, 1j)
2024-09-04 18:31:55,453 - on stmt: $12load_global.5 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:55,453 - on stmt: $14load_method.6 = getattr(value=$12load_global.5, attr=sin)
2024-09-04 18:31:55,453 - on stmt: $18call_method.8 = call $14load_method.6(x, func=$14load_method.6, args=[Var(x, utils.py:2504)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:55,453 - on stmt: $20binary_multiply.9 = $const10.4 * $18call_method.8
2024-09-04 18:31:55,453 - on stmt: $22binary_add.10 = $8call_method.3 + $20binary_multiply.9
2024-09-04 18:31:55,453 - on stmt: $24return_value.11 = cast(value=$22binary_add.10)
2024-09-04 18:31:55,454 - on stmt: return $24return_value.11
2024-09-04 18:31:55,454 - defs defaultdict(<class 'list'>,
            {'$12load_global.5': [(<numba.core.ir.Assign object at 0x0000024313A1E3E0>,
                                   0)],
             '$14load_method.6': [(<numba.core.ir.Assign object at 0x0000024313A1EA40>,
                                   0)],
             '$18call_method.8': [(<numba.core.ir.Assign object at 0x0000024313A1F7F0>,
                                   0)],
             '$20binary_multiply.9': [(<numba.core.ir.Assign object at 0x0000024313A1F910>,
                                       0)],
             '$22binary_add.10': [(<numba.core.ir.Assign object at 0x0000024313A1FA90>,
                                   0)],
             '$24return_value.11': [(<numba.core.ir.Assign object at 0x0000024313A1FBE0>,
                                     0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x0000024313A1F580>,
                                  0)],
             '$4load_method.1': [(<numba.core.ir.Assign object at 0x0000024313A1F700>,
                                  0)],
             '$8call_method.3': [(<numba.core.ir.Assign object at 0x0000024313A1F250>,
                                  0)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x0000024313A1F160>,
                             0)],
             'x': [(<numba.core.ir.Assign object at 0x0000024313A1EB60>, 0)]})
2024-09-04 18:31:55,454 - SSA violators <numba.core.utils.OrderedSet object at 0x0000024316C99000>
2024-09-04 18:31:55,685 - bytecode dump:
>          0	NOP(arg=None, lineno=425)
           2	LOAD_FAST(arg=0, lineno=428)
           4	LOAD_CONST(arg=1, lineno=428)
           6	BINARY_SUBSCR(arg=None, lineno=428)
           8	LOAD_FAST(arg=0, lineno=428)
          10	LOAD_CONST(arg=2, lineno=428)
          12	BINARY_SUBSCR(arg=None, lineno=428)
          14	BINARY_ADD(arg=None, lineno=428)
          16	LOAD_CONST(arg=3, lineno=428)
          18	LOAD_FAST(arg=0, lineno=428)
          20	LOAD_CONST(arg=4, lineno=428)
          22	BINARY_SUBSCR(arg=None, lineno=428)
          24	BINARY_MULTIPLY(arg=None, lineno=428)
          26	BINARY_SUBTRACT(arg=None, lineno=428)
          28	STORE_FAST(arg=1, lineno=428)
          30	LOAD_FAST(arg=0, lineno=429)
          32	LOAD_CONST(arg=1, lineno=429)
          34	BINARY_SUBSCR(arg=None, lineno=429)
          36	LOAD_FAST(arg=0, lineno=429)
          38	LOAD_CONST(arg=2, lineno=429)
          40	BINARY_SUBSCR(arg=None, lineno=429)
          42	BINARY_SUBTRACT(arg=None, lineno=429)
          44	LOAD_CONST(arg=3, lineno=429)
          46	BINARY_TRUE_DIVIDE(arg=None, lineno=429)
          48	STORE_FAST(arg=2, lineno=429)
          50	LOAD_GLOBAL(arg=0, lineno=431)
          52	LOAD_METHOD(arg=1, lineno=431)
          54	LOAD_FAST(arg=2, lineno=431)
          56	CALL_METHOD(arg=1, lineno=431)
          58	LOAD_GLOBAL(arg=0, lineno=431)
          60	LOAD_METHOD(arg=1, lineno=431)
          62	LOAD_FAST(arg=1, lineno=431)
          64	CALL_METHOD(arg=1, lineno=431)
          66	COMPARE_OP(arg=5, lineno=431)
          68	POP_JUMP_IF_FALSE(arg=38, lineno=431)
          70	LOAD_CONST(arg=4, lineno=434)
          72	RETURN_VALUE(arg=None, lineno=434)
>         74	LOAD_FAST(arg=2, lineno=436)
          76	UNARY_NEGATIVE(arg=None, lineno=436)
          78	LOAD_FAST(arg=1, lineno=436)
          80	BINARY_TRUE_DIVIDE(arg=None, lineno=436)
          82	RETURN_VALUE(arg=None, lineno=436)
2024-09-04 18:31:55,685 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:55,685 - stack: []
2024-09-04 18:31:55,685 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:55,685 - dispatch pc=0, inst=NOP(arg=None, lineno=425)
2024-09-04 18:31:55,685 - stack []
2024-09-04 18:31:55,685 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=428)
2024-09-04 18:31:55,685 - stack []
2024-09-04 18:31:55,685 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=428)
2024-09-04 18:31:55,685 - stack ['$x2.0']
2024-09-04 18:31:55,685 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=428)
2024-09-04 18:31:55,685 - stack ['$x2.0', '$const4.1']
2024-09-04 18:31:55,685 - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=428)
2024-09-04 18:31:55,685 - stack ['$6binary_subscr.2']
2024-09-04 18:31:55,685 - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=428)
2024-09-04 18:31:55,685 - stack ['$6binary_subscr.2', '$x8.3']
2024-09-04 18:31:55,685 - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=428)
2024-09-04 18:31:55,685 - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2024-09-04 18:31:55,685 - dispatch pc=14, inst=BINARY_ADD(arg=None, lineno=428)
2024-09-04 18:31:55,685 - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2024-09-04 18:31:55,685 - dispatch pc=16, inst=LOAD_CONST(arg=3, lineno=428)
2024-09-04 18:31:55,685 - stack ['$14binary_add.6']
2024-09-04 18:31:55,685 - dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=428)
2024-09-04 18:31:55,685 - stack ['$14binary_add.6', '$const16.7']
2024-09-04 18:31:55,685 - dispatch pc=20, inst=LOAD_CONST(arg=4, lineno=428)
2024-09-04 18:31:55,685 - stack ['$14binary_add.6', '$const16.7', '$x18.8']
2024-09-04 18:31:55,685 - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=428)
2024-09-04 18:31:55,685 - stack ['$14binary_add.6', '$const16.7', '$x18.8', '$const20.9']
2024-09-04 18:31:55,685 - dispatch pc=24, inst=BINARY_MULTIPLY(arg=None, lineno=428)
2024-09-04 18:31:55,685 - stack ['$14binary_add.6', '$const16.7', '$22binary_subscr.10']
2024-09-04 18:31:55,685 - dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=428)
2024-09-04 18:31:55,685 - stack ['$14binary_add.6', '$24binary_multiply.11']
2024-09-04 18:31:55,685 - dispatch pc=28, inst=STORE_FAST(arg=1, lineno=428)
2024-09-04 18:31:55,685 - stack ['$26binary_subtract.12']
2024-09-04 18:31:55,689 - dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=429)
2024-09-04 18:31:55,689 - stack []
2024-09-04 18:31:55,689 - dispatch pc=32, inst=LOAD_CONST(arg=1, lineno=429)
2024-09-04 18:31:55,689 - stack ['$x30.13']
2024-09-04 18:31:55,689 - dispatch pc=34, inst=BINARY_SUBSCR(arg=None, lineno=429)
2024-09-04 18:31:55,689 - stack ['$x30.13', '$const32.14']
2024-09-04 18:31:55,689 - dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=429)
2024-09-04 18:31:55,689 - stack ['$34binary_subscr.15']
2024-09-04 18:31:55,689 - dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=429)
2024-09-04 18:31:55,689 - stack ['$34binary_subscr.15', '$x36.16']
2024-09-04 18:31:55,690 - dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=429)
2024-09-04 18:31:55,690 - stack ['$34binary_subscr.15', '$x36.16', '$const38.17']
2024-09-04 18:31:55,690 - dispatch pc=42, inst=BINARY_SUBTRACT(arg=None, lineno=429)
2024-09-04 18:31:55,690 - stack ['$34binary_subscr.15', '$40binary_subscr.18']
2024-09-04 18:31:55,690 - dispatch pc=44, inst=LOAD_CONST(arg=3, lineno=429)
2024-09-04 18:31:55,690 - stack ['$42binary_subtract.19']
2024-09-04 18:31:55,690 - dispatch pc=46, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=429)
2024-09-04 18:31:55,690 - stack ['$42binary_subtract.19', '$const44.20']
2024-09-04 18:31:55,690 - dispatch pc=48, inst=STORE_FAST(arg=2, lineno=429)
2024-09-04 18:31:55,690 - stack ['$46binary_true_divide.21']
2024-09-04 18:31:55,690 - dispatch pc=50, inst=LOAD_GLOBAL(arg=0, lineno=431)
2024-09-04 18:31:55,690 - stack []
2024-09-04 18:31:55,690 - dispatch pc=52, inst=LOAD_METHOD(arg=1, lineno=431)
2024-09-04 18:31:55,690 - stack ['$50load_global.22']
2024-09-04 18:31:55,690 - dispatch pc=54, inst=LOAD_FAST(arg=2, lineno=431)
2024-09-04 18:31:55,690 - stack ['$52load_method.23']
2024-09-04 18:31:55,690 - dispatch pc=56, inst=CALL_METHOD(arg=1, lineno=431)
2024-09-04 18:31:55,690 - stack ['$52load_method.23', '$b54.24']
2024-09-04 18:31:55,690 - dispatch pc=58, inst=LOAD_GLOBAL(arg=0, lineno=431)
2024-09-04 18:31:55,690 - stack ['$56call_method.25']
2024-09-04 18:31:55,690 - dispatch pc=60, inst=LOAD_METHOD(arg=1, lineno=431)
2024-09-04 18:31:55,690 - stack ['$56call_method.25', '$58load_global.26']
2024-09-04 18:31:55,690 - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=431)
2024-09-04 18:31:55,690 - stack ['$56call_method.25', '$60load_method.27']
2024-09-04 18:31:55,690 - dispatch pc=64, inst=CALL_METHOD(arg=1, lineno=431)
2024-09-04 18:31:55,690 - stack ['$56call_method.25', '$60load_method.27', '$a62.28']
2024-09-04 18:31:55,690 - dispatch pc=66, inst=COMPARE_OP(arg=5, lineno=431)
2024-09-04 18:31:55,690 - stack ['$56call_method.25', '$64call_method.29']
2024-09-04 18:31:55,690 - dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=38, lineno=431)
2024-09-04 18:31:55,690 - stack ['$66compare_op.30']
2024-09-04 18:31:55,690 - end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=74, stack=(), blockstack=(), npush=0)]
2024-09-04 18:31:55,690 - pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=74 nstack_initial=0)])
2024-09-04 18:31:55,690 - stack: []
2024-09-04 18:31:55,690 - state.pc_initial: State(pc_initial=70 nstack_initial=0)
2024-09-04 18:31:55,690 - dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=434)
2024-09-04 18:31:55,690 - stack []
2024-09-04 18:31:55,690 - dispatch pc=72, inst=RETURN_VALUE(arg=None, lineno=434)
2024-09-04 18:31:55,690 - stack ['$const70.0']
2024-09-04 18:31:55,690 - end state. edges=[]
2024-09-04 18:31:55,690 - pending: deque([State(pc_initial=74 nstack_initial=0)])
2024-09-04 18:31:55,690 - stack: []
2024-09-04 18:31:55,690 - state.pc_initial: State(pc_initial=74 nstack_initial=0)
2024-09-04 18:31:55,690 - dispatch pc=74, inst=LOAD_FAST(arg=2, lineno=436)
2024-09-04 18:31:55,690 - stack []
2024-09-04 18:31:55,690 - dispatch pc=76, inst=UNARY_NEGATIVE(arg=None, lineno=436)
2024-09-04 18:31:55,690 - stack ['$b74.0']
2024-09-04 18:31:55,690 - dispatch pc=78, inst=LOAD_FAST(arg=1, lineno=436)
2024-09-04 18:31:55,690 - stack ['$76unary_negative.1']
2024-09-04 18:31:55,690 - dispatch pc=80, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=436)
2024-09-04 18:31:55,690 - stack ['$76unary_negative.1', '$a78.2']
2024-09-04 18:31:55,690 - dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=436)
2024-09-04 18:31:55,690 - stack ['$80binary_true_divide.3']
2024-09-04 18:31:55,690 - end state. edges=[]
2024-09-04 18:31:55,690 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:55,690 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set()})
2024-09-04 18:31:55,690 - defmap: {}
2024-09-04 18:31:55,690 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:55,690 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:55,690 - keep phismap: {}
2024-09-04 18:31:55,690 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:55,690 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:55,690 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14binary_add.6'}), (16, {'res': '$const16.7'}), (18, {'res': '$x18.8'}), (20, {'res': '$const20.9'}), (22, {'index': '$const20.9', 'target': '$x18.8', 'res': '$22binary_subscr.10'}), (24, {'lhs': '$const16.7', 'rhs': '$22binary_subscr.10', 'res': '$24binary_multiply.11'}), (26, {'lhs': '$14binary_add.6', 'rhs': '$24binary_multiply.11', 'res': '$26binary_subtract.12'}), (28, {'value': '$26binary_subtract.12'}), (30, {'res': '$x30.13'}), (32, {'res': '$const32.14'}), (34, {'index': '$const32.14', 'target': '$x30.13', 'res': '$34binary_subscr.15'}), (36, {'res': '$x36.16'}), (38, {'res': '$const38.17'}), (40, {'index': '$const38.17', 'target': '$x36.16', 'res': '$40binary_subscr.18'}), (42, {'lhs': '$34binary_subscr.15', 'rhs': '$40binary_subscr.18', 'res': '$42binary_subtract.19'}), (44, {'res': '$const44.20'}), (46, {'lhs': '$42binary_subtract.19', 'rhs': '$const44.20', 'res': '$46binary_true_divide.21'}), (48, {'value': '$46binary_true_divide.21'}), (50, {'res': '$50load_global.22'}), (52, {'item': '$50load_global.22', 'res': '$52load_method.23'}), (54, {'res': '$b54.24'}), (56, {'func': '$52load_method.23', 'args': ['$b54.24'], 'res': '$56call_method.25'}), (58, {'res': '$58load_global.26'}), (60, {'item': '$58load_global.26', 'res': '$60load_method.27'}), (62, {'res': '$a62.28'}), (64, {'func': '$60load_method.27', 'args': ['$a62.28'], 'res': '$64call_method.29'}), (66, {'lhs': '$56call_method.25', 'rhs': '$64call_method.29', 'res': '$66compare_op.30'}), (68, {'pred': '$66compare_op.30'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 74: ()})
2024-09-04 18:31:55,690 - block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$const70.0'}), (72, {'retval': '$const70.0', 'castval': '$72return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:55,690 - block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$b74.0'}), (76, {'value': '$b74.0', 'res': '$76unary_negative.1'}), (78, {'res': '$a78.2'}), (80, {'lhs': '$76unary_negative.1', 'rhs': '$a78.2', 'res': '$80binary_true_divide.3'}), (82, {'retval': '$80binary_true_divide.3', 'castval': '$82return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:55,699 - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14binary_add.6 = $6binary_subscr.2 + $12binary_subscr.5 ['$12binary_subscr.5', '$14binary_add.6', '$6binary_subscr.2']
    $const16.7 = const(int, 2)               ['$const16.7']
    $const20.9 = const(int, 0)               ['$const20.9']
    $22binary_subscr.10 = getitem(value=x, index=$const20.9, fn=<built-in function getitem>) ['$22binary_subscr.10', '$const20.9', 'x']
    $24binary_multiply.11 = $const16.7 * $22binary_subscr.10 ['$22binary_subscr.10', '$24binary_multiply.11', '$const16.7']
    a = $14binary_add.6 - $24binary_multiply.11 ['$14binary_add.6', '$24binary_multiply.11', 'a']
    $const32.14 = const(int, 1)              ['$const32.14']
    $34binary_subscr.15 = getitem(value=x, index=$const32.14, fn=<built-in function getitem>) ['$34binary_subscr.15', '$const32.14', 'x']
    $const38.17 = const(int, -1)             ['$const38.17']
    $40binary_subscr.18 = getitem(value=x, index=$const38.17, fn=<built-in function getitem>) ['$40binary_subscr.18', '$const38.17', 'x']
    $42binary_subtract.19 = $34binary_subscr.15 - $40binary_subscr.18 ['$34binary_subscr.15', '$40binary_subscr.18', '$42binary_subtract.19']
    $const44.20 = const(int, 2)              ['$const44.20']
    b = $42binary_subtract.19 / $const44.20  ['$42binary_subtract.19', '$const44.20', 'b']
    $50load_global.22 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$50load_global.22']
    $52load_method.23 = getattr(value=$50load_global.22, attr=abs) ['$50load_global.22', '$52load_method.23']
    $56call_method.25 = call $52load_method.23(b, func=$52load_method.23, args=[Var(b, pitch.py:429)], kws=(), vararg=None, varkwarg=None, target=None) ['$52load_method.23', '$56call_method.25', 'b']
    $58load_global.26 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$58load_global.26']
    $60load_method.27 = getattr(value=$58load_global.26, attr=abs) ['$58load_global.26', '$60load_method.27']
    $64call_method.29 = call $60load_method.27(a, func=$60load_method.27, args=[Var(a, pitch.py:428)], kws=(), vararg=None, varkwarg=None, target=None) ['$60load_method.27', '$64call_method.29', 'a']
    $66compare_op.30 = $56call_method.25 >= $64call_method.29 ['$56call_method.25', '$64call_method.29', '$66compare_op.30']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.30, func=bool68, args=(Var($66compare_op.30, pitch.py:431),), kws=(), vararg=None, varkwarg=None, target=None) ['$66compare_op.30', '$68pred', 'bool68']
    branch $68pred, 70, 74                   ['$68pred']
label 70:
    $const70.0 = const(int, 0)               ['$const70.0']
    $72return_value.1 = cast(value=$const70.0) ['$72return_value.1', '$const70.0']
    return $72return_value.1                 ['$72return_value.1']
label 74:
    $76unary_negative.1 = unary(fn=<built-in function neg>, value=b) ['$76unary_negative.1', 'b']
    $80binary_true_divide.3 = $76unary_negative.1 / a ['$76unary_negative.1', '$80binary_true_divide.3', 'a']
    $82return_value.4 = cast(value=$80binary_true_divide.3) ['$80binary_true_divide.3', '$82return_value.4']
    return $82return_value.4                 ['$82return_value.4']

2024-09-04 18:31:55,699 - bytecode dump:
>          0	NOP(arg=None, lineno=439)
           2	LOAD_GLOBAL(arg=0, lineno=447)
           4	LOAD_FAST(arg=0, lineno=447)
           6	CALL_FUNCTION(arg=1, lineno=447)
           8	LOAD_FAST(arg=1, lineno=447)
          10	LOAD_CONST(arg=1, lineno=447)
          12	LOAD_CONST(arg=1, lineno=447)
          14	BUILD_SLICE(arg=2, lineno=447)
          16	STORE_SUBSCR(arg=None, lineno=447)
          18	LOAD_CONST(arg=1, lineno=447)
          20	RETURN_VALUE(arg=None, lineno=447)
2024-09-04 18:31:55,699 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:55,699 - stack: []
2024-09-04 18:31:55,699 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:55,699 - dispatch pc=0, inst=NOP(arg=None, lineno=439)
2024-09-04 18:31:55,699 - stack []
2024-09-04 18:31:55,699 - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=447)
2024-09-04 18:31:55,699 - stack []
2024-09-04 18:31:55,699 - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=447)
2024-09-04 18:31:55,699 - stack ['$2load_global.0']
2024-09-04 18:31:55,699 - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=447)
2024-09-04 18:31:55,699 - stack ['$2load_global.0', '$x4.1']
2024-09-04 18:31:55,699 - dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=447)
2024-09-04 18:31:55,699 - stack ['$6call_function.2']
2024-09-04 18:31:55,699 - dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=447)
2024-09-04 18:31:55,709 - stack ['$6call_function.2', '$y8.3']
2024-09-04 18:31:55,709 - dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=447)
2024-09-04 18:31:55,709 - stack ['$6call_function.2', '$y8.3', '$const10.4']
2024-09-04 18:31:55,709 - dispatch pc=14, inst=BUILD_SLICE(arg=2, lineno=447)
2024-09-04 18:31:55,709 - stack ['$6call_function.2', '$y8.3', '$const10.4', '$const12.5']
2024-09-04 18:31:55,710 - dispatch pc=16, inst=STORE_SUBSCR(arg=None, lineno=447)
2024-09-04 18:31:55,710 - stack ['$6call_function.2', '$y8.3', '$14build_slice.7']
2024-09-04 18:31:55,710 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=447)
2024-09-04 18:31:55,710 - stack []
2024-09-04 18:31:55,710 - dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=447)
2024-09-04 18:31:55,710 - stack ['$const18.8']
2024-09-04 18:31:55,710 - end state. edges=[]
2024-09-04 18:31:55,710 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:55,710 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 18:31:55,710 - defmap: {}
2024-09-04 18:31:55,711 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:55,711 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:55,711 - keep phismap: {}
2024-09-04 18:31:55,711 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:55,711 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:55,711 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'res': '$y8.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$const12.5'}), (14, {'start': '$const10.4', 'stop': '$const12.5', 'step': None, 'res': '$14build_slice.7', 'slicevar': '$14build_slice.6'}), (16, {'target': '$y8.3', 'index': '$14build_slice.7', 'value': '$6call_function.2'}), (18, {'res': '$const18.8'}), (20, {'retval': '$const18.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:55,711 - label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $2load_global.0 = global(_pi_stencil: <numba.stencils.stencil.StencilFunc object at 0x0000024316C92350>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, pitch.py:439)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'x']
    $const10.4 = const(NoneType, None)       ['$const10.4']
    $const12.5 = const(NoneType, None)       ['$const12.5']
    $14build_slice.6 = global(slice: <class 'slice'>) ['$14build_slice.6']
    $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, pitch.py:447), Var($const12.5, pitch.py:447)), kws=(), vararg=None, varkwarg=None, target=None) ['$14build_slice.6', '$14build_slice.7', '$const10.4', '$const12.5']
    y[$14build_slice.7] = $6call_function.2  ['$14build_slice.7', '$6call_function.2', 'y']
    $const18.8 = const(NoneType, None)       ['$const18.8']
    $20return_value.9 = cast(value=$const18.8) ['$20return_value.9', '$const18.8']
    return $20return_value.9                 ['$20return_value.9']

2024-09-04 18:31:55,719 - ==== SSA block analysis pass on 0
2024-09-04 18:31:55,724 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024316CBBE20>
2024-09-04 18:31:55,724 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:55,724 - on stmt: y = arg(1, name=y)
2024-09-04 18:31:55,724 - on stmt: $2load_global.0 = global(_pi_stencil: <numba.stencils.stencil.StencilFunc object at 0x0000024316C92350>)
2024-09-04 18:31:55,724 - on stmt: $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, pitch.py:439)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:55,724 - on stmt: $const10.4 = const(NoneType, None)
2024-09-04 18:31:55,724 - on stmt: $const12.5 = const(NoneType, None)
2024-09-04 18:31:55,724 - on stmt: $14build_slice.6 = global(slice: <class 'slice'>)
2024-09-04 18:31:55,724 - on stmt: $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, pitch.py:447), Var($const12.5, pitch.py:447)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:55,724 - on stmt: y[slice(None, None, None)] = $6call_function.2
2024-09-04 18:31:55,724 - on stmt: $const18.8 = const(NoneType, None)
2024-09-04 18:31:55,724 - on stmt: $20return_value.9 = cast(value=$const18.8)
2024-09-04 18:31:55,724 - on stmt: return $20return_value.9
2024-09-04 18:31:55,724 - defs defaultdict(<class 'list'>,
            {'$14build_slice.6': [(<numba.core.ir.Assign object at 0x0000024316CAD240>,
                                   0)],
             '$14build_slice.7': [(<numba.core.ir.Assign object at 0x0000024316CAD360>,
                                   0)],
             '$20return_value.9': [(<numba.core.ir.Assign object at 0x0000024316CAD720>,
                                    0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x0000024316CACA00>,
                                  0)],
             '$6call_function.2': [(<numba.core.ir.Assign object at 0x0000024316CACD00>,
                                    0)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x0000024316CACF40>,
                             0)],
             '$const12.5': [(<numba.core.ir.Assign object at 0x0000024316CAD0C0>,
                             0)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x0000024316CAD5A0>,
                             0)],
             'x': [(<numba.core.ir.Assign object at 0x0000024316CAC0D0>, 0)],
             'y': [(<numba.core.ir.Assign object at 0x0000024316CAC040>, 0)]})
2024-09-04 18:31:55,724 - SSA violators <numba.core.utils.OrderedSet object at 0x0000024316CBBE20>
2024-09-04 18:31:55,819 - bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=2)
           4	LOAD_ATTR(arg=0, lineno=2)
           6	STORE_FAST(arg=1, lineno=2)
           8	LOAD_GLOBAL(arg=1, lineno=3)
          10	LOAD_ATTR(arg=2, lineno=3)
          12	LOAD_FAST(arg=1, lineno=3)
          14	LOAD_GLOBAL(arg=1, lineno=3)
          16	LOAD_ATTR(arg=3, lineno=3)
          18	LOAD_CONST(arg=1, lineno=3)
          20	CALL_FUNCTION_KW(arg=2, lineno=3)
          22	STORE_FAST(arg=2, lineno=3)
          24	LOAD_CONST(arg=2, lineno=4)
          26	LOAD_FAST(arg=2, lineno=4)
          28	LOAD_CONST(arg=0, lineno=4)
          30	LOAD_CONST(arg=3, lineno=4)
          32	BUILD_SLICE(arg=2, lineno=4)
          34	STORE_SUBSCR(arg=None, lineno=4)
          36	LOAD_CONST(arg=2, lineno=5)
          38	LOAD_FAST(arg=2, lineno=5)
          40	LOAD_CONST(arg=4, lineno=5)
          42	LOAD_CONST(arg=0, lineno=5)
          44	BUILD_SLICE(arg=2, lineno=5)
          46	STORE_SUBSCR(arg=None, lineno=5)
          48	LOAD_GLOBAL(arg=4, lineno=6)
          50	LOAD_GLOBAL(arg=5, lineno=6)
          52	LOAD_CONST(arg=2, lineno=6)
          54	LOAD_CONST(arg=4, lineno=6)
          56	CALL_FUNCTION(arg=2, lineno=6)
          58	UNARY_NEGATIVE(arg=None, lineno=6)
          60	LOAD_FAST(arg=1, lineno=6)
          62	LOAD_CONST(arg=2, lineno=6)
          64	BINARY_SUBSCR(arg=None, lineno=6)
          66	LOAD_GLOBAL(arg=6, lineno=6)
          68	LOAD_CONST(arg=2, lineno=6)
          70	LOAD_CONST(arg=3, lineno=6)
          72	CALL_FUNCTION(arg=2, lineno=6)
          74	BINARY_SUBTRACT(arg=None, lineno=6)
          76	CALL_FUNCTION(arg=2, lineno=6)
          78	GET_ITER(arg=None, lineno=6)
>         80	FOR_ITER(arg=4, lineno=6)
          82	STORE_FAST(arg=3, lineno=6)
          84	LOAD_CONST(arg=2, lineno=7)
          86	STORE_FAST(arg=4, lineno=7)
          88	JUMP_ABSOLUTE(arg=41, lineno=7)
>         90	LOAD_FAST(arg=2, lineno=8)
          92	RETURN_VALUE(arg=None, lineno=8)
2024-09-04 18:31:55,819 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:55,819 - stack: []
2024-09-04 18:31:55,819 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:55,819 - dispatch pc=0, inst=NOP(arg=None, lineno=1)
2024-09-04 18:31:55,819 - stack []
2024-09-04 18:31:55,819 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2)
2024-09-04 18:31:55,819 - stack []
2024-09-04 18:31:55,819 - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2)
2024-09-04 18:31:55,819 - stack ['$x2.0']
2024-09-04 18:31:55,819 - dispatch pc=6, inst=STORE_FAST(arg=1, lineno=2)
2024-09-04 18:31:55,819 - stack ['$4load_attr.1']
2024-09-04 18:31:55,819 - dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=3)
2024-09-04 18:31:55,819 - stack []
2024-09-04 18:31:55,819 - dispatch pc=10, inst=LOAD_ATTR(arg=2, lineno=3)
2024-09-04 18:31:55,819 - stack ['$8load_global.2']
2024-09-04 18:31:55,819 - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=3)
2024-09-04 18:31:55,819 - stack ['$10load_attr.3']
2024-09-04 18:31:55,819 - dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=3)
2024-09-04 18:31:55,819 - stack ['$10load_attr.3', '$full_shape012.4']
2024-09-04 18:31:55,819 - dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=3)
2024-09-04 18:31:55,819 - stack ['$10load_attr.3', '$full_shape012.4', '$14load_global.5']
2024-09-04 18:31:55,819 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=3)
2024-09-04 18:31:55,819 - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6']
2024-09-04 18:31:55,819 - dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=3)
2024-09-04 18:31:55,819 - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6', '$const18.7']
2024-09-04 18:31:55,819 - dispatch pc=22, inst=STORE_FAST(arg=2, lineno=3)
2024-09-04 18:31:55,819 - stack ['$20call_function_kw.8']
2024-09-04 18:31:55,819 - dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=4)
2024-09-04 18:31:55,819 - stack []
2024-09-04 18:31:55,819 - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=4)
2024-09-04 18:31:55,819 - stack ['$const24.9']
2024-09-04 18:31:55,819 - dispatch pc=28, inst=LOAD_CONST(arg=0, lineno=4)
2024-09-04 18:31:55,819 - stack ['$const24.9', '$out026.10']
2024-09-04 18:31:55,819 - dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=4)
2024-09-04 18:31:55,819 - stack ['$const24.9', '$out026.10', '$const28.11']
2024-09-04 18:31:55,819 - dispatch pc=32, inst=BUILD_SLICE(arg=2, lineno=4)
2024-09-04 18:31:55,819 - stack ['$const24.9', '$out026.10', '$const28.11', '$const30.12']
2024-09-04 18:31:55,819 - dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=4)
2024-09-04 18:31:55,819 - stack ['$const24.9', '$out026.10', '$32build_slice.14']
2024-09-04 18:31:55,819 - dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=5)
2024-09-04 18:31:55,819 - stack []
2024-09-04 18:31:55,819 - dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=5)
2024-09-04 18:31:55,819 - stack ['$const36.15']
2024-09-04 18:31:55,819 - dispatch pc=40, inst=LOAD_CONST(arg=4, lineno=5)
2024-09-04 18:31:55,819 - stack ['$const36.15', '$out038.16']
2024-09-04 18:31:55,829 - dispatch pc=42, inst=LOAD_CONST(arg=0, lineno=5)
2024-09-04 18:31:55,829 - stack ['$const36.15', '$out038.16', '$const40.17']
2024-09-04 18:31:55,829 - dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=5)
2024-09-04 18:31:55,829 - stack ['$const36.15', '$out038.16', '$const40.17', '$const42.18']
2024-09-04 18:31:55,829 - dispatch pc=46, inst=STORE_SUBSCR(arg=None, lineno=5)
2024-09-04 18:31:55,829 - stack ['$const36.15', '$out038.16', '$44build_slice.20']
2024-09-04 18:31:55,829 - dispatch pc=48, inst=LOAD_GLOBAL(arg=4, lineno=6)
2024-09-04 18:31:55,829 - stack []
2024-09-04 18:31:55,829 - dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=6)
2024-09-04 18:31:55,829 - stack ['$48load_global.21']
2024-09-04 18:31:55,829 - dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:55,829 - stack ['$48load_global.21', '$50load_global.22']
2024-09-04 18:31:55,829 - dispatch pc=54, inst=LOAD_CONST(arg=4, lineno=6)
2024-09-04 18:31:55,830 - stack ['$48load_global.21', '$50load_global.22', '$const52.23']
2024-09-04 18:31:55,830 - dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:55,830 - stack ['$48load_global.21', '$50load_global.22', '$const52.23', '$const54.24']
2024-09-04 18:31:55,830 - dispatch pc=58, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2024-09-04 18:31:55,830 - stack ['$48load_global.21', '$56call_function.25']
2024-09-04 18:31:55,830 - dispatch pc=60, inst=LOAD_FAST(arg=1, lineno=6)
2024-09-04 18:31:55,830 - stack ['$48load_global.21', '$58unary_negative.26']
2024-09-04 18:31:55,830 - dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:55,830 - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27']
2024-09-04 18:31:55,830 - dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=6)
2024-09-04 18:31:55,830 - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27', '$const62.28']
2024-09-04 18:31:55,830 - dispatch pc=66, inst=LOAD_GLOBAL(arg=6, lineno=6)
2024-09-04 18:31:55,830 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29']
2024-09-04 18:31:55,830 - dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:55,830 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30']
2024-09-04 18:31:55,830 - dispatch pc=70, inst=LOAD_CONST(arg=3, lineno=6)
2024-09-04 18:31:55,830 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31']
2024-09-04 18:31:55,830 - dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:55,830 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31', '$const70.32']
2024-09-04 18:31:55,830 - dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=6)
2024-09-04 18:31:55,830 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$72call_function.33']
2024-09-04 18:31:55,830 - dispatch pc=76, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:55,830 - stack ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34']
2024-09-04 18:31:55,830 - dispatch pc=78, inst=GET_ITER(arg=None, lineno=6)
2024-09-04 18:31:55,830 - stack ['$76call_function.35']
2024-09-04 18:31:55,830 - end state. edges=[Edge(pc=80, stack=('$78get_iter.36',), blockstack=(), npush=0)]
2024-09-04 18:31:55,830 - pending: deque([State(pc_initial=80 nstack_initial=1)])
2024-09-04 18:31:55,830 - stack: ['$phi80.0']
2024-09-04 18:31:55,830 - state.pc_initial: State(pc_initial=80 nstack_initial=1)
2024-09-04 18:31:55,830 - dispatch pc=80, inst=FOR_ITER(arg=4, lineno=6)
2024-09-04 18:31:55,830 - stack ['$phi80.0']
2024-09-04 18:31:55,830 - end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
2024-09-04 18:31:55,830 - pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=82 nstack_initial=2)])
2024-09-04 18:31:55,830 - stack: []
2024-09-04 18:31:55,830 - state.pc_initial: State(pc_initial=90 nstack_initial=0)
2024-09-04 18:31:55,830 - dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=8)
2024-09-04 18:31:55,830 - stack []
2024-09-04 18:31:55,830 - dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=8)
2024-09-04 18:31:55,830 - stack ['$out090.0']
2024-09-04 18:31:55,830 - end state. edges=[]
2024-09-04 18:31:55,830 - pending: deque([State(pc_initial=82 nstack_initial=2)])
2024-09-04 18:31:55,830 - stack: ['$phi82.0', '$phi82.1']
2024-09-04 18:31:55,830 - state.pc_initial: State(pc_initial=82 nstack_initial=2)
2024-09-04 18:31:55,830 - dispatch pc=82, inst=STORE_FAST(arg=3, lineno=6)
2024-09-04 18:31:55,830 - stack ['$phi82.0', '$phi82.1']
2024-09-04 18:31:55,830 - dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=7)
2024-09-04 18:31:55,830 - stack ['$phi82.0']
2024-09-04 18:31:55,830 - dispatch pc=86, inst=STORE_FAST(arg=4, lineno=7)
2024-09-04 18:31:55,830 - stack ['$phi82.0', '$const84.2']
2024-09-04 18:31:55,830 - dispatch pc=88, inst=JUMP_ABSOLUTE(arg=41, lineno=7)
2024-09-04 18:31:55,830 - stack ['$phi82.0']
2024-09-04 18:31:55,830 - end state. edges=[Edge(pc=80, stack=('$phi82.0',), blockstack=(), npush=0)]
2024-09-04 18:31:55,830 - pending: deque([State(pc_initial=80 nstack_initial=1)])
2024-09-04 18:31:55,830 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:55,830 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=82 nstack_initial=2): {'$phi82.1'},
             State(pc_initial=90 nstack_initial=0): set()})
2024-09-04 18:31:55,830 - defmap: {'$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi82.1': State(pc_initial=80 nstack_initial=1)}
2024-09-04 18:31:55,830 - phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=2))},
             '$phi82.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:55,830 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:55,830 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:55,830 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:55,830 - keep phismap: {'$phi80.0': {('$78get_iter.36', State(pc_initial=0 nstack_initial=0))},
 '$phi82.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
2024-09-04 18:31:55,830 - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.36'},
             State(pc_initial=80 nstack_initial=1): {'$phi82.1': '$80for_iter.2'}})
2024-09-04 18:31:55,830 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:55,830 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_global.2'}), (10, {'item': '$8load_global.2', 'res': '$10load_attr.3'}), (12, {'res': '$full_shape012.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$10load_attr.3', 'args': ['$full_shape012.4', '$16load_attr.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$out026.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$const30.12'}), (32, {'start': '$const28.11', 'stop': '$const30.12', 'step': None, 'res': '$32build_slice.14', 'slicevar': '$32build_slice.13'}), (34, {'target': '$out026.10', 'index': '$32build_slice.14', 'value': '$const24.9'}), (36, {'res': '$const36.15'}), (38, {'res': '$out038.16'}), (40, {'res': '$const40.17'}), (42, {'res': '$const42.18'}), (44, {'start': '$const40.17', 'stop': '$const42.18', 'step': None, 'res': '$44build_slice.20', 'slicevar': '$44build_slice.19'}), (46, {'target': '$out038.16', 'index': '$44build_slice.20', 'value': '$const36.15'}), (48, {'res': '$48load_global.21'}), (50, {'res': '$50load_global.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$50load_global.22', 'args': ['$const52.23', '$const54.24'], 'res': '$56call_function.25'}), (58, {'value': '$56call_function.25', 'res': '$58unary_negative.26'}), (60, {'res': '$full_shape060.27'}), (62, {'res': '$const62.28'}), (64, {'index': '$const62.28', 'target': '$full_shape060.27', 'res': '$64binary_subscr.29'}), (66, {'res': '$66load_global.30'}), (68, {'res': '$const68.31'}), (70, {'res': '$const70.32'}), (72, {'func': '$66load_global.30', 'args': ['$const68.31', '$const70.32'], 'res': '$72call_function.33'}), (74, {'lhs': '$64binary_subscr.29', 'rhs': '$72call_function.33', 'res': '$74binary_subtract.34'}), (76, {'func': '$48load_global.21', 'args': ['$58unary_negative.26', '$74binary_subtract.34'], 'res': '$76call_function.35'}), (78, {'value': '$76call_function.35', 'res': '$78get_iter.36'})), outgoing_phis={'$phi80.0': '$78get_iter.36'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.36',)})
2024-09-04 18:31:55,830 - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi82.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 82: ('$phi80.0', '$80for_iter.2')})
2024-09-04 18:31:55,830 - block_infos State(pc_initial=82 nstack_initial=2):
AdaptBlockInfo(insts=((82, {'value': '$phi82.1'}), (84, {'res': '$const84.2'}), (86, {'value': '$const84.2'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi82.0',)})
2024-09-04 18:31:55,830 - block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$out090.0'}), (92, {'retval': '$out090.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:55,830 - label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $8load_global.2 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$8load_global.2']
    $10load_attr.3 = getattr(value=$8load_global.2, attr=empty) ['$10load_attr.3', '$8load_global.2']
    $14load_global.5 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=float64) ['$14load_global.5', '$16load_attr.6']
    out0 = call $10load_attr.3(full_shape0, func=$10load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6, <string>:3))], vararg=None, varkwarg=None, target=None) ['$10load_attr.3', '$16load_attr.6', 'full_shape0', 'out0']
    $const24.9 = const(int, 0)               ['$const24.9']
    $const28.11 = const(NoneType, None)      ['$const28.11']
    $const30.12 = const(int, 1)              ['$const30.12']
    $32build_slice.13 = global(slice: <class 'slice'>) ['$32build_slice.13']
    $32build_slice.14 = call $32build_slice.13($const28.11, $const30.12, func=$32build_slice.13, args=(Var($const28.11, <string>:4), Var($const30.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$32build_slice.13', '$32build_slice.14', '$const28.11', '$const30.12']
    out0[$32build_slice.14] = $const24.9     ['$32build_slice.14', '$const24.9', 'out0']
    $const36.15 = const(int, 0)              ['$const36.15']
    $const40.17 = const(int, -1)             ['$const40.17']
    $const42.18 = const(NoneType, None)      ['$const42.18']
    $44build_slice.19 = global(slice: <class 'slice'>) ['$44build_slice.19']
    $44build_slice.20 = call $44build_slice.19($const40.17, $const42.18, func=$44build_slice.19, args=(Var($const40.17, <string>:5), Var($const42.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$44build_slice.19', '$44build_slice.20', '$const40.17', '$const42.18']
    out0[$44build_slice.20] = $const36.15    ['$44build_slice.20', '$const36.15', 'out0']
    $48load_global.21 = global(range: <class 'range'>) ['$48load_global.21']
    $50load_global.22 = global(min: <built-in function min>) ['$50load_global.22']
    $const52.23 = const(int, 0)              ['$const52.23']
    $const54.24 = const(int, -1)             ['$const54.24']
    $56call_function.25 = call $50load_global.22($const52.23, $const54.24, func=$50load_global.22, args=[Var($const52.23, <string>:6), Var($const54.24, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.22', '$56call_function.25', '$const52.23', '$const54.24']
    $58unary_negative.26 = unary(fn=<built-in function neg>, value=$56call_function.25) ['$56call_function.25', '$58unary_negative.26']
    $const62.28 = const(int, 0)              ['$const62.28']
    $64binary_subscr.29 = getitem(value=full_shape0, index=$const62.28, fn=<built-in function getitem>) ['$64binary_subscr.29', '$const62.28', 'full_shape0']
    $66load_global.30 = global(max: <built-in function max>) ['$66load_global.30']
    $const68.31 = const(int, 0)              ['$const68.31']
    $const70.32 = const(int, 1)              ['$const70.32']
    $72call_function.33 = call $66load_global.30($const68.31, $const70.32, func=$66load_global.30, args=[Var($const68.31, <string>:6), Var($const70.32, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.30', '$72call_function.33', '$const68.31', '$const70.32']
    $74binary_subtract.34 = $64binary_subscr.29 - $72call_function.33 ['$64binary_subscr.29', '$72call_function.33', '$74binary_subtract.34']
    $76call_function.35 = call $48load_global.21($58unary_negative.26, $74binary_subtract.34, func=$48load_global.21, args=[Var($58unary_negative.26, <string>:6), Var($74binary_subtract.34, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34', '$76call_function.35']
    $78get_iter.36 = getiter(value=$76call_function.35) ['$76call_function.35', '$78get_iter.36']
    $phi80.0 = $78get_iter.36                ['$78get_iter.36', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi82.1 = $80for_iter.2                 ['$80for_iter.2', '$phi82.1']
    branch $80for_iter.3, 82, 90             ['$80for_iter.3']
label 82:
    index00 = $phi82.1                       ['$phi82.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 80                                  []
label 90:
    $92return_value.1 = cast(value=out0)     ['$92return_value.1', 'out0']
    return $92return_value.1                 ['$92return_value.1']

2024-09-04 18:31:55,860 - ==== SSA block analysis pass on 0
2024-09-04 18:31:55,860 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243137615A0>
2024-09-04 18:31:55,860 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:55,860 - on stmt: full_shape0 = getattr(value=x, attr=shape)
2024-09-04 18:31:55,860 - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:55,860 - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2024-09-04 18:31:55,860 - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:55,860 - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=float64)
2024-09-04 18:31:55,860 - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:55,860 - on stmt: $const24.9.1 = const(int, 0)
2024-09-04 18:31:55,860 - on stmt: $const28.11.1 = const(NoneType, None)
2024-09-04 18:31:55,860 - on stmt: $const30.12.1 = const(int, 1)
2024-09-04 18:31:55,860 - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:55,860 - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:55,860 - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2024-09-04 18:31:55,860 - on stmt: $const36.15.1 = const(int, 0)
2024-09-04 18:31:55,860 - on stmt: $const40.17.1 = const(int, -1)
2024-09-04 18:31:55,860 - on stmt: $const42.18.1 = const(NoneType, None)
2024-09-04 18:31:55,860 - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:55,860 - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:55,860 - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2024-09-04 18:31:55,860 - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2024-09-04 18:31:55,860 - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2024-09-04 18:31:55,860 - on stmt: $const52.23.1 = const(int, 0)
2024-09-04 18:31:55,860 - on stmt: $const54.24.1 = const(int, -1)
2024-09-04 18:31:55,860 - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:55,860 - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2024-09-04 18:31:55,860 - on stmt: $const62.28.1 = const(int, 0)
2024-09-04 18:31:55,860 - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2024-09-04 18:31:55,860 - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2024-09-04 18:31:55,860 - on stmt: $const68.31.1 = const(int, 0)
2024-09-04 18:31:55,860 - on stmt: $const70.32.1 = const(int, 1)
2024-09-04 18:31:55,860 - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:55,860 - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2024-09-04 18:31:55,860 - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:55,860 - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2024-09-04 18:31:55,860 - on stmt: $phi80.0.1 = $78get_iter.36.1
2024-09-04 18:31:55,860 - on stmt: jump 80
2024-09-04 18:31:55,860 - ==== SSA block analysis pass on 80
2024-09-04 18:31:55,869 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243137615A0>
2024-09-04 18:31:55,869 - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2024-09-04 18:31:55,869 - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2024-09-04 18:31:55,869 - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2024-09-04 18:31:55,869 - on stmt: $phi82.1.1 = $80for_iter.2.1
2024-09-04 18:31:55,869 - on stmt: branch $80for_iter.3.1, 82, 166
2024-09-04 18:31:55,869 - ==== SSA block analysis pass on 82
2024-09-04 18:31:55,869 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243137615A0>
2024-09-04 18:31:55,869 - on stmt: index00 = $phi82.1.1
2024-09-04 18:31:55,869 - on stmt: jump 90
2024-09-04 18:31:55,869 - ==== SSA block analysis pass on 166
2024-09-04 18:31:55,869 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243137615A0>
2024-09-04 18:31:55,869 - on stmt: $92return_value.1.1 = cast(value=out0)
2024-09-04 18:31:55,870 - on stmt: return $92return_value.1.1
2024-09-04 18:31:55,870 - ==== SSA block analysis pass on 90
2024-09-04 18:31:55,870 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243137615A0>
2024-09-04 18:31:55,870 - on stmt: $const4.1 = const(int, 1)
2024-09-04 18:31:55,870 - on stmt: stencil_index = $const4.1 + index00
2024-09-04 18:31:55,870 - on stmt: $6binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:55,870 - on stmt: $const10.4 = const(int, -1)
2024-09-04 18:31:55,870 - on stmt: stencil_index.1 = $const10.4 + index00
2024-09-04 18:31:55,871 - on stmt: $12binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2024-09-04 18:31:55,871 - on stmt: $14binary_add.6 = $6binary_subscr.2 + $12binary_subscr.5
2024-09-04 18:31:55,871 - on stmt: $const16.7 = const(int, 2)
2024-09-04 18:31:55,871 - on stmt: $const20.9 = const(int, 0)
2024-09-04 18:31:55,871 - on stmt: stencil_index.2 = $const20.9 + index00
2024-09-04 18:31:55,871 - on stmt: $22binary_subscr.10 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
2024-09-04 18:31:55,871 - on stmt: $24binary_multiply.11 = $const16.7 * $22binary_subscr.10
2024-09-04 18:31:55,871 - on stmt: a = $14binary_add.6 - $24binary_multiply.11
2024-09-04 18:31:55,871 - on stmt: $const32.14 = const(int, 1)
2024-09-04 18:31:55,871 - on stmt: stencil_index.3 = $const32.14 + index00
2024-09-04 18:31:55,871 - on stmt: $34binary_subscr.15 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
2024-09-04 18:31:55,871 - on stmt: $const38.17 = const(int, -1)
2024-09-04 18:31:55,872 - on stmt: stencil_index.4 = $const38.17 + index00
2024-09-04 18:31:55,872 - on stmt: $40binary_subscr.18 = getitem(value=x, index=stencil_index.4, fn=<built-in function getitem>)
2024-09-04 18:31:55,872 - on stmt: $42binary_subtract.19 = $34binary_subscr.15 - $40binary_subscr.18
2024-09-04 18:31:55,872 - on stmt: $const44.20 = const(int, 2)
2024-09-04 18:31:55,872 - on stmt: b = $42binary_subtract.19 / $const44.20
2024-09-04 18:31:55,872 - on stmt: $50load_global.22 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:55,872 - on stmt: $52load_method.23 = getattr(value=$50load_global.22, attr=abs)
2024-09-04 18:31:55,872 - on stmt: $56call_method.25 = call $52load_method.23(b, func=$52load_method.23, args=[Var(b, pitch.py:429)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:55,872 - on stmt: $58load_global.26 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:55,872 - on stmt: $60load_method.27 = getattr(value=$58load_global.26, attr=abs)
2024-09-04 18:31:55,873 - on stmt: $64call_method.29 = call $60load_method.27(a, func=$60load_method.27, args=[Var(a, pitch.py:428)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:55,873 - on stmt: $66compare_op.30 = $56call_method.25 >= $64call_method.29
2024-09-04 18:31:55,873 - on stmt: bool68 = global(bool: <class 'bool'>)
2024-09-04 18:31:55,873 - on stmt: $68pred = call bool68($66compare_op.30, func=bool68, args=(Var($66compare_op.30, pitch.py:431),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:55,873 - on stmt: branch $68pred, 91, 161
2024-09-04 18:31:55,873 - ==== SSA block analysis pass on 91
2024-09-04 18:31:55,873 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243137615A0>
2024-09-04 18:31:55,873 - on stmt: $const70.0 = const(int, 0)
2024-09-04 18:31:55,873 - on stmt: $72return_value.1 = cast(value=$const70.0)
2024-09-04 18:31:55,873 - on stmt: out0[index00] = $72return_value.1
2024-09-04 18:31:55,873 - on stmt: jump 165
2024-09-04 18:31:55,873 - ==== SSA block analysis pass on 161
2024-09-04 18:31:55,873 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243137615A0>
2024-09-04 18:31:55,873 - on stmt: $76unary_negative.1 = unary(fn=<built-in function neg>, value=b)
2024-09-04 18:31:55,873 - on stmt: $80binary_true_divide.3 = $76unary_negative.1 / a
2024-09-04 18:31:55,874 - on stmt: $82return_value.4 = cast(value=$80binary_true_divide.3)
2024-09-04 18:31:55,874 - on stmt: out0[index00] = $82return_value.4
2024-09-04 18:31:55,874 - on stmt: jump 165
2024-09-04 18:31:55,874 - ==== SSA block analysis pass on 165
2024-09-04 18:31:55,874 - Running <numba.core.ssa._GatherDefsHandler object at 0x00000243137615A0>
2024-09-04 18:31:55,874 - on stmt: jump 80
2024-09-04 18:31:55,878 - defs defaultdict(<class 'list'>,
            {'$10load_attr.3.1': [(<numba.core.ir.Assign object at 0x000002431371F310>,
                                   0)],
             '$12binary_subscr.5': [(<numba.core.ir.Assign object at 0x000002431371E410>,
                                     90)],
             '$14binary_add.6': [(<numba.core.ir.Assign object at 0x00000243134B07C0>,
                                  90)],
             '$14load_global.5.1': [(<numba.core.ir.Assign object at 0x000002431371EF20>,
                                     0)],
             '$16load_attr.6.1': [(<numba.core.ir.Assign object at 0x000002431371EDA0>,
                                   0)],
             '$22binary_subscr.10': [(<numba.core.ir.Assign object at 0x000002431371E650>,
                                      90)],
             '$24binary_multiply.11': [(<numba.core.ir.Assign object at 0x00000243139E8940>,
                                        90)],
             '$32build_slice.13.1': [(<numba.core.ir.Assign object at 0x0000024313788880>,
                                      0)],
             '$32build_slice.14.1': [(<numba.core.ir.Assign object at 0x00000243137889A0>,
                                      0)],
             '$34binary_subscr.15': [(<numba.core.ir.Assign object at 0x000002431371E890>,
                                      90)],
             '$40binary_subscr.18': [(<numba.core.ir.Assign object at 0x000002431371EAD0>,
                                      90)],
             '$42binary_subtract.19': [(<numba.core.ir.Assign object at 0x0000024313A1DC60>,
                                        90)],
             '$44build_slice.19.1': [(<numba.core.ir.Assign object at 0x0000024313789180>,
                                      0)],
             '$44build_slice.20.1': [(<numba.core.ir.Assign object at 0x00000243137892A0>,
                                      0)],
             '$48load_global.21.1': [(<numba.core.ir.Assign object at 0x00000243137894E0>,
                                      0)],
             '$50load_global.22': [(<numba.core.ir.Assign object at 0x00000243136C87C0>,
                                    90)],
             '$50load_global.22.1': [(<numba.core.ir.Assign object at 0x0000024313789660>,
                                      0)],
             '$52load_method.23': [(<numba.core.ir.Assign object at 0x00000243136C9DB0>,
                                    90)],
             '$56call_function.25.1': [(<numba.core.ir.Assign object at 0x0000024313789B40>,
                                        0)],
             '$56call_method.25': [(<numba.core.ir.Assign object at 0x00000243136CB0D0>,
                                    90)],
             '$58load_global.26': [(<numba.core.ir.Assign object at 0x00000243136CB2B0>,
                                    90)],
             '$58unary_negative.26.1': [(<numba.core.ir.Assign object at 0x0000024313789C60>,
                                         0)],
             '$60load_method.27': [(<numba.core.ir.Assign object at 0x0000024313749B10>,
                                    90)],
             '$64binary_subscr.29.1': [(<numba.core.ir.Assign object at 0x000002431378A0B0>,
                                        0)],
             '$64call_method.29': [(<numba.core.ir.Assign object at 0x000002431374AE30>,
                                    90)],
             '$66compare_op.30': [(<numba.core.ir.Assign object at 0x000002431374B010>,
                                   90)],
             '$66load_global.30.1': [(<numba.core.ir.Assign object at 0x000002431378A200>,
                                      0)],
             '$68pred': [(<numba.core.ir.Assign object at 0x00000243136CECE0>,
                          90)],
             '$6binary_subscr.2': [(<numba.core.ir.Assign object at 0x000002431371E1D0>,
                                    90)],
             '$72call_function.33.1': [(<numba.core.ir.Assign object at 0x000002431378A6E0>,
                                        0)],
             '$72return_value.1': [(<numba.core.ir.Assign object at 0x00000243136D6860>,
                                    91)],
             '$74binary_subtract.34.1': [(<numba.core.ir.Assign object at 0x000002431378A830>,
                                          0)],
             '$76call_function.35.1': [(<numba.core.ir.Assign object at 0x000002431378A9E0>,
                                        0)],
             '$76unary_negative.1': [(<numba.core.ir.Assign object at 0x0000024313786F20>,
                                      161)],
             '$78get_iter.36.1': [(<numba.core.ir.Assign object at 0x000002431378AB00>,
                                   0)],
             '$80binary_true_divide.3': [(<numba.core.ir.Assign object at 0x0000024313787940>,
                                          161)],
             '$80for_iter.1.1': [(<numba.core.ir.Assign object at 0x000002431378ABF0>,
                                  80)],
             '$80for_iter.2.1': [(<numba.core.ir.Assign object at 0x000002431378AD10>,
                                  80)],
             '$80for_iter.3.1': [(<numba.core.ir.Assign object at 0x000002431378AE30>,
                                  80)],
             '$82return_value.4': [(<numba.core.ir.Assign object at 0x00000243137874C0>,
                                    161)],
             '$8load_global.2.1': [(<numba.core.ir.Assign object at 0x000002431371F490>,
                                    0)],
             '$92return_value.1.1': [(<numba.core.ir.Assign object at 0x000002431378B760>,
                                      166)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x0000024313548910>,
                             90)],
             '$const16.7': [(<numba.core.ir.Assign object at 0x00000243134B20B0>,
                             90)],
             '$const20.9': [(<numba.core.ir.Assign object at 0x000002431375C220>,
                             90)],
             '$const24.9.1': [(<numba.core.ir.Assign object at 0x00000243137882E0>,
                               0)],
             '$const28.11.1': [(<numba.core.ir.Assign object at 0x0000024313788580>,
                                0)],
             '$const30.12.1': [(<numba.core.ir.Assign object at 0x0000024313788700>,
                                0)],
             '$const32.14': [(<numba.core.ir.Assign object at 0x00000243139EB2E0>,
                              90)],
             '$const36.15.1': [(<numba.core.ir.Assign object at 0x0000024313788BE0>,
                                0)],
             '$const38.17': [(<numba.core.ir.Assign object at 0x0000024313A1A8C0>,
                              90)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x000002431377DBD0>,
                            90)],
             '$const40.17.1': [(<numba.core.ir.Assign object at 0x0000024313788E80>,
                                0)],
             '$const42.18.1': [(<numba.core.ir.Assign object at 0x0000024313789000>,
                                0)],
             '$const44.20': [(<numba.core.ir.Assign object at 0x0000024313A1C490>,
                              90)],
             '$const52.23.1': [(<numba.core.ir.Assign object at 0x00000243137897E0>,
                                0)],
             '$const54.24.1': [(<numba.core.ir.Assign object at 0x0000024313789960>,
                                0)],
             '$const62.28.1': [(<numba.core.ir.Assign object at 0x0000024313789F00>,
                                0)],
             '$const68.31.1': [(<numba.core.ir.Assign object at 0x000002431378A380>,
                                0)],
             '$const70.0': [(<numba.core.ir.Assign object at 0x00000243136D7BE0>,
                             91)],
             '$const70.32.1': [(<numba.core.ir.Assign object at 0x000002431378A500>,
                                0)],
             '$phi80.0.1': [(<numba.core.ir.Assign object at 0x000002431371FA60>,
                             0)],
             '$phi82.1.1': [(<numba.core.ir.Assign object at 0x0000024313789D80>,
                             80)],
             'a': [(<numba.core.ir.Assign object at 0x00000243139E8A60>, 90)],
             'b': [(<numba.core.ir.Assign object at 0x00000243136F3460>, 90)],
             'bool68': [(<numba.core.ir.Assign object at 0x00000243136CC4C0>,
                         90)],
             'full_shape0': [(<numba.core.ir.Assign object at 0x000002431371F730>,
                              0)],
             'index00': [(<numba.core.ir.Assign object at 0x000002431378B100>,
                          82)],
             'out0': [(<numba.core.ir.Assign object at 0x0000024313788160>, 0)],
             'stencil_index': [(<numba.core.ir.Assign object at 0x000002431371E170>,
                                90)],
             'stencil_index.1': [(<numba.core.ir.Assign object at 0x000002431371E350>,
                                  90)],
             'stencil_index.2': [(<numba.core.ir.Assign object at 0x000002431371E590>,
                                  90)],
             'stencil_index.3': [(<numba.core.ir.Assign object at 0x000002431371E7D0>,
                                  90)],
             'stencil_index.4': [(<numba.core.ir.Assign object at 0x000002431371EA10>,
                                  90)],
             'x': [(<numba.core.ir.Assign object at 0x000002431371FB20>, 0)]})
2024-09-04 18:31:55,879 - SSA violators <numba.core.utils.OrderedSet object at 0x0000024313773EE0>
2024-09-04 18:31:55,889 - bytecode dump:
>          0	NOP(arg=None, lineno=4388)
           2	LOAD_GLOBAL(arg=0, lineno=4389)
           4	LOAD_FAST(arg=0, lineno=4389)
           6	LOAD_FAST(arg=1, lineno=4389)
           8	LOAD_DEREF(arg=0, lineno=4389)
          10	CALL_FUNCTION(arg=3, lineno=4389)
          12	RETURN_VALUE(arg=None, lineno=4389)
2024-09-04 18:31:55,889 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:55,889 - stack: []
2024-09-04 18:31:55,889 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:55,889 - dispatch pc=0, inst=NOP(arg=None, lineno=4388)
2024-09-04 18:31:55,889 - stack []
2024-09-04 18:31:55,889 - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4389)
2024-09-04 18:31:55,889 - stack []
2024-09-04 18:31:55,889 - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4389)
2024-09-04 18:31:55,889 - stack ['$2load_global.0']
2024-09-04 18:31:55,889 - dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4389)
2024-09-04 18:31:55,889 - stack ['$2load_global.0', '$shape4.1']
2024-09-04 18:31:55,889 - dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4389)
2024-09-04 18:31:55,889 - stack ['$2load_global.0', '$shape4.1', '$dtype6.2']
2024-09-04 18:31:55,889 - dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4389)
2024-09-04 18:31:55,889 - stack ['$2load_global.0', '$shape4.1', '$dtype6.2', '$8load_deref.3']
2024-09-04 18:31:55,889 - dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4389)
2024-09-04 18:31:55,889 - stack ['$10call_function.4']
2024-09-04 18:31:55,889 - end state. edges=[]
2024-09-04 18:31:55,889 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:55,889 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 18:31:55,889 - defmap: {}
2024-09-04 18:31:55,889 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:55,889 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:55,889 - keep phismap: {}
2024-09-04 18:31:55,889 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:55,889 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:55,889 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:55,895 - label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$2load_global.0']
    $8load_deref.3 = freevar(retty: array(float64, 1d, C)) ['$8load_deref.3']
    $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4388), Var(dtype, arrayobj.py:4388), Var($8load_deref.3, arrayobj.py:4389)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'dtype', 'shape']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2024-09-04 18:31:55,900 - ==== SSA block analysis pass on 0
2024-09-04 18:31:55,900 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024313763160>
2024-09-04 18:31:55,900 - on stmt: shape = arg(0, name=shape)
2024-09-04 18:31:55,900 - on stmt: dtype = arg(1, name=dtype)
2024-09-04 18:31:55,900 - on stmt: $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2024-09-04 18:31:55,900 - on stmt: $8load_deref.3 = freevar(retty: array(float64, 1d, C))
2024-09-04 18:31:55,900 - on stmt: $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4388), Var(dtype, arrayobj.py:4388), Var($8load_deref.3, arrayobj.py:4389)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:55,900 - on stmt: $12return_value.5 = cast(value=$10call_function.4)
2024-09-04 18:31:55,900 - on stmt: return $12return_value.5
2024-09-04 18:31:55,900 - defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x0000024313762CE0>,
                                     0)],
             '$12return_value.5': [(<numba.core.ir.Assign object at 0x0000024313762E00>,
                                    0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x0000024313762740>,
                                  0)],
             '$8load_deref.3': [(<numba.core.ir.Assign object at 0x0000024313762B00>,
                                 0)],
             'dtype': [(<numba.core.ir.Assign object at 0x0000024313760C70>,
                        0)],
             'shape': [(<numba.core.ir.Assign object at 0x0000024313761480>,
                        0)]})
2024-09-04 18:31:55,900 - SSA violators <numba.core.utils.OrderedSet object at 0x0000024313763160>
2024-09-04 18:31:56,850 - bytecode dump:
>          0	NOP(arg=None, lineno=439)
           2	LOAD_GLOBAL(arg=0, lineno=447)
           4	LOAD_FAST(arg=0, lineno=447)
           6	CALL_FUNCTION(arg=1, lineno=447)
           8	LOAD_FAST(arg=1, lineno=447)
          10	LOAD_CONST(arg=1, lineno=447)
          12	LOAD_CONST(arg=1, lineno=447)
          14	BUILD_SLICE(arg=2, lineno=447)
          16	STORE_SUBSCR(arg=None, lineno=447)
          18	LOAD_CONST(arg=1, lineno=447)
          20	RETURN_VALUE(arg=None, lineno=447)
2024-09-04 18:31:56,850 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:56,851 - stack: []
2024-09-04 18:31:56,851 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:56,851 - dispatch pc=0, inst=NOP(arg=None, lineno=439)
2024-09-04 18:31:56,851 - stack []
2024-09-04 18:31:56,851 - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=447)
2024-09-04 18:31:56,851 - stack []
2024-09-04 18:31:56,851 - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=447)
2024-09-04 18:31:56,851 - stack ['$2load_global.0']
2024-09-04 18:31:56,851 - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=447)
2024-09-04 18:31:56,851 - stack ['$2load_global.0', '$x4.1']
2024-09-04 18:31:56,851 - dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=447)
2024-09-04 18:31:56,852 - stack ['$6call_function.2']
2024-09-04 18:31:56,852 - dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=447)
2024-09-04 18:31:56,852 - stack ['$6call_function.2', '$y8.3']
2024-09-04 18:31:56,852 - dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=447)
2024-09-04 18:31:56,852 - stack ['$6call_function.2', '$y8.3', '$const10.4']
2024-09-04 18:31:56,852 - dispatch pc=14, inst=BUILD_SLICE(arg=2, lineno=447)
2024-09-04 18:31:56,852 - stack ['$6call_function.2', '$y8.3', '$const10.4', '$const12.5']
2024-09-04 18:31:56,852 - dispatch pc=16, inst=STORE_SUBSCR(arg=None, lineno=447)
2024-09-04 18:31:56,852 - stack ['$6call_function.2', '$y8.3', '$14build_slice.7']
2024-09-04 18:31:56,852 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=447)
2024-09-04 18:31:56,852 - stack []
2024-09-04 18:31:56,852 - dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=447)
2024-09-04 18:31:56,853 - stack ['$const18.8']
2024-09-04 18:31:56,853 - end state. edges=[]
2024-09-04 18:31:56,853 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:56,854 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 18:31:56,854 - defmap: {}
2024-09-04 18:31:56,854 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:56,854 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 18:31:56,854 - keep phismap: {}
2024-09-04 18:31:56,855 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 18:31:56,855 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:56,855 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'res': '$y8.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$const12.5'}), (14, {'start': '$const10.4', 'stop': '$const12.5', 'step': None, 'res': '$14build_slice.7', 'slicevar': '$14build_slice.6'}), (16, {'target': '$y8.3', 'index': '$14build_slice.7', 'value': '$6call_function.2'}), (18, {'res': '$const18.8'}), (20, {'retval': '$const18.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:56,856 - label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $2load_global.0 = global(_pi_stencil: <numba.stencils.stencil.StencilFunc object at 0x0000024316C92350>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, pitch.py:439)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'x']
    $const10.4 = const(NoneType, None)       ['$const10.4']
    $const12.5 = const(NoneType, None)       ['$const12.5']
    $14build_slice.6 = global(slice: <class 'slice'>) ['$14build_slice.6']
    $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, pitch.py:447), Var($const12.5, pitch.py:447)), kws=(), vararg=None, varkwarg=None, target=None) ['$14build_slice.6', '$14build_slice.7', '$const10.4', '$const12.5']
    y[$14build_slice.7] = $6call_function.2  ['$14build_slice.7', '$6call_function.2', 'y']
    $const18.8 = const(NoneType, None)       ['$const18.8']
    $20return_value.9 = cast(value=$const18.8) ['$20return_value.9', '$const18.8']
    return $20return_value.9                 ['$20return_value.9']

2024-09-04 18:31:56,867 - ==== SSA block analysis pass on 0
2024-09-04 18:31:56,867 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024316CBBF70>
2024-09-04 18:31:56,867 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:56,867 - on stmt: y = arg(1, name=y)
2024-09-04 18:31:56,867 - on stmt: $2load_global.0 = global(_pi_stencil: <numba.stencils.stencil.StencilFunc object at 0x0000024316C92350>)
2024-09-04 18:31:56,867 - on stmt: $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, pitch.py:439)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:56,867 - on stmt: $const10.4 = const(NoneType, None)
2024-09-04 18:31:56,867 - on stmt: $const12.5 = const(NoneType, None)
2024-09-04 18:31:56,868 - on stmt: $14build_slice.6 = global(slice: <class 'slice'>)
2024-09-04 18:31:56,868 - on stmt: $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, pitch.py:447), Var($const12.5, pitch.py:447)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:56,868 - on stmt: y[slice(None, None, None)] = $6call_function.2
2024-09-04 18:31:56,868 - on stmt: $const18.8 = const(NoneType, None)
2024-09-04 18:31:56,868 - on stmt: $20return_value.9 = cast(value=$const18.8)
2024-09-04 18:31:56,868 - on stmt: return $20return_value.9
2024-09-04 18:31:56,869 - defs defaultdict(<class 'list'>,
            {'$14build_slice.6': [(<numba.core.ir.Assign object at 0x0000024317982D10>,
                                   0)],
             '$14build_slice.7': [(<numba.core.ir.Assign object at 0x0000024317982E30>,
                                   0)],
             '$20return_value.9': [(<numba.core.ir.Assign object at 0x00000243179831F0>,
                                    0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x00000243179824D0>,
                                  0)],
             '$6call_function.2': [(<numba.core.ir.Assign object at 0x00000243179827D0>,
                                    0)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x0000024317982A10>,
                             0)],
             '$const12.5': [(<numba.core.ir.Assign object at 0x0000024317982B90>,
                             0)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x0000024317983070>,
                             0)],
             'x': [(<numba.core.ir.Assign object at 0x0000024317981C60>, 0)],
             'y': [(<numba.core.ir.Assign object at 0x00000243179819F0>, 0)]})
2024-09-04 18:31:56,869 - SSA violators <numba.core.utils.OrderedSet object at 0x0000024316CBBF70>
2024-09-04 18:31:57,168 - bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=2)
           4	LOAD_ATTR(arg=0, lineno=2)
           6	STORE_FAST(arg=1, lineno=2)
           8	LOAD_GLOBAL(arg=1, lineno=3)
          10	LOAD_ATTR(arg=2, lineno=3)
          12	LOAD_FAST(arg=1, lineno=3)
          14	LOAD_GLOBAL(arg=1, lineno=3)
          16	LOAD_ATTR(arg=3, lineno=3)
          18	LOAD_CONST(arg=1, lineno=3)
          20	CALL_FUNCTION_KW(arg=2, lineno=3)
          22	STORE_FAST(arg=2, lineno=3)
          24	LOAD_CONST(arg=2, lineno=4)
          26	LOAD_FAST(arg=2, lineno=4)
          28	LOAD_CONST(arg=0, lineno=4)
          30	LOAD_CONST(arg=3, lineno=4)
          32	BUILD_SLICE(arg=2, lineno=4)
          34	STORE_SUBSCR(arg=None, lineno=4)
          36	LOAD_CONST(arg=2, lineno=5)
          38	LOAD_FAST(arg=2, lineno=5)
          40	LOAD_CONST(arg=4, lineno=5)
          42	LOAD_CONST(arg=0, lineno=5)
          44	BUILD_SLICE(arg=2, lineno=5)
          46	STORE_SUBSCR(arg=None, lineno=5)
          48	LOAD_GLOBAL(arg=4, lineno=6)
          50	LOAD_GLOBAL(arg=5, lineno=6)
          52	LOAD_CONST(arg=2, lineno=6)
          54	LOAD_CONST(arg=4, lineno=6)
          56	CALL_FUNCTION(arg=2, lineno=6)
          58	UNARY_NEGATIVE(arg=None, lineno=6)
          60	LOAD_FAST(arg=1, lineno=6)
          62	LOAD_CONST(arg=2, lineno=6)
          64	BINARY_SUBSCR(arg=None, lineno=6)
          66	LOAD_GLOBAL(arg=6, lineno=6)
          68	LOAD_CONST(arg=2, lineno=6)
          70	LOAD_CONST(arg=3, lineno=6)
          72	CALL_FUNCTION(arg=2, lineno=6)
          74	BINARY_SUBTRACT(arg=None, lineno=6)
          76	CALL_FUNCTION(arg=2, lineno=6)
          78	GET_ITER(arg=None, lineno=6)
>         80	FOR_ITER(arg=4, lineno=6)
          82	STORE_FAST(arg=3, lineno=6)
          84	LOAD_CONST(arg=2, lineno=7)
          86	STORE_FAST(arg=4, lineno=7)
          88	JUMP_ABSOLUTE(arg=41, lineno=7)
>         90	LOAD_FAST(arg=2, lineno=8)
          92	RETURN_VALUE(arg=None, lineno=8)
2024-09-04 18:31:57,168 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 18:31:57,169 - stack: []
2024-09-04 18:31:57,169 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 18:31:57,169 - dispatch pc=0, inst=NOP(arg=None, lineno=1)
2024-09-04 18:31:57,169 - stack []
2024-09-04 18:31:57,169 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2)
2024-09-04 18:31:57,169 - stack []
2024-09-04 18:31:57,169 - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2)
2024-09-04 18:31:57,169 - stack ['$x2.0']
2024-09-04 18:31:57,169 - dispatch pc=6, inst=STORE_FAST(arg=1, lineno=2)
2024-09-04 18:31:57,169 - stack ['$4load_attr.1']
2024-09-04 18:31:57,169 - dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=3)
2024-09-04 18:31:57,169 - stack []
2024-09-04 18:31:57,169 - dispatch pc=10, inst=LOAD_ATTR(arg=2, lineno=3)
2024-09-04 18:31:57,170 - stack ['$8load_global.2']
2024-09-04 18:31:57,170 - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=3)
2024-09-04 18:31:57,170 - stack ['$10load_attr.3']
2024-09-04 18:31:57,170 - dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=3)
2024-09-04 18:31:57,170 - stack ['$10load_attr.3', '$full_shape012.4']
2024-09-04 18:31:57,170 - dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=3)
2024-09-04 18:31:57,170 - stack ['$10load_attr.3', '$full_shape012.4', '$14load_global.5']
2024-09-04 18:31:57,170 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=3)
2024-09-04 18:31:57,171 - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6']
2024-09-04 18:31:57,171 - dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=3)
2024-09-04 18:31:57,171 - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6', '$const18.7']
2024-09-04 18:31:57,171 - dispatch pc=22, inst=STORE_FAST(arg=2, lineno=3)
2024-09-04 18:31:57,171 - stack ['$20call_function_kw.8']
2024-09-04 18:31:57,171 - dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=4)
2024-09-04 18:31:57,171 - stack []
2024-09-04 18:31:57,172 - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=4)
2024-09-04 18:31:57,172 - stack ['$const24.9']
2024-09-04 18:31:57,172 - dispatch pc=28, inst=LOAD_CONST(arg=0, lineno=4)
2024-09-04 18:31:57,172 - stack ['$const24.9', '$out026.10']
2024-09-04 18:31:57,172 - dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=4)
2024-09-04 18:31:57,172 - stack ['$const24.9', '$out026.10', '$const28.11']
2024-09-04 18:31:57,172 - dispatch pc=32, inst=BUILD_SLICE(arg=2, lineno=4)
2024-09-04 18:31:57,172 - stack ['$const24.9', '$out026.10', '$const28.11', '$const30.12']
2024-09-04 18:31:57,173 - dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=4)
2024-09-04 18:31:57,173 - stack ['$const24.9', '$out026.10', '$32build_slice.14']
2024-09-04 18:31:57,173 - dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=5)
2024-09-04 18:31:57,173 - stack []
2024-09-04 18:31:57,173 - dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=5)
2024-09-04 18:31:57,173 - stack ['$const36.15']
2024-09-04 18:31:57,173 - dispatch pc=40, inst=LOAD_CONST(arg=4, lineno=5)
2024-09-04 18:31:57,173 - stack ['$const36.15', '$out038.16']
2024-09-04 18:31:57,173 - dispatch pc=42, inst=LOAD_CONST(arg=0, lineno=5)
2024-09-04 18:31:57,174 - stack ['$const36.15', '$out038.16', '$const40.17']
2024-09-04 18:31:57,174 - dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=5)
2024-09-04 18:31:57,174 - stack ['$const36.15', '$out038.16', '$const40.17', '$const42.18']
2024-09-04 18:31:57,174 - dispatch pc=46, inst=STORE_SUBSCR(arg=None, lineno=5)
2024-09-04 18:31:57,174 - stack ['$const36.15', '$out038.16', '$44build_slice.20']
2024-09-04 18:31:57,174 - dispatch pc=48, inst=LOAD_GLOBAL(arg=4, lineno=6)
2024-09-04 18:31:57,174 - stack []
2024-09-04 18:31:57,175 - dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=6)
2024-09-04 18:31:57,175 - stack ['$48load_global.21']
2024-09-04 18:31:57,175 - dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:57,175 - stack ['$48load_global.21', '$50load_global.22']
2024-09-04 18:31:57,175 - dispatch pc=54, inst=LOAD_CONST(arg=4, lineno=6)
2024-09-04 18:31:57,175 - stack ['$48load_global.21', '$50load_global.22', '$const52.23']
2024-09-04 18:31:57,175 - dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:57,175 - stack ['$48load_global.21', '$50load_global.22', '$const52.23', '$const54.24']
2024-09-04 18:31:57,175 - dispatch pc=58, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2024-09-04 18:31:57,175 - stack ['$48load_global.21', '$56call_function.25']
2024-09-04 18:31:57,176 - dispatch pc=60, inst=LOAD_FAST(arg=1, lineno=6)
2024-09-04 18:31:57,176 - stack ['$48load_global.21', '$58unary_negative.26']
2024-09-04 18:31:57,176 - dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:57,176 - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27']
2024-09-04 18:31:57,176 - dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=6)
2024-09-04 18:31:57,176 - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27', '$const62.28']
2024-09-04 18:31:57,176 - dispatch pc=66, inst=LOAD_GLOBAL(arg=6, lineno=6)
2024-09-04 18:31:57,176 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29']
2024-09-04 18:31:57,176 - dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=6)
2024-09-04 18:31:57,176 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30']
2024-09-04 18:31:57,177 - dispatch pc=70, inst=LOAD_CONST(arg=3, lineno=6)
2024-09-04 18:31:57,177 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31']
2024-09-04 18:31:57,177 - dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:57,177 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31', '$const70.32']
2024-09-04 18:31:57,177 - dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=6)
2024-09-04 18:31:57,177 - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$72call_function.33']
2024-09-04 18:31:57,177 - dispatch pc=76, inst=CALL_FUNCTION(arg=2, lineno=6)
2024-09-04 18:31:57,177 - stack ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34']
2024-09-04 18:31:57,177 - dispatch pc=78, inst=GET_ITER(arg=None, lineno=6)
2024-09-04 18:31:57,177 - stack ['$76call_function.35']
2024-09-04 18:31:57,178 - end state. edges=[Edge(pc=80, stack=('$78get_iter.36',), blockstack=(), npush=0)]
2024-09-04 18:31:57,178 - pending: deque([State(pc_initial=80 nstack_initial=1)])
2024-09-04 18:31:57,178 - stack: ['$phi80.0']
2024-09-04 18:31:57,178 - state.pc_initial: State(pc_initial=80 nstack_initial=1)
2024-09-04 18:31:57,178 - dispatch pc=80, inst=FOR_ITER(arg=4, lineno=6)
2024-09-04 18:31:57,178 - stack ['$phi80.0']
2024-09-04 18:31:57,178 - end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
2024-09-04 18:31:57,178 - pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=82 nstack_initial=2)])
2024-09-04 18:31:57,178 - stack: []
2024-09-04 18:31:57,178 - state.pc_initial: State(pc_initial=90 nstack_initial=0)
2024-09-04 18:31:57,179 - dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=8)
2024-09-04 18:31:57,179 - stack []
2024-09-04 18:31:57,179 - dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=8)
2024-09-04 18:31:57,179 - stack ['$out090.0']
2024-09-04 18:31:57,179 - end state. edges=[]
2024-09-04 18:31:57,179 - pending: deque([State(pc_initial=82 nstack_initial=2)])
2024-09-04 18:31:57,179 - stack: ['$phi82.0', '$phi82.1']
2024-09-04 18:31:57,179 - state.pc_initial: State(pc_initial=82 nstack_initial=2)
2024-09-04 18:31:57,179 - dispatch pc=82, inst=STORE_FAST(arg=3, lineno=6)
2024-09-04 18:31:57,179 - stack ['$phi82.0', '$phi82.1']
2024-09-04 18:31:57,179 - dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=7)
2024-09-04 18:31:57,180 - stack ['$phi82.0']
2024-09-04 18:31:57,180 - dispatch pc=86, inst=STORE_FAST(arg=4, lineno=7)
2024-09-04 18:31:57,180 - stack ['$phi82.0', '$const84.2']
2024-09-04 18:31:57,180 - dispatch pc=88, inst=JUMP_ABSOLUTE(arg=41, lineno=7)
2024-09-04 18:31:57,180 - stack ['$phi82.0']
2024-09-04 18:31:57,181 - end state. edges=[Edge(pc=80, stack=('$phi82.0',), blockstack=(), npush=0)]
2024-09-04 18:31:57,181 - pending: deque([State(pc_initial=80 nstack_initial=1)])
2024-09-04 18:31:57,181 - -------------------------Prune PHIs-------------------------
2024-09-04 18:31:57,181 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=82 nstack_initial=2): {'$phi82.1'},
             State(pc_initial=90 nstack_initial=0): set()})
2024-09-04 18:31:57,181 - defmap: {'$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi82.1': State(pc_initial=80 nstack_initial=1)}
2024-09-04 18:31:57,181 - phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=2))},
             '$phi82.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:57,181 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:57,181 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:57,182 - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2024-09-04 18:31:57,182 - keep phismap: {'$phi80.0': {('$78get_iter.36', State(pc_initial=0 nstack_initial=0))},
 '$phi82.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
2024-09-04 18:31:57,182 - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.36'},
             State(pc_initial=80 nstack_initial=1): {'$phi82.1': '$80for_iter.2'}})
2024-09-04 18:31:57,182 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 18:31:57,183 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_global.2'}), (10, {'item': '$8load_global.2', 'res': '$10load_attr.3'}), (12, {'res': '$full_shape012.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$10load_attr.3', 'args': ['$full_shape012.4', '$16load_attr.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$out026.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$const30.12'}), (32, {'start': '$const28.11', 'stop': '$const30.12', 'step': None, 'res': '$32build_slice.14', 'slicevar': '$32build_slice.13'}), (34, {'target': '$out026.10', 'index': '$32build_slice.14', 'value': '$const24.9'}), (36, {'res': '$const36.15'}), (38, {'res': '$out038.16'}), (40, {'res': '$const40.17'}), (42, {'res': '$const42.18'}), (44, {'start': '$const40.17', 'stop': '$const42.18', 'step': None, 'res': '$44build_slice.20', 'slicevar': '$44build_slice.19'}), (46, {'target': '$out038.16', 'index': '$44build_slice.20', 'value': '$const36.15'}), (48, {'res': '$48load_global.21'}), (50, {'res': '$50load_global.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$50load_global.22', 'args': ['$const52.23', '$const54.24'], 'res': '$56call_function.25'}), (58, {'value': '$56call_function.25', 'res': '$58unary_negative.26'}), (60, {'res': '$full_shape060.27'}), (62, {'res': '$const62.28'}), (64, {'index': '$const62.28', 'target': '$full_shape060.27', 'res': '$64binary_subscr.29'}), (66, {'res': '$66load_global.30'}), (68, {'res': '$const68.31'}), (70, {'res': '$const70.32'}), (72, {'func': '$66load_global.30', 'args': ['$const68.31', '$const70.32'], 'res': '$72call_function.33'}), (74, {'lhs': '$64binary_subscr.29', 'rhs': '$72call_function.33', 'res': '$74binary_subtract.34'}), (76, {'func': '$48load_global.21', 'args': ['$58unary_negative.26', '$74binary_subtract.34'], 'res': '$76call_function.35'}), (78, {'value': '$76call_function.35', 'res': '$78get_iter.36'})), outgoing_phis={'$phi80.0': '$78get_iter.36'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.36',)})
2024-09-04 18:31:57,183 - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi82.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 82: ('$phi80.0', '$80for_iter.2')})
2024-09-04 18:31:57,183 - block_infos State(pc_initial=82 nstack_initial=2):
AdaptBlockInfo(insts=((82, {'value': '$phi82.1'}), (84, {'res': '$const84.2'}), (86, {'value': '$const84.2'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi82.0',)})
2024-09-04 18:31:57,183 - block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$out090.0'}), (92, {'retval': '$out090.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 18:31:57,186 - label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $8load_global.2 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$8load_global.2']
    $10load_attr.3 = getattr(value=$8load_global.2, attr=empty) ['$10load_attr.3', '$8load_global.2']
    $14load_global.5 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=float64) ['$14load_global.5', '$16load_attr.6']
    out0 = call $10load_attr.3(full_shape0, func=$10load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6, <string>:3))], vararg=None, varkwarg=None, target=None) ['$10load_attr.3', '$16load_attr.6', 'full_shape0', 'out0']
    $const24.9 = const(int, 0)               ['$const24.9']
    $const28.11 = const(NoneType, None)      ['$const28.11']
    $const30.12 = const(int, 1)              ['$const30.12']
    $32build_slice.13 = global(slice: <class 'slice'>) ['$32build_slice.13']
    $32build_slice.14 = call $32build_slice.13($const28.11, $const30.12, func=$32build_slice.13, args=(Var($const28.11, <string>:4), Var($const30.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$32build_slice.13', '$32build_slice.14', '$const28.11', '$const30.12']
    out0[$32build_slice.14] = $const24.9     ['$32build_slice.14', '$const24.9', 'out0']
    $const36.15 = const(int, 0)              ['$const36.15']
    $const40.17 = const(int, -1)             ['$const40.17']
    $const42.18 = const(NoneType, None)      ['$const42.18']
    $44build_slice.19 = global(slice: <class 'slice'>) ['$44build_slice.19']
    $44build_slice.20 = call $44build_slice.19($const40.17, $const42.18, func=$44build_slice.19, args=(Var($const40.17, <string>:5), Var($const42.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$44build_slice.19', '$44build_slice.20', '$const40.17', '$const42.18']
    out0[$44build_slice.20] = $const36.15    ['$44build_slice.20', '$const36.15', 'out0']
    $48load_global.21 = global(range: <class 'range'>) ['$48load_global.21']
    $50load_global.22 = global(min: <built-in function min>) ['$50load_global.22']
    $const52.23 = const(int, 0)              ['$const52.23']
    $const54.24 = const(int, -1)             ['$const54.24']
    $56call_function.25 = call $50load_global.22($const52.23, $const54.24, func=$50load_global.22, args=[Var($const52.23, <string>:6), Var($const54.24, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.22', '$56call_function.25', '$const52.23', '$const54.24']
    $58unary_negative.26 = unary(fn=<built-in function neg>, value=$56call_function.25) ['$56call_function.25', '$58unary_negative.26']
    $const62.28 = const(int, 0)              ['$const62.28']
    $64binary_subscr.29 = getitem(value=full_shape0, index=$const62.28, fn=<built-in function getitem>) ['$64binary_subscr.29', '$const62.28', 'full_shape0']
    $66load_global.30 = global(max: <built-in function max>) ['$66load_global.30']
    $const68.31 = const(int, 0)              ['$const68.31']
    $const70.32 = const(int, 1)              ['$const70.32']
    $72call_function.33 = call $66load_global.30($const68.31, $const70.32, func=$66load_global.30, args=[Var($const68.31, <string>:6), Var($const70.32, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.30', '$72call_function.33', '$const68.31', '$const70.32']
    $74binary_subtract.34 = $64binary_subscr.29 - $72call_function.33 ['$64binary_subscr.29', '$72call_function.33', '$74binary_subtract.34']
    $76call_function.35 = call $48load_global.21($58unary_negative.26, $74binary_subtract.34, func=$48load_global.21, args=[Var($58unary_negative.26, <string>:6), Var($74binary_subtract.34, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34', '$76call_function.35']
    $78get_iter.36 = getiter(value=$76call_function.35) ['$76call_function.35', '$78get_iter.36']
    $phi80.0 = $78get_iter.36                ['$78get_iter.36', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi82.1 = $80for_iter.2                 ['$80for_iter.2', '$phi82.1']
    branch $80for_iter.3, 82, 90             ['$80for_iter.3']
label 82:
    index00 = $phi82.1                       ['$phi82.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 80                                  []
label 90:
    $92return_value.1 = cast(value=out0)     ['$92return_value.1', 'out0']
    return $92return_value.1                 ['$92return_value.1']

2024-09-04 18:31:57,218 - ==== SSA block analysis pass on 0
2024-09-04 18:31:57,218 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024316CBB730>
2024-09-04 18:31:57,219 - on stmt: x = arg(0, name=x)
2024-09-04 18:31:57,219 - on stmt: full_shape0 = getattr(value=x, attr=shape)
2024-09-04 18:31:57,219 - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:57,219 - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2024-09-04 18:31:57,219 - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:57,219 - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=float64)
2024-09-04 18:31:57,219 - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:57,219 - on stmt: $const24.9.1 = const(int, 0)
2024-09-04 18:31:57,219 - on stmt: $const28.11.1 = const(NoneType, None)
2024-09-04 18:31:57,219 - on stmt: $const30.12.1 = const(int, 1)
2024-09-04 18:31:57,220 - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:57,220 - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:57,220 - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2024-09-04 18:31:57,220 - on stmt: $const36.15.1 = const(int, 0)
2024-09-04 18:31:57,220 - on stmt: $const40.17.1 = const(int, -1)
2024-09-04 18:31:57,220 - on stmt: $const42.18.1 = const(NoneType, None)
2024-09-04 18:31:57,220 - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2024-09-04 18:31:57,220 - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:57,220 - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2024-09-04 18:31:57,220 - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2024-09-04 18:31:57,221 - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2024-09-04 18:31:57,221 - on stmt: $const52.23.1 = const(int, 0)
2024-09-04 18:31:57,221 - on stmt: $const54.24.1 = const(int, -1)
2024-09-04 18:31:57,221 - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:57,221 - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2024-09-04 18:31:57,221 - on stmt: $const62.28.1 = const(int, 0)
2024-09-04 18:31:57,221 - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2024-09-04 18:31:57,221 - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2024-09-04 18:31:57,221 - on stmt: $const68.31.1 = const(int, 0)
2024-09-04 18:31:57,221 - on stmt: $const70.32.1 = const(int, 1)
2024-09-04 18:31:57,221 - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:57,222 - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2024-09-04 18:31:57,222 - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:57,222 - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2024-09-04 18:31:57,222 - on stmt: $phi80.0.1 = $78get_iter.36.1
2024-09-04 18:31:57,222 - on stmt: jump 80
2024-09-04 18:31:57,222 - ==== SSA block analysis pass on 80
2024-09-04 18:31:57,222 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024316CBB730>
2024-09-04 18:31:57,222 - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2024-09-04 18:31:57,222 - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2024-09-04 18:31:57,222 - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2024-09-04 18:31:57,222 - on stmt: $phi82.1.1 = $80for_iter.2.1
2024-09-04 18:31:57,222 - on stmt: branch $80for_iter.3.1, 82, 166
2024-09-04 18:31:57,222 - ==== SSA block analysis pass on 82
2024-09-04 18:31:57,222 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024316CBB730>
2024-09-04 18:31:57,222 - on stmt: index00 = $phi82.1.1
2024-09-04 18:31:57,223 - on stmt: jump 90
2024-09-04 18:31:57,223 - ==== SSA block analysis pass on 166
2024-09-04 18:31:57,223 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024316CBB730>
2024-09-04 18:31:57,223 - on stmt: $92return_value.1.1 = cast(value=out0)
2024-09-04 18:31:57,223 - on stmt: return $92return_value.1.1
2024-09-04 18:31:57,223 - ==== SSA block analysis pass on 90
2024-09-04 18:31:57,223 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024316CBB730>
2024-09-04 18:31:57,223 - on stmt: $const4.1 = const(int, 1)
2024-09-04 18:31:57,223 - on stmt: stencil_index = $const4.1 + index00
2024-09-04 18:31:57,223 - on stmt: $6binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2024-09-04 18:31:57,223 - on stmt: $const10.4 = const(int, -1)
2024-09-04 18:31:57,223 - on stmt: stencil_index.1 = $const10.4 + index00
2024-09-04 18:31:57,223 - on stmt: $12binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2024-09-04 18:31:57,224 - on stmt: $14binary_add.6 = $6binary_subscr.2 + $12binary_subscr.5
2024-09-04 18:31:57,224 - on stmt: $const16.7 = const(int, 2)
2024-09-04 18:31:57,224 - on stmt: $const20.9 = const(int, 0)
2024-09-04 18:31:57,224 - on stmt: stencil_index.2 = $const20.9 + index00
2024-09-04 18:31:57,224 - on stmt: $22binary_subscr.10 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
2024-09-04 18:31:57,224 - on stmt: $24binary_multiply.11 = $const16.7 * $22binary_subscr.10
2024-09-04 18:31:57,224 - on stmt: a = $14binary_add.6 - $24binary_multiply.11
2024-09-04 18:31:57,224 - on stmt: $const32.14 = const(int, 1)
2024-09-04 18:31:57,224 - on stmt: stencil_index.3 = $const32.14 + index00
2024-09-04 18:31:57,224 - on stmt: $34binary_subscr.15 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
2024-09-04 18:31:57,224 - on stmt: $const38.17 = const(int, -1)
2024-09-04 18:31:57,224 - on stmt: stencil_index.4 = $const38.17 + index00
2024-09-04 18:31:57,225 - on stmt: $40binary_subscr.18 = getitem(value=x, index=stencil_index.4, fn=<built-in function getitem>)
2024-09-04 18:31:57,225 - on stmt: $42binary_subtract.19 = $34binary_subscr.15 - $40binary_subscr.18
2024-09-04 18:31:57,225 - on stmt: $const44.20 = const(int, 2)
2024-09-04 18:31:57,225 - on stmt: b = $42binary_subtract.19 / $const44.20
2024-09-04 18:31:57,225 - on stmt: $50load_global.22 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:57,225 - on stmt: $52load_method.23 = getattr(value=$50load_global.22, attr=abs)
2024-09-04 18:31:57,225 - on stmt: $56call_method.25 = call $52load_method.23(b, func=$52load_method.23, args=[Var(b, pitch.py:429)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:57,225 - on stmt: $58load_global.26 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>)
2024-09-04 18:31:57,225 - on stmt: $60load_method.27 = getattr(value=$58load_global.26, attr=abs)
2024-09-04 18:31:57,225 - on stmt: $64call_method.29 = call $60load_method.27(a, func=$60load_method.27, args=[Var(a, pitch.py:428)], kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:57,225 - on stmt: $66compare_op.30 = $56call_method.25 >= $64call_method.29
2024-09-04 18:31:57,225 - on stmt: bool68 = global(bool: <class 'bool'>)
2024-09-04 18:31:57,225 - on stmt: $68pred = call bool68($66compare_op.30, func=bool68, args=(Var($66compare_op.30, pitch.py:431),), kws=(), vararg=None, varkwarg=None, target=None)
2024-09-04 18:31:57,225 - on stmt: branch $68pred, 91, 161
2024-09-04 18:31:57,225 - ==== SSA block analysis pass on 91
2024-09-04 18:31:57,225 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024316CBB730>
2024-09-04 18:31:57,225 - on stmt: $const70.0 = const(int, 0)
2024-09-04 18:31:57,225 - on stmt: $72return_value.1 = cast(value=$const70.0)
2024-09-04 18:31:57,225 - on stmt: out0[index00] = $72return_value.1
2024-09-04 18:31:57,225 - on stmt: jump 165
2024-09-04 18:31:57,225 - ==== SSA block analysis pass on 161
2024-09-04 18:31:57,225 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024316CBB730>
2024-09-04 18:31:57,225 - on stmt: $76unary_negative.1 = unary(fn=<built-in function neg>, value=b)
2024-09-04 18:31:57,225 - on stmt: $80binary_true_divide.3 = $76unary_negative.1 / a
2024-09-04 18:31:57,225 - on stmt: $82return_value.4 = cast(value=$80binary_true_divide.3)
2024-09-04 18:31:57,225 - on stmt: out0[index00] = $82return_value.4
2024-09-04 18:31:57,225 - on stmt: jump 165
2024-09-04 18:31:57,225 - ==== SSA block analysis pass on 165
2024-09-04 18:31:57,225 - Running <numba.core.ssa._GatherDefsHandler object at 0x0000024316CBB730>
2024-09-04 18:31:57,225 - on stmt: jump 80
2024-09-04 18:31:57,229 - defs defaultdict(<class 'list'>,
            {'$10load_attr.3.1': [(<numba.core.ir.Assign object at 0x0000024316E7C8B0>,
                                   0)],
             '$12binary_subscr.5': [(<numba.core.ir.Assign object at 0x0000024316E7F0A0>,
                                     90)],
             '$14binary_add.6': [(<numba.core.ir.Assign object at 0x00000243179A8FA0>,
                                  90)],
             '$14load_global.5.1': [(<numba.core.ir.Assign object at 0x0000024316E7EDA0>,
                                     0)],
             '$16load_attr.6.1': [(<numba.core.ir.Assign object at 0x0000024316E7E0B0>,
                                   0)],
             '$22binary_subscr.10': [(<numba.core.ir.Assign object at 0x0000024316E7F850>,
                                      90)],
             '$24binary_multiply.11': [(<numba.core.ir.Assign object at 0x00000243179AE110>,
                                        90)],
             '$32build_slice.13.1': [(<numba.core.ir.Assign object at 0x0000024316E7CFA0>,
                                      0)],
             '$32build_slice.14.1': [(<numba.core.ir.Assign object at 0x0000024316E7D090>,
                                      0)],
             '$34binary_subscr.15': [(<numba.core.ir.Assign object at 0x0000024316E7D9F0>,
                                      90)],
             '$40binary_subscr.18': [(<numba.core.ir.Assign object at 0x0000024316E7F940>,
                                      90)],
             '$42binary_subtract.19': [(<numba.core.ir.Assign object at 0x0000024317971B70>,
                                        90)],
             '$44build_slice.19.1': [(<numba.core.ir.Assign object at 0x000002431376F8B0>,
                                      0)],
             '$44build_slice.20.1': [(<numba.core.ir.Assign object at 0x000002431376F790>,
                                      0)],
             '$48load_global.21.1': [(<numba.core.ir.Assign object at 0x000002431376FCA0>,
                                      0)],
             '$50load_global.22': [(<numba.core.ir.Assign object at 0x000002431791D000>,
                                    90)],
             '$50load_global.22.1': [(<numba.core.ir.Assign object at 0x000002431376FCD0>,
                                      0)],
             '$52load_method.23': [(<numba.core.ir.Assign object at 0x00000243179A5510>,
                                    90)],
             '$56call_function.25.1': [(<numba.core.ir.Assign object at 0x000002431376D540>,
                                        0)],
             '$56call_method.25': [(<numba.core.ir.Assign object at 0x00000243179A5900>,
                                    90)],
             '$58load_global.26': [(<numba.core.ir.Assign object at 0x00000243179A5360>,
                                    90)],
             '$58unary_negative.26.1': [(<numba.core.ir.Assign object at 0x000002431376D1E0>,
                                         0)],
             '$60load_method.27': [(<numba.core.ir.Assign object at 0x00000243179B6110>,
                                    90)],
             '$64binary_subscr.29.1': [(<numba.core.ir.Assign object at 0x000002431376F880>,
                                        0)],
             '$64call_method.29': [(<numba.core.ir.Assign object at 0x0000024313A1A680>,
                                    90)],
             '$66compare_op.30': [(<numba.core.ir.Assign object at 0x00000243139E8760>,
                                   90)],
             '$66load_global.30.1': [(<numba.core.ir.Assign object at 0x000002431376DC30>,
                                      0)],
             '$68pred': [(<numba.core.ir.Assign object at 0x0000024316E9E260>,
                          90)],
             '$6binary_subscr.2': [(<numba.core.ir.Assign object at 0x0000024316E7F0D0>,
                                    90)],
             '$72call_function.33.1': [(<numba.core.ir.Assign object at 0x000002431376E710>,
                                        0)],
             '$72return_value.1': [(<numba.core.ir.Assign object at 0x0000024316E94BB0>,
                                    91)],
             '$74binary_subtract.34.1': [(<numba.core.ir.Assign object at 0x000002431376E9E0>,
                                          0)],
             '$76call_function.35.1': [(<numba.core.ir.Assign object at 0x000002431376E680>,
                                        0)],
             '$76unary_negative.1': [(<numba.core.ir.Assign object at 0x0000024316E8B1F0>,
                                      161)],
             '$78get_iter.36.1': [(<numba.core.ir.Assign object at 0x000002431376F100>,
                                   0)],
             '$80binary_true_divide.3': [(<numba.core.ir.Assign object at 0x0000024316E8B040>,
                                          161)],
             '$80for_iter.1.1': [(<numba.core.ir.Assign object at 0x000002431376F340>,
                                  80)],
             '$80for_iter.2.1': [(<numba.core.ir.Assign object at 0x000002431376EE60>,
                                  80)],
             '$80for_iter.3.1': [(<numba.core.ir.Assign object at 0x000002431376DE10>,
                                  80)],
             '$82return_value.4': [(<numba.core.ir.Assign object at 0x0000024316E8BF40>,
                                    161)],
             '$8load_global.2.1': [(<numba.core.ir.Assign object at 0x0000024316E7D300>,
                                    0)],
             '$92return_value.1.1': [(<numba.core.ir.Assign object at 0x000002431376D900>,
                                      166)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x00000243179A66E0>,
                             90)],
             '$const16.7': [(<numba.core.ir.Assign object at 0x00000243179A9180>,
                             90)],
             '$const20.9': [(<numba.core.ir.Assign object at 0x00000243179AB970>,
                             90)],
             '$const24.9.1': [(<numba.core.ir.Assign object at 0x0000024316E7EE00>,
                               0)],
             '$const28.11.1': [(<numba.core.ir.Assign object at 0x0000024316E7F790>,
                                0)],
             '$const30.12.1': [(<numba.core.ir.Assign object at 0x0000024316E7CE20>,
                                0)],
             '$const32.14': [(<numba.core.ir.Assign object at 0x00000243179AF760>,
                              90)],
             '$const36.15.1': [(<numba.core.ir.Assign object at 0x0000024316E7D420>,
                                0)],
             '$const38.17': [(<numba.core.ir.Assign object at 0x0000024317981060>,
                              90)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x0000024317994B20>,
                            90)],
             '$const40.17.1': [(<numba.core.ir.Assign object at 0x000002431376C760>,
                                0)],
             '$const42.18.1': [(<numba.core.ir.Assign object at 0x000002431376FAC0>,
                                0)],
             '$const44.20': [(<numba.core.ir.Assign object at 0x0000024317972B30>,
                              90)],
             '$const52.23.1': [(<numba.core.ir.Assign object at 0x000002431376FF10>,
                                0)],
             '$const54.24.1': [(<numba.core.ir.Assign object at 0x000002431376F130>,
                                0)],
             '$const62.28.1': [(<numba.core.ir.Assign object at 0x000002431376EBC0>,
                                0)],
             '$const68.31.1': [(<numba.core.ir.Assign object at 0x000002431376F250>,
                                0)],
             '$const70.0': [(<numba.core.ir.Assign object at 0x0000024316E951E0>,
                             91)],
             '$const70.32.1': [(<numba.core.ir.Assign object at 0x000002431376EFE0>,
                                0)],
             '$phi80.0.1': [(<numba.core.ir.Assign object at 0x0000024316E7C3D0>,
                             0)],
             '$phi82.1.1': [(<numba.core.ir.Assign object at 0x000002431376FD90>,
                             80)],
             'a': [(<numba.core.ir.Assign object at 0x00000243179AE2F0>, 90)],
             'b': [(<numba.core.ir.Assign object at 0x00000243179726B0>, 90)],
             'bool68': [(<numba.core.ir.Assign object at 0x00000243137895D0>,
                         90)],
             'full_shape0': [(<numba.core.ir.Assign object at 0x0000024316E7C310>,
                              0)],
             'index00': [(<numba.core.ir.Assign object at 0x000002431376E320>,
                          82)],
             'out0': [(<numba.core.ir.Assign object at 0x0000024316E7F9D0>, 0)],
             'stencil_index': [(<numba.core.ir.Assign object at 0x0000024316E7F640>,
                                90)],
             'stencil_index.1': [(<numba.core.ir.Assign object at 0x0000024316E7F130>,
                                  90)],
             'stencil_index.2': [(<numba.core.ir.Assign object at 0x0000024316E7F010>,
                                  90)],
             'stencil_index.3': [(<numba.core.ir.Assign object at 0x0000024316E7D870>,
                                  90)],
             'stencil_index.4': [(<numba.core.ir.Assign object at 0x0000024316E7F430>,
                                  90)],
             'x': [(<numba.core.ir.Assign object at 0x0000024316E7C580>, 0)]})
2024-09-04 18:31:57,229 - SSA violators <numba.core.utils.OrderedSet object at 0x0000024313786FE0>
2024-09-04 20:15:45,525 - bytecode dump:
>          0	NOP(arg=None, lineno=1141)
           2	LOAD_FAST(arg=0, lineno=1144)
           4	LOAD_CONST(arg=1, lineno=1144)
           6	BINARY_SUBSCR(arg=None, lineno=1144)
           8	STORE_FAST(arg=3, lineno=1144)
          10	LOAD_FAST(arg=1, lineno=1145)
          12	UNARY_NEGATIVE(arg=None, lineno=1145)
          14	LOAD_FAST(arg=3, lineno=1145)
          16	DUP_TOP(arg=None, lineno=1145)
          18	ROT_THREE(arg=None, lineno=1145)
          20	COMPARE_OP(arg=1, lineno=1145)
          22	POP_JUMP_IF_FALSE(arg=17, lineno=1145)
          24	LOAD_FAST(arg=1, lineno=1145)
          26	COMPARE_OP(arg=1, lineno=1145)
          28	POP_JUMP_IF_FALSE(arg=21, lineno=1145)
          30	JUMP_FORWARD(arg=2, lineno=1145)
>         32	POP_TOP(arg=None, lineno=1145)
          34	JUMP_FORWARD(arg=2, lineno=1145)
>         36	LOAD_CONST(arg=1, lineno=1146)
          38	STORE_FAST(arg=3, lineno=1146)
>         40	LOAD_FAST(arg=0, lineno=1148)
          42	LOAD_CONST(arg=2, lineno=1148)
          44	BINARY_SUBSCR(arg=None, lineno=1148)
          46	STORE_FAST(arg=4, lineno=1148)
          48	LOAD_FAST(arg=1, lineno=1149)
          50	UNARY_NEGATIVE(arg=None, lineno=1149)
          52	LOAD_FAST(arg=4, lineno=1149)
          54	DUP_TOP(arg=None, lineno=1149)
          56	ROT_THREE(arg=None, lineno=1149)
          58	COMPARE_OP(arg=1, lineno=1149)
          60	POP_JUMP_IF_FALSE(arg=36, lineno=1149)
          62	LOAD_FAST(arg=1, lineno=1149)
          64	COMPARE_OP(arg=1, lineno=1149)
          66	POP_JUMP_IF_FALSE(arg=40, lineno=1149)
          68	JUMP_FORWARD(arg=2, lineno=1149)
>         70	POP_TOP(arg=None, lineno=1149)
          72	JUMP_FORWARD(arg=2, lineno=1149)
>         74	LOAD_CONST(arg=1, lineno=1150)
          76	STORE_FAST(arg=4, lineno=1150)
>         78	LOAD_FAST(arg=2, lineno=1152)
          80	POP_JUMP_IF_FALSE(arg=52, lineno=1152)
          82	LOAD_GLOBAL(arg=0, lineno=1153)
          84	LOAD_METHOD(arg=1, lineno=1153)
          86	LOAD_FAST(arg=3, lineno=1153)
          88	CALL_METHOD(arg=1, lineno=1153)
          90	LOAD_GLOBAL(arg=0, lineno=1153)
          92	LOAD_METHOD(arg=1, lineno=1153)
          94	LOAD_FAST(arg=4, lineno=1153)
          96	CALL_METHOD(arg=1, lineno=1153)
          98	COMPARE_OP(arg=3, lineno=1153)
         100	RETURN_VALUE(arg=None, lineno=1153)
>        102	LOAD_GLOBAL(arg=0, lineno=1155)
         104	LOAD_METHOD(arg=2, lineno=1155)
         106	LOAD_FAST(arg=3, lineno=1155)
         108	CALL_METHOD(arg=1, lineno=1155)
         110	LOAD_GLOBAL(arg=0, lineno=1155)
         112	LOAD_METHOD(arg=2, lineno=1155)
         114	LOAD_FAST(arg=4, lineno=1155)
         116	CALL_METHOD(arg=1, lineno=1155)
         118	COMPARE_OP(arg=3, lineno=1155)
         120	RETURN_VALUE(arg=None, lineno=1155)
2024-09-04 20:15:45,526 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 20:15:45,526 - stack: []
2024-09-04 20:15:45,526 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 20:15:45,526 - dispatch pc=0, inst=NOP(arg=None, lineno=1141)
2024-09-04 20:15:45,526 - stack []
2024-09-04 20:15:45,526 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1144)
2024-09-04 20:15:45,526 - stack []
2024-09-04 20:15:45,526 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1144)
2024-09-04 20:15:45,526 - stack ['$x2.0']
2024-09-04 20:15:45,526 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1144)
2024-09-04 20:15:45,526 - stack ['$x2.0', '$const4.1']
2024-09-04 20:15:45,526 - dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1144)
2024-09-04 20:15:45,527 - stack ['$6binary_subscr.2']
2024-09-04 20:15:45,527 - dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=1145)
2024-09-04 20:15:45,527 - stack []
2024-09-04 20:15:45,527 - dispatch pc=12, inst=UNARY_NEGATIVE(arg=None, lineno=1145)
2024-09-04 20:15:45,527 - stack ['$threshold10.3']
2024-09-04 20:15:45,527 - dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=1145)
2024-09-04 20:15:45,527 - stack ['$12unary_negative.4']
2024-09-04 20:15:45,527 - dispatch pc=16, inst=DUP_TOP(arg=None, lineno=1145)
2024-09-04 20:15:45,527 - stack ['$12unary_negative.4', '$x014.5']
2024-09-04 20:15:45,527 - dispatch pc=18, inst=ROT_THREE(arg=None, lineno=1145)
2024-09-04 20:15:45,527 - stack ['$12unary_negative.4', '$x014.5', '$16dup_top.6']
2024-09-04 20:15:45,527 - dispatch pc=20, inst=COMPARE_OP(arg=1, lineno=1145)
2024-09-04 20:15:45,527 - stack ['$16dup_top.6', '$12unary_negative.4', '$x014.5']
2024-09-04 20:15:45,528 - dispatch pc=22, inst=POP_JUMP_IF_FALSE(arg=17, lineno=1145)
2024-09-04 20:15:45,530 - stack ['$16dup_top.6', '$20compare_op.7']
2024-09-04 20:15:45,530 - end state. edges=[Edge(pc=24, stack=('$16dup_top.6',), blockstack=(), npush=0), Edge(pc=32, stack=('$16dup_top.6',), blockstack=(), npush=0)]
2024-09-04 20:15:45,530 - pending: deque([State(pc_initial=24 nstack_initial=1), State(pc_initial=32 nstack_initial=1)])
2024-09-04 20:15:45,530 - stack: ['$phi24.0']
2024-09-04 20:15:45,530 - state.pc_initial: State(pc_initial=24 nstack_initial=1)
2024-09-04 20:15:45,530 - dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=1145)
2024-09-04 20:15:45,530 - stack ['$phi24.0']
2024-09-04 20:15:45,530 - dispatch pc=26, inst=COMPARE_OP(arg=1, lineno=1145)
2024-09-04 20:15:45,530 - stack ['$phi24.0', '$threshold24.1']
2024-09-04 20:15:45,531 - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=21, lineno=1145)
2024-09-04 20:15:45,531 - stack ['$26compare_op.2']
2024-09-04 20:15:45,531 - end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=40, stack=(), blockstack=(), npush=0)]
2024-09-04 20:15:45,531 - pending: deque([State(pc_initial=32 nstack_initial=1), State(pc_initial=30 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2024-09-04 20:15:45,531 - stack: ['$phi32.0']
2024-09-04 20:15:45,531 - state.pc_initial: State(pc_initial=32 nstack_initial=1)
2024-09-04 20:15:45,531 - dispatch pc=32, inst=POP_TOP(arg=None, lineno=1145)
2024-09-04 20:15:45,531 - stack ['$phi32.0']
2024-09-04 20:15:45,531 - dispatch pc=34, inst=JUMP_FORWARD(arg=2, lineno=1145)
2024-09-04 20:15:45,531 - stack []
2024-09-04 20:15:45,531 - end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2024-09-04 20:15:45,531 - pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2024-09-04 20:15:45,532 - stack: []
2024-09-04 20:15:45,532 - state.pc_initial: State(pc_initial=30 nstack_initial=0)
2024-09-04 20:15:45,532 - dispatch pc=30, inst=JUMP_FORWARD(arg=2, lineno=1145)
2024-09-04 20:15:45,532 - stack []
2024-09-04 20:15:45,532 - end state. edges=[Edge(pc=36, stack=(), blockstack=(), npush=0)]
2024-09-04 20:15:45,532 - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2024-09-04 20:15:45,532 - stack: []
2024-09-04 20:15:45,532 - state.pc_initial: State(pc_initial=40 nstack_initial=0)
2024-09-04 20:15:45,532 - dispatch pc=40, inst=LOAD_FAST(arg=0, lineno=1148)
2024-09-04 20:15:45,532 - stack []
2024-09-04 20:15:45,532 - dispatch pc=42, inst=LOAD_CONST(arg=2, lineno=1148)
2024-09-04 20:15:45,532 - stack ['$x40.0']
2024-09-04 20:15:45,532 - dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=1148)
2024-09-04 20:15:45,532 - stack ['$x40.0', '$const42.1']
2024-09-04 20:15:45,533 - dispatch pc=46, inst=STORE_FAST(arg=4, lineno=1148)
2024-09-04 20:15:45,533 - stack ['$44binary_subscr.2']
2024-09-04 20:15:45,533 - dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=1149)
2024-09-04 20:15:45,533 - stack []
2024-09-04 20:15:45,533 - dispatch pc=50, inst=UNARY_NEGATIVE(arg=None, lineno=1149)
2024-09-04 20:15:45,533 - stack ['$threshold48.3']
2024-09-04 20:15:45,533 - dispatch pc=52, inst=LOAD_FAST(arg=4, lineno=1149)
2024-09-04 20:15:45,533 - stack ['$50unary_negative.4']
2024-09-04 20:15:45,533 - dispatch pc=54, inst=DUP_TOP(arg=None, lineno=1149)
2024-09-04 20:15:45,533 - stack ['$50unary_negative.4', '$x152.5']
2024-09-04 20:15:45,533 - dispatch pc=56, inst=ROT_THREE(arg=None, lineno=1149)
2024-09-04 20:15:45,533 - stack ['$50unary_negative.4', '$x152.5', '$54dup_top.6']
2024-09-04 20:15:45,534 - dispatch pc=58, inst=COMPARE_OP(arg=1, lineno=1149)
2024-09-04 20:15:45,534 - stack ['$54dup_top.6', '$50unary_negative.4', '$x152.5']
2024-09-04 20:15:45,534 - dispatch pc=60, inst=POP_JUMP_IF_FALSE(arg=36, lineno=1149)
2024-09-04 20:15:45,534 - stack ['$54dup_top.6', '$58compare_op.7']
2024-09-04 20:15:45,534 - end state. edges=[Edge(pc=62, stack=('$54dup_top.6',), blockstack=(), npush=0), Edge(pc=70, stack=('$54dup_top.6',), blockstack=(), npush=0)]
2024-09-04 20:15:45,534 - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
2024-09-04 20:15:45,534 - pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
2024-09-04 20:15:45,534 - stack: []
2024-09-04 20:15:45,534 - state.pc_initial: State(pc_initial=36 nstack_initial=0)
2024-09-04 20:15:45,534 - dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=1146)
2024-09-04 20:15:45,534 - stack []
2024-09-04 20:15:45,534 - dispatch pc=38, inst=STORE_FAST(arg=3, lineno=1146)
2024-09-04 20:15:45,535 - stack ['$const36.0']
2024-09-04 20:15:45,535 - end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2024-09-04 20:15:45,535 - pending: deque([State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1), State(pc_initial=40 nstack_initial=0)])
2024-09-04 20:15:45,535 - stack: ['$phi62.0']
2024-09-04 20:15:45,535 - state.pc_initial: State(pc_initial=62 nstack_initial=1)
2024-09-04 20:15:45,535 - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=1149)
2024-09-04 20:15:45,535 - stack ['$phi62.0']
2024-09-04 20:15:45,535 - dispatch pc=64, inst=COMPARE_OP(arg=1, lineno=1149)
2024-09-04 20:15:45,535 - stack ['$phi62.0', '$threshold62.1']
2024-09-04 20:15:45,535 - dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=40, lineno=1149)
2024-09-04 20:15:45,535 - stack ['$64compare_op.2']
2024-09-04 20:15:45,535 - end state. edges=[Edge(pc=68, stack=(), blockstack=(), npush=0), Edge(pc=78, stack=(), blockstack=(), npush=0)]
2024-09-04 20:15:45,535 - pending: deque([State(pc_initial=70 nstack_initial=1), State(pc_initial=40 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-04 20:15:45,536 - stack: ['$phi70.0']
2024-09-04 20:15:45,536 - state.pc_initial: State(pc_initial=70 nstack_initial=1)
2024-09-04 20:15:45,536 - dispatch pc=70, inst=POP_TOP(arg=None, lineno=1149)
2024-09-04 20:15:45,536 - stack ['$phi70.0']
2024-09-04 20:15:45,536 - dispatch pc=72, inst=JUMP_FORWARD(arg=2, lineno=1149)
2024-09-04 20:15:45,536 - stack []
2024-09-04 20:15:45,536 - end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0)]
2024-09-04 20:15:45,536 - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-04 20:15:45,536 - pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-04 20:15:45,536 - stack: []
2024-09-04 20:15:45,536 - state.pc_initial: State(pc_initial=68 nstack_initial=0)
2024-09-04 20:15:45,536 - dispatch pc=68, inst=JUMP_FORWARD(arg=2, lineno=1149)
2024-09-04 20:15:45,536 - stack []
2024-09-04 20:15:45,536 - end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0)]
2024-09-04 20:15:45,537 - pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=74 nstack_initial=0)])
2024-09-04 20:15:45,537 - stack: []
2024-09-04 20:15:45,537 - state.pc_initial: State(pc_initial=78 nstack_initial=0)
2024-09-04 20:15:45,537 - dispatch pc=78, inst=LOAD_FAST(arg=2, lineno=1152)
2024-09-04 20:15:45,537 - stack []
2024-09-04 20:15:45,537 - dispatch pc=80, inst=POP_JUMP_IF_FALSE(arg=52, lineno=1152)
2024-09-04 20:15:45,537 - stack ['$zero_pos78.0']
2024-09-04 20:15:45,537 - end state. edges=[Edge(pc=82, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
2024-09-04 20:15:45,537 - pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2024-09-04 20:15:45,537 - pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2024-09-04 20:15:45,537 - stack: []
2024-09-04 20:15:45,538 - state.pc_initial: State(pc_initial=74 nstack_initial=0)
2024-09-04 20:15:45,538 - dispatch pc=74, inst=LOAD_CONST(arg=1, lineno=1150)
2024-09-04 20:15:45,538 - stack []
2024-09-04 20:15:45,538 - dispatch pc=76, inst=STORE_FAST(arg=4, lineno=1150)
2024-09-04 20:15:45,538 - stack ['$const74.0']
2024-09-04 20:15:45,538 - end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0)]
2024-09-04 20:15:45,538 - pending: deque([State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-04 20:15:45,538 - stack: []
2024-09-04 20:15:45,538 - state.pc_initial: State(pc_initial=82 nstack_initial=0)
2024-09-04 20:15:45,538 - dispatch pc=82, inst=LOAD_GLOBAL(arg=0, lineno=1153)
2024-09-04 20:15:45,538 - stack []
2024-09-04 20:15:45,538 - dispatch pc=84, inst=LOAD_METHOD(arg=1, lineno=1153)
2024-09-04 20:15:45,538 - stack ['$82load_global.0']
2024-09-04 20:15:45,539 - dispatch pc=86, inst=LOAD_FAST(arg=3, lineno=1153)
2024-09-04 20:15:45,539 - stack ['$84load_method.1']
2024-09-04 20:15:45,539 - dispatch pc=88, inst=CALL_METHOD(arg=1, lineno=1153)
2024-09-04 20:15:45,539 - stack ['$84load_method.1', '$x086.2']
2024-09-04 20:15:45,539 - dispatch pc=90, inst=LOAD_GLOBAL(arg=0, lineno=1153)
2024-09-04 20:15:45,539 - stack ['$88call_method.3']
2024-09-04 20:15:45,539 - dispatch pc=92, inst=LOAD_METHOD(arg=1, lineno=1153)
2024-09-04 20:15:45,539 - stack ['$88call_method.3', '$90load_global.4']
2024-09-04 20:15:45,539 - dispatch pc=94, inst=LOAD_FAST(arg=4, lineno=1153)
2024-09-04 20:15:45,539 - stack ['$88call_method.3', '$92load_method.5']
2024-09-04 20:15:45,539 - dispatch pc=96, inst=CALL_METHOD(arg=1, lineno=1153)
2024-09-04 20:15:45,539 - stack ['$88call_method.3', '$92load_method.5', '$x194.6']
2024-09-04 20:15:45,539 - dispatch pc=98, inst=COMPARE_OP(arg=3, lineno=1153)
2024-09-04 20:15:45,540 - stack ['$88call_method.3', '$96call_method.7']
2024-09-04 20:15:45,540 - dispatch pc=100, inst=RETURN_VALUE(arg=None, lineno=1153)
2024-09-04 20:15:45,540 - stack ['$98compare_op.8']
2024-09-04 20:15:45,540 - end state. edges=[]
2024-09-04 20:15:45,540 - pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-04 20:15:45,540 - stack: []
2024-09-04 20:15:45,540 - state.pc_initial: State(pc_initial=102 nstack_initial=0)
2024-09-04 20:15:45,540 - dispatch pc=102, inst=LOAD_GLOBAL(arg=0, lineno=1155)
2024-09-04 20:15:45,540 - stack []
2024-09-04 20:15:45,540 - dispatch pc=104, inst=LOAD_METHOD(arg=2, lineno=1155)
2024-09-04 20:15:45,540 - stack ['$102load_global.0']
2024-09-04 20:15:45,540 - dispatch pc=106, inst=LOAD_FAST(arg=3, lineno=1155)
2024-09-04 20:15:45,540 - stack ['$104load_method.1']
2024-09-04 20:15:45,540 - dispatch pc=108, inst=CALL_METHOD(arg=1, lineno=1155)
2024-09-04 20:15:45,541 - stack ['$104load_method.1', '$x0106.2']
2024-09-04 20:15:45,541 - dispatch pc=110, inst=LOAD_GLOBAL(arg=0, lineno=1155)
2024-09-04 20:15:45,541 - stack ['$108call_method.3']
2024-09-04 20:15:45,541 - dispatch pc=112, inst=LOAD_METHOD(arg=2, lineno=1155)
2024-09-04 20:15:45,541 - stack ['$108call_method.3', '$110load_global.4']
2024-09-04 20:15:45,541 - dispatch pc=114, inst=LOAD_FAST(arg=4, lineno=1155)
2024-09-04 20:15:45,541 - stack ['$108call_method.3', '$112load_method.5']
2024-09-04 20:15:45,541 - dispatch pc=116, inst=CALL_METHOD(arg=1, lineno=1155)
2024-09-04 20:15:45,541 - stack ['$108call_method.3', '$112load_method.5', '$x1114.6']
2024-09-04 20:15:45,541 - dispatch pc=118, inst=COMPARE_OP(arg=3, lineno=1155)
2024-09-04 20:15:45,541 - stack ['$108call_method.3', '$116call_method.7']
2024-09-04 20:15:45,541 - dispatch pc=120, inst=RETURN_VALUE(arg=None, lineno=1155)
2024-09-04 20:15:45,541 - stack ['$118compare_op.8']
2024-09-04 20:15:45,542 - end state. edges=[]
2024-09-04 20:15:45,542 - pending: deque([State(pc_initial=78 nstack_initial=0)])
2024-09-04 20:15:45,542 - -------------------------Prune PHIs-------------------------
2024-09-04 20:15:45,542 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=1): {'$phi24.0'},
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=1): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=1): {'$phi62.0'},
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=1): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=82 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set()})
2024-09-04 20:15:45,542 - defmap: {'$phi24.0': State(pc_initial=0 nstack_initial=0),
 '$phi32.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.0': State(pc_initial=40 nstack_initial=0),
 '$phi70.0': State(pc_initial=40 nstack_initial=0)}
2024-09-04 20:15:45,543 - phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))},
             '$phi70.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))}})
2024-09-04 20:15:45,543 - changing phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))},
             '$phi70.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))}})
2024-09-04 20:15:45,543 - keep phismap: {'$phi24.0': {('$16dup_top.6', State(pc_initial=0 nstack_initial=0))},
 '$phi62.0': {('$54dup_top.6', State(pc_initial=40 nstack_initial=0))}}
2024-09-04 20:15:45,543 - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi24.0': '$16dup_top.6'},
             State(pc_initial=40 nstack_initial=0): {'$phi62.0': '$54dup_top.6'}})
2024-09-04 20:15:45,544 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 20:15:45,544 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'value': '$6binary_subscr.2'}), (10, {'res': '$threshold10.3'}), (12, {'value': '$threshold10.3', 'res': '$12unary_negative.4'}), (14, {'res': '$x014.5'}), (16, {'orig': ['$x014.5'], 'duped': ['$16dup_top.6']}), (20, {'lhs': '$12unary_negative.4', 'rhs': '$x014.5', 'res': '$20compare_op.7'}), (22, {'pred': '$20compare_op.7'})), outgoing_phis={'$phi24.0': '$16dup_top.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={24: ('$16dup_top.6',), 32: ('$16dup_top.6',)})
2024-09-04 20:15:45,544 - block_infos State(pc_initial=24 nstack_initial=1):
AdaptBlockInfo(insts=((24, {'res': '$threshold24.1'}), (26, {'lhs': '$phi24.0', 'rhs': '$threshold24.1', 'res': '$26compare_op.2'}), (28, {'pred': '$26compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 40: ()})
2024-09-04 20:15:45,544 - block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ()})
2024-09-04 20:15:45,544 - block_infos State(pc_initial=32 nstack_initial=1):
AdaptBlockInfo(insts=((34, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2024-09-04 20:15:45,544 - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$const36.0'}), (38, {'value': '$const36.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2024-09-04 20:15:45,544 - block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$x40.0'}), (42, {'res': '$const42.1'}), (44, {'index': '$const42.1', 'target': '$x40.0', 'res': '$44binary_subscr.2'}), (46, {'value': '$44binary_subscr.2'}), (48, {'res': '$threshold48.3'}), (50, {'value': '$threshold48.3', 'res': '$50unary_negative.4'}), (52, {'res': '$x152.5'}), (54, {'orig': ['$x152.5'], 'duped': ['$54dup_top.6']}), (58, {'lhs': '$50unary_negative.4', 'rhs': '$x152.5', 'res': '$58compare_op.7'}), (60, {'pred': '$58compare_op.7'})), outgoing_phis={'$phi62.0': '$54dup_top.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ('$54dup_top.6',), 70: ('$54dup_top.6',)})
2024-09-04 20:15:45,544 - block_infos State(pc_initial=62 nstack_initial=1):
AdaptBlockInfo(insts=((62, {'res': '$threshold62.1'}), (64, {'lhs': '$phi62.0', 'rhs': '$threshold62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={68: (), 78: ()})
2024-09-04 20:15:45,544 - block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: ()})
2024-09-04 20:15:45,544 - block_infos State(pc_initial=70 nstack_initial=1):
AdaptBlockInfo(insts=((72, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: ()})
2024-09-04 20:15:45,544 - block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$const74.0'}), (76, {'value': '$const74.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: ()})
2024-09-04 20:15:45,545 - block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$zero_pos78.0'}), (80, {'pred': '$zero_pos78.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: (), 102: ()})
2024-09-04 20:15:45,545 - block_infos State(pc_initial=82 nstack_initial=0):
AdaptBlockInfo(insts=((82, {'res': '$82load_global.0'}), (84, {'item': '$82load_global.0', 'res': '$84load_method.1'}), (86, {'res': '$x086.2'}), (88, {'func': '$84load_method.1', 'args': ['$x086.2'], 'res': '$88call_method.3'}), (90, {'res': '$90load_global.4'}), (92, {'item': '$90load_global.4', 'res': '$92load_method.5'}), (94, {'res': '$x194.6'}), (96, {'func': '$92load_method.5', 'args': ['$x194.6'], 'res': '$96call_method.7'}), (98, {'lhs': '$88call_method.3', 'rhs': '$96call_method.7', 'res': '$98compare_op.8'}), (100, {'retval': '$98compare_op.8', 'castval': '$100return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 20:15:45,545 - block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$102load_global.0'}), (104, {'item': '$102load_global.0', 'res': '$104load_method.1'}), (106, {'res': '$x0106.2'}), (108, {'func': '$104load_method.1', 'args': ['$x0106.2'], 'res': '$108call_method.3'}), (110, {'res': '$110load_global.4'}), (112, {'item': '$110load_global.4', 'res': '$112load_method.5'}), (114, {'res': '$x1114.6'}), (116, {'func': '$112load_method.5', 'args': ['$x1114.6'], 'res': '$116call_method.7'}), (118, {'lhs': '$108call_method.3', 'rhs': '$116call_method.7', 'res': '$118compare_op.8'}), (120, {'retval': '$118compare_op.8', 'castval': '$120return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 20:15:45,548 - label 0:
    x = arg(0, name=x)                       ['x']
    threshold = arg(1, name=threshold)       ['threshold']
    zero_pos = arg(2, name=zero_pos)         ['zero_pos']
    $const4.1 = const(int, 0)                ['$const4.1']
    x0 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$const4.1', 'x', 'x0']
    $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$12unary_negative.4', 'threshold']
    $20compare_op.7 = $12unary_negative.4 <= x0 ['$12unary_negative.4', '$20compare_op.7', 'x0']
    bool22 = global(bool: <class 'bool'>)    ['bool22']
    $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None) ['$20compare_op.7', '$22pred', 'bool22']
    $phi24.0 = x0                            ['$phi24.0', 'x0']
    branch $22pred, 24, 32                   ['$22pred']
label 24:
    $26compare_op.2 = $phi24.0 <= threshold  ['$26compare_op.2', '$phi24.0', 'threshold']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.2', '$28pred', 'bool28']
    branch $28pred, 30, 40                   ['$28pred']
label 30:
    jump 36                                  []
label 32:
    jump 40                                  []
label 36:
    x0 = const(int, 0)                       ['x0']
    jump 40                                  []
label 40:
    $const42.1 = const(int, -1)              ['$const42.1']
    x1 = getitem(value=x, index=$const42.1, fn=<built-in function getitem>) ['$const42.1', 'x', 'x1']
    $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$50unary_negative.4', 'threshold']
    $58compare_op.7 = $50unary_negative.4 <= x1 ['$50unary_negative.4', '$58compare_op.7', 'x1']
    bool60 = global(bool: <class 'bool'>)    ['bool60']
    $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None) ['$58compare_op.7', '$60pred', 'bool60']
    $phi62.0 = x1                            ['$phi62.0', 'x1']
    branch $60pred, 62, 70                   ['$60pred']
label 62:
    $64compare_op.2 = $phi62.0 <= threshold  ['$64compare_op.2', '$phi62.0', 'threshold']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 78                   ['$66pred']
label 68:
    jump 74                                  []
label 70:
    jump 78                                  []
label 74:
    x1 = const(int, 0)                       ['x1']
    jump 78                                  []
label 78:
    bool80 = global(bool: <class 'bool'>)    ['bool80']
    $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None) ['$80pred', 'bool80', 'zero_pos']
    branch $80pred, 82, 102                  ['$80pred']
label 82:
    $82load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$82load_global.0']
    $84load_method.1 = getattr(value=$82load_global.0, attr=signbit) ['$82load_global.0', '$84load_method.1']
    $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None) ['$84load_method.1', '$88call_method.3', 'x0']
    $90load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$90load_global.4']
    $92load_method.5 = getattr(value=$90load_global.4, attr=signbit) ['$90load_global.4', '$92load_method.5']
    $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None) ['$92load_method.5', '$96call_method.7', 'x1']
    $98compare_op.8 = $88call_method.3 != $96call_method.7 ['$88call_method.3', '$96call_method.7', '$98compare_op.8']
    $100return_value.9 = cast(value=$98compare_op.8) ['$100return_value.9', '$98compare_op.8']
    return $100return_value.9                ['$100return_value.9']
label 102:
    $102load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$102load_global.0']
    $104load_method.1 = getattr(value=$102load_global.0, attr=sign) ['$102load_global.0', '$104load_method.1']
    $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None) ['$104load_method.1', '$108call_method.3', 'x0']
    $110load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$110load_global.4']
    $112load_method.5 = getattr(value=$110load_global.4, attr=sign) ['$110load_global.4', '$112load_method.5']
    $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None) ['$112load_method.5', '$116call_method.7', 'x1']
    $118compare_op.8 = $108call_method.3 != $116call_method.7 ['$108call_method.3', '$116call_method.7', '$118compare_op.8']
    $120return_value.9 = cast(value=$118compare_op.8) ['$118compare_op.8', '$120return_value.9']
    return $120return_value.9                ['$120return_value.9']

2024-09-04 20:15:46,369 - bytecode dump:
>          0	NOP(arg=None, lineno=1039)
           2	LOAD_FAST(arg=0, lineno=1042)
           4	LOAD_CONST(arg=1, lineno=1042)
           6	BINARY_SUBSCR(arg=None, lineno=1042)
           8	LOAD_FAST(arg=0, lineno=1042)
          10	LOAD_CONST(arg=2, lineno=1042)
          12	BINARY_SUBSCR(arg=None, lineno=1042)
          14	COMPARE_OP(arg=4, lineno=1042)
          16	LOAD_FAST(arg=0, lineno=1042)
          18	LOAD_CONST(arg=1, lineno=1042)
          20	BINARY_SUBSCR(arg=None, lineno=1042)
          22	LOAD_FAST(arg=0, lineno=1042)
          24	LOAD_CONST(arg=3, lineno=1042)
          26	BINARY_SUBSCR(arg=None, lineno=1042)
          28	COMPARE_OP(arg=5, lineno=1042)
          30	BINARY_AND(arg=None, lineno=1042)
          32	RETURN_VALUE(arg=None, lineno=1042)
2024-09-04 20:15:46,370 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 20:15:46,370 - stack: []
2024-09-04 20:15:46,370 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 20:15:46,370 - dispatch pc=0, inst=NOP(arg=None, lineno=1039)
2024-09-04 20:15:46,370 - stack []
2024-09-04 20:15:46,370 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-04 20:15:46,370 - stack []
2024-09-04 20:15:46,370 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1042)
2024-09-04 20:15:46,370 - stack ['$x2.0']
2024-09-04 20:15:46,370 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-04 20:15:46,371 - stack ['$x2.0', '$const4.1']
2024-09-04 20:15:46,371 - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-04 20:15:46,371 - stack ['$6binary_subscr.2']
2024-09-04 20:15:46,371 - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1042)
2024-09-04 20:15:46,371 - stack ['$6binary_subscr.2', '$x8.3']
2024-09-04 20:15:46,371 - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-04 20:15:46,371 - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2024-09-04 20:15:46,371 - dispatch pc=14, inst=COMPARE_OP(arg=4, lineno=1042)
2024-09-04 20:15:46,371 - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2024-09-04 20:15:46,371 - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-04 20:15:46,371 - stack ['$14compare_op.6']
2024-09-04 20:15:46,372 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1042)
2024-09-04 20:15:46,372 - stack ['$14compare_op.6', '$x16.7']
2024-09-04 20:15:46,372 - dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-04 20:15:46,372 - stack ['$14compare_op.6', '$x16.7', '$const18.8']
2024-09-04 20:15:46,372 - dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-04 20:15:46,372 - stack ['$14compare_op.6', '$20binary_subscr.9']
2024-09-04 20:15:46,372 - dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=1042)
2024-09-04 20:15:46,372 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10']
2024-09-04 20:15:46,372 - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-04 20:15:46,372 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10', '$const24.11']
2024-09-04 20:15:46,372 - dispatch pc=28, inst=COMPARE_OP(arg=5, lineno=1042)
2024-09-04 20:15:46,373 - stack ['$14compare_op.6', '$20binary_subscr.9', '$26binary_subscr.12']
2024-09-04 20:15:46,373 - dispatch pc=30, inst=BINARY_AND(arg=None, lineno=1042)
2024-09-04 20:15:46,373 - stack ['$14compare_op.6', '$28compare_op.13']
2024-09-04 20:15:46,373 - dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1042)
2024-09-04 20:15:46,373 - stack ['$30binary_and.14']
2024-09-04 20:15:46,373 - end state. edges=[]
2024-09-04 20:15:46,373 - -------------------------Prune PHIs-------------------------
2024-09-04 20:15:46,373 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 20:15:46,373 - defmap: {}
2024-09-04 20:15:46,373 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 20:15:46,374 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 20:15:46,374 - keep phismap: {}
2024-09-04 20:15:46,374 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 20:15:46,374 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 20:15:46,374 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14compare_op.6'}), (16, {'res': '$x16.7'}), (18, {'res': '$const18.8'}), (20, {'index': '$const18.8', 'target': '$x16.7', 'res': '$20binary_subscr.9'}), (22, {'res': '$x22.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$x22.10', 'res': '$26binary_subscr.12'}), (28, {'lhs': '$20binary_subscr.9', 'rhs': '$26binary_subscr.12', 'res': '$28compare_op.13'}), (30, {'lhs': '$14compare_op.6', 'rhs': '$28compare_op.13', 'res': '$30binary_and.14'}), (32, {'retval': '$30binary_and.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 20:15:46,375 - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14compare_op.6 = $6binary_subscr.2 > $12binary_subscr.5 ['$12binary_subscr.5', '$14compare_op.6', '$6binary_subscr.2']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20binary_subscr.9 = getitem(value=x, index=$const18.8, fn=<built-in function getitem>) ['$20binary_subscr.9', '$const18.8', 'x']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=x, index=$const24.11, fn=<built-in function getitem>) ['$26binary_subscr.12', '$const24.11', 'x']
    $28compare_op.13 = $20binary_subscr.9 >= $26binary_subscr.12 ['$20binary_subscr.9', '$26binary_subscr.12', '$28compare_op.13']
    $30binary_and.14 = $14compare_op.6 & $28compare_op.13 ['$14compare_op.6', '$28compare_op.13', '$30binary_and.14']
    $32return_value.15 = cast(value=$30binary_and.14) ['$30binary_and.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

2024-09-04 20:15:46,377 - bytecode dump:
>          0	NOP(arg=None, lineno=1045)
           2	LOAD_FAST(arg=0, lineno=1048)
           4	LOAD_CONST(arg=1, lineno=1048)
           6	BINARY_SUBSCR(arg=None, lineno=1048)
           8	LOAD_FAST(arg=0, lineno=1048)
          10	LOAD_CONST(arg=2, lineno=1048)
          12	BINARY_SUBSCR(arg=None, lineno=1048)
          14	COMPARE_OP(arg=0, lineno=1048)
          16	LOAD_FAST(arg=0, lineno=1048)
          18	LOAD_CONST(arg=1, lineno=1048)
          20	BINARY_SUBSCR(arg=None, lineno=1048)
          22	LOAD_FAST(arg=0, lineno=1048)
          24	LOAD_CONST(arg=3, lineno=1048)
          26	BINARY_SUBSCR(arg=None, lineno=1048)
          28	COMPARE_OP(arg=1, lineno=1048)
          30	BINARY_AND(arg=None, lineno=1048)
          32	RETURN_VALUE(arg=None, lineno=1048)
2024-09-04 20:15:46,377 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 20:15:46,377 - stack: []
2024-09-04 20:15:46,377 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 20:15:46,377 - dispatch pc=0, inst=NOP(arg=None, lineno=1045)
2024-09-04 20:15:46,377 - stack []
2024-09-04 20:15:46,377 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-04 20:15:46,377 - stack []
2024-09-04 20:15:46,377 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1048)
2024-09-04 20:15:46,378 - stack ['$x2.0']
2024-09-04 20:15:46,378 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-04 20:15:46,378 - stack ['$x2.0', '$const4.1']
2024-09-04 20:15:46,378 - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-04 20:15:46,378 - stack ['$6binary_subscr.2']
2024-09-04 20:15:46,378 - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1048)
2024-09-04 20:15:46,378 - stack ['$6binary_subscr.2', '$x8.3']
2024-09-04 20:15:46,378 - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-04 20:15:46,378 - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2024-09-04 20:15:46,378 - dispatch pc=14, inst=COMPARE_OP(arg=0, lineno=1048)
2024-09-04 20:15:46,378 - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2024-09-04 20:15:46,379 - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-04 20:15:46,379 - stack ['$14compare_op.6']
2024-09-04 20:15:46,379 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1048)
2024-09-04 20:15:46,379 - stack ['$14compare_op.6', '$x16.7']
2024-09-04 20:15:46,379 - dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-04 20:15:46,379 - stack ['$14compare_op.6', '$x16.7', '$const18.8']
2024-09-04 20:15:46,379 - dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-04 20:15:46,379 - stack ['$14compare_op.6', '$20binary_subscr.9']
2024-09-04 20:15:46,379 - dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=1048)
2024-09-04 20:15:46,379 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10']
2024-09-04 20:15:46,380 - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-04 20:15:46,380 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10', '$const24.11']
2024-09-04 20:15:46,380 - dispatch pc=28, inst=COMPARE_OP(arg=1, lineno=1048)
2024-09-04 20:15:46,380 - stack ['$14compare_op.6', '$20binary_subscr.9', '$26binary_subscr.12']
2024-09-04 20:15:46,380 - dispatch pc=30, inst=BINARY_AND(arg=None, lineno=1048)
2024-09-04 20:15:46,380 - stack ['$14compare_op.6', '$28compare_op.13']
2024-09-04 20:15:46,380 - dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1048)
2024-09-04 20:15:46,380 - stack ['$30binary_and.14']
2024-09-04 20:15:46,380 - end state. edges=[]
2024-09-04 20:15:46,380 - -------------------------Prune PHIs-------------------------
2024-09-04 20:15:46,381 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 20:15:46,381 - defmap: {}
2024-09-04 20:15:46,381 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 20:15:46,381 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 20:15:46,381 - keep phismap: {}
2024-09-04 20:15:46,381 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 20:15:46,381 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 20:15:46,381 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14compare_op.6'}), (16, {'res': '$x16.7'}), (18, {'res': '$const18.8'}), (20, {'index': '$const18.8', 'target': '$x16.7', 'res': '$20binary_subscr.9'}), (22, {'res': '$x22.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$x22.10', 'res': '$26binary_subscr.12'}), (28, {'lhs': '$20binary_subscr.9', 'rhs': '$26binary_subscr.12', 'res': '$28compare_op.13'}), (30, {'lhs': '$14compare_op.6', 'rhs': '$28compare_op.13', 'res': '$30binary_and.14'}), (32, {'retval': '$30binary_and.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 20:15:46,382 - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14compare_op.6 = $6binary_subscr.2 < $12binary_subscr.5 ['$12binary_subscr.5', '$14compare_op.6', '$6binary_subscr.2']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20binary_subscr.9 = getitem(value=x, index=$const18.8, fn=<built-in function getitem>) ['$20binary_subscr.9', '$const18.8', 'x']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=x, index=$const24.11, fn=<built-in function getitem>) ['$26binary_subscr.12', '$const24.11', 'x']
    $28compare_op.13 = $20binary_subscr.9 <= $26binary_subscr.12 ['$20binary_subscr.9', '$26binary_subscr.12', '$28compare_op.13']
    $30binary_and.14 = $14compare_op.6 & $28compare_op.13 ['$14compare_op.6', '$28compare_op.13', '$30binary_and.14']
    $32return_value.15 = cast(value=$30binary_and.14) ['$30binary_and.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

2024-09-04 20:15:46,874 - bytecode dump:
>          0	NOP(arg=None, lineno=425)
           2	LOAD_FAST(arg=0, lineno=428)
           4	LOAD_CONST(arg=1, lineno=428)
           6	BINARY_SUBSCR(arg=None, lineno=428)
           8	LOAD_FAST(arg=0, lineno=428)
          10	LOAD_CONST(arg=2, lineno=428)
          12	BINARY_SUBSCR(arg=None, lineno=428)
          14	BINARY_ADD(arg=None, lineno=428)
          16	LOAD_CONST(arg=3, lineno=428)
          18	LOAD_FAST(arg=0, lineno=428)
          20	LOAD_CONST(arg=4, lineno=428)
          22	BINARY_SUBSCR(arg=None, lineno=428)
          24	BINARY_MULTIPLY(arg=None, lineno=428)
          26	BINARY_SUBTRACT(arg=None, lineno=428)
          28	STORE_FAST(arg=1, lineno=428)
          30	LOAD_FAST(arg=0, lineno=429)
          32	LOAD_CONST(arg=1, lineno=429)
          34	BINARY_SUBSCR(arg=None, lineno=429)
          36	LOAD_FAST(arg=0, lineno=429)
          38	LOAD_CONST(arg=2, lineno=429)
          40	BINARY_SUBSCR(arg=None, lineno=429)
          42	BINARY_SUBTRACT(arg=None, lineno=429)
          44	LOAD_CONST(arg=3, lineno=429)
          46	BINARY_TRUE_DIVIDE(arg=None, lineno=429)
          48	STORE_FAST(arg=2, lineno=429)
          50	LOAD_GLOBAL(arg=0, lineno=431)
          52	LOAD_METHOD(arg=1, lineno=431)
          54	LOAD_FAST(arg=2, lineno=431)
          56	CALL_METHOD(arg=1, lineno=431)
          58	LOAD_GLOBAL(arg=0, lineno=431)
          60	LOAD_METHOD(arg=1, lineno=431)
          62	LOAD_FAST(arg=1, lineno=431)
          64	CALL_METHOD(arg=1, lineno=431)
          66	COMPARE_OP(arg=5, lineno=431)
          68	POP_JUMP_IF_FALSE(arg=38, lineno=431)
          70	LOAD_CONST(arg=4, lineno=434)
          72	RETURN_VALUE(arg=None, lineno=434)
>         74	LOAD_FAST(arg=2, lineno=436)
          76	UNARY_NEGATIVE(arg=None, lineno=436)
          78	LOAD_FAST(arg=1, lineno=436)
          80	BINARY_TRUE_DIVIDE(arg=None, lineno=436)
          82	RETURN_VALUE(arg=None, lineno=436)
2024-09-04 20:15:46,874 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 20:15:46,874 - stack: []
2024-09-04 20:15:46,874 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 20:15:46,875 - dispatch pc=0, inst=NOP(arg=None, lineno=425)
2024-09-04 20:15:46,875 - stack []
2024-09-04 20:15:46,875 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=428)
2024-09-04 20:15:46,875 - stack []
2024-09-04 20:15:46,875 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=428)
2024-09-04 20:15:46,875 - stack ['$x2.0']
2024-09-04 20:15:46,875 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=428)
2024-09-04 20:15:46,875 - stack ['$x2.0', '$const4.1']
2024-09-04 20:15:46,875 - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=428)
2024-09-04 20:15:46,875 - stack ['$6binary_subscr.2']
2024-09-04 20:15:46,875 - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=428)
2024-09-04 20:15:46,875 - stack ['$6binary_subscr.2', '$x8.3']
2024-09-04 20:15:46,875 - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=428)
2024-09-04 20:15:46,876 - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2024-09-04 20:15:46,876 - dispatch pc=14, inst=BINARY_ADD(arg=None, lineno=428)
2024-09-04 20:15:46,876 - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2024-09-04 20:15:46,876 - dispatch pc=16, inst=LOAD_CONST(arg=3, lineno=428)
2024-09-04 20:15:46,876 - stack ['$14binary_add.6']
2024-09-04 20:15:46,876 - dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=428)
2024-09-04 20:15:46,876 - stack ['$14binary_add.6', '$const16.7']
2024-09-04 20:15:46,876 - dispatch pc=20, inst=LOAD_CONST(arg=4, lineno=428)
2024-09-04 20:15:46,876 - stack ['$14binary_add.6', '$const16.7', '$x18.8']
2024-09-04 20:15:46,876 - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=428)
2024-09-04 20:15:46,876 - stack ['$14binary_add.6', '$const16.7', '$x18.8', '$const20.9']
2024-09-04 20:15:46,876 - dispatch pc=24, inst=BINARY_MULTIPLY(arg=None, lineno=428)
2024-09-04 20:15:46,876 - stack ['$14binary_add.6', '$const16.7', '$22binary_subscr.10']
2024-09-04 20:15:46,877 - dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=428)
2024-09-04 20:15:46,877 - stack ['$14binary_add.6', '$24binary_multiply.11']
2024-09-04 20:15:46,877 - dispatch pc=28, inst=STORE_FAST(arg=1, lineno=428)
2024-09-04 20:15:46,877 - stack ['$26binary_subtract.12']
2024-09-04 20:15:46,877 - dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=429)
2024-09-04 20:15:46,877 - stack []
2024-09-04 20:15:46,877 - dispatch pc=32, inst=LOAD_CONST(arg=1, lineno=429)
2024-09-04 20:15:46,877 - stack ['$x30.13']
2024-09-04 20:15:46,877 - dispatch pc=34, inst=BINARY_SUBSCR(arg=None, lineno=429)
2024-09-04 20:15:46,877 - stack ['$x30.13', '$const32.14']
2024-09-04 20:15:46,877 - dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=429)
2024-09-04 20:15:46,877 - stack ['$34binary_subscr.15']
2024-09-04 20:15:46,877 - dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=429)
2024-09-04 20:15:46,877 - stack ['$34binary_subscr.15', '$x36.16']
2024-09-04 20:15:46,878 - dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=429)
2024-09-04 20:15:46,878 - stack ['$34binary_subscr.15', '$x36.16', '$const38.17']
2024-09-04 20:15:46,878 - dispatch pc=42, inst=BINARY_SUBTRACT(arg=None, lineno=429)
2024-09-04 20:15:46,878 - stack ['$34binary_subscr.15', '$40binary_subscr.18']
2024-09-04 20:15:46,878 - dispatch pc=44, inst=LOAD_CONST(arg=3, lineno=429)
2024-09-04 20:15:46,878 - stack ['$42binary_subtract.19']
2024-09-04 20:15:46,878 - dispatch pc=46, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=429)
2024-09-04 20:15:46,878 - stack ['$42binary_subtract.19', '$const44.20']
2024-09-04 20:15:46,878 - dispatch pc=48, inst=STORE_FAST(arg=2, lineno=429)
2024-09-04 20:15:46,878 - stack ['$46binary_true_divide.21']
2024-09-04 20:15:46,878 - dispatch pc=50, inst=LOAD_GLOBAL(arg=0, lineno=431)
2024-09-04 20:15:46,878 - stack []
2024-09-04 20:15:46,879 - dispatch pc=52, inst=LOAD_METHOD(arg=1, lineno=431)
2024-09-04 20:15:46,879 - stack ['$50load_global.22']
2024-09-04 20:15:46,879 - dispatch pc=54, inst=LOAD_FAST(arg=2, lineno=431)
2024-09-04 20:15:46,879 - stack ['$52load_method.23']
2024-09-04 20:15:46,879 - dispatch pc=56, inst=CALL_METHOD(arg=1, lineno=431)
2024-09-04 20:15:46,879 - stack ['$52load_method.23', '$b54.24']
2024-09-04 20:15:46,879 - dispatch pc=58, inst=LOAD_GLOBAL(arg=0, lineno=431)
2024-09-04 20:15:46,879 - stack ['$56call_method.25']
2024-09-04 20:15:46,879 - dispatch pc=60, inst=LOAD_METHOD(arg=1, lineno=431)
2024-09-04 20:15:46,879 - stack ['$56call_method.25', '$58load_global.26']
2024-09-04 20:15:46,880 - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=431)
2024-09-04 20:15:46,880 - stack ['$56call_method.25', '$60load_method.27']
2024-09-04 20:15:46,880 - dispatch pc=64, inst=CALL_METHOD(arg=1, lineno=431)
2024-09-04 20:15:46,880 - stack ['$56call_method.25', '$60load_method.27', '$a62.28']
2024-09-04 20:15:46,880 - dispatch pc=66, inst=COMPARE_OP(arg=5, lineno=431)
2024-09-04 20:15:46,880 - stack ['$56call_method.25', '$64call_method.29']
2024-09-04 20:15:46,880 - dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=38, lineno=431)
2024-09-04 20:15:46,880 - stack ['$66compare_op.30']
2024-09-04 20:15:46,880 - end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=74, stack=(), blockstack=(), npush=0)]
2024-09-04 20:15:46,880 - pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=74 nstack_initial=0)])
2024-09-04 20:15:46,880 - stack: []
2024-09-04 20:15:46,880 - state.pc_initial: State(pc_initial=70 nstack_initial=0)
2024-09-04 20:15:46,881 - dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=434)
2024-09-04 20:15:46,881 - stack []
2024-09-04 20:15:46,881 - dispatch pc=72, inst=RETURN_VALUE(arg=None, lineno=434)
2024-09-04 20:15:46,881 - stack ['$const70.0']
2024-09-04 20:15:46,881 - end state. edges=[]
2024-09-04 20:15:46,881 - pending: deque([State(pc_initial=74 nstack_initial=0)])
2024-09-04 20:15:46,881 - stack: []
2024-09-04 20:15:46,881 - state.pc_initial: State(pc_initial=74 nstack_initial=0)
2024-09-04 20:15:46,881 - dispatch pc=74, inst=LOAD_FAST(arg=2, lineno=436)
2024-09-04 20:15:46,881 - stack []
2024-09-04 20:15:46,881 - dispatch pc=76, inst=UNARY_NEGATIVE(arg=None, lineno=436)
2024-09-04 20:15:46,881 - stack ['$b74.0']
2024-09-04 20:15:46,881 - dispatch pc=78, inst=LOAD_FAST(arg=1, lineno=436)
2024-09-04 20:15:46,881 - stack ['$76unary_negative.1']
2024-09-04 20:15:46,882 - dispatch pc=80, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=436)
2024-09-04 20:15:46,882 - stack ['$76unary_negative.1', '$a78.2']
2024-09-04 20:15:46,882 - dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=436)
2024-09-04 20:15:46,882 - stack ['$80binary_true_divide.3']
2024-09-04 20:15:46,882 - end state. edges=[]
2024-09-04 20:15:46,882 - -------------------------Prune PHIs-------------------------
2024-09-04 20:15:46,882 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set()})
2024-09-04 20:15:46,882 - defmap: {}
2024-09-04 20:15:46,882 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 20:15:46,882 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 20:15:46,883 - keep phismap: {}
2024-09-04 20:15:46,883 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 20:15:46,883 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 20:15:46,883 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14binary_add.6'}), (16, {'res': '$const16.7'}), (18, {'res': '$x18.8'}), (20, {'res': '$const20.9'}), (22, {'index': '$const20.9', 'target': '$x18.8', 'res': '$22binary_subscr.10'}), (24, {'lhs': '$const16.7', 'rhs': '$22binary_subscr.10', 'res': '$24binary_multiply.11'}), (26, {'lhs': '$14binary_add.6', 'rhs': '$24binary_multiply.11', 'res': '$26binary_subtract.12'}), (28, {'value': '$26binary_subtract.12'}), (30, {'res': '$x30.13'}), (32, {'res': '$const32.14'}), (34, {'index': '$const32.14', 'target': '$x30.13', 'res': '$34binary_subscr.15'}), (36, {'res': '$x36.16'}), (38, {'res': '$const38.17'}), (40, {'index': '$const38.17', 'target': '$x36.16', 'res': '$40binary_subscr.18'}), (42, {'lhs': '$34binary_subscr.15', 'rhs': '$40binary_subscr.18', 'res': '$42binary_subtract.19'}), (44, {'res': '$const44.20'}), (46, {'lhs': '$42binary_subtract.19', 'rhs': '$const44.20', 'res': '$46binary_true_divide.21'}), (48, {'value': '$46binary_true_divide.21'}), (50, {'res': '$50load_global.22'}), (52, {'item': '$50load_global.22', 'res': '$52load_method.23'}), (54, {'res': '$b54.24'}), (56, {'func': '$52load_method.23', 'args': ['$b54.24'], 'res': '$56call_method.25'}), (58, {'res': '$58load_global.26'}), (60, {'item': '$58load_global.26', 'res': '$60load_method.27'}), (62, {'res': '$a62.28'}), (64, {'func': '$60load_method.27', 'args': ['$a62.28'], 'res': '$64call_method.29'}), (66, {'lhs': '$56call_method.25', 'rhs': '$64call_method.29', 'res': '$66compare_op.30'}), (68, {'pred': '$66compare_op.30'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 74: ()})
2024-09-04 20:15:46,883 - block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$const70.0'}), (72, {'retval': '$const70.0', 'castval': '$72return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 20:15:46,883 - block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$b74.0'}), (76, {'value': '$b74.0', 'res': '$76unary_negative.1'}), (78, {'res': '$a78.2'}), (80, {'lhs': '$76unary_negative.1', 'rhs': '$a78.2', 'res': '$80binary_true_divide.3'}), (82, {'retval': '$80binary_true_divide.3', 'castval': '$82return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 20:15:46,885 - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14binary_add.6 = $6binary_subscr.2 + $12binary_subscr.5 ['$12binary_subscr.5', '$14binary_add.6', '$6binary_subscr.2']
    $const16.7 = const(int, 2)               ['$const16.7']
    $const20.9 = const(int, 0)               ['$const20.9']
    $22binary_subscr.10 = getitem(value=x, index=$const20.9, fn=<built-in function getitem>) ['$22binary_subscr.10', '$const20.9', 'x']
    $24binary_multiply.11 = $const16.7 * $22binary_subscr.10 ['$22binary_subscr.10', '$24binary_multiply.11', '$const16.7']
    a = $14binary_add.6 - $24binary_multiply.11 ['$14binary_add.6', '$24binary_multiply.11', 'a']
    $const32.14 = const(int, 1)              ['$const32.14']
    $34binary_subscr.15 = getitem(value=x, index=$const32.14, fn=<built-in function getitem>) ['$34binary_subscr.15', '$const32.14', 'x']
    $const38.17 = const(int, -1)             ['$const38.17']
    $40binary_subscr.18 = getitem(value=x, index=$const38.17, fn=<built-in function getitem>) ['$40binary_subscr.18', '$const38.17', 'x']
    $42binary_subtract.19 = $34binary_subscr.15 - $40binary_subscr.18 ['$34binary_subscr.15', '$40binary_subscr.18', '$42binary_subtract.19']
    $const44.20 = const(int, 2)              ['$const44.20']
    b = $42binary_subtract.19 / $const44.20  ['$42binary_subtract.19', '$const44.20', 'b']
    $50load_global.22 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$50load_global.22']
    $52load_method.23 = getattr(value=$50load_global.22, attr=abs) ['$50load_global.22', '$52load_method.23']
    $56call_method.25 = call $52load_method.23(b, func=$52load_method.23, args=[Var(b, pitch.py:429)], kws=(), vararg=None, varkwarg=None, target=None) ['$52load_method.23', '$56call_method.25', 'b']
    $58load_global.26 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$58load_global.26']
    $60load_method.27 = getattr(value=$58load_global.26, attr=abs) ['$58load_global.26', '$60load_method.27']
    $64call_method.29 = call $60load_method.27(a, func=$60load_method.27, args=[Var(a, pitch.py:428)], kws=(), vararg=None, varkwarg=None, target=None) ['$60load_method.27', '$64call_method.29', 'a']
    $66compare_op.30 = $56call_method.25 >= $64call_method.29 ['$56call_method.25', '$64call_method.29', '$66compare_op.30']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.30, func=bool68, args=(Var($66compare_op.30, pitch.py:431),), kws=(), vararg=None, varkwarg=None, target=None) ['$66compare_op.30', '$68pred', 'bool68']
    branch $68pred, 70, 74                   ['$68pred']
label 70:
    $const70.0 = const(int, 0)               ['$const70.0']
    $72return_value.1 = cast(value=$const70.0) ['$72return_value.1', '$const70.0']
    return $72return_value.1                 ['$72return_value.1']
label 74:
    $76unary_negative.1 = unary(fn=<built-in function neg>, value=b) ['$76unary_negative.1', 'b']
    $80binary_true_divide.3 = $76unary_negative.1 / a ['$76unary_negative.1', '$80binary_true_divide.3', 'a']
    $82return_value.4 = cast(value=$80binary_true_divide.3) ['$80binary_true_divide.3', '$82return_value.4']
    return $82return_value.4                 ['$82return_value.4']

2024-09-04 20:16:53,114 - bytecode dump:
>          0	NOP(arg=None, lineno=1141)
           2	LOAD_FAST(arg=0, lineno=1144)
           4	LOAD_CONST(arg=1, lineno=1144)
           6	BINARY_SUBSCR(arg=None, lineno=1144)
           8	STORE_FAST(arg=3, lineno=1144)
          10	LOAD_FAST(arg=1, lineno=1145)
          12	UNARY_NEGATIVE(arg=None, lineno=1145)
          14	LOAD_FAST(arg=3, lineno=1145)
          16	DUP_TOP(arg=None, lineno=1145)
          18	ROT_THREE(arg=None, lineno=1145)
          20	COMPARE_OP(arg=1, lineno=1145)
          22	POP_JUMP_IF_FALSE(arg=17, lineno=1145)
          24	LOAD_FAST(arg=1, lineno=1145)
          26	COMPARE_OP(arg=1, lineno=1145)
          28	POP_JUMP_IF_FALSE(arg=21, lineno=1145)
          30	JUMP_FORWARD(arg=2, lineno=1145)
>         32	POP_TOP(arg=None, lineno=1145)
          34	JUMP_FORWARD(arg=2, lineno=1145)
>         36	LOAD_CONST(arg=1, lineno=1146)
          38	STORE_FAST(arg=3, lineno=1146)
>         40	LOAD_FAST(arg=0, lineno=1148)
          42	LOAD_CONST(arg=2, lineno=1148)
          44	BINARY_SUBSCR(arg=None, lineno=1148)
          46	STORE_FAST(arg=4, lineno=1148)
          48	LOAD_FAST(arg=1, lineno=1149)
          50	UNARY_NEGATIVE(arg=None, lineno=1149)
          52	LOAD_FAST(arg=4, lineno=1149)
          54	DUP_TOP(arg=None, lineno=1149)
          56	ROT_THREE(arg=None, lineno=1149)
          58	COMPARE_OP(arg=1, lineno=1149)
          60	POP_JUMP_IF_FALSE(arg=36, lineno=1149)
          62	LOAD_FAST(arg=1, lineno=1149)
          64	COMPARE_OP(arg=1, lineno=1149)
          66	POP_JUMP_IF_FALSE(arg=40, lineno=1149)
          68	JUMP_FORWARD(arg=2, lineno=1149)
>         70	POP_TOP(arg=None, lineno=1149)
          72	JUMP_FORWARD(arg=2, lineno=1149)
>         74	LOAD_CONST(arg=1, lineno=1150)
          76	STORE_FAST(arg=4, lineno=1150)
>         78	LOAD_FAST(arg=2, lineno=1152)
          80	POP_JUMP_IF_FALSE(arg=52, lineno=1152)
          82	LOAD_GLOBAL(arg=0, lineno=1153)
          84	LOAD_METHOD(arg=1, lineno=1153)
          86	LOAD_FAST(arg=3, lineno=1153)
          88	CALL_METHOD(arg=1, lineno=1153)
          90	LOAD_GLOBAL(arg=0, lineno=1153)
          92	LOAD_METHOD(arg=1, lineno=1153)
          94	LOAD_FAST(arg=4, lineno=1153)
          96	CALL_METHOD(arg=1, lineno=1153)
          98	COMPARE_OP(arg=3, lineno=1153)
         100	RETURN_VALUE(arg=None, lineno=1153)
>        102	LOAD_GLOBAL(arg=0, lineno=1155)
         104	LOAD_METHOD(arg=2, lineno=1155)
         106	LOAD_FAST(arg=3, lineno=1155)
         108	CALL_METHOD(arg=1, lineno=1155)
         110	LOAD_GLOBAL(arg=0, lineno=1155)
         112	LOAD_METHOD(arg=2, lineno=1155)
         114	LOAD_FAST(arg=4, lineno=1155)
         116	CALL_METHOD(arg=1, lineno=1155)
         118	COMPARE_OP(arg=3, lineno=1155)
         120	RETURN_VALUE(arg=None, lineno=1155)
2024-09-04 20:16:53,115 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 20:16:53,116 - stack: []
2024-09-04 20:16:53,116 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 20:16:53,116 - dispatch pc=0, inst=NOP(arg=None, lineno=1141)
2024-09-04 20:16:53,116 - stack []
2024-09-04 20:16:53,117 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1144)
2024-09-04 20:16:53,117 - stack []
2024-09-04 20:16:53,117 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1144)
2024-09-04 20:16:53,117 - stack ['$x2.0']
2024-09-04 20:16:53,117 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1144)
2024-09-04 20:16:53,117 - stack ['$x2.0', '$const4.1']
2024-09-04 20:16:53,117 - dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1144)
2024-09-04 20:16:53,118 - stack ['$6binary_subscr.2']
2024-09-04 20:16:53,118 - dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=1145)
2024-09-04 20:16:53,118 - stack []
2024-09-04 20:16:53,118 - dispatch pc=12, inst=UNARY_NEGATIVE(arg=None, lineno=1145)
2024-09-04 20:16:53,118 - stack ['$threshold10.3']
2024-09-04 20:16:53,118 - dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=1145)
2024-09-04 20:16:53,118 - stack ['$12unary_negative.4']
2024-09-04 20:16:53,118 - dispatch pc=16, inst=DUP_TOP(arg=None, lineno=1145)
2024-09-04 20:16:53,118 - stack ['$12unary_negative.4', '$x014.5']
2024-09-04 20:16:53,118 - dispatch pc=18, inst=ROT_THREE(arg=None, lineno=1145)
2024-09-04 20:16:53,118 - stack ['$12unary_negative.4', '$x014.5', '$16dup_top.6']
2024-09-04 20:16:53,119 - dispatch pc=20, inst=COMPARE_OP(arg=1, lineno=1145)
2024-09-04 20:16:53,119 - stack ['$16dup_top.6', '$12unary_negative.4', '$x014.5']
2024-09-04 20:16:53,119 - dispatch pc=22, inst=POP_JUMP_IF_FALSE(arg=17, lineno=1145)
2024-09-04 20:16:53,119 - stack ['$16dup_top.6', '$20compare_op.7']
2024-09-04 20:16:53,119 - end state. edges=[Edge(pc=24, stack=('$16dup_top.6',), blockstack=(), npush=0), Edge(pc=32, stack=('$16dup_top.6',), blockstack=(), npush=0)]
2024-09-04 20:16:53,119 - pending: deque([State(pc_initial=24 nstack_initial=1), State(pc_initial=32 nstack_initial=1)])
2024-09-04 20:16:53,120 - stack: ['$phi24.0']
2024-09-04 20:16:53,120 - state.pc_initial: State(pc_initial=24 nstack_initial=1)
2024-09-04 20:16:53,120 - dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=1145)
2024-09-04 20:16:53,120 - stack ['$phi24.0']
2024-09-04 20:16:53,121 - dispatch pc=26, inst=COMPARE_OP(arg=1, lineno=1145)
2024-09-04 20:16:53,121 - stack ['$phi24.0', '$threshold24.1']
2024-09-04 20:16:53,121 - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=21, lineno=1145)
2024-09-04 20:16:53,121 - stack ['$26compare_op.2']
2024-09-04 20:16:53,121 - end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=40, stack=(), blockstack=(), npush=0)]
2024-09-04 20:16:53,121 - pending: deque([State(pc_initial=32 nstack_initial=1), State(pc_initial=30 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2024-09-04 20:16:53,121 - stack: ['$phi32.0']
2024-09-04 20:16:53,121 - state.pc_initial: State(pc_initial=32 nstack_initial=1)
2024-09-04 20:16:53,122 - dispatch pc=32, inst=POP_TOP(arg=None, lineno=1145)
2024-09-04 20:16:53,122 - stack ['$phi32.0']
2024-09-04 20:16:53,122 - dispatch pc=34, inst=JUMP_FORWARD(arg=2, lineno=1145)
2024-09-04 20:16:53,122 - stack []
2024-09-04 20:16:53,122 - end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2024-09-04 20:16:53,122 - pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2024-09-04 20:16:53,122 - stack: []
2024-09-04 20:16:53,122 - state.pc_initial: State(pc_initial=30 nstack_initial=0)
2024-09-04 20:16:53,122 - dispatch pc=30, inst=JUMP_FORWARD(arg=2, lineno=1145)
2024-09-04 20:16:53,123 - stack []
2024-09-04 20:16:53,123 - end state. edges=[Edge(pc=36, stack=(), blockstack=(), npush=0)]
2024-09-04 20:16:53,123 - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2024-09-04 20:16:53,123 - stack: []
2024-09-04 20:16:53,123 - state.pc_initial: State(pc_initial=40 nstack_initial=0)
2024-09-04 20:16:53,123 - dispatch pc=40, inst=LOAD_FAST(arg=0, lineno=1148)
2024-09-04 20:16:53,123 - stack []
2024-09-04 20:16:53,123 - dispatch pc=42, inst=LOAD_CONST(arg=2, lineno=1148)
2024-09-04 20:16:53,123 - stack ['$x40.0']
2024-09-04 20:16:53,123 - dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=1148)
2024-09-04 20:16:53,123 - stack ['$x40.0', '$const42.1']
2024-09-04 20:16:53,123 - dispatch pc=46, inst=STORE_FAST(arg=4, lineno=1148)
2024-09-04 20:16:53,124 - stack ['$44binary_subscr.2']
2024-09-04 20:16:53,124 - dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=1149)
2024-09-04 20:16:53,124 - stack []
2024-09-04 20:16:53,124 - dispatch pc=50, inst=UNARY_NEGATIVE(arg=None, lineno=1149)
2024-09-04 20:16:53,124 - stack ['$threshold48.3']
2024-09-04 20:16:53,124 - dispatch pc=52, inst=LOAD_FAST(arg=4, lineno=1149)
2024-09-04 20:16:53,124 - stack ['$50unary_negative.4']
2024-09-04 20:16:53,124 - dispatch pc=54, inst=DUP_TOP(arg=None, lineno=1149)
2024-09-04 20:16:53,124 - stack ['$50unary_negative.4', '$x152.5']
2024-09-04 20:16:53,124 - dispatch pc=56, inst=ROT_THREE(arg=None, lineno=1149)
2024-09-04 20:16:53,124 - stack ['$50unary_negative.4', '$x152.5', '$54dup_top.6']
2024-09-04 20:16:53,125 - dispatch pc=58, inst=COMPARE_OP(arg=1, lineno=1149)
2024-09-04 20:16:53,125 - stack ['$54dup_top.6', '$50unary_negative.4', '$x152.5']
2024-09-04 20:16:53,125 - dispatch pc=60, inst=POP_JUMP_IF_FALSE(arg=36, lineno=1149)
2024-09-04 20:16:53,125 - stack ['$54dup_top.6', '$58compare_op.7']
2024-09-04 20:16:53,125 - end state. edges=[Edge(pc=62, stack=('$54dup_top.6',), blockstack=(), npush=0), Edge(pc=70, stack=('$54dup_top.6',), blockstack=(), npush=0)]
2024-09-04 20:16:53,125 - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
2024-09-04 20:16:53,125 - pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
2024-09-04 20:16:53,125 - stack: []
2024-09-04 20:16:53,125 - state.pc_initial: State(pc_initial=36 nstack_initial=0)
2024-09-04 20:16:53,125 - dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=1146)
2024-09-04 20:16:53,126 - stack []
2024-09-04 20:16:53,126 - dispatch pc=38, inst=STORE_FAST(arg=3, lineno=1146)
2024-09-04 20:16:53,126 - stack ['$const36.0']
2024-09-04 20:16:53,126 - end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2024-09-04 20:16:53,126 - pending: deque([State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1), State(pc_initial=40 nstack_initial=0)])
2024-09-04 20:16:53,126 - stack: ['$phi62.0']
2024-09-04 20:16:53,126 - state.pc_initial: State(pc_initial=62 nstack_initial=1)
2024-09-04 20:16:53,126 - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=1149)
2024-09-04 20:16:53,126 - stack ['$phi62.0']
2024-09-04 20:16:53,126 - dispatch pc=64, inst=COMPARE_OP(arg=1, lineno=1149)
2024-09-04 20:16:53,126 - stack ['$phi62.0', '$threshold62.1']
2024-09-04 20:16:53,127 - dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=40, lineno=1149)
2024-09-04 20:16:53,127 - stack ['$64compare_op.2']
2024-09-04 20:16:53,127 - end state. edges=[Edge(pc=68, stack=(), blockstack=(), npush=0), Edge(pc=78, stack=(), blockstack=(), npush=0)]
2024-09-04 20:16:53,127 - pending: deque([State(pc_initial=70 nstack_initial=1), State(pc_initial=40 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-04 20:16:53,127 - stack: ['$phi70.0']
2024-09-04 20:16:53,127 - state.pc_initial: State(pc_initial=70 nstack_initial=1)
2024-09-04 20:16:53,127 - dispatch pc=70, inst=POP_TOP(arg=None, lineno=1149)
2024-09-04 20:16:53,127 - stack ['$phi70.0']
2024-09-04 20:16:53,127 - dispatch pc=72, inst=JUMP_FORWARD(arg=2, lineno=1149)
2024-09-04 20:16:53,127 - stack []
2024-09-04 20:16:53,128 - end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0)]
2024-09-04 20:16:53,128 - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-04 20:16:53,128 - pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-04 20:16:53,128 - stack: []
2024-09-04 20:16:53,128 - state.pc_initial: State(pc_initial=68 nstack_initial=0)
2024-09-04 20:16:53,128 - dispatch pc=68, inst=JUMP_FORWARD(arg=2, lineno=1149)
2024-09-04 20:16:53,128 - stack []
2024-09-04 20:16:53,128 - end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0)]
2024-09-04 20:16:53,128 - pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=74 nstack_initial=0)])
2024-09-04 20:16:53,128 - stack: []
2024-09-04 20:16:53,129 - state.pc_initial: State(pc_initial=78 nstack_initial=0)
2024-09-04 20:16:53,129 - dispatch pc=78, inst=LOAD_FAST(arg=2, lineno=1152)
2024-09-04 20:16:53,129 - stack []
2024-09-04 20:16:53,129 - dispatch pc=80, inst=POP_JUMP_IF_FALSE(arg=52, lineno=1152)
2024-09-04 20:16:53,129 - stack ['$zero_pos78.0']
2024-09-04 20:16:53,129 - end state. edges=[Edge(pc=82, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
2024-09-04 20:16:53,129 - pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2024-09-04 20:16:53,129 - pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2024-09-04 20:16:53,129 - stack: []
2024-09-04 20:16:53,129 - state.pc_initial: State(pc_initial=74 nstack_initial=0)
2024-09-04 20:16:53,129 - dispatch pc=74, inst=LOAD_CONST(arg=1, lineno=1150)
2024-09-04 20:16:53,130 - stack []
2024-09-04 20:16:53,130 - dispatch pc=76, inst=STORE_FAST(arg=4, lineno=1150)
2024-09-04 20:16:53,130 - stack ['$const74.0']
2024-09-04 20:16:53,130 - end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0)]
2024-09-04 20:16:53,130 - pending: deque([State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-04 20:16:53,130 - stack: []
2024-09-04 20:16:53,130 - state.pc_initial: State(pc_initial=82 nstack_initial=0)
2024-09-04 20:16:53,130 - dispatch pc=82, inst=LOAD_GLOBAL(arg=0, lineno=1153)
2024-09-04 20:16:53,130 - stack []
2024-09-04 20:16:53,130 - dispatch pc=84, inst=LOAD_METHOD(arg=1, lineno=1153)
2024-09-04 20:16:53,130 - stack ['$82load_global.0']
2024-09-04 20:16:53,131 - dispatch pc=86, inst=LOAD_FAST(arg=3, lineno=1153)
2024-09-04 20:16:53,131 - stack ['$84load_method.1']
2024-09-04 20:16:53,131 - dispatch pc=88, inst=CALL_METHOD(arg=1, lineno=1153)
2024-09-04 20:16:53,131 - stack ['$84load_method.1', '$x086.2']
2024-09-04 20:16:53,131 - dispatch pc=90, inst=LOAD_GLOBAL(arg=0, lineno=1153)
2024-09-04 20:16:53,131 - stack ['$88call_method.3']
2024-09-04 20:16:53,131 - dispatch pc=92, inst=LOAD_METHOD(arg=1, lineno=1153)
2024-09-04 20:16:53,131 - stack ['$88call_method.3', '$90load_global.4']
2024-09-04 20:16:53,131 - dispatch pc=94, inst=LOAD_FAST(arg=4, lineno=1153)
2024-09-04 20:16:53,131 - stack ['$88call_method.3', '$92load_method.5']
2024-09-04 20:16:53,132 - dispatch pc=96, inst=CALL_METHOD(arg=1, lineno=1153)
2024-09-04 20:16:53,132 - stack ['$88call_method.3', '$92load_method.5', '$x194.6']
2024-09-04 20:16:53,132 - dispatch pc=98, inst=COMPARE_OP(arg=3, lineno=1153)
2024-09-04 20:16:53,132 - stack ['$88call_method.3', '$96call_method.7']
2024-09-04 20:16:53,132 - dispatch pc=100, inst=RETURN_VALUE(arg=None, lineno=1153)
2024-09-04 20:16:53,132 - stack ['$98compare_op.8']
2024-09-04 20:16:53,132 - end state. edges=[]
2024-09-04 20:16:53,132 - pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-04 20:16:53,132 - stack: []
2024-09-04 20:16:53,132 - state.pc_initial: State(pc_initial=102 nstack_initial=0)
2024-09-04 20:16:53,133 - dispatch pc=102, inst=LOAD_GLOBAL(arg=0, lineno=1155)
2024-09-04 20:16:53,133 - stack []
2024-09-04 20:16:53,133 - dispatch pc=104, inst=LOAD_METHOD(arg=2, lineno=1155)
2024-09-04 20:16:53,133 - stack ['$102load_global.0']
2024-09-04 20:16:53,133 - dispatch pc=106, inst=LOAD_FAST(arg=3, lineno=1155)
2024-09-04 20:16:53,133 - stack ['$104load_method.1']
2024-09-04 20:16:53,133 - dispatch pc=108, inst=CALL_METHOD(arg=1, lineno=1155)
2024-09-04 20:16:53,133 - stack ['$104load_method.1', '$x0106.2']
2024-09-04 20:16:53,133 - dispatch pc=110, inst=LOAD_GLOBAL(arg=0, lineno=1155)
2024-09-04 20:16:53,133 - stack ['$108call_method.3']
2024-09-04 20:16:53,133 - dispatch pc=112, inst=LOAD_METHOD(arg=2, lineno=1155)
2024-09-04 20:16:53,134 - stack ['$108call_method.3', '$110load_global.4']
2024-09-04 20:16:53,134 - dispatch pc=114, inst=LOAD_FAST(arg=4, lineno=1155)
2024-09-04 20:16:53,134 - stack ['$108call_method.3', '$112load_method.5']
2024-09-04 20:16:53,134 - dispatch pc=116, inst=CALL_METHOD(arg=1, lineno=1155)
2024-09-04 20:16:53,134 - stack ['$108call_method.3', '$112load_method.5', '$x1114.6']
2024-09-04 20:16:53,134 - dispatch pc=118, inst=COMPARE_OP(arg=3, lineno=1155)
2024-09-04 20:16:53,134 - stack ['$108call_method.3', '$116call_method.7']
2024-09-04 20:16:53,134 - dispatch pc=120, inst=RETURN_VALUE(arg=None, lineno=1155)
2024-09-04 20:16:53,134 - stack ['$118compare_op.8']
2024-09-04 20:16:53,134 - end state. edges=[]
2024-09-04 20:16:53,135 - pending: deque([State(pc_initial=78 nstack_initial=0)])
2024-09-04 20:16:53,135 - -------------------------Prune PHIs-------------------------
2024-09-04 20:16:53,135 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=1): {'$phi24.0'},
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=1): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=1): {'$phi62.0'},
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=1): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=82 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set()})
2024-09-04 20:16:53,136 - defmap: {'$phi24.0': State(pc_initial=0 nstack_initial=0),
 '$phi32.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.0': State(pc_initial=40 nstack_initial=0),
 '$phi70.0': State(pc_initial=40 nstack_initial=0)}
2024-09-04 20:16:53,138 - phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))},
             '$phi70.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))}})
2024-09-04 20:16:53,140 - changing phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))},
             '$phi70.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))}})
2024-09-04 20:16:53,141 - keep phismap: {'$phi24.0': {('$16dup_top.6', State(pc_initial=0 nstack_initial=0))},
 '$phi62.0': {('$54dup_top.6', State(pc_initial=40 nstack_initial=0))}}
2024-09-04 20:16:53,141 - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi24.0': '$16dup_top.6'},
             State(pc_initial=40 nstack_initial=0): {'$phi62.0': '$54dup_top.6'}})
2024-09-04 20:16:53,143 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 20:16:53,143 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'value': '$6binary_subscr.2'}), (10, {'res': '$threshold10.3'}), (12, {'value': '$threshold10.3', 'res': '$12unary_negative.4'}), (14, {'res': '$x014.5'}), (16, {'orig': ['$x014.5'], 'duped': ['$16dup_top.6']}), (20, {'lhs': '$12unary_negative.4', 'rhs': '$x014.5', 'res': '$20compare_op.7'}), (22, {'pred': '$20compare_op.7'})), outgoing_phis={'$phi24.0': '$16dup_top.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={24: ('$16dup_top.6',), 32: ('$16dup_top.6',)})
2024-09-04 20:16:53,143 - block_infos State(pc_initial=24 nstack_initial=1):
AdaptBlockInfo(insts=((24, {'res': '$threshold24.1'}), (26, {'lhs': '$phi24.0', 'rhs': '$threshold24.1', 'res': '$26compare_op.2'}), (28, {'pred': '$26compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 40: ()})
2024-09-04 20:16:53,143 - block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ()})
2024-09-04 20:16:53,143 - block_infos State(pc_initial=32 nstack_initial=1):
AdaptBlockInfo(insts=((34, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2024-09-04 20:16:53,143 - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$const36.0'}), (38, {'value': '$const36.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2024-09-04 20:16:53,144 - block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$x40.0'}), (42, {'res': '$const42.1'}), (44, {'index': '$const42.1', 'target': '$x40.0', 'res': '$44binary_subscr.2'}), (46, {'value': '$44binary_subscr.2'}), (48, {'res': '$threshold48.3'}), (50, {'value': '$threshold48.3', 'res': '$50unary_negative.4'}), (52, {'res': '$x152.5'}), (54, {'orig': ['$x152.5'], 'duped': ['$54dup_top.6']}), (58, {'lhs': '$50unary_negative.4', 'rhs': '$x152.5', 'res': '$58compare_op.7'}), (60, {'pred': '$58compare_op.7'})), outgoing_phis={'$phi62.0': '$54dup_top.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ('$54dup_top.6',), 70: ('$54dup_top.6',)})
2024-09-04 20:16:53,144 - block_infos State(pc_initial=62 nstack_initial=1):
AdaptBlockInfo(insts=((62, {'res': '$threshold62.1'}), (64, {'lhs': '$phi62.0', 'rhs': '$threshold62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={68: (), 78: ()})
2024-09-04 20:16:53,144 - block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: ()})
2024-09-04 20:16:53,144 - block_infos State(pc_initial=70 nstack_initial=1):
AdaptBlockInfo(insts=((72, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: ()})
2024-09-04 20:16:53,144 - block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$const74.0'}), (76, {'value': '$const74.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: ()})
2024-09-04 20:16:53,144 - block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$zero_pos78.0'}), (80, {'pred': '$zero_pos78.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: (), 102: ()})
2024-09-04 20:16:53,144 - block_infos State(pc_initial=82 nstack_initial=0):
AdaptBlockInfo(insts=((82, {'res': '$82load_global.0'}), (84, {'item': '$82load_global.0', 'res': '$84load_method.1'}), (86, {'res': '$x086.2'}), (88, {'func': '$84load_method.1', 'args': ['$x086.2'], 'res': '$88call_method.3'}), (90, {'res': '$90load_global.4'}), (92, {'item': '$90load_global.4', 'res': '$92load_method.5'}), (94, {'res': '$x194.6'}), (96, {'func': '$92load_method.5', 'args': ['$x194.6'], 'res': '$96call_method.7'}), (98, {'lhs': '$88call_method.3', 'rhs': '$96call_method.7', 'res': '$98compare_op.8'}), (100, {'retval': '$98compare_op.8', 'castval': '$100return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 20:16:53,144 - block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$102load_global.0'}), (104, {'item': '$102load_global.0', 'res': '$104load_method.1'}), (106, {'res': '$x0106.2'}), (108, {'func': '$104load_method.1', 'args': ['$x0106.2'], 'res': '$108call_method.3'}), (110, {'res': '$110load_global.4'}), (112, {'item': '$110load_global.4', 'res': '$112load_method.5'}), (114, {'res': '$x1114.6'}), (116, {'func': '$112load_method.5', 'args': ['$x1114.6'], 'res': '$116call_method.7'}), (118, {'lhs': '$108call_method.3', 'rhs': '$116call_method.7', 'res': '$118compare_op.8'}), (120, {'retval': '$118compare_op.8', 'castval': '$120return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 20:16:53,149 - label 0:
    x = arg(0, name=x)                       ['x']
    threshold = arg(1, name=threshold)       ['threshold']
    zero_pos = arg(2, name=zero_pos)         ['zero_pos']
    $const4.1 = const(int, 0)                ['$const4.1']
    x0 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$const4.1', 'x', 'x0']
    $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$12unary_negative.4', 'threshold']
    $20compare_op.7 = $12unary_negative.4 <= x0 ['$12unary_negative.4', '$20compare_op.7', 'x0']
    bool22 = global(bool: <class 'bool'>)    ['bool22']
    $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None) ['$20compare_op.7', '$22pred', 'bool22']
    $phi24.0 = x0                            ['$phi24.0', 'x0']
    branch $22pred, 24, 32                   ['$22pred']
label 24:
    $26compare_op.2 = $phi24.0 <= threshold  ['$26compare_op.2', '$phi24.0', 'threshold']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.2', '$28pred', 'bool28']
    branch $28pred, 30, 40                   ['$28pred']
label 30:
    jump 36                                  []
label 32:
    jump 40                                  []
label 36:
    x0 = const(int, 0)                       ['x0']
    jump 40                                  []
label 40:
    $const42.1 = const(int, -1)              ['$const42.1']
    x1 = getitem(value=x, index=$const42.1, fn=<built-in function getitem>) ['$const42.1', 'x', 'x1']
    $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$50unary_negative.4', 'threshold']
    $58compare_op.7 = $50unary_negative.4 <= x1 ['$50unary_negative.4', '$58compare_op.7', 'x1']
    bool60 = global(bool: <class 'bool'>)    ['bool60']
    $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None) ['$58compare_op.7', '$60pred', 'bool60']
    $phi62.0 = x1                            ['$phi62.0', 'x1']
    branch $60pred, 62, 70                   ['$60pred']
label 62:
    $64compare_op.2 = $phi62.0 <= threshold  ['$64compare_op.2', '$phi62.0', 'threshold']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 78                   ['$66pred']
label 68:
    jump 74                                  []
label 70:
    jump 78                                  []
label 74:
    x1 = const(int, 0)                       ['x1']
    jump 78                                  []
label 78:
    bool80 = global(bool: <class 'bool'>)    ['bool80']
    $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None) ['$80pred', 'bool80', 'zero_pos']
    branch $80pred, 82, 102                  ['$80pred']
label 82:
    $82load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$82load_global.0']
    $84load_method.1 = getattr(value=$82load_global.0, attr=signbit) ['$82load_global.0', '$84load_method.1']
    $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None) ['$84load_method.1', '$88call_method.3', 'x0']
    $90load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$90load_global.4']
    $92load_method.5 = getattr(value=$90load_global.4, attr=signbit) ['$90load_global.4', '$92load_method.5']
    $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None) ['$92load_method.5', '$96call_method.7', 'x1']
    $98compare_op.8 = $88call_method.3 != $96call_method.7 ['$88call_method.3', '$96call_method.7', '$98compare_op.8']
    $100return_value.9 = cast(value=$98compare_op.8) ['$100return_value.9', '$98compare_op.8']
    return $100return_value.9                ['$100return_value.9']
label 102:
    $102load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$102load_global.0']
    $104load_method.1 = getattr(value=$102load_global.0, attr=sign) ['$102load_global.0', '$104load_method.1']
    $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None) ['$104load_method.1', '$108call_method.3', 'x0']
    $110load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$110load_global.4']
    $112load_method.5 = getattr(value=$110load_global.4, attr=sign) ['$110load_global.4', '$112load_method.5']
    $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None) ['$112load_method.5', '$116call_method.7', 'x1']
    $118compare_op.8 = $108call_method.3 != $116call_method.7 ['$108call_method.3', '$116call_method.7', '$118compare_op.8']
    $120return_value.9 = cast(value=$118compare_op.8) ['$118compare_op.8', '$120return_value.9']
    return $120return_value.9                ['$120return_value.9']

2024-09-04 20:16:54,192 - bytecode dump:
>          0	NOP(arg=None, lineno=1039)
           2	LOAD_FAST(arg=0, lineno=1042)
           4	LOAD_CONST(arg=1, lineno=1042)
           6	BINARY_SUBSCR(arg=None, lineno=1042)
           8	LOAD_FAST(arg=0, lineno=1042)
          10	LOAD_CONST(arg=2, lineno=1042)
          12	BINARY_SUBSCR(arg=None, lineno=1042)
          14	COMPARE_OP(arg=4, lineno=1042)
          16	LOAD_FAST(arg=0, lineno=1042)
          18	LOAD_CONST(arg=1, lineno=1042)
          20	BINARY_SUBSCR(arg=None, lineno=1042)
          22	LOAD_FAST(arg=0, lineno=1042)
          24	LOAD_CONST(arg=3, lineno=1042)
          26	BINARY_SUBSCR(arg=None, lineno=1042)
          28	COMPARE_OP(arg=5, lineno=1042)
          30	BINARY_AND(arg=None, lineno=1042)
          32	RETURN_VALUE(arg=None, lineno=1042)
2024-09-04 20:16:54,192 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 20:16:54,192 - stack: []
2024-09-04 20:16:54,193 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 20:16:54,193 - dispatch pc=0, inst=NOP(arg=None, lineno=1039)
2024-09-04 20:16:54,193 - stack []
2024-09-04 20:16:54,193 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-04 20:16:54,193 - stack []
2024-09-04 20:16:54,193 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1042)
2024-09-04 20:16:54,193 - stack ['$x2.0']
2024-09-04 20:16:54,193 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-04 20:16:54,193 - stack ['$x2.0', '$const4.1']
2024-09-04 20:16:54,193 - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-04 20:16:54,194 - stack ['$6binary_subscr.2']
2024-09-04 20:16:54,194 - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1042)
2024-09-04 20:16:54,194 - stack ['$6binary_subscr.2', '$x8.3']
2024-09-04 20:16:54,194 - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-04 20:16:54,194 - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2024-09-04 20:16:54,194 - dispatch pc=14, inst=COMPARE_OP(arg=4, lineno=1042)
2024-09-04 20:16:54,194 - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2024-09-04 20:16:54,194 - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-04 20:16:54,194 - stack ['$14compare_op.6']
2024-09-04 20:16:54,194 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1042)
2024-09-04 20:16:54,195 - stack ['$14compare_op.6', '$x16.7']
2024-09-04 20:16:54,195 - dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-04 20:16:54,195 - stack ['$14compare_op.6', '$x16.7', '$const18.8']
2024-09-04 20:16:54,195 - dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-04 20:16:54,195 - stack ['$14compare_op.6', '$20binary_subscr.9']
2024-09-04 20:16:54,195 - dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=1042)
2024-09-04 20:16:54,195 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10']
2024-09-04 20:16:54,195 - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-04 20:16:54,195 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10', '$const24.11']
2024-09-04 20:16:54,195 - dispatch pc=28, inst=COMPARE_OP(arg=5, lineno=1042)
2024-09-04 20:16:54,195 - stack ['$14compare_op.6', '$20binary_subscr.9', '$26binary_subscr.12']
2024-09-04 20:16:54,196 - dispatch pc=30, inst=BINARY_AND(arg=None, lineno=1042)
2024-09-04 20:16:54,196 - stack ['$14compare_op.6', '$28compare_op.13']
2024-09-04 20:16:54,196 - dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1042)
2024-09-04 20:16:54,196 - stack ['$30binary_and.14']
2024-09-04 20:16:54,196 - end state. edges=[]
2024-09-04 20:16:54,196 - -------------------------Prune PHIs-------------------------
2024-09-04 20:16:54,196 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 20:16:54,196 - defmap: {}
2024-09-04 20:16:54,197 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 20:16:54,197 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 20:16:54,197 - keep phismap: {}
2024-09-04 20:16:54,197 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 20:16:54,197 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 20:16:54,197 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14compare_op.6'}), (16, {'res': '$x16.7'}), (18, {'res': '$const18.8'}), (20, {'index': '$const18.8', 'target': '$x16.7', 'res': '$20binary_subscr.9'}), (22, {'res': '$x22.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$x22.10', 'res': '$26binary_subscr.12'}), (28, {'lhs': '$20binary_subscr.9', 'rhs': '$26binary_subscr.12', 'res': '$28compare_op.13'}), (30, {'lhs': '$14compare_op.6', 'rhs': '$28compare_op.13', 'res': '$30binary_and.14'}), (32, {'retval': '$30binary_and.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 20:16:54,199 - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14compare_op.6 = $6binary_subscr.2 > $12binary_subscr.5 ['$12binary_subscr.5', '$14compare_op.6', '$6binary_subscr.2']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20binary_subscr.9 = getitem(value=x, index=$const18.8, fn=<built-in function getitem>) ['$20binary_subscr.9', '$const18.8', 'x']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=x, index=$const24.11, fn=<built-in function getitem>) ['$26binary_subscr.12', '$const24.11', 'x']
    $28compare_op.13 = $20binary_subscr.9 >= $26binary_subscr.12 ['$20binary_subscr.9', '$26binary_subscr.12', '$28compare_op.13']
    $30binary_and.14 = $14compare_op.6 & $28compare_op.13 ['$14compare_op.6', '$28compare_op.13', '$30binary_and.14']
    $32return_value.15 = cast(value=$30binary_and.14) ['$30binary_and.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

2024-09-04 20:16:54,200 - bytecode dump:
>          0	NOP(arg=None, lineno=1045)
           2	LOAD_FAST(arg=0, lineno=1048)
           4	LOAD_CONST(arg=1, lineno=1048)
           6	BINARY_SUBSCR(arg=None, lineno=1048)
           8	LOAD_FAST(arg=0, lineno=1048)
          10	LOAD_CONST(arg=2, lineno=1048)
          12	BINARY_SUBSCR(arg=None, lineno=1048)
          14	COMPARE_OP(arg=0, lineno=1048)
          16	LOAD_FAST(arg=0, lineno=1048)
          18	LOAD_CONST(arg=1, lineno=1048)
          20	BINARY_SUBSCR(arg=None, lineno=1048)
          22	LOAD_FAST(arg=0, lineno=1048)
          24	LOAD_CONST(arg=3, lineno=1048)
          26	BINARY_SUBSCR(arg=None, lineno=1048)
          28	COMPARE_OP(arg=1, lineno=1048)
          30	BINARY_AND(arg=None, lineno=1048)
          32	RETURN_VALUE(arg=None, lineno=1048)
2024-09-04 20:16:54,200 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 20:16:54,201 - stack: []
2024-09-04 20:16:54,201 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 20:16:54,201 - dispatch pc=0, inst=NOP(arg=None, lineno=1045)
2024-09-04 20:16:54,201 - stack []
2024-09-04 20:16:54,201 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-04 20:16:54,201 - stack []
2024-09-04 20:16:54,201 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1048)
2024-09-04 20:16:54,201 - stack ['$x2.0']
2024-09-04 20:16:54,201 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-04 20:16:54,201 - stack ['$x2.0', '$const4.1']
2024-09-04 20:16:54,202 - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-04 20:16:54,202 - stack ['$6binary_subscr.2']
2024-09-04 20:16:54,202 - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1048)
2024-09-04 20:16:54,202 - stack ['$6binary_subscr.2', '$x8.3']
2024-09-04 20:16:54,202 - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-04 20:16:54,202 - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2024-09-04 20:16:54,202 - dispatch pc=14, inst=COMPARE_OP(arg=0, lineno=1048)
2024-09-04 20:16:54,202 - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2024-09-04 20:16:54,202 - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-04 20:16:54,202 - stack ['$14compare_op.6']
2024-09-04 20:16:54,203 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1048)
2024-09-04 20:16:54,203 - stack ['$14compare_op.6', '$x16.7']
2024-09-04 20:16:54,203 - dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-04 20:16:54,203 - stack ['$14compare_op.6', '$x16.7', '$const18.8']
2024-09-04 20:16:54,203 - dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-04 20:16:54,203 - stack ['$14compare_op.6', '$20binary_subscr.9']
2024-09-04 20:16:54,203 - dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=1048)
2024-09-04 20:16:54,203 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10']
2024-09-04 20:16:54,203 - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-04 20:16:54,203 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10', '$const24.11']
2024-09-04 20:16:54,204 - dispatch pc=28, inst=COMPARE_OP(arg=1, lineno=1048)
2024-09-04 20:16:54,204 - stack ['$14compare_op.6', '$20binary_subscr.9', '$26binary_subscr.12']
2024-09-04 20:16:54,204 - dispatch pc=30, inst=BINARY_AND(arg=None, lineno=1048)
2024-09-04 20:16:54,205 - stack ['$14compare_op.6', '$28compare_op.13']
2024-09-04 20:16:54,206 - dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1048)
2024-09-04 20:16:54,206 - stack ['$30binary_and.14']
2024-09-04 20:16:54,206 - end state. edges=[]
2024-09-04 20:16:54,207 - -------------------------Prune PHIs-------------------------
2024-09-04 20:16:54,207 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 20:16:54,207 - defmap: {}
2024-09-04 20:16:54,207 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 20:16:54,207 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 20:16:54,207 - keep phismap: {}
2024-09-04 20:16:54,207 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 20:16:54,208 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 20:16:54,208 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14compare_op.6'}), (16, {'res': '$x16.7'}), (18, {'res': '$const18.8'}), (20, {'index': '$const18.8', 'target': '$x16.7', 'res': '$20binary_subscr.9'}), (22, {'res': '$x22.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$x22.10', 'res': '$26binary_subscr.12'}), (28, {'lhs': '$20binary_subscr.9', 'rhs': '$26binary_subscr.12', 'res': '$28compare_op.13'}), (30, {'lhs': '$14compare_op.6', 'rhs': '$28compare_op.13', 'res': '$30binary_and.14'}), (32, {'retval': '$30binary_and.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 20:16:54,210 - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14compare_op.6 = $6binary_subscr.2 < $12binary_subscr.5 ['$12binary_subscr.5', '$14compare_op.6', '$6binary_subscr.2']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20binary_subscr.9 = getitem(value=x, index=$const18.8, fn=<built-in function getitem>) ['$20binary_subscr.9', '$const18.8', 'x']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=x, index=$const24.11, fn=<built-in function getitem>) ['$26binary_subscr.12', '$const24.11', 'x']
    $28compare_op.13 = $20binary_subscr.9 <= $26binary_subscr.12 ['$20binary_subscr.9', '$26binary_subscr.12', '$28compare_op.13']
    $30binary_and.14 = $14compare_op.6 & $28compare_op.13 ['$14compare_op.6', '$28compare_op.13', '$30binary_and.14']
    $32return_value.15 = cast(value=$30binary_and.14) ['$30binary_and.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

2024-09-04 20:16:54,780 - bytecode dump:
>          0	NOP(arg=None, lineno=425)
           2	LOAD_FAST(arg=0, lineno=428)
           4	LOAD_CONST(arg=1, lineno=428)
           6	BINARY_SUBSCR(arg=None, lineno=428)
           8	LOAD_FAST(arg=0, lineno=428)
          10	LOAD_CONST(arg=2, lineno=428)
          12	BINARY_SUBSCR(arg=None, lineno=428)
          14	BINARY_ADD(arg=None, lineno=428)
          16	LOAD_CONST(arg=3, lineno=428)
          18	LOAD_FAST(arg=0, lineno=428)
          20	LOAD_CONST(arg=4, lineno=428)
          22	BINARY_SUBSCR(arg=None, lineno=428)
          24	BINARY_MULTIPLY(arg=None, lineno=428)
          26	BINARY_SUBTRACT(arg=None, lineno=428)
          28	STORE_FAST(arg=1, lineno=428)
          30	LOAD_FAST(arg=0, lineno=429)
          32	LOAD_CONST(arg=1, lineno=429)
          34	BINARY_SUBSCR(arg=None, lineno=429)
          36	LOAD_FAST(arg=0, lineno=429)
          38	LOAD_CONST(arg=2, lineno=429)
          40	BINARY_SUBSCR(arg=None, lineno=429)
          42	BINARY_SUBTRACT(arg=None, lineno=429)
          44	LOAD_CONST(arg=3, lineno=429)
          46	BINARY_TRUE_DIVIDE(arg=None, lineno=429)
          48	STORE_FAST(arg=2, lineno=429)
          50	LOAD_GLOBAL(arg=0, lineno=431)
          52	LOAD_METHOD(arg=1, lineno=431)
          54	LOAD_FAST(arg=2, lineno=431)
          56	CALL_METHOD(arg=1, lineno=431)
          58	LOAD_GLOBAL(arg=0, lineno=431)
          60	LOAD_METHOD(arg=1, lineno=431)
          62	LOAD_FAST(arg=1, lineno=431)
          64	CALL_METHOD(arg=1, lineno=431)
          66	COMPARE_OP(arg=5, lineno=431)
          68	POP_JUMP_IF_FALSE(arg=38, lineno=431)
          70	LOAD_CONST(arg=4, lineno=434)
          72	RETURN_VALUE(arg=None, lineno=434)
>         74	LOAD_FAST(arg=2, lineno=436)
          76	UNARY_NEGATIVE(arg=None, lineno=436)
          78	LOAD_FAST(arg=1, lineno=436)
          80	BINARY_TRUE_DIVIDE(arg=None, lineno=436)
          82	RETURN_VALUE(arg=None, lineno=436)
2024-09-04 20:16:54,781 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 20:16:54,781 - stack: []
2024-09-04 20:16:54,781 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 20:16:54,781 - dispatch pc=0, inst=NOP(arg=None, lineno=425)
2024-09-04 20:16:54,781 - stack []
2024-09-04 20:16:54,781 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=428)
2024-09-04 20:16:54,781 - stack []
2024-09-04 20:16:54,781 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=428)
2024-09-04 20:16:54,781 - stack ['$x2.0']
2024-09-04 20:16:54,781 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=428)
2024-09-04 20:16:54,782 - stack ['$x2.0', '$const4.1']
2024-09-04 20:16:54,782 - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=428)
2024-09-04 20:16:54,782 - stack ['$6binary_subscr.2']
2024-09-04 20:16:54,782 - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=428)
2024-09-04 20:16:54,782 - stack ['$6binary_subscr.2', '$x8.3']
2024-09-04 20:16:54,782 - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=428)
2024-09-04 20:16:54,782 - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2024-09-04 20:16:54,782 - dispatch pc=14, inst=BINARY_ADD(arg=None, lineno=428)
2024-09-04 20:16:54,782 - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2024-09-04 20:16:54,782 - dispatch pc=16, inst=LOAD_CONST(arg=3, lineno=428)
2024-09-04 20:16:54,782 - stack ['$14binary_add.6']
2024-09-04 20:16:54,782 - dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=428)
2024-09-04 20:16:54,782 - stack ['$14binary_add.6', '$const16.7']
2024-09-04 20:16:54,783 - dispatch pc=20, inst=LOAD_CONST(arg=4, lineno=428)
2024-09-04 20:16:54,783 - stack ['$14binary_add.6', '$const16.7', '$x18.8']
2024-09-04 20:16:54,783 - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=428)
2024-09-04 20:16:54,783 - stack ['$14binary_add.6', '$const16.7', '$x18.8', '$const20.9']
2024-09-04 20:16:54,783 - dispatch pc=24, inst=BINARY_MULTIPLY(arg=None, lineno=428)
2024-09-04 20:16:54,783 - stack ['$14binary_add.6', '$const16.7', '$22binary_subscr.10']
2024-09-04 20:16:54,783 - dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=428)
2024-09-04 20:16:54,783 - stack ['$14binary_add.6', '$24binary_multiply.11']
2024-09-04 20:16:54,783 - dispatch pc=28, inst=STORE_FAST(arg=1, lineno=428)
2024-09-04 20:16:54,783 - stack ['$26binary_subtract.12']
2024-09-04 20:16:54,783 - dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=429)
2024-09-04 20:16:54,783 - stack []
2024-09-04 20:16:54,783 - dispatch pc=32, inst=LOAD_CONST(arg=1, lineno=429)
2024-09-04 20:16:54,783 - stack ['$x30.13']
2024-09-04 20:16:54,784 - dispatch pc=34, inst=BINARY_SUBSCR(arg=None, lineno=429)
2024-09-04 20:16:54,784 - stack ['$x30.13', '$const32.14']
2024-09-04 20:16:54,784 - dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=429)
2024-09-04 20:16:54,784 - stack ['$34binary_subscr.15']
2024-09-04 20:16:54,784 - dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=429)
2024-09-04 20:16:54,784 - stack ['$34binary_subscr.15', '$x36.16']
2024-09-04 20:16:54,784 - dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=429)
2024-09-04 20:16:54,784 - stack ['$34binary_subscr.15', '$x36.16', '$const38.17']
2024-09-04 20:16:54,784 - dispatch pc=42, inst=BINARY_SUBTRACT(arg=None, lineno=429)
2024-09-04 20:16:54,784 - stack ['$34binary_subscr.15', '$40binary_subscr.18']
2024-09-04 20:16:54,784 - dispatch pc=44, inst=LOAD_CONST(arg=3, lineno=429)
2024-09-04 20:16:54,784 - stack ['$42binary_subtract.19']
2024-09-04 20:16:54,784 - dispatch pc=46, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=429)
2024-09-04 20:16:54,785 - stack ['$42binary_subtract.19', '$const44.20']
2024-09-04 20:16:54,785 - dispatch pc=48, inst=STORE_FAST(arg=2, lineno=429)
2024-09-04 20:16:54,785 - stack ['$46binary_true_divide.21']
2024-09-04 20:16:54,785 - dispatch pc=50, inst=LOAD_GLOBAL(arg=0, lineno=431)
2024-09-04 20:16:54,785 - stack []
2024-09-04 20:16:54,785 - dispatch pc=52, inst=LOAD_METHOD(arg=1, lineno=431)
2024-09-04 20:16:54,785 - stack ['$50load_global.22']
2024-09-04 20:16:54,785 - dispatch pc=54, inst=LOAD_FAST(arg=2, lineno=431)
2024-09-04 20:16:54,785 - stack ['$52load_method.23']
2024-09-04 20:16:54,785 - dispatch pc=56, inst=CALL_METHOD(arg=1, lineno=431)
2024-09-04 20:16:54,785 - stack ['$52load_method.23', '$b54.24']
2024-09-04 20:16:54,785 - dispatch pc=58, inst=LOAD_GLOBAL(arg=0, lineno=431)
2024-09-04 20:16:54,785 - stack ['$56call_method.25']
2024-09-04 20:16:54,785 - dispatch pc=60, inst=LOAD_METHOD(arg=1, lineno=431)
2024-09-04 20:16:54,786 - stack ['$56call_method.25', '$58load_global.26']
2024-09-04 20:16:54,786 - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=431)
2024-09-04 20:16:54,786 - stack ['$56call_method.25', '$60load_method.27']
2024-09-04 20:16:54,786 - dispatch pc=64, inst=CALL_METHOD(arg=1, lineno=431)
2024-09-04 20:16:54,786 - stack ['$56call_method.25', '$60load_method.27', '$a62.28']
2024-09-04 20:16:54,786 - dispatch pc=66, inst=COMPARE_OP(arg=5, lineno=431)
2024-09-04 20:16:54,786 - stack ['$56call_method.25', '$64call_method.29']
2024-09-04 20:16:54,786 - dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=38, lineno=431)
2024-09-04 20:16:54,786 - stack ['$66compare_op.30']
2024-09-04 20:16:54,786 - end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=74, stack=(), blockstack=(), npush=0)]
2024-09-04 20:16:54,786 - pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=74 nstack_initial=0)])
2024-09-04 20:16:54,786 - stack: []
2024-09-04 20:16:54,786 - state.pc_initial: State(pc_initial=70 nstack_initial=0)
2024-09-04 20:16:54,787 - dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=434)
2024-09-04 20:16:54,787 - stack []
2024-09-04 20:16:54,787 - dispatch pc=72, inst=RETURN_VALUE(arg=None, lineno=434)
2024-09-04 20:16:54,787 - stack ['$const70.0']
2024-09-04 20:16:54,787 - end state. edges=[]
2024-09-04 20:16:54,787 - pending: deque([State(pc_initial=74 nstack_initial=0)])
2024-09-04 20:16:54,787 - stack: []
2024-09-04 20:16:54,787 - state.pc_initial: State(pc_initial=74 nstack_initial=0)
2024-09-04 20:16:54,787 - dispatch pc=74, inst=LOAD_FAST(arg=2, lineno=436)
2024-09-04 20:16:54,787 - stack []
2024-09-04 20:16:54,787 - dispatch pc=76, inst=UNARY_NEGATIVE(arg=None, lineno=436)
2024-09-04 20:16:54,787 - stack ['$b74.0']
2024-09-04 20:16:54,788 - dispatch pc=78, inst=LOAD_FAST(arg=1, lineno=436)
2024-09-04 20:16:54,788 - stack ['$76unary_negative.1']
2024-09-04 20:16:54,788 - dispatch pc=80, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=436)
2024-09-04 20:16:54,788 - stack ['$76unary_negative.1', '$a78.2']
2024-09-04 20:16:54,788 - dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=436)
2024-09-04 20:16:54,788 - stack ['$80binary_true_divide.3']
2024-09-04 20:16:54,788 - end state. edges=[]
2024-09-04 20:16:54,788 - -------------------------Prune PHIs-------------------------
2024-09-04 20:16:54,788 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set()})
2024-09-04 20:16:54,789 - defmap: {}
2024-09-04 20:16:54,789 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 20:16:54,789 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 20:16:54,789 - keep phismap: {}
2024-09-04 20:16:54,789 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 20:16:54,789 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 20:16:54,789 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14binary_add.6'}), (16, {'res': '$const16.7'}), (18, {'res': '$x18.8'}), (20, {'res': '$const20.9'}), (22, {'index': '$const20.9', 'target': '$x18.8', 'res': '$22binary_subscr.10'}), (24, {'lhs': '$const16.7', 'rhs': '$22binary_subscr.10', 'res': '$24binary_multiply.11'}), (26, {'lhs': '$14binary_add.6', 'rhs': '$24binary_multiply.11', 'res': '$26binary_subtract.12'}), (28, {'value': '$26binary_subtract.12'}), (30, {'res': '$x30.13'}), (32, {'res': '$const32.14'}), (34, {'index': '$const32.14', 'target': '$x30.13', 'res': '$34binary_subscr.15'}), (36, {'res': '$x36.16'}), (38, {'res': '$const38.17'}), (40, {'index': '$const38.17', 'target': '$x36.16', 'res': '$40binary_subscr.18'}), (42, {'lhs': '$34binary_subscr.15', 'rhs': '$40binary_subscr.18', 'res': '$42binary_subtract.19'}), (44, {'res': '$const44.20'}), (46, {'lhs': '$42binary_subtract.19', 'rhs': '$const44.20', 'res': '$46binary_true_divide.21'}), (48, {'value': '$46binary_true_divide.21'}), (50, {'res': '$50load_global.22'}), (52, {'item': '$50load_global.22', 'res': '$52load_method.23'}), (54, {'res': '$b54.24'}), (56, {'func': '$52load_method.23', 'args': ['$b54.24'], 'res': '$56call_method.25'}), (58, {'res': '$58load_global.26'}), (60, {'item': '$58load_global.26', 'res': '$60load_method.27'}), (62, {'res': '$a62.28'}), (64, {'func': '$60load_method.27', 'args': ['$a62.28'], 'res': '$64call_method.29'}), (66, {'lhs': '$56call_method.25', 'rhs': '$64call_method.29', 'res': '$66compare_op.30'}), (68, {'pred': '$66compare_op.30'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 74: ()})
2024-09-04 20:16:54,789 - block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$const70.0'}), (72, {'retval': '$const70.0', 'castval': '$72return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 20:16:54,789 - block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$b74.0'}), (76, {'value': '$b74.0', 'res': '$76unary_negative.1'}), (78, {'res': '$a78.2'}), (80, {'lhs': '$76unary_negative.1', 'rhs': '$a78.2', 'res': '$80binary_true_divide.3'}), (82, {'retval': '$80binary_true_divide.3', 'castval': '$82return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 20:16:54,791 - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14binary_add.6 = $6binary_subscr.2 + $12binary_subscr.5 ['$12binary_subscr.5', '$14binary_add.6', '$6binary_subscr.2']
    $const16.7 = const(int, 2)               ['$const16.7']
    $const20.9 = const(int, 0)               ['$const20.9']
    $22binary_subscr.10 = getitem(value=x, index=$const20.9, fn=<built-in function getitem>) ['$22binary_subscr.10', '$const20.9', 'x']
    $24binary_multiply.11 = $const16.7 * $22binary_subscr.10 ['$22binary_subscr.10', '$24binary_multiply.11', '$const16.7']
    a = $14binary_add.6 - $24binary_multiply.11 ['$14binary_add.6', '$24binary_multiply.11', 'a']
    $const32.14 = const(int, 1)              ['$const32.14']
    $34binary_subscr.15 = getitem(value=x, index=$const32.14, fn=<built-in function getitem>) ['$34binary_subscr.15', '$const32.14', 'x']
    $const38.17 = const(int, -1)             ['$const38.17']
    $40binary_subscr.18 = getitem(value=x, index=$const38.17, fn=<built-in function getitem>) ['$40binary_subscr.18', '$const38.17', 'x']
    $42binary_subtract.19 = $34binary_subscr.15 - $40binary_subscr.18 ['$34binary_subscr.15', '$40binary_subscr.18', '$42binary_subtract.19']
    $const44.20 = const(int, 2)              ['$const44.20']
    b = $42binary_subtract.19 / $const44.20  ['$42binary_subtract.19', '$const44.20', 'b']
    $50load_global.22 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$50load_global.22']
    $52load_method.23 = getattr(value=$50load_global.22, attr=abs) ['$50load_global.22', '$52load_method.23']
    $56call_method.25 = call $52load_method.23(b, func=$52load_method.23, args=[Var(b, pitch.py:429)], kws=(), vararg=None, varkwarg=None, target=None) ['$52load_method.23', '$56call_method.25', 'b']
    $58load_global.26 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$58load_global.26']
    $60load_method.27 = getattr(value=$58load_global.26, attr=abs) ['$58load_global.26', '$60load_method.27']
    $64call_method.29 = call $60load_method.27(a, func=$60load_method.27, args=[Var(a, pitch.py:428)], kws=(), vararg=None, varkwarg=None, target=None) ['$60load_method.27', '$64call_method.29', 'a']
    $66compare_op.30 = $56call_method.25 >= $64call_method.29 ['$56call_method.25', '$64call_method.29', '$66compare_op.30']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.30, func=bool68, args=(Var($66compare_op.30, pitch.py:431),), kws=(), vararg=None, varkwarg=None, target=None) ['$66compare_op.30', '$68pred', 'bool68']
    branch $68pred, 70, 74                   ['$68pred']
label 70:
    $const70.0 = const(int, 0)               ['$const70.0']
    $72return_value.1 = cast(value=$const70.0) ['$72return_value.1', '$const70.0']
    return $72return_value.1                 ['$72return_value.1']
label 74:
    $76unary_negative.1 = unary(fn=<built-in function neg>, value=b) ['$76unary_negative.1', 'b']
    $80binary_true_divide.3 = $76unary_negative.1 / a ['$76unary_negative.1', '$80binary_true_divide.3', 'a']
    $82return_value.4 = cast(value=$80binary_true_divide.3) ['$80binary_true_divide.3', '$82return_value.4']
    return $82return_value.4                 ['$82return_value.4']

2024-09-04 20:25:27,026 - bytecode dump:
>          0	NOP(arg=None, lineno=1141)
           2	LOAD_FAST(arg=0, lineno=1144)
           4	LOAD_CONST(arg=1, lineno=1144)
           6	BINARY_SUBSCR(arg=None, lineno=1144)
           8	STORE_FAST(arg=3, lineno=1144)
          10	LOAD_FAST(arg=1, lineno=1145)
          12	UNARY_NEGATIVE(arg=None, lineno=1145)
          14	LOAD_FAST(arg=3, lineno=1145)
          16	DUP_TOP(arg=None, lineno=1145)
          18	ROT_THREE(arg=None, lineno=1145)
          20	COMPARE_OP(arg=1, lineno=1145)
          22	POP_JUMP_IF_FALSE(arg=17, lineno=1145)
          24	LOAD_FAST(arg=1, lineno=1145)
          26	COMPARE_OP(arg=1, lineno=1145)
          28	POP_JUMP_IF_FALSE(arg=21, lineno=1145)
          30	JUMP_FORWARD(arg=2, lineno=1145)
>         32	POP_TOP(arg=None, lineno=1145)
          34	JUMP_FORWARD(arg=2, lineno=1145)
>         36	LOAD_CONST(arg=1, lineno=1146)
          38	STORE_FAST(arg=3, lineno=1146)
>         40	LOAD_FAST(arg=0, lineno=1148)
          42	LOAD_CONST(arg=2, lineno=1148)
          44	BINARY_SUBSCR(arg=None, lineno=1148)
          46	STORE_FAST(arg=4, lineno=1148)
          48	LOAD_FAST(arg=1, lineno=1149)
          50	UNARY_NEGATIVE(arg=None, lineno=1149)
          52	LOAD_FAST(arg=4, lineno=1149)
          54	DUP_TOP(arg=None, lineno=1149)
          56	ROT_THREE(arg=None, lineno=1149)
          58	COMPARE_OP(arg=1, lineno=1149)
          60	POP_JUMP_IF_FALSE(arg=36, lineno=1149)
          62	LOAD_FAST(arg=1, lineno=1149)
          64	COMPARE_OP(arg=1, lineno=1149)
          66	POP_JUMP_IF_FALSE(arg=40, lineno=1149)
          68	JUMP_FORWARD(arg=2, lineno=1149)
>         70	POP_TOP(arg=None, lineno=1149)
          72	JUMP_FORWARD(arg=2, lineno=1149)
>         74	LOAD_CONST(arg=1, lineno=1150)
          76	STORE_FAST(arg=4, lineno=1150)
>         78	LOAD_FAST(arg=2, lineno=1152)
          80	POP_JUMP_IF_FALSE(arg=52, lineno=1152)
          82	LOAD_GLOBAL(arg=0, lineno=1153)
          84	LOAD_METHOD(arg=1, lineno=1153)
          86	LOAD_FAST(arg=3, lineno=1153)
          88	CALL_METHOD(arg=1, lineno=1153)
          90	LOAD_GLOBAL(arg=0, lineno=1153)
          92	LOAD_METHOD(arg=1, lineno=1153)
          94	LOAD_FAST(arg=4, lineno=1153)
          96	CALL_METHOD(arg=1, lineno=1153)
          98	COMPARE_OP(arg=3, lineno=1153)
         100	RETURN_VALUE(arg=None, lineno=1153)
>        102	LOAD_GLOBAL(arg=0, lineno=1155)
         104	LOAD_METHOD(arg=2, lineno=1155)
         106	LOAD_FAST(arg=3, lineno=1155)
         108	CALL_METHOD(arg=1, lineno=1155)
         110	LOAD_GLOBAL(arg=0, lineno=1155)
         112	LOAD_METHOD(arg=2, lineno=1155)
         114	LOAD_FAST(arg=4, lineno=1155)
         116	CALL_METHOD(arg=1, lineno=1155)
         118	COMPARE_OP(arg=3, lineno=1155)
         120	RETURN_VALUE(arg=None, lineno=1155)
2024-09-04 20:25:27,027 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 20:25:27,027 - stack: []
2024-09-04 20:25:27,027 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 20:25:27,027 - dispatch pc=0, inst=NOP(arg=None, lineno=1141)
2024-09-04 20:25:27,027 - stack []
2024-09-04 20:25:27,027 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1144)
2024-09-04 20:25:27,028 - stack []
2024-09-04 20:25:27,028 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1144)
2024-09-04 20:25:27,028 - stack ['$x2.0']
2024-09-04 20:25:27,028 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1144)
2024-09-04 20:25:27,028 - stack ['$x2.0', '$const4.1']
2024-09-04 20:25:27,028 - dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1144)
2024-09-04 20:25:27,028 - stack ['$6binary_subscr.2']
2024-09-04 20:25:27,028 - dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=1145)
2024-09-04 20:25:27,028 - stack []
2024-09-04 20:25:27,028 - dispatch pc=12, inst=UNARY_NEGATIVE(arg=None, lineno=1145)
2024-09-04 20:25:27,028 - stack ['$threshold10.3']
2024-09-04 20:25:27,029 - dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=1145)
2024-09-04 20:25:27,029 - stack ['$12unary_negative.4']
2024-09-04 20:25:27,029 - dispatch pc=16, inst=DUP_TOP(arg=None, lineno=1145)
2024-09-04 20:25:27,029 - stack ['$12unary_negative.4', '$x014.5']
2024-09-04 20:25:27,029 - dispatch pc=18, inst=ROT_THREE(arg=None, lineno=1145)
2024-09-04 20:25:27,029 - stack ['$12unary_negative.4', '$x014.5', '$16dup_top.6']
2024-09-04 20:25:27,029 - dispatch pc=20, inst=COMPARE_OP(arg=1, lineno=1145)
2024-09-04 20:25:27,029 - stack ['$16dup_top.6', '$12unary_negative.4', '$x014.5']
2024-09-04 20:25:27,029 - dispatch pc=22, inst=POP_JUMP_IF_FALSE(arg=17, lineno=1145)
2024-09-04 20:25:27,029 - stack ['$16dup_top.6', '$20compare_op.7']
2024-09-04 20:25:27,029 - end state. edges=[Edge(pc=24, stack=('$16dup_top.6',), blockstack=(), npush=0), Edge(pc=32, stack=('$16dup_top.6',), blockstack=(), npush=0)]
2024-09-04 20:25:27,029 - pending: deque([State(pc_initial=24 nstack_initial=1), State(pc_initial=32 nstack_initial=1)])
2024-09-04 20:25:27,030 - stack: ['$phi24.0']
2024-09-04 20:25:27,030 - state.pc_initial: State(pc_initial=24 nstack_initial=1)
2024-09-04 20:25:27,030 - dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=1145)
2024-09-04 20:25:27,030 - stack ['$phi24.0']
2024-09-04 20:25:27,030 - dispatch pc=26, inst=COMPARE_OP(arg=1, lineno=1145)
2024-09-04 20:25:27,030 - stack ['$phi24.0', '$threshold24.1']
2024-09-04 20:25:27,030 - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=21, lineno=1145)
2024-09-04 20:25:27,030 - stack ['$26compare_op.2']
2024-09-04 20:25:27,030 - end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=40, stack=(), blockstack=(), npush=0)]
2024-09-04 20:25:27,030 - pending: deque([State(pc_initial=32 nstack_initial=1), State(pc_initial=30 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2024-09-04 20:25:27,030 - stack: ['$phi32.0']
2024-09-04 20:25:27,030 - state.pc_initial: State(pc_initial=32 nstack_initial=1)
2024-09-04 20:25:27,030 - dispatch pc=32, inst=POP_TOP(arg=None, lineno=1145)
2024-09-04 20:25:27,031 - stack ['$phi32.0']
2024-09-04 20:25:27,031 - dispatch pc=34, inst=JUMP_FORWARD(arg=2, lineno=1145)
2024-09-04 20:25:27,031 - stack []
2024-09-04 20:25:27,031 - end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2024-09-04 20:25:27,031 - pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2024-09-04 20:25:27,031 - stack: []
2024-09-04 20:25:27,031 - state.pc_initial: State(pc_initial=30 nstack_initial=0)
2024-09-04 20:25:27,031 - dispatch pc=30, inst=JUMP_FORWARD(arg=2, lineno=1145)
2024-09-04 20:25:27,031 - stack []
2024-09-04 20:25:27,031 - end state. edges=[Edge(pc=36, stack=(), blockstack=(), npush=0)]
2024-09-04 20:25:27,031 - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2024-09-04 20:25:27,031 - stack: []
2024-09-04 20:25:27,031 - state.pc_initial: State(pc_initial=40 nstack_initial=0)
2024-09-04 20:25:27,031 - dispatch pc=40, inst=LOAD_FAST(arg=0, lineno=1148)
2024-09-04 20:25:27,032 - stack []
2024-09-04 20:25:27,032 - dispatch pc=42, inst=LOAD_CONST(arg=2, lineno=1148)
2024-09-04 20:25:27,032 - stack ['$x40.0']
2024-09-04 20:25:27,032 - dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=1148)
2024-09-04 20:25:27,032 - stack ['$x40.0', '$const42.1']
2024-09-04 20:25:27,032 - dispatch pc=46, inst=STORE_FAST(arg=4, lineno=1148)
2024-09-04 20:25:27,032 - stack ['$44binary_subscr.2']
2024-09-04 20:25:27,032 - dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=1149)
2024-09-04 20:25:27,032 - stack []
2024-09-04 20:25:27,032 - dispatch pc=50, inst=UNARY_NEGATIVE(arg=None, lineno=1149)
2024-09-04 20:25:27,032 - stack ['$threshold48.3']
2024-09-04 20:25:27,032 - dispatch pc=52, inst=LOAD_FAST(arg=4, lineno=1149)
2024-09-04 20:25:27,033 - stack ['$50unary_negative.4']
2024-09-04 20:25:27,033 - dispatch pc=54, inst=DUP_TOP(arg=None, lineno=1149)
2024-09-04 20:25:27,033 - stack ['$50unary_negative.4', '$x152.5']
2024-09-04 20:25:27,033 - dispatch pc=56, inst=ROT_THREE(arg=None, lineno=1149)
2024-09-04 20:25:27,033 - stack ['$50unary_negative.4', '$x152.5', '$54dup_top.6']
2024-09-04 20:25:27,033 - dispatch pc=58, inst=COMPARE_OP(arg=1, lineno=1149)
2024-09-04 20:25:27,033 - stack ['$54dup_top.6', '$50unary_negative.4', '$x152.5']
2024-09-04 20:25:27,033 - dispatch pc=60, inst=POP_JUMP_IF_FALSE(arg=36, lineno=1149)
2024-09-04 20:25:27,033 - stack ['$54dup_top.6', '$58compare_op.7']
2024-09-04 20:25:27,033 - end state. edges=[Edge(pc=62, stack=('$54dup_top.6',), blockstack=(), npush=0), Edge(pc=70, stack=('$54dup_top.6',), blockstack=(), npush=0)]
2024-09-04 20:25:27,033 - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
2024-09-04 20:25:27,033 - pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
2024-09-04 20:25:27,033 - stack: []
2024-09-04 20:25:27,034 - state.pc_initial: State(pc_initial=36 nstack_initial=0)
2024-09-04 20:25:27,034 - dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=1146)
2024-09-04 20:25:27,034 - stack []
2024-09-04 20:25:27,034 - dispatch pc=38, inst=STORE_FAST(arg=3, lineno=1146)
2024-09-04 20:25:27,034 - stack ['$const36.0']
2024-09-04 20:25:27,034 - end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2024-09-04 20:25:27,034 - pending: deque([State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1), State(pc_initial=40 nstack_initial=0)])
2024-09-04 20:25:27,034 - stack: ['$phi62.0']
2024-09-04 20:25:27,034 - state.pc_initial: State(pc_initial=62 nstack_initial=1)
2024-09-04 20:25:27,034 - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=1149)
2024-09-04 20:25:27,034 - stack ['$phi62.0']
2024-09-04 20:25:27,034 - dispatch pc=64, inst=COMPARE_OP(arg=1, lineno=1149)
2024-09-04 20:25:27,034 - stack ['$phi62.0', '$threshold62.1']
2024-09-04 20:25:27,034 - dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=40, lineno=1149)
2024-09-04 20:25:27,035 - stack ['$64compare_op.2']
2024-09-04 20:25:27,035 - end state. edges=[Edge(pc=68, stack=(), blockstack=(), npush=0), Edge(pc=78, stack=(), blockstack=(), npush=0)]
2024-09-04 20:25:27,035 - pending: deque([State(pc_initial=70 nstack_initial=1), State(pc_initial=40 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-04 20:25:27,035 - stack: ['$phi70.0']
2024-09-04 20:25:27,035 - state.pc_initial: State(pc_initial=70 nstack_initial=1)
2024-09-04 20:25:27,035 - dispatch pc=70, inst=POP_TOP(arg=None, lineno=1149)
2024-09-04 20:25:27,035 - stack ['$phi70.0']
2024-09-04 20:25:27,035 - dispatch pc=72, inst=JUMP_FORWARD(arg=2, lineno=1149)
2024-09-04 20:25:27,035 - stack []
2024-09-04 20:25:27,035 - end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0)]
2024-09-04 20:25:27,035 - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-04 20:25:27,035 - pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-04 20:25:27,035 - stack: []
2024-09-04 20:25:27,036 - state.pc_initial: State(pc_initial=68 nstack_initial=0)
2024-09-04 20:25:27,036 - dispatch pc=68, inst=JUMP_FORWARD(arg=2, lineno=1149)
2024-09-04 20:25:27,036 - stack []
2024-09-04 20:25:27,036 - end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0)]
2024-09-04 20:25:27,036 - pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=74 nstack_initial=0)])
2024-09-04 20:25:27,036 - stack: []
2024-09-04 20:25:27,036 - state.pc_initial: State(pc_initial=78 nstack_initial=0)
2024-09-04 20:25:27,036 - dispatch pc=78, inst=LOAD_FAST(arg=2, lineno=1152)
2024-09-04 20:25:27,036 - stack []
2024-09-04 20:25:27,036 - dispatch pc=80, inst=POP_JUMP_IF_FALSE(arg=52, lineno=1152)
2024-09-04 20:25:27,036 - stack ['$zero_pos78.0']
2024-09-04 20:25:27,036 - end state. edges=[Edge(pc=82, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
2024-09-04 20:25:27,036 - pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2024-09-04 20:25:27,036 - pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2024-09-04 20:25:27,037 - stack: []
2024-09-04 20:25:27,037 - state.pc_initial: State(pc_initial=74 nstack_initial=0)
2024-09-04 20:25:27,037 - dispatch pc=74, inst=LOAD_CONST(arg=1, lineno=1150)
2024-09-04 20:25:27,037 - stack []
2024-09-04 20:25:27,037 - dispatch pc=76, inst=STORE_FAST(arg=4, lineno=1150)
2024-09-04 20:25:27,037 - stack ['$const74.0']
2024-09-04 20:25:27,037 - end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0)]
2024-09-04 20:25:27,037 - pending: deque([State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-04 20:25:27,037 - stack: []
2024-09-04 20:25:27,037 - state.pc_initial: State(pc_initial=82 nstack_initial=0)
2024-09-04 20:25:27,037 - dispatch pc=82, inst=LOAD_GLOBAL(arg=0, lineno=1153)
2024-09-04 20:25:27,037 - stack []
2024-09-04 20:25:27,037 - dispatch pc=84, inst=LOAD_METHOD(arg=1, lineno=1153)
2024-09-04 20:25:27,037 - stack ['$82load_global.0']
2024-09-04 20:25:27,038 - dispatch pc=86, inst=LOAD_FAST(arg=3, lineno=1153)
2024-09-04 20:25:27,038 - stack ['$84load_method.1']
2024-09-04 20:25:27,038 - dispatch pc=88, inst=CALL_METHOD(arg=1, lineno=1153)
2024-09-04 20:25:27,038 - stack ['$84load_method.1', '$x086.2']
2024-09-04 20:25:27,038 - dispatch pc=90, inst=LOAD_GLOBAL(arg=0, lineno=1153)
2024-09-04 20:25:27,038 - stack ['$88call_method.3']
2024-09-04 20:25:27,038 - dispatch pc=92, inst=LOAD_METHOD(arg=1, lineno=1153)
2024-09-04 20:25:27,038 - stack ['$88call_method.3', '$90load_global.4']
2024-09-04 20:25:27,038 - dispatch pc=94, inst=LOAD_FAST(arg=4, lineno=1153)
2024-09-04 20:25:27,038 - stack ['$88call_method.3', '$92load_method.5']
2024-09-04 20:25:27,038 - dispatch pc=96, inst=CALL_METHOD(arg=1, lineno=1153)
2024-09-04 20:25:27,038 - stack ['$88call_method.3', '$92load_method.5', '$x194.6']
2024-09-04 20:25:27,038 - dispatch pc=98, inst=COMPARE_OP(arg=3, lineno=1153)
2024-09-04 20:25:27,039 - stack ['$88call_method.3', '$96call_method.7']
2024-09-04 20:25:27,039 - dispatch pc=100, inst=RETURN_VALUE(arg=None, lineno=1153)
2024-09-04 20:25:27,039 - stack ['$98compare_op.8']
2024-09-04 20:25:27,039 - end state. edges=[]
2024-09-04 20:25:27,039 - pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-04 20:25:27,039 - stack: []
2024-09-04 20:25:27,039 - state.pc_initial: State(pc_initial=102 nstack_initial=0)
2024-09-04 20:25:27,039 - dispatch pc=102, inst=LOAD_GLOBAL(arg=0, lineno=1155)
2024-09-04 20:25:27,039 - stack []
2024-09-04 20:25:27,039 - dispatch pc=104, inst=LOAD_METHOD(arg=2, lineno=1155)
2024-09-04 20:25:27,039 - stack ['$102load_global.0']
2024-09-04 20:25:27,039 - dispatch pc=106, inst=LOAD_FAST(arg=3, lineno=1155)
2024-09-04 20:25:27,039 - stack ['$104load_method.1']
2024-09-04 20:25:27,039 - dispatch pc=108, inst=CALL_METHOD(arg=1, lineno=1155)
2024-09-04 20:25:27,040 - stack ['$104load_method.1', '$x0106.2']
2024-09-04 20:25:27,040 - dispatch pc=110, inst=LOAD_GLOBAL(arg=0, lineno=1155)
2024-09-04 20:25:27,040 - stack ['$108call_method.3']
2024-09-04 20:25:27,040 - dispatch pc=112, inst=LOAD_METHOD(arg=2, lineno=1155)
2024-09-04 20:25:27,040 - stack ['$108call_method.3', '$110load_global.4']
2024-09-04 20:25:27,040 - dispatch pc=114, inst=LOAD_FAST(arg=4, lineno=1155)
2024-09-04 20:25:27,040 - stack ['$108call_method.3', '$112load_method.5']
2024-09-04 20:25:27,040 - dispatch pc=116, inst=CALL_METHOD(arg=1, lineno=1155)
2024-09-04 20:25:27,040 - stack ['$108call_method.3', '$112load_method.5', '$x1114.6']
2024-09-04 20:25:27,040 - dispatch pc=118, inst=COMPARE_OP(arg=3, lineno=1155)
2024-09-04 20:25:27,040 - stack ['$108call_method.3', '$116call_method.7']
2024-09-04 20:25:27,040 - dispatch pc=120, inst=RETURN_VALUE(arg=None, lineno=1155)
2024-09-04 20:25:27,041 - stack ['$118compare_op.8']
2024-09-04 20:25:27,041 - end state. edges=[]
2024-09-04 20:25:27,041 - pending: deque([State(pc_initial=78 nstack_initial=0)])
2024-09-04 20:25:27,041 - -------------------------Prune PHIs-------------------------
2024-09-04 20:25:27,041 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=1): {'$phi24.0'},
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=1): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=1): {'$phi62.0'},
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=1): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=82 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set()})
2024-09-04 20:25:27,041 - defmap: {'$phi24.0': State(pc_initial=0 nstack_initial=0),
 '$phi32.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.0': State(pc_initial=40 nstack_initial=0),
 '$phi70.0': State(pc_initial=40 nstack_initial=0)}
2024-09-04 20:25:27,041 - phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))},
             '$phi70.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))}})
2024-09-04 20:25:27,042 - changing phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))},
             '$phi70.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))}})
2024-09-04 20:25:27,042 - keep phismap: {'$phi24.0': {('$16dup_top.6', State(pc_initial=0 nstack_initial=0))},
 '$phi62.0': {('$54dup_top.6', State(pc_initial=40 nstack_initial=0))}}
2024-09-04 20:25:27,042 - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi24.0': '$16dup_top.6'},
             State(pc_initial=40 nstack_initial=0): {'$phi62.0': '$54dup_top.6'}})
2024-09-04 20:25:27,043 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 20:25:27,043 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'value': '$6binary_subscr.2'}), (10, {'res': '$threshold10.3'}), (12, {'value': '$threshold10.3', 'res': '$12unary_negative.4'}), (14, {'res': '$x014.5'}), (16, {'orig': ['$x014.5'], 'duped': ['$16dup_top.6']}), (20, {'lhs': '$12unary_negative.4', 'rhs': '$x014.5', 'res': '$20compare_op.7'}), (22, {'pred': '$20compare_op.7'})), outgoing_phis={'$phi24.0': '$16dup_top.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={24: ('$16dup_top.6',), 32: ('$16dup_top.6',)})
2024-09-04 20:25:27,043 - block_infos State(pc_initial=24 nstack_initial=1):
AdaptBlockInfo(insts=((24, {'res': '$threshold24.1'}), (26, {'lhs': '$phi24.0', 'rhs': '$threshold24.1', 'res': '$26compare_op.2'}), (28, {'pred': '$26compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 40: ()})
2024-09-04 20:25:27,043 - block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ()})
2024-09-04 20:25:27,043 - block_infos State(pc_initial=32 nstack_initial=1):
AdaptBlockInfo(insts=((34, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2024-09-04 20:25:27,043 - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$const36.0'}), (38, {'value': '$const36.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2024-09-04 20:25:27,043 - block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$x40.0'}), (42, {'res': '$const42.1'}), (44, {'index': '$const42.1', 'target': '$x40.0', 'res': '$44binary_subscr.2'}), (46, {'value': '$44binary_subscr.2'}), (48, {'res': '$threshold48.3'}), (50, {'value': '$threshold48.3', 'res': '$50unary_negative.4'}), (52, {'res': '$x152.5'}), (54, {'orig': ['$x152.5'], 'duped': ['$54dup_top.6']}), (58, {'lhs': '$50unary_negative.4', 'rhs': '$x152.5', 'res': '$58compare_op.7'}), (60, {'pred': '$58compare_op.7'})), outgoing_phis={'$phi62.0': '$54dup_top.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ('$54dup_top.6',), 70: ('$54dup_top.6',)})
2024-09-04 20:25:27,043 - block_infos State(pc_initial=62 nstack_initial=1):
AdaptBlockInfo(insts=((62, {'res': '$threshold62.1'}), (64, {'lhs': '$phi62.0', 'rhs': '$threshold62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={68: (), 78: ()})
2024-09-04 20:25:27,043 - block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: ()})
2024-09-04 20:25:27,044 - block_infos State(pc_initial=70 nstack_initial=1):
AdaptBlockInfo(insts=((72, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: ()})
2024-09-04 20:25:27,044 - block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$const74.0'}), (76, {'value': '$const74.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: ()})
2024-09-04 20:25:27,044 - block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$zero_pos78.0'}), (80, {'pred': '$zero_pos78.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: (), 102: ()})
2024-09-04 20:25:27,044 - block_infos State(pc_initial=82 nstack_initial=0):
AdaptBlockInfo(insts=((82, {'res': '$82load_global.0'}), (84, {'item': '$82load_global.0', 'res': '$84load_method.1'}), (86, {'res': '$x086.2'}), (88, {'func': '$84load_method.1', 'args': ['$x086.2'], 'res': '$88call_method.3'}), (90, {'res': '$90load_global.4'}), (92, {'item': '$90load_global.4', 'res': '$92load_method.5'}), (94, {'res': '$x194.6'}), (96, {'func': '$92load_method.5', 'args': ['$x194.6'], 'res': '$96call_method.7'}), (98, {'lhs': '$88call_method.3', 'rhs': '$96call_method.7', 'res': '$98compare_op.8'}), (100, {'retval': '$98compare_op.8', 'castval': '$100return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 20:25:27,044 - block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$102load_global.0'}), (104, {'item': '$102load_global.0', 'res': '$104load_method.1'}), (106, {'res': '$x0106.2'}), (108, {'func': '$104load_method.1', 'args': ['$x0106.2'], 'res': '$108call_method.3'}), (110, {'res': '$110load_global.4'}), (112, {'item': '$110load_global.4', 'res': '$112load_method.5'}), (114, {'res': '$x1114.6'}), (116, {'func': '$112load_method.5', 'args': ['$x1114.6'], 'res': '$116call_method.7'}), (118, {'lhs': '$108call_method.3', 'rhs': '$116call_method.7', 'res': '$118compare_op.8'}), (120, {'retval': '$118compare_op.8', 'castval': '$120return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 20:25:27,047 - label 0:
    x = arg(0, name=x)                       ['x']
    threshold = arg(1, name=threshold)       ['threshold']
    zero_pos = arg(2, name=zero_pos)         ['zero_pos']
    $const4.1 = const(int, 0)                ['$const4.1']
    x0 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$const4.1', 'x', 'x0']
    $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$12unary_negative.4', 'threshold']
    $20compare_op.7 = $12unary_negative.4 <= x0 ['$12unary_negative.4', '$20compare_op.7', 'x0']
    bool22 = global(bool: <class 'bool'>)    ['bool22']
    $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None) ['$20compare_op.7', '$22pred', 'bool22']
    $phi24.0 = x0                            ['$phi24.0', 'x0']
    branch $22pred, 24, 32                   ['$22pred']
label 24:
    $26compare_op.2 = $phi24.0 <= threshold  ['$26compare_op.2', '$phi24.0', 'threshold']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.2', '$28pred', 'bool28']
    branch $28pred, 30, 40                   ['$28pred']
label 30:
    jump 36                                  []
label 32:
    jump 40                                  []
label 36:
    x0 = const(int, 0)                       ['x0']
    jump 40                                  []
label 40:
    $const42.1 = const(int, -1)              ['$const42.1']
    x1 = getitem(value=x, index=$const42.1, fn=<built-in function getitem>) ['$const42.1', 'x', 'x1']
    $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$50unary_negative.4', 'threshold']
    $58compare_op.7 = $50unary_negative.4 <= x1 ['$50unary_negative.4', '$58compare_op.7', 'x1']
    bool60 = global(bool: <class 'bool'>)    ['bool60']
    $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None) ['$58compare_op.7', '$60pred', 'bool60']
    $phi62.0 = x1                            ['$phi62.0', 'x1']
    branch $60pred, 62, 70                   ['$60pred']
label 62:
    $64compare_op.2 = $phi62.0 <= threshold  ['$64compare_op.2', '$phi62.0', 'threshold']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 78                   ['$66pred']
label 68:
    jump 74                                  []
label 70:
    jump 78                                  []
label 74:
    x1 = const(int, 0)                       ['x1']
    jump 78                                  []
label 78:
    bool80 = global(bool: <class 'bool'>)    ['bool80']
    $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None) ['$80pred', 'bool80', 'zero_pos']
    branch $80pred, 82, 102                  ['$80pred']
label 82:
    $82load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$82load_global.0']
    $84load_method.1 = getattr(value=$82load_global.0, attr=signbit) ['$82load_global.0', '$84load_method.1']
    $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None) ['$84load_method.1', '$88call_method.3', 'x0']
    $90load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$90load_global.4']
    $92load_method.5 = getattr(value=$90load_global.4, attr=signbit) ['$90load_global.4', '$92load_method.5']
    $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None) ['$92load_method.5', '$96call_method.7', 'x1']
    $98compare_op.8 = $88call_method.3 != $96call_method.7 ['$88call_method.3', '$96call_method.7', '$98compare_op.8']
    $100return_value.9 = cast(value=$98compare_op.8) ['$100return_value.9', '$98compare_op.8']
    return $100return_value.9                ['$100return_value.9']
label 102:
    $102load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$102load_global.0']
    $104load_method.1 = getattr(value=$102load_global.0, attr=sign) ['$102load_global.0', '$104load_method.1']
    $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None) ['$104load_method.1', '$108call_method.3', 'x0']
    $110load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$110load_global.4']
    $112load_method.5 = getattr(value=$110load_global.4, attr=sign) ['$110load_global.4', '$112load_method.5']
    $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None) ['$112load_method.5', '$116call_method.7', 'x1']
    $118compare_op.8 = $108call_method.3 != $116call_method.7 ['$108call_method.3', '$116call_method.7', '$118compare_op.8']
    $120return_value.9 = cast(value=$118compare_op.8) ['$118compare_op.8', '$120return_value.9']
    return $120return_value.9                ['$120return_value.9']

2024-09-04 20:25:27,649 - bytecode dump:
>          0	NOP(arg=None, lineno=1039)
           2	LOAD_FAST(arg=0, lineno=1042)
           4	LOAD_CONST(arg=1, lineno=1042)
           6	BINARY_SUBSCR(arg=None, lineno=1042)
           8	LOAD_FAST(arg=0, lineno=1042)
          10	LOAD_CONST(arg=2, lineno=1042)
          12	BINARY_SUBSCR(arg=None, lineno=1042)
          14	COMPARE_OP(arg=4, lineno=1042)
          16	LOAD_FAST(arg=0, lineno=1042)
          18	LOAD_CONST(arg=1, lineno=1042)
          20	BINARY_SUBSCR(arg=None, lineno=1042)
          22	LOAD_FAST(arg=0, lineno=1042)
          24	LOAD_CONST(arg=3, lineno=1042)
          26	BINARY_SUBSCR(arg=None, lineno=1042)
          28	COMPARE_OP(arg=5, lineno=1042)
          30	BINARY_AND(arg=None, lineno=1042)
          32	RETURN_VALUE(arg=None, lineno=1042)
2024-09-04 20:25:27,649 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 20:25:27,649 - stack: []
2024-09-04 20:25:27,649 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 20:25:27,649 - dispatch pc=0, inst=NOP(arg=None, lineno=1039)
2024-09-04 20:25:27,649 - stack []
2024-09-04 20:25:27,649 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-04 20:25:27,649 - stack []
2024-09-04 20:25:27,650 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1042)
2024-09-04 20:25:27,650 - stack ['$x2.0']
2024-09-04 20:25:27,650 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-04 20:25:27,650 - stack ['$x2.0', '$const4.1']
2024-09-04 20:25:27,650 - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-04 20:25:27,650 - stack ['$6binary_subscr.2']
2024-09-04 20:25:27,650 - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1042)
2024-09-04 20:25:27,650 - stack ['$6binary_subscr.2', '$x8.3']
2024-09-04 20:25:27,650 - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-04 20:25:27,650 - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2024-09-04 20:25:27,650 - dispatch pc=14, inst=COMPARE_OP(arg=4, lineno=1042)
2024-09-04 20:25:27,650 - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2024-09-04 20:25:27,650 - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-04 20:25:27,651 - stack ['$14compare_op.6']
2024-09-04 20:25:27,651 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1042)
2024-09-04 20:25:27,651 - stack ['$14compare_op.6', '$x16.7']
2024-09-04 20:25:27,651 - dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-04 20:25:27,651 - stack ['$14compare_op.6', '$x16.7', '$const18.8']
2024-09-04 20:25:27,651 - dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-04 20:25:27,651 - stack ['$14compare_op.6', '$20binary_subscr.9']
2024-09-04 20:25:27,651 - dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=1042)
2024-09-04 20:25:27,651 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10']
2024-09-04 20:25:27,651 - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-04 20:25:27,651 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10', '$const24.11']
2024-09-04 20:25:27,651 - dispatch pc=28, inst=COMPARE_OP(arg=5, lineno=1042)
2024-09-04 20:25:27,651 - stack ['$14compare_op.6', '$20binary_subscr.9', '$26binary_subscr.12']
2024-09-04 20:25:27,652 - dispatch pc=30, inst=BINARY_AND(arg=None, lineno=1042)
2024-09-04 20:25:27,652 - stack ['$14compare_op.6', '$28compare_op.13']
2024-09-04 20:25:27,652 - dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1042)
2024-09-04 20:25:27,652 - stack ['$30binary_and.14']
2024-09-04 20:25:27,652 - end state. edges=[]
2024-09-04 20:25:27,652 - -------------------------Prune PHIs-------------------------
2024-09-04 20:25:27,652 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 20:25:27,652 - defmap: {}
2024-09-04 20:25:27,652 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 20:25:27,652 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 20:25:27,652 - keep phismap: {}
2024-09-04 20:25:27,652 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 20:25:27,653 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 20:25:27,653 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14compare_op.6'}), (16, {'res': '$x16.7'}), (18, {'res': '$const18.8'}), (20, {'index': '$const18.8', 'target': '$x16.7', 'res': '$20binary_subscr.9'}), (22, {'res': '$x22.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$x22.10', 'res': '$26binary_subscr.12'}), (28, {'lhs': '$20binary_subscr.9', 'rhs': '$26binary_subscr.12', 'res': '$28compare_op.13'}), (30, {'lhs': '$14compare_op.6', 'rhs': '$28compare_op.13', 'res': '$30binary_and.14'}), (32, {'retval': '$30binary_and.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 20:25:27,653 - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14compare_op.6 = $6binary_subscr.2 > $12binary_subscr.5 ['$12binary_subscr.5', '$14compare_op.6', '$6binary_subscr.2']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20binary_subscr.9 = getitem(value=x, index=$const18.8, fn=<built-in function getitem>) ['$20binary_subscr.9', '$const18.8', 'x']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=x, index=$const24.11, fn=<built-in function getitem>) ['$26binary_subscr.12', '$const24.11', 'x']
    $28compare_op.13 = $20binary_subscr.9 >= $26binary_subscr.12 ['$20binary_subscr.9', '$26binary_subscr.12', '$28compare_op.13']
    $30binary_and.14 = $14compare_op.6 & $28compare_op.13 ['$14compare_op.6', '$28compare_op.13', '$30binary_and.14']
    $32return_value.15 = cast(value=$30binary_and.14) ['$30binary_and.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

2024-09-04 20:25:27,655 - bytecode dump:
>          0	NOP(arg=None, lineno=1045)
           2	LOAD_FAST(arg=0, lineno=1048)
           4	LOAD_CONST(arg=1, lineno=1048)
           6	BINARY_SUBSCR(arg=None, lineno=1048)
           8	LOAD_FAST(arg=0, lineno=1048)
          10	LOAD_CONST(arg=2, lineno=1048)
          12	BINARY_SUBSCR(arg=None, lineno=1048)
          14	COMPARE_OP(arg=0, lineno=1048)
          16	LOAD_FAST(arg=0, lineno=1048)
          18	LOAD_CONST(arg=1, lineno=1048)
          20	BINARY_SUBSCR(arg=None, lineno=1048)
          22	LOAD_FAST(arg=0, lineno=1048)
          24	LOAD_CONST(arg=3, lineno=1048)
          26	BINARY_SUBSCR(arg=None, lineno=1048)
          28	COMPARE_OP(arg=1, lineno=1048)
          30	BINARY_AND(arg=None, lineno=1048)
          32	RETURN_VALUE(arg=None, lineno=1048)
2024-09-04 20:25:27,655 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 20:25:27,655 - stack: []
2024-09-04 20:25:27,655 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 20:25:27,655 - dispatch pc=0, inst=NOP(arg=None, lineno=1045)
2024-09-04 20:25:27,655 - stack []
2024-09-04 20:25:27,655 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-04 20:25:27,655 - stack []
2024-09-04 20:25:27,655 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1048)
2024-09-04 20:25:27,655 - stack ['$x2.0']
2024-09-04 20:25:27,655 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-04 20:25:27,655 - stack ['$x2.0', '$const4.1']
2024-09-04 20:25:27,655 - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-04 20:25:27,656 - stack ['$6binary_subscr.2']
2024-09-04 20:25:27,656 - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1048)
2024-09-04 20:25:27,656 - stack ['$6binary_subscr.2', '$x8.3']
2024-09-04 20:25:27,656 - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-04 20:25:27,656 - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2024-09-04 20:25:27,656 - dispatch pc=14, inst=COMPARE_OP(arg=0, lineno=1048)
2024-09-04 20:25:27,656 - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2024-09-04 20:25:27,656 - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-04 20:25:27,656 - stack ['$14compare_op.6']
2024-09-04 20:25:27,656 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1048)
2024-09-04 20:25:27,656 - stack ['$14compare_op.6', '$x16.7']
2024-09-04 20:25:27,656 - dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-04 20:25:27,656 - stack ['$14compare_op.6', '$x16.7', '$const18.8']
2024-09-04 20:25:27,657 - dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-04 20:25:27,657 - stack ['$14compare_op.6', '$20binary_subscr.9']
2024-09-04 20:25:27,657 - dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=1048)
2024-09-04 20:25:27,657 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10']
2024-09-04 20:25:27,657 - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-04 20:25:27,657 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10', '$const24.11']
2024-09-04 20:25:27,657 - dispatch pc=28, inst=COMPARE_OP(arg=1, lineno=1048)
2024-09-04 20:25:27,657 - stack ['$14compare_op.6', '$20binary_subscr.9', '$26binary_subscr.12']
2024-09-04 20:25:27,657 - dispatch pc=30, inst=BINARY_AND(arg=None, lineno=1048)
2024-09-04 20:25:27,657 - stack ['$14compare_op.6', '$28compare_op.13']
2024-09-04 20:25:27,657 - dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1048)
2024-09-04 20:25:27,657 - stack ['$30binary_and.14']
2024-09-04 20:25:27,658 - end state. edges=[]
2024-09-04 20:25:27,658 - -------------------------Prune PHIs-------------------------
2024-09-04 20:25:27,658 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-04 20:25:27,658 - defmap: {}
2024-09-04 20:25:27,658 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 20:25:27,658 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 20:25:27,658 - keep phismap: {}
2024-09-04 20:25:27,658 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 20:25:27,658 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 20:25:27,658 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14compare_op.6'}), (16, {'res': '$x16.7'}), (18, {'res': '$const18.8'}), (20, {'index': '$const18.8', 'target': '$x16.7', 'res': '$20binary_subscr.9'}), (22, {'res': '$x22.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$x22.10', 'res': '$26binary_subscr.12'}), (28, {'lhs': '$20binary_subscr.9', 'rhs': '$26binary_subscr.12', 'res': '$28compare_op.13'}), (30, {'lhs': '$14compare_op.6', 'rhs': '$28compare_op.13', 'res': '$30binary_and.14'}), (32, {'retval': '$30binary_and.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 20:25:27,659 - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14compare_op.6 = $6binary_subscr.2 < $12binary_subscr.5 ['$12binary_subscr.5', '$14compare_op.6', '$6binary_subscr.2']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20binary_subscr.9 = getitem(value=x, index=$const18.8, fn=<built-in function getitem>) ['$20binary_subscr.9', '$const18.8', 'x']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=x, index=$const24.11, fn=<built-in function getitem>) ['$26binary_subscr.12', '$const24.11', 'x']
    $28compare_op.13 = $20binary_subscr.9 <= $26binary_subscr.12 ['$20binary_subscr.9', '$26binary_subscr.12', '$28compare_op.13']
    $30binary_and.14 = $14compare_op.6 & $28compare_op.13 ['$14compare_op.6', '$28compare_op.13', '$30binary_and.14']
    $32return_value.15 = cast(value=$30binary_and.14) ['$30binary_and.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

2024-09-04 20:25:28,151 - bytecode dump:
>          0	NOP(arg=None, lineno=425)
           2	LOAD_FAST(arg=0, lineno=428)
           4	LOAD_CONST(arg=1, lineno=428)
           6	BINARY_SUBSCR(arg=None, lineno=428)
           8	LOAD_FAST(arg=0, lineno=428)
          10	LOAD_CONST(arg=2, lineno=428)
          12	BINARY_SUBSCR(arg=None, lineno=428)
          14	BINARY_ADD(arg=None, lineno=428)
          16	LOAD_CONST(arg=3, lineno=428)
          18	LOAD_FAST(arg=0, lineno=428)
          20	LOAD_CONST(arg=4, lineno=428)
          22	BINARY_SUBSCR(arg=None, lineno=428)
          24	BINARY_MULTIPLY(arg=None, lineno=428)
          26	BINARY_SUBTRACT(arg=None, lineno=428)
          28	STORE_FAST(arg=1, lineno=428)
          30	LOAD_FAST(arg=0, lineno=429)
          32	LOAD_CONST(arg=1, lineno=429)
          34	BINARY_SUBSCR(arg=None, lineno=429)
          36	LOAD_FAST(arg=0, lineno=429)
          38	LOAD_CONST(arg=2, lineno=429)
          40	BINARY_SUBSCR(arg=None, lineno=429)
          42	BINARY_SUBTRACT(arg=None, lineno=429)
          44	LOAD_CONST(arg=3, lineno=429)
          46	BINARY_TRUE_DIVIDE(arg=None, lineno=429)
          48	STORE_FAST(arg=2, lineno=429)
          50	LOAD_GLOBAL(arg=0, lineno=431)
          52	LOAD_METHOD(arg=1, lineno=431)
          54	LOAD_FAST(arg=2, lineno=431)
          56	CALL_METHOD(arg=1, lineno=431)
          58	LOAD_GLOBAL(arg=0, lineno=431)
          60	LOAD_METHOD(arg=1, lineno=431)
          62	LOAD_FAST(arg=1, lineno=431)
          64	CALL_METHOD(arg=1, lineno=431)
          66	COMPARE_OP(arg=5, lineno=431)
          68	POP_JUMP_IF_FALSE(arg=38, lineno=431)
          70	LOAD_CONST(arg=4, lineno=434)
          72	RETURN_VALUE(arg=None, lineno=434)
>         74	LOAD_FAST(arg=2, lineno=436)
          76	UNARY_NEGATIVE(arg=None, lineno=436)
          78	LOAD_FAST(arg=1, lineno=436)
          80	BINARY_TRUE_DIVIDE(arg=None, lineno=436)
          82	RETURN_VALUE(arg=None, lineno=436)
2024-09-04 20:25:28,151 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-04 20:25:28,151 - stack: []
2024-09-04 20:25:28,151 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-04 20:25:28,151 - dispatch pc=0, inst=NOP(arg=None, lineno=425)
2024-09-04 20:25:28,151 - stack []
2024-09-04 20:25:28,151 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=428)
2024-09-04 20:25:28,152 - stack []
2024-09-04 20:25:28,152 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=428)
2024-09-04 20:25:28,152 - stack ['$x2.0']
2024-09-04 20:25:28,152 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=428)
2024-09-04 20:25:28,152 - stack ['$x2.0', '$const4.1']
2024-09-04 20:25:28,152 - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=428)
2024-09-04 20:25:28,152 - stack ['$6binary_subscr.2']
2024-09-04 20:25:28,152 - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=428)
2024-09-04 20:25:28,152 - stack ['$6binary_subscr.2', '$x8.3']
2024-09-04 20:25:28,152 - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=428)
2024-09-04 20:25:28,152 - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2024-09-04 20:25:28,152 - dispatch pc=14, inst=BINARY_ADD(arg=None, lineno=428)
2024-09-04 20:25:28,152 - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2024-09-04 20:25:28,153 - dispatch pc=16, inst=LOAD_CONST(arg=3, lineno=428)
2024-09-04 20:25:28,153 - stack ['$14binary_add.6']
2024-09-04 20:25:28,153 - dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=428)
2024-09-04 20:25:28,153 - stack ['$14binary_add.6', '$const16.7']
2024-09-04 20:25:28,153 - dispatch pc=20, inst=LOAD_CONST(arg=4, lineno=428)
2024-09-04 20:25:28,153 - stack ['$14binary_add.6', '$const16.7', '$x18.8']
2024-09-04 20:25:28,153 - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=428)
2024-09-04 20:25:28,153 - stack ['$14binary_add.6', '$const16.7', '$x18.8', '$const20.9']
2024-09-04 20:25:28,153 - dispatch pc=24, inst=BINARY_MULTIPLY(arg=None, lineno=428)
2024-09-04 20:25:28,153 - stack ['$14binary_add.6', '$const16.7', '$22binary_subscr.10']
2024-09-04 20:25:28,153 - dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=428)
2024-09-04 20:25:28,153 - stack ['$14binary_add.6', '$24binary_multiply.11']
2024-09-04 20:25:28,153 - dispatch pc=28, inst=STORE_FAST(arg=1, lineno=428)
2024-09-04 20:25:28,153 - stack ['$26binary_subtract.12']
2024-09-04 20:25:28,154 - dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=429)
2024-09-04 20:25:28,154 - stack []
2024-09-04 20:25:28,154 - dispatch pc=32, inst=LOAD_CONST(arg=1, lineno=429)
2024-09-04 20:25:28,154 - stack ['$x30.13']
2024-09-04 20:25:28,154 - dispatch pc=34, inst=BINARY_SUBSCR(arg=None, lineno=429)
2024-09-04 20:25:28,154 - stack ['$x30.13', '$const32.14']
2024-09-04 20:25:28,154 - dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=429)
2024-09-04 20:25:28,154 - stack ['$34binary_subscr.15']
2024-09-04 20:25:28,154 - dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=429)
2024-09-04 20:25:28,154 - stack ['$34binary_subscr.15', '$x36.16']
2024-09-04 20:25:28,154 - dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=429)
2024-09-04 20:25:28,154 - stack ['$34binary_subscr.15', '$x36.16', '$const38.17']
2024-09-04 20:25:28,154 - dispatch pc=42, inst=BINARY_SUBTRACT(arg=None, lineno=429)
2024-09-04 20:25:28,155 - stack ['$34binary_subscr.15', '$40binary_subscr.18']
2024-09-04 20:25:28,155 - dispatch pc=44, inst=LOAD_CONST(arg=3, lineno=429)
2024-09-04 20:25:28,155 - stack ['$42binary_subtract.19']
2024-09-04 20:25:28,155 - dispatch pc=46, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=429)
2024-09-04 20:25:28,155 - stack ['$42binary_subtract.19', '$const44.20']
2024-09-04 20:25:28,155 - dispatch pc=48, inst=STORE_FAST(arg=2, lineno=429)
2024-09-04 20:25:28,155 - stack ['$46binary_true_divide.21']
2024-09-04 20:25:28,155 - dispatch pc=50, inst=LOAD_GLOBAL(arg=0, lineno=431)
2024-09-04 20:25:28,155 - stack []
2024-09-04 20:25:28,155 - dispatch pc=52, inst=LOAD_METHOD(arg=1, lineno=431)
2024-09-04 20:25:28,155 - stack ['$50load_global.22']
2024-09-04 20:25:28,155 - dispatch pc=54, inst=LOAD_FAST(arg=2, lineno=431)
2024-09-04 20:25:28,155 - stack ['$52load_method.23']
2024-09-04 20:25:28,155 - dispatch pc=56, inst=CALL_METHOD(arg=1, lineno=431)
2024-09-04 20:25:28,156 - stack ['$52load_method.23', '$b54.24']
2024-09-04 20:25:28,156 - dispatch pc=58, inst=LOAD_GLOBAL(arg=0, lineno=431)
2024-09-04 20:25:28,156 - stack ['$56call_method.25']
2024-09-04 20:25:28,156 - dispatch pc=60, inst=LOAD_METHOD(arg=1, lineno=431)
2024-09-04 20:25:28,156 - stack ['$56call_method.25', '$58load_global.26']
2024-09-04 20:25:28,156 - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=431)
2024-09-04 20:25:28,156 - stack ['$56call_method.25', '$60load_method.27']
2024-09-04 20:25:28,156 - dispatch pc=64, inst=CALL_METHOD(arg=1, lineno=431)
2024-09-04 20:25:28,156 - stack ['$56call_method.25', '$60load_method.27', '$a62.28']
2024-09-04 20:25:28,156 - dispatch pc=66, inst=COMPARE_OP(arg=5, lineno=431)
2024-09-04 20:25:28,156 - stack ['$56call_method.25', '$64call_method.29']
2024-09-04 20:25:28,156 - dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=38, lineno=431)
2024-09-04 20:25:28,156 - stack ['$66compare_op.30']
2024-09-04 20:25:28,157 - end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=74, stack=(), blockstack=(), npush=0)]
2024-09-04 20:25:28,157 - pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=74 nstack_initial=0)])
2024-09-04 20:25:28,157 - stack: []
2024-09-04 20:25:28,157 - state.pc_initial: State(pc_initial=70 nstack_initial=0)
2024-09-04 20:25:28,157 - dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=434)
2024-09-04 20:25:28,157 - stack []
2024-09-04 20:25:28,157 - dispatch pc=72, inst=RETURN_VALUE(arg=None, lineno=434)
2024-09-04 20:25:28,157 - stack ['$const70.0']
2024-09-04 20:25:28,157 - end state. edges=[]
2024-09-04 20:25:28,157 - pending: deque([State(pc_initial=74 nstack_initial=0)])
2024-09-04 20:25:28,157 - stack: []
2024-09-04 20:25:28,157 - state.pc_initial: State(pc_initial=74 nstack_initial=0)
2024-09-04 20:25:28,157 - dispatch pc=74, inst=LOAD_FAST(arg=2, lineno=436)
2024-09-04 20:25:28,157 - stack []
2024-09-04 20:25:28,157 - dispatch pc=76, inst=UNARY_NEGATIVE(arg=None, lineno=436)
2024-09-04 20:25:28,158 - stack ['$b74.0']
2024-09-04 20:25:28,158 - dispatch pc=78, inst=LOAD_FAST(arg=1, lineno=436)
2024-09-04 20:25:28,158 - stack ['$76unary_negative.1']
2024-09-04 20:25:28,158 - dispatch pc=80, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=436)
2024-09-04 20:25:28,158 - stack ['$76unary_negative.1', '$a78.2']
2024-09-04 20:25:28,158 - dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=436)
2024-09-04 20:25:28,158 - stack ['$80binary_true_divide.3']
2024-09-04 20:25:28,158 - end state. edges=[]
2024-09-04 20:25:28,158 - -------------------------Prune PHIs-------------------------
2024-09-04 20:25:28,158 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set()})
2024-09-04 20:25:28,158 - defmap: {}
2024-09-04 20:25:28,159 - phismap: defaultdict(<class 'set'>, {})
2024-09-04 20:25:28,159 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-04 20:25:28,159 - keep phismap: {}
2024-09-04 20:25:28,159 - new_out: defaultdict(<class 'dict'>, {})
2024-09-04 20:25:28,159 - ----------------------DONE Prune PHIs-----------------------
2024-09-04 20:25:28,159 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14binary_add.6'}), (16, {'res': '$const16.7'}), (18, {'res': '$x18.8'}), (20, {'res': '$const20.9'}), (22, {'index': '$const20.9', 'target': '$x18.8', 'res': '$22binary_subscr.10'}), (24, {'lhs': '$const16.7', 'rhs': '$22binary_subscr.10', 'res': '$24binary_multiply.11'}), (26, {'lhs': '$14binary_add.6', 'rhs': '$24binary_multiply.11', 'res': '$26binary_subtract.12'}), (28, {'value': '$26binary_subtract.12'}), (30, {'res': '$x30.13'}), (32, {'res': '$const32.14'}), (34, {'index': '$const32.14', 'target': '$x30.13', 'res': '$34binary_subscr.15'}), (36, {'res': '$x36.16'}), (38, {'res': '$const38.17'}), (40, {'index': '$const38.17', 'target': '$x36.16', 'res': '$40binary_subscr.18'}), (42, {'lhs': '$34binary_subscr.15', 'rhs': '$40binary_subscr.18', 'res': '$42binary_subtract.19'}), (44, {'res': '$const44.20'}), (46, {'lhs': '$42binary_subtract.19', 'rhs': '$const44.20', 'res': '$46binary_true_divide.21'}), (48, {'value': '$46binary_true_divide.21'}), (50, {'res': '$50load_global.22'}), (52, {'item': '$50load_global.22', 'res': '$52load_method.23'}), (54, {'res': '$b54.24'}), (56, {'func': '$52load_method.23', 'args': ['$b54.24'], 'res': '$56call_method.25'}), (58, {'res': '$58load_global.26'}), (60, {'item': '$58load_global.26', 'res': '$60load_method.27'}), (62, {'res': '$a62.28'}), (64, {'func': '$60load_method.27', 'args': ['$a62.28'], 'res': '$64call_method.29'}), (66, {'lhs': '$56call_method.25', 'rhs': '$64call_method.29', 'res': '$66compare_op.30'}), (68, {'pred': '$66compare_op.30'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 74: ()})
2024-09-04 20:25:28,159 - block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$const70.0'}), (72, {'retval': '$const70.0', 'castval': '$72return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 20:25:28,159 - block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$b74.0'}), (76, {'value': '$b74.0', 'res': '$76unary_negative.1'}), (78, {'res': '$a78.2'}), (80, {'lhs': '$76unary_negative.1', 'rhs': '$a78.2', 'res': '$80binary_true_divide.3'}), (82, {'retval': '$80binary_true_divide.3', 'castval': '$82return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-04 20:25:28,162 - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14binary_add.6 = $6binary_subscr.2 + $12binary_subscr.5 ['$12binary_subscr.5', '$14binary_add.6', '$6binary_subscr.2']
    $const16.7 = const(int, 2)               ['$const16.7']
    $const20.9 = const(int, 0)               ['$const20.9']
    $22binary_subscr.10 = getitem(value=x, index=$const20.9, fn=<built-in function getitem>) ['$22binary_subscr.10', '$const20.9', 'x']
    $24binary_multiply.11 = $const16.7 * $22binary_subscr.10 ['$22binary_subscr.10', '$24binary_multiply.11', '$const16.7']
    a = $14binary_add.6 - $24binary_multiply.11 ['$14binary_add.6', '$24binary_multiply.11', 'a']
    $const32.14 = const(int, 1)              ['$const32.14']
    $34binary_subscr.15 = getitem(value=x, index=$const32.14, fn=<built-in function getitem>) ['$34binary_subscr.15', '$const32.14', 'x']
    $const38.17 = const(int, -1)             ['$const38.17']
    $40binary_subscr.18 = getitem(value=x, index=$const38.17, fn=<built-in function getitem>) ['$40binary_subscr.18', '$const38.17', 'x']
    $42binary_subtract.19 = $34binary_subscr.15 - $40binary_subscr.18 ['$34binary_subscr.15', '$40binary_subscr.18', '$42binary_subtract.19']
    $const44.20 = const(int, 2)              ['$const44.20']
    b = $42binary_subtract.19 / $const44.20  ['$42binary_subtract.19', '$const44.20', 'b']
    $50load_global.22 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$50load_global.22']
    $52load_method.23 = getattr(value=$50load_global.22, attr=abs) ['$50load_global.22', '$52load_method.23']
    $56call_method.25 = call $52load_method.23(b, func=$52load_method.23, args=[Var(b, pitch.py:429)], kws=(), vararg=None, varkwarg=None, target=None) ['$52load_method.23', '$56call_method.25', 'b']
    $58load_global.26 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$58load_global.26']
    $60load_method.27 = getattr(value=$58load_global.26, attr=abs) ['$58load_global.26', '$60load_method.27']
    $64call_method.29 = call $60load_method.27(a, func=$60load_method.27, args=[Var(a, pitch.py:428)], kws=(), vararg=None, varkwarg=None, target=None) ['$60load_method.27', '$64call_method.29', 'a']
    $66compare_op.30 = $56call_method.25 >= $64call_method.29 ['$56call_method.25', '$64call_method.29', '$66compare_op.30']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.30, func=bool68, args=(Var($66compare_op.30, pitch.py:431),), kws=(), vararg=None, varkwarg=None, target=None) ['$66compare_op.30', '$68pred', 'bool68']
    branch $68pred, 70, 74                   ['$68pred']
label 70:
    $const70.0 = const(int, 0)               ['$const70.0']
    $72return_value.1 = cast(value=$const70.0) ['$72return_value.1', '$const70.0']
    return $72return_value.1                 ['$72return_value.1']
label 74:
    $76unary_negative.1 = unary(fn=<built-in function neg>, value=b) ['$76unary_negative.1', 'b']
    $80binary_true_divide.3 = $76unary_negative.1 / a ['$76unary_negative.1', '$80binary_true_divide.3', 'a']
    $82return_value.4 = cast(value=$80binary_true_divide.3) ['$80binary_true_divide.3', '$82return_value.4']
    return $82return_value.4                 ['$82return_value.4']

2024-09-04 21:58:09,947 - Error processing row 424: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (859,) + inhomogeneous part.
2024-09-04 22:16:34,155 - Error processing row 424: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (859,) + inhomogeneous part.
2024-09-07 23:37:10,464 - Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2024-09-07 23:37:11,750 - Creating converter from 7 to 5
2024-09-07 23:37:11,750 - Creating converter from 5 to 7
2024-09-07 23:37:11,751 - Creating converter from 7 to 5
2024-09-07 23:37:11,751 - Creating converter from 5 to 7
2024-09-07 23:38:37,703 - Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2024-09-07 23:38:38,742 - Creating converter from 7 to 5
2024-09-07 23:38:38,742 - Creating converter from 5 to 7
2024-09-07 23:38:38,742 - Creating converter from 7 to 5
2024-09-07 23:38:38,742 - Creating converter from 5 to 7
2024-09-07 23:39:03,352 - Error processing row 424: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (859,) + inhomogeneous part.
2024-09-07 23:42:56,219 - Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2024-09-07 23:42:57,206 - Creating converter from 7 to 5
2024-09-07 23:42:57,206 - Creating converter from 5 to 7
2024-09-07 23:42:57,206 - Creating converter from 7 to 5
2024-09-07 23:42:57,206 - Creating converter from 5 to 7
2024-09-07 23:44:30,637 - Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2024-09-07 23:44:31,469 - Creating converter from 7 to 5
2024-09-07 23:44:31,469 - Creating converter from 5 to 7
2024-09-07 23:44:31,470 - Creating converter from 7 to 5
2024-09-07 23:44:31,470 - Creating converter from 5 to 7
2024-09-07 23:45:09,057 - Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2024-09-07 23:45:09,897 - Creating converter from 7 to 5
2024-09-07 23:45:09,898 - Creating converter from 5 to 7
2024-09-07 23:45:09,898 - Creating converter from 7 to 5
2024-09-07 23:45:09,898 - Creating converter from 5 to 7
2024-09-07 23:45:21,754 - Creating converter from 3 to 5
2024-09-07 23:50:28,585 - Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2024-09-07 23:50:29,535 - Creating converter from 7 to 5
2024-09-07 23:50:29,535 - Creating converter from 5 to 7
2024-09-07 23:50:29,535 - Creating converter from 7 to 5
2024-09-07 23:50:29,535 - Creating converter from 5 to 7
2024-09-07 23:51:25,687 - Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2024-09-07 23:51:26,552 - Creating converter from 7 to 5
2024-09-07 23:51:26,552 - Creating converter from 5 to 7
2024-09-07 23:51:26,552 - Creating converter from 7 to 5
2024-09-07 23:51:26,552 - Creating converter from 5 to 7
2024-09-07 23:51:36,678 - Creating converter from 3 to 5
2024-09-07 23:52:02,271 - Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2024-09-07 23:52:03,145 - Creating converter from 7 to 5
2024-09-07 23:52:03,145 - Creating converter from 5 to 7
2024-09-07 23:52:03,145 - Creating converter from 7 to 5
2024-09-07 23:52:03,146 - Creating converter from 5 to 7
2024-09-08 00:00:49,581 - Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2024-09-08 00:00:50,417 - Creating converter from 7 to 5
2024-09-08 00:00:50,417 - Creating converter from 5 to 7
2024-09-08 00:00:50,417 - Creating converter from 7 to 5
2024-09-08 00:00:50,417 - Creating converter from 5 to 7
2024-09-08 00:00:59,920 - Creating converter from 3 to 5
2024-09-08 00:03:30,803 - Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2024-09-08 00:03:31,709 - Creating converter from 7 to 5
2024-09-08 00:03:31,709 - Creating converter from 5 to 7
2024-09-08 00:03:31,709 - Creating converter from 7 to 5
2024-09-08 00:03:31,709 - Creating converter from 5 to 7
2024-09-08 00:06:28,979 - Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2024-09-08 00:06:29,873 - Creating converter from 7 to 5
2024-09-08 00:06:29,873 - Creating converter from 5 to 7
2024-09-08 00:06:29,873 - Creating converter from 7 to 5
2024-09-08 00:06:29,874 - Creating converter from 5 to 7
2024-09-08 00:10:06,784 - Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2024-09-08 00:10:07,694 - Creating converter from 7 to 5
2024-09-08 00:10:07,694 - Creating converter from 5 to 7
2024-09-08 00:10:07,695 - Creating converter from 7 to 5
2024-09-08 00:10:07,695 - Creating converter from 5 to 7
2024-09-08 00:12:19,912 - Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2024-09-08 00:12:20,757 - Creating converter from 7 to 5
2024-09-08 00:12:20,757 - Creating converter from 5 to 7
2024-09-08 00:12:20,757 - Creating converter from 7 to 5
2024-09-08 00:12:20,757 - Creating converter from 5 to 7
2024-09-08 00:12:28,575 - bytecode dump:
>          0	NOP(arg=None, lineno=1141)
           2	LOAD_FAST(arg=0, lineno=1144)
           4	LOAD_CONST(arg=1, lineno=1144)
           6	BINARY_SUBSCR(arg=None, lineno=1144)
           8	STORE_FAST(arg=3, lineno=1144)
          10	LOAD_FAST(arg=1, lineno=1145)
          12	UNARY_NEGATIVE(arg=None, lineno=1145)
          14	LOAD_FAST(arg=3, lineno=1145)
          16	DUP_TOP(arg=None, lineno=1145)
          18	ROT_THREE(arg=None, lineno=1145)
          20	COMPARE_OP(arg=1, lineno=1145)
          22	POP_JUMP_IF_FALSE(arg=17, lineno=1145)
          24	LOAD_FAST(arg=1, lineno=1145)
          26	COMPARE_OP(arg=1, lineno=1145)
          28	POP_JUMP_IF_FALSE(arg=21, lineno=1145)
          30	JUMP_FORWARD(arg=2, lineno=1145)
>         32	POP_TOP(arg=None, lineno=1145)
          34	JUMP_FORWARD(arg=2, lineno=1145)
>         36	LOAD_CONST(arg=1, lineno=1146)
          38	STORE_FAST(arg=3, lineno=1146)
>         40	LOAD_FAST(arg=0, lineno=1148)
          42	LOAD_CONST(arg=2, lineno=1148)
          44	BINARY_SUBSCR(arg=None, lineno=1148)
          46	STORE_FAST(arg=4, lineno=1148)
          48	LOAD_FAST(arg=1, lineno=1149)
          50	UNARY_NEGATIVE(arg=None, lineno=1149)
          52	LOAD_FAST(arg=4, lineno=1149)
          54	DUP_TOP(arg=None, lineno=1149)
          56	ROT_THREE(arg=None, lineno=1149)
          58	COMPARE_OP(arg=1, lineno=1149)
          60	POP_JUMP_IF_FALSE(arg=36, lineno=1149)
          62	LOAD_FAST(arg=1, lineno=1149)
          64	COMPARE_OP(arg=1, lineno=1149)
          66	POP_JUMP_IF_FALSE(arg=40, lineno=1149)
          68	JUMP_FORWARD(arg=2, lineno=1149)
>         70	POP_TOP(arg=None, lineno=1149)
          72	JUMP_FORWARD(arg=2, lineno=1149)
>         74	LOAD_CONST(arg=1, lineno=1150)
          76	STORE_FAST(arg=4, lineno=1150)
>         78	LOAD_FAST(arg=2, lineno=1152)
          80	POP_JUMP_IF_FALSE(arg=52, lineno=1152)
          82	LOAD_GLOBAL(arg=0, lineno=1153)
          84	LOAD_METHOD(arg=1, lineno=1153)
          86	LOAD_FAST(arg=3, lineno=1153)
          88	CALL_METHOD(arg=1, lineno=1153)
          90	LOAD_GLOBAL(arg=0, lineno=1153)
          92	LOAD_METHOD(arg=1, lineno=1153)
          94	LOAD_FAST(arg=4, lineno=1153)
          96	CALL_METHOD(arg=1, lineno=1153)
          98	COMPARE_OP(arg=3, lineno=1153)
         100	RETURN_VALUE(arg=None, lineno=1153)
>        102	LOAD_GLOBAL(arg=0, lineno=1155)
         104	LOAD_METHOD(arg=2, lineno=1155)
         106	LOAD_FAST(arg=3, lineno=1155)
         108	CALL_METHOD(arg=1, lineno=1155)
         110	LOAD_GLOBAL(arg=0, lineno=1155)
         112	LOAD_METHOD(arg=2, lineno=1155)
         114	LOAD_FAST(arg=4, lineno=1155)
         116	CALL_METHOD(arg=1, lineno=1155)
         118	COMPARE_OP(arg=3, lineno=1155)
         120	RETURN_VALUE(arg=None, lineno=1155)
2024-09-08 00:12:28,575 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-08 00:12:28,575 - stack: []
2024-09-08 00:12:28,575 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-08 00:12:28,576 - dispatch pc=0, inst=NOP(arg=None, lineno=1141)
2024-09-08 00:12:28,576 - stack []
2024-09-08 00:12:28,576 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1144)
2024-09-08 00:12:28,576 - stack []
2024-09-08 00:12:28,576 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1144)
2024-09-08 00:12:28,576 - stack ['$x2.0']
2024-09-08 00:12:28,576 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1144)
2024-09-08 00:12:28,576 - stack ['$x2.0', '$const4.1']
2024-09-08 00:12:28,576 - dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1144)
2024-09-08 00:12:28,576 - stack ['$6binary_subscr.2']
2024-09-08 00:12:28,577 - dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=1145)
2024-09-08 00:12:28,577 - stack []
2024-09-08 00:12:28,577 - dispatch pc=12, inst=UNARY_NEGATIVE(arg=None, lineno=1145)
2024-09-08 00:12:28,577 - stack ['$threshold10.3']
2024-09-08 00:12:28,577 - dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=1145)
2024-09-08 00:12:28,577 - stack ['$12unary_negative.4']
2024-09-08 00:12:28,577 - dispatch pc=16, inst=DUP_TOP(arg=None, lineno=1145)
2024-09-08 00:12:28,577 - stack ['$12unary_negative.4', '$x014.5']
2024-09-08 00:12:28,577 - dispatch pc=18, inst=ROT_THREE(arg=None, lineno=1145)
2024-09-08 00:12:28,577 - stack ['$12unary_negative.4', '$x014.5', '$16dup_top.6']
2024-09-08 00:12:28,577 - dispatch pc=20, inst=COMPARE_OP(arg=1, lineno=1145)
2024-09-08 00:12:28,577 - stack ['$16dup_top.6', '$12unary_negative.4', '$x014.5']
2024-09-08 00:12:28,578 - dispatch pc=22, inst=POP_JUMP_IF_FALSE(arg=17, lineno=1145)
2024-09-08 00:12:28,578 - stack ['$16dup_top.6', '$20compare_op.7']
2024-09-08 00:12:28,578 - end state. edges=[Edge(pc=24, stack=('$16dup_top.6',), blockstack=(), npush=0), Edge(pc=32, stack=('$16dup_top.6',), blockstack=(), npush=0)]
2024-09-08 00:12:28,578 - pending: deque([State(pc_initial=24 nstack_initial=1), State(pc_initial=32 nstack_initial=1)])
2024-09-08 00:12:28,578 - stack: ['$phi24.0']
2024-09-08 00:12:28,578 - state.pc_initial: State(pc_initial=24 nstack_initial=1)
2024-09-08 00:12:28,578 - dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=1145)
2024-09-08 00:12:28,578 - stack ['$phi24.0']
2024-09-08 00:12:28,578 - dispatch pc=26, inst=COMPARE_OP(arg=1, lineno=1145)
2024-09-08 00:12:28,578 - stack ['$phi24.0', '$threshold24.1']
2024-09-08 00:12:28,578 - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=21, lineno=1145)
2024-09-08 00:12:28,578 - stack ['$26compare_op.2']
2024-09-08 00:12:28,579 - end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=40, stack=(), blockstack=(), npush=0)]
2024-09-08 00:12:28,579 - pending: deque([State(pc_initial=32 nstack_initial=1), State(pc_initial=30 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2024-09-08 00:12:28,579 - stack: ['$phi32.0']
2024-09-08 00:12:28,579 - state.pc_initial: State(pc_initial=32 nstack_initial=1)
2024-09-08 00:12:28,579 - dispatch pc=32, inst=POP_TOP(arg=None, lineno=1145)
2024-09-08 00:12:28,579 - stack ['$phi32.0']
2024-09-08 00:12:28,579 - dispatch pc=34, inst=JUMP_FORWARD(arg=2, lineno=1145)
2024-09-08 00:12:28,579 - stack []
2024-09-08 00:12:28,579 - end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2024-09-08 00:12:28,579 - pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2024-09-08 00:12:28,579 - stack: []
2024-09-08 00:12:28,580 - state.pc_initial: State(pc_initial=30 nstack_initial=0)
2024-09-08 00:12:28,580 - dispatch pc=30, inst=JUMP_FORWARD(arg=2, lineno=1145)
2024-09-08 00:12:28,580 - stack []
2024-09-08 00:12:28,580 - end state. edges=[Edge(pc=36, stack=(), blockstack=(), npush=0)]
2024-09-08 00:12:28,580 - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2024-09-08 00:12:28,580 - stack: []
2024-09-08 00:12:28,580 - state.pc_initial: State(pc_initial=40 nstack_initial=0)
2024-09-08 00:12:28,580 - dispatch pc=40, inst=LOAD_FAST(arg=0, lineno=1148)
2024-09-08 00:12:28,580 - stack []
2024-09-08 00:12:28,580 - dispatch pc=42, inst=LOAD_CONST(arg=2, lineno=1148)
2024-09-08 00:12:28,580 - stack ['$x40.0']
2024-09-08 00:12:28,581 - dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=1148)
2024-09-08 00:12:28,581 - stack ['$x40.0', '$const42.1']
2024-09-08 00:12:28,581 - dispatch pc=46, inst=STORE_FAST(arg=4, lineno=1148)
2024-09-08 00:12:28,581 - stack ['$44binary_subscr.2']
2024-09-08 00:12:28,581 - dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=1149)
2024-09-08 00:12:28,581 - stack []
2024-09-08 00:12:28,581 - dispatch pc=50, inst=UNARY_NEGATIVE(arg=None, lineno=1149)
2024-09-08 00:12:28,581 - stack ['$threshold48.3']
2024-09-08 00:12:28,581 - dispatch pc=52, inst=LOAD_FAST(arg=4, lineno=1149)
2024-09-08 00:12:28,581 - stack ['$50unary_negative.4']
2024-09-08 00:12:28,581 - dispatch pc=54, inst=DUP_TOP(arg=None, lineno=1149)
2024-09-08 00:12:28,581 - stack ['$50unary_negative.4', '$x152.5']
2024-09-08 00:12:28,582 - dispatch pc=56, inst=ROT_THREE(arg=None, lineno=1149)
2024-09-08 00:12:28,582 - stack ['$50unary_negative.4', '$x152.5', '$54dup_top.6']
2024-09-08 00:12:28,582 - dispatch pc=58, inst=COMPARE_OP(arg=1, lineno=1149)
2024-09-08 00:12:28,582 - stack ['$54dup_top.6', '$50unary_negative.4', '$x152.5']
2024-09-08 00:12:28,582 - dispatch pc=60, inst=POP_JUMP_IF_FALSE(arg=36, lineno=1149)
2024-09-08 00:12:28,582 - stack ['$54dup_top.6', '$58compare_op.7']
2024-09-08 00:12:28,582 - end state. edges=[Edge(pc=62, stack=('$54dup_top.6',), blockstack=(), npush=0), Edge(pc=70, stack=('$54dup_top.6',), blockstack=(), npush=0)]
2024-09-08 00:12:28,583 - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
2024-09-08 00:12:28,583 - pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
2024-09-08 00:12:28,583 - stack: []
2024-09-08 00:12:28,583 - state.pc_initial: State(pc_initial=36 nstack_initial=0)
2024-09-08 00:12:28,583 - dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=1146)
2024-09-08 00:12:28,583 - stack []
2024-09-08 00:12:28,583 - dispatch pc=38, inst=STORE_FAST(arg=3, lineno=1146)
2024-09-08 00:12:28,583 - stack ['$const36.0']
2024-09-08 00:12:28,583 - end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2024-09-08 00:12:28,583 - pending: deque([State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1), State(pc_initial=40 nstack_initial=0)])
2024-09-08 00:12:28,583 - stack: ['$phi62.0']
2024-09-08 00:12:28,584 - state.pc_initial: State(pc_initial=62 nstack_initial=1)
2024-09-08 00:12:28,584 - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=1149)
2024-09-08 00:12:28,584 - stack ['$phi62.0']
2024-09-08 00:12:28,584 - dispatch pc=64, inst=COMPARE_OP(arg=1, lineno=1149)
2024-09-08 00:12:28,584 - stack ['$phi62.0', '$threshold62.1']
2024-09-08 00:12:28,584 - dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=40, lineno=1149)
2024-09-08 00:12:28,584 - stack ['$64compare_op.2']
2024-09-08 00:12:28,584 - end state. edges=[Edge(pc=68, stack=(), blockstack=(), npush=0), Edge(pc=78, stack=(), blockstack=(), npush=0)]
2024-09-08 00:12:28,584 - pending: deque([State(pc_initial=70 nstack_initial=1), State(pc_initial=40 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-08 00:12:28,584 - stack: ['$phi70.0']
2024-09-08 00:12:28,585 - state.pc_initial: State(pc_initial=70 nstack_initial=1)
2024-09-08 00:12:28,585 - dispatch pc=70, inst=POP_TOP(arg=None, lineno=1149)
2024-09-08 00:12:28,585 - stack ['$phi70.0']
2024-09-08 00:12:28,585 - dispatch pc=72, inst=JUMP_FORWARD(arg=2, lineno=1149)
2024-09-08 00:12:28,585 - stack []
2024-09-08 00:12:28,585 - end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0)]
2024-09-08 00:12:28,585 - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-08 00:12:28,585 - pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-08 00:12:28,585 - stack: []
2024-09-08 00:12:28,585 - state.pc_initial: State(pc_initial=68 nstack_initial=0)
2024-09-08 00:12:28,586 - dispatch pc=68, inst=JUMP_FORWARD(arg=2, lineno=1149)
2024-09-08 00:12:28,586 - stack []
2024-09-08 00:12:28,586 - end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0)]
2024-09-08 00:12:28,586 - pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=74 nstack_initial=0)])
2024-09-08 00:12:28,587 - stack: []
2024-09-08 00:12:28,587 - state.pc_initial: State(pc_initial=78 nstack_initial=0)
2024-09-08 00:12:28,587 - dispatch pc=78, inst=LOAD_FAST(arg=2, lineno=1152)
2024-09-08 00:12:28,587 - stack []
2024-09-08 00:12:28,587 - dispatch pc=80, inst=POP_JUMP_IF_FALSE(arg=52, lineno=1152)
2024-09-08 00:12:28,587 - stack ['$zero_pos78.0']
2024-09-08 00:12:28,588 - end state. edges=[Edge(pc=82, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
2024-09-08 00:12:28,588 - pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2024-09-08 00:12:28,588 - pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2024-09-08 00:12:28,588 - stack: []
2024-09-08 00:12:28,588 - state.pc_initial: State(pc_initial=74 nstack_initial=0)
2024-09-08 00:12:28,588 - dispatch pc=74, inst=LOAD_CONST(arg=1, lineno=1150)
2024-09-08 00:12:28,588 - stack []
2024-09-08 00:12:28,588 - dispatch pc=76, inst=STORE_FAST(arg=4, lineno=1150)
2024-09-08 00:12:28,588 - stack ['$const74.0']
2024-09-08 00:12:28,588 - end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0)]
2024-09-08 00:12:28,588 - pending: deque([State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-08 00:12:28,588 - stack: []
2024-09-08 00:12:28,589 - state.pc_initial: State(pc_initial=82 nstack_initial=0)
2024-09-08 00:12:28,589 - dispatch pc=82, inst=LOAD_GLOBAL(arg=0, lineno=1153)
2024-09-08 00:12:28,589 - stack []
2024-09-08 00:12:28,589 - dispatch pc=84, inst=LOAD_METHOD(arg=1, lineno=1153)
2024-09-08 00:12:28,589 - stack ['$82load_global.0']
2024-09-08 00:12:28,589 - dispatch pc=86, inst=LOAD_FAST(arg=3, lineno=1153)
2024-09-08 00:12:28,589 - stack ['$84load_method.1']
2024-09-08 00:12:28,589 - dispatch pc=88, inst=CALL_METHOD(arg=1, lineno=1153)
2024-09-08 00:12:28,589 - stack ['$84load_method.1', '$x086.2']
2024-09-08 00:12:28,589 - dispatch pc=90, inst=LOAD_GLOBAL(arg=0, lineno=1153)
2024-09-08 00:12:28,589 - stack ['$88call_method.3']
2024-09-08 00:12:28,589 - dispatch pc=92, inst=LOAD_METHOD(arg=1, lineno=1153)
2024-09-08 00:12:28,590 - stack ['$88call_method.3', '$90load_global.4']
2024-09-08 00:12:28,590 - dispatch pc=94, inst=LOAD_FAST(arg=4, lineno=1153)
2024-09-08 00:12:28,590 - stack ['$88call_method.3', '$92load_method.5']
2024-09-08 00:12:28,590 - dispatch pc=96, inst=CALL_METHOD(arg=1, lineno=1153)
2024-09-08 00:12:28,590 - stack ['$88call_method.3', '$92load_method.5', '$x194.6']
2024-09-08 00:12:28,590 - dispatch pc=98, inst=COMPARE_OP(arg=3, lineno=1153)
2024-09-08 00:12:28,590 - stack ['$88call_method.3', '$96call_method.7']
2024-09-08 00:12:28,590 - dispatch pc=100, inst=RETURN_VALUE(arg=None, lineno=1153)
2024-09-08 00:12:28,590 - stack ['$98compare_op.8']
2024-09-08 00:12:28,590 - end state. edges=[]
2024-09-08 00:12:28,590 - pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-08 00:12:28,590 - stack: []
2024-09-08 00:12:28,591 - state.pc_initial: State(pc_initial=102 nstack_initial=0)
2024-09-08 00:12:28,591 - dispatch pc=102, inst=LOAD_GLOBAL(arg=0, lineno=1155)
2024-09-08 00:12:28,591 - stack []
2024-09-08 00:12:28,591 - dispatch pc=104, inst=LOAD_METHOD(arg=2, lineno=1155)
2024-09-08 00:12:28,591 - stack ['$102load_global.0']
2024-09-08 00:12:28,591 - dispatch pc=106, inst=LOAD_FAST(arg=3, lineno=1155)
2024-09-08 00:12:28,591 - stack ['$104load_method.1']
2024-09-08 00:12:28,591 - dispatch pc=108, inst=CALL_METHOD(arg=1, lineno=1155)
2024-09-08 00:12:28,591 - stack ['$104load_method.1', '$x0106.2']
2024-09-08 00:12:28,591 - dispatch pc=110, inst=LOAD_GLOBAL(arg=0, lineno=1155)
2024-09-08 00:12:28,591 - stack ['$108call_method.3']
2024-09-08 00:12:28,592 - dispatch pc=112, inst=LOAD_METHOD(arg=2, lineno=1155)
2024-09-08 00:12:28,592 - stack ['$108call_method.3', '$110load_global.4']
2024-09-08 00:12:28,592 - dispatch pc=114, inst=LOAD_FAST(arg=4, lineno=1155)
2024-09-08 00:12:28,592 - stack ['$108call_method.3', '$112load_method.5']
2024-09-08 00:12:28,592 - dispatch pc=116, inst=CALL_METHOD(arg=1, lineno=1155)
2024-09-08 00:12:28,592 - stack ['$108call_method.3', '$112load_method.5', '$x1114.6']
2024-09-08 00:12:28,592 - dispatch pc=118, inst=COMPARE_OP(arg=3, lineno=1155)
2024-09-08 00:12:28,592 - stack ['$108call_method.3', '$116call_method.7']
2024-09-08 00:12:28,592 - dispatch pc=120, inst=RETURN_VALUE(arg=None, lineno=1155)
2024-09-08 00:12:28,592 - stack ['$118compare_op.8']
2024-09-08 00:12:28,592 - end state. edges=[]
2024-09-08 00:12:28,592 - pending: deque([State(pc_initial=78 nstack_initial=0)])
2024-09-08 00:12:28,593 - -------------------------Prune PHIs-------------------------
2024-09-08 00:12:28,593 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=1): {'$phi24.0'},
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=1): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=1): {'$phi62.0'},
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=1): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=82 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set()})
2024-09-08 00:12:28,593 - defmap: {'$phi24.0': State(pc_initial=0 nstack_initial=0),
 '$phi32.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.0': State(pc_initial=40 nstack_initial=0),
 '$phi70.0': State(pc_initial=40 nstack_initial=0)}
2024-09-08 00:12:28,594 - phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))},
             '$phi70.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))}})
2024-09-08 00:12:28,594 - changing phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))},
             '$phi70.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))}})
2024-09-08 00:12:28,594 - keep phismap: {'$phi24.0': {('$16dup_top.6', State(pc_initial=0 nstack_initial=0))},
 '$phi62.0': {('$54dup_top.6', State(pc_initial=40 nstack_initial=0))}}
2024-09-08 00:12:28,594 - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi24.0': '$16dup_top.6'},
             State(pc_initial=40 nstack_initial=0): {'$phi62.0': '$54dup_top.6'}})
2024-09-08 00:12:28,595 - ----------------------DONE Prune PHIs-----------------------
2024-09-08 00:12:28,595 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'value': '$6binary_subscr.2'}), (10, {'res': '$threshold10.3'}), (12, {'value': '$threshold10.3', 'res': '$12unary_negative.4'}), (14, {'res': '$x014.5'}), (16, {'orig': ['$x014.5'], 'duped': ['$16dup_top.6']}), (20, {'lhs': '$12unary_negative.4', 'rhs': '$x014.5', 'res': '$20compare_op.7'}), (22, {'pred': '$20compare_op.7'})), outgoing_phis={'$phi24.0': '$16dup_top.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={24: ('$16dup_top.6',), 32: ('$16dup_top.6',)})
2024-09-08 00:12:28,595 - block_infos State(pc_initial=24 nstack_initial=1):
AdaptBlockInfo(insts=((24, {'res': '$threshold24.1'}), (26, {'lhs': '$phi24.0', 'rhs': '$threshold24.1', 'res': '$26compare_op.2'}), (28, {'pred': '$26compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 40: ()})
2024-09-08 00:12:28,595 - block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ()})
2024-09-08 00:12:28,595 - block_infos State(pc_initial=32 nstack_initial=1):
AdaptBlockInfo(insts=((34, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2024-09-08 00:12:28,595 - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$const36.0'}), (38, {'value': '$const36.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2024-09-08 00:12:28,595 - block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$x40.0'}), (42, {'res': '$const42.1'}), (44, {'index': '$const42.1', 'target': '$x40.0', 'res': '$44binary_subscr.2'}), (46, {'value': '$44binary_subscr.2'}), (48, {'res': '$threshold48.3'}), (50, {'value': '$threshold48.3', 'res': '$50unary_negative.4'}), (52, {'res': '$x152.5'}), (54, {'orig': ['$x152.5'], 'duped': ['$54dup_top.6']}), (58, {'lhs': '$50unary_negative.4', 'rhs': '$x152.5', 'res': '$58compare_op.7'}), (60, {'pred': '$58compare_op.7'})), outgoing_phis={'$phi62.0': '$54dup_top.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ('$54dup_top.6',), 70: ('$54dup_top.6',)})
2024-09-08 00:12:28,596 - block_infos State(pc_initial=62 nstack_initial=1):
AdaptBlockInfo(insts=((62, {'res': '$threshold62.1'}), (64, {'lhs': '$phi62.0', 'rhs': '$threshold62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={68: (), 78: ()})
2024-09-08 00:12:28,596 - block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: ()})
2024-09-08 00:12:28,596 - block_infos State(pc_initial=70 nstack_initial=1):
AdaptBlockInfo(insts=((72, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: ()})
2024-09-08 00:12:28,596 - block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$const74.0'}), (76, {'value': '$const74.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: ()})
2024-09-08 00:12:28,596 - block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$zero_pos78.0'}), (80, {'pred': '$zero_pos78.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: (), 102: ()})
2024-09-08 00:12:28,596 - block_infos State(pc_initial=82 nstack_initial=0):
AdaptBlockInfo(insts=((82, {'res': '$82load_global.0'}), (84, {'item': '$82load_global.0', 'res': '$84load_method.1'}), (86, {'res': '$x086.2'}), (88, {'func': '$84load_method.1', 'args': ['$x086.2'], 'res': '$88call_method.3'}), (90, {'res': '$90load_global.4'}), (92, {'item': '$90load_global.4', 'res': '$92load_method.5'}), (94, {'res': '$x194.6'}), (96, {'func': '$92load_method.5', 'args': ['$x194.6'], 'res': '$96call_method.7'}), (98, {'lhs': '$88call_method.3', 'rhs': '$96call_method.7', 'res': '$98compare_op.8'}), (100, {'retval': '$98compare_op.8', 'castval': '$100return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-08 00:12:28,596 - block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$102load_global.0'}), (104, {'item': '$102load_global.0', 'res': '$104load_method.1'}), (106, {'res': '$x0106.2'}), (108, {'func': '$104load_method.1', 'args': ['$x0106.2'], 'res': '$108call_method.3'}), (110, {'res': '$110load_global.4'}), (112, {'item': '$110load_global.4', 'res': '$112load_method.5'}), (114, {'res': '$x1114.6'}), (116, {'func': '$112load_method.5', 'args': ['$x1114.6'], 'res': '$116call_method.7'}), (118, {'lhs': '$108call_method.3', 'rhs': '$116call_method.7', 'res': '$118compare_op.8'}), (120, {'retval': '$118compare_op.8', 'castval': '$120return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-08 00:12:28,601 - label 0:
    x = arg(0, name=x)                       ['x']
    threshold = arg(1, name=threshold)       ['threshold']
    zero_pos = arg(2, name=zero_pos)         ['zero_pos']
    $const4.1 = const(int, 0)                ['$const4.1']
    x0 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$const4.1', 'x', 'x0']
    $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$12unary_negative.4', 'threshold']
    $20compare_op.7 = $12unary_negative.4 <= x0 ['$12unary_negative.4', '$20compare_op.7', 'x0']
    bool22 = global(bool: <class 'bool'>)    ['bool22']
    $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None) ['$20compare_op.7', '$22pred', 'bool22']
    $phi24.0 = x0                            ['$phi24.0', 'x0']
    branch $22pred, 24, 32                   ['$22pred']
label 24:
    $26compare_op.2 = $phi24.0 <= threshold  ['$26compare_op.2', '$phi24.0', 'threshold']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.2', '$28pred', 'bool28']
    branch $28pred, 30, 40                   ['$28pred']
label 30:
    jump 36                                  []
label 32:
    jump 40                                  []
label 36:
    x0 = const(int, 0)                       ['x0']
    jump 40                                  []
label 40:
    $const42.1 = const(int, -1)              ['$const42.1']
    x1 = getitem(value=x, index=$const42.1, fn=<built-in function getitem>) ['$const42.1', 'x', 'x1']
    $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$50unary_negative.4', 'threshold']
    $58compare_op.7 = $50unary_negative.4 <= x1 ['$50unary_negative.4', '$58compare_op.7', 'x1']
    bool60 = global(bool: <class 'bool'>)    ['bool60']
    $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None) ['$58compare_op.7', '$60pred', 'bool60']
    $phi62.0 = x1                            ['$phi62.0', 'x1']
    branch $60pred, 62, 70                   ['$60pred']
label 62:
    $64compare_op.2 = $phi62.0 <= threshold  ['$64compare_op.2', '$phi62.0', 'threshold']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 78                   ['$66pred']
label 68:
    jump 74                                  []
label 70:
    jump 78                                  []
label 74:
    x1 = const(int, 0)                       ['x1']
    jump 78                                  []
label 78:
    bool80 = global(bool: <class 'bool'>)    ['bool80']
    $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None) ['$80pred', 'bool80', 'zero_pos']
    branch $80pred, 82, 102                  ['$80pred']
label 82:
    $82load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$82load_global.0']
    $84load_method.1 = getattr(value=$82load_global.0, attr=signbit) ['$82load_global.0', '$84load_method.1']
    $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None) ['$84load_method.1', '$88call_method.3', 'x0']
    $90load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$90load_global.4']
    $92load_method.5 = getattr(value=$90load_global.4, attr=signbit) ['$90load_global.4', '$92load_method.5']
    $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None) ['$92load_method.5', '$96call_method.7', 'x1']
    $98compare_op.8 = $88call_method.3 != $96call_method.7 ['$88call_method.3', '$96call_method.7', '$98compare_op.8']
    $100return_value.9 = cast(value=$98compare_op.8) ['$100return_value.9', '$98compare_op.8']
    return $100return_value.9                ['$100return_value.9']
label 102:
    $102load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$102load_global.0']
    $104load_method.1 = getattr(value=$102load_global.0, attr=sign) ['$102load_global.0', '$104load_method.1']
    $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None) ['$104load_method.1', '$108call_method.3', 'x0']
    $110load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$110load_global.4']
    $112load_method.5 = getattr(value=$110load_global.4, attr=sign) ['$110load_global.4', '$112load_method.5']
    $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None) ['$112load_method.5', '$116call_method.7', 'x1']
    $118compare_op.8 = $108call_method.3 != $116call_method.7 ['$108call_method.3', '$116call_method.7', '$118compare_op.8']
    $120return_value.9 = cast(value=$118compare_op.8) ['$118compare_op.8', '$120return_value.9']
    return $120return_value.9                ['$120return_value.9']

2024-09-08 00:12:29,778 - bytecode dump:
>          0	NOP(arg=None, lineno=1039)
           2	LOAD_FAST(arg=0, lineno=1042)
           4	LOAD_CONST(arg=1, lineno=1042)
           6	BINARY_SUBSCR(arg=None, lineno=1042)
           8	LOAD_FAST(arg=0, lineno=1042)
          10	LOAD_CONST(arg=2, lineno=1042)
          12	BINARY_SUBSCR(arg=None, lineno=1042)
          14	COMPARE_OP(arg=4, lineno=1042)
          16	LOAD_FAST(arg=0, lineno=1042)
          18	LOAD_CONST(arg=1, lineno=1042)
          20	BINARY_SUBSCR(arg=None, lineno=1042)
          22	LOAD_FAST(arg=0, lineno=1042)
          24	LOAD_CONST(arg=3, lineno=1042)
          26	BINARY_SUBSCR(arg=None, lineno=1042)
          28	COMPARE_OP(arg=5, lineno=1042)
          30	BINARY_AND(arg=None, lineno=1042)
          32	RETURN_VALUE(arg=None, lineno=1042)
2024-09-08 00:12:29,778 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-08 00:12:29,778 - stack: []
2024-09-08 00:12:29,778 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-08 00:12:29,778 - dispatch pc=0, inst=NOP(arg=None, lineno=1039)
2024-09-08 00:12:29,778 - stack []
2024-09-08 00:12:29,778 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-08 00:12:29,778 - stack []
2024-09-08 00:12:29,779 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1042)
2024-09-08 00:12:29,779 - stack ['$x2.0']
2024-09-08 00:12:29,779 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-08 00:12:29,779 - stack ['$x2.0', '$const4.1']
2024-09-08 00:12:29,779 - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-08 00:12:29,779 - stack ['$6binary_subscr.2']
2024-09-08 00:12:29,779 - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1042)
2024-09-08 00:12:29,779 - stack ['$6binary_subscr.2', '$x8.3']
2024-09-08 00:12:29,779 - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-08 00:12:29,779 - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2024-09-08 00:12:29,779 - dispatch pc=14, inst=COMPARE_OP(arg=4, lineno=1042)
2024-09-08 00:12:29,780 - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2024-09-08 00:12:29,780 - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-08 00:12:29,780 - stack ['$14compare_op.6']
2024-09-08 00:12:29,780 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1042)
2024-09-08 00:12:29,780 - stack ['$14compare_op.6', '$x16.7']
2024-09-08 00:12:29,780 - dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-08 00:12:29,780 - stack ['$14compare_op.6', '$x16.7', '$const18.8']
2024-09-08 00:12:29,780 - dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-08 00:12:29,780 - stack ['$14compare_op.6', '$20binary_subscr.9']
2024-09-08 00:12:29,781 - dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=1042)
2024-09-08 00:12:29,781 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10']
2024-09-08 00:12:29,781 - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-08 00:12:29,781 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10', '$const24.11']
2024-09-08 00:12:29,781 - dispatch pc=28, inst=COMPARE_OP(arg=5, lineno=1042)
2024-09-08 00:12:29,781 - stack ['$14compare_op.6', '$20binary_subscr.9', '$26binary_subscr.12']
2024-09-08 00:12:29,781 - dispatch pc=30, inst=BINARY_AND(arg=None, lineno=1042)
2024-09-08 00:12:29,781 - stack ['$14compare_op.6', '$28compare_op.13']
2024-09-08 00:12:29,781 - dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1042)
2024-09-08 00:12:29,782 - stack ['$30binary_and.14']
2024-09-08 00:12:29,782 - end state. edges=[]
2024-09-08 00:12:29,782 - -------------------------Prune PHIs-------------------------
2024-09-08 00:12:29,782 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-08 00:12:29,782 - defmap: {}
2024-09-08 00:12:29,782 - phismap: defaultdict(<class 'set'>, {})
2024-09-08 00:12:29,782 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-08 00:12:29,782 - keep phismap: {}
2024-09-08 00:12:29,783 - new_out: defaultdict(<class 'dict'>, {})
2024-09-08 00:12:29,783 - ----------------------DONE Prune PHIs-----------------------
2024-09-08 00:12:29,783 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14compare_op.6'}), (16, {'res': '$x16.7'}), (18, {'res': '$const18.8'}), (20, {'index': '$const18.8', 'target': '$x16.7', 'res': '$20binary_subscr.9'}), (22, {'res': '$x22.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$x22.10', 'res': '$26binary_subscr.12'}), (28, {'lhs': '$20binary_subscr.9', 'rhs': '$26binary_subscr.12', 'res': '$28compare_op.13'}), (30, {'lhs': '$14compare_op.6', 'rhs': '$28compare_op.13', 'res': '$30binary_and.14'}), (32, {'retval': '$30binary_and.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-08 00:12:29,784 - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14compare_op.6 = $6binary_subscr.2 > $12binary_subscr.5 ['$12binary_subscr.5', '$14compare_op.6', '$6binary_subscr.2']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20binary_subscr.9 = getitem(value=x, index=$const18.8, fn=<built-in function getitem>) ['$20binary_subscr.9', '$const18.8', 'x']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=x, index=$const24.11, fn=<built-in function getitem>) ['$26binary_subscr.12', '$const24.11', 'x']
    $28compare_op.13 = $20binary_subscr.9 >= $26binary_subscr.12 ['$20binary_subscr.9', '$26binary_subscr.12', '$28compare_op.13']
    $30binary_and.14 = $14compare_op.6 & $28compare_op.13 ['$14compare_op.6', '$28compare_op.13', '$30binary_and.14']
    $32return_value.15 = cast(value=$30binary_and.14) ['$30binary_and.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

2024-09-08 00:12:29,785 - bytecode dump:
>          0	NOP(arg=None, lineno=1045)
           2	LOAD_FAST(arg=0, lineno=1048)
           4	LOAD_CONST(arg=1, lineno=1048)
           6	BINARY_SUBSCR(arg=None, lineno=1048)
           8	LOAD_FAST(arg=0, lineno=1048)
          10	LOAD_CONST(arg=2, lineno=1048)
          12	BINARY_SUBSCR(arg=None, lineno=1048)
          14	COMPARE_OP(arg=0, lineno=1048)
          16	LOAD_FAST(arg=0, lineno=1048)
          18	LOAD_CONST(arg=1, lineno=1048)
          20	BINARY_SUBSCR(arg=None, lineno=1048)
          22	LOAD_FAST(arg=0, lineno=1048)
          24	LOAD_CONST(arg=3, lineno=1048)
          26	BINARY_SUBSCR(arg=None, lineno=1048)
          28	COMPARE_OP(arg=1, lineno=1048)
          30	BINARY_AND(arg=None, lineno=1048)
          32	RETURN_VALUE(arg=None, lineno=1048)
2024-09-08 00:12:29,785 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-08 00:12:29,785 - stack: []
2024-09-08 00:12:29,785 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-08 00:12:29,786 - dispatch pc=0, inst=NOP(arg=None, lineno=1045)
2024-09-08 00:12:29,786 - stack []
2024-09-08 00:12:29,786 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-08 00:12:29,786 - stack []
2024-09-08 00:12:29,786 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1048)
2024-09-08 00:12:29,786 - stack ['$x2.0']
2024-09-08 00:12:29,786 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-08 00:12:29,786 - stack ['$x2.0', '$const4.1']
2024-09-08 00:12:29,786 - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-08 00:12:29,786 - stack ['$6binary_subscr.2']
2024-09-08 00:12:29,786 - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1048)
2024-09-08 00:12:29,786 - stack ['$6binary_subscr.2', '$x8.3']
2024-09-08 00:12:29,786 - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-08 00:12:29,787 - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2024-09-08 00:12:29,787 - dispatch pc=14, inst=COMPARE_OP(arg=0, lineno=1048)
2024-09-08 00:12:29,787 - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2024-09-08 00:12:29,787 - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-08 00:12:29,787 - stack ['$14compare_op.6']
2024-09-08 00:12:29,787 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1048)
2024-09-08 00:12:29,787 - stack ['$14compare_op.6', '$x16.7']
2024-09-08 00:12:29,787 - dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-08 00:12:29,787 - stack ['$14compare_op.6', '$x16.7', '$const18.8']
2024-09-08 00:12:29,787 - dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-08 00:12:29,787 - stack ['$14compare_op.6', '$20binary_subscr.9']
2024-09-08 00:12:29,787 - dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=1048)
2024-09-08 00:12:29,787 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10']
2024-09-08 00:12:29,787 - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-08 00:12:29,788 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10', '$const24.11']
2024-09-08 00:12:29,788 - dispatch pc=28, inst=COMPARE_OP(arg=1, lineno=1048)
2024-09-08 00:12:29,788 - stack ['$14compare_op.6', '$20binary_subscr.9', '$26binary_subscr.12']
2024-09-08 00:12:29,788 - dispatch pc=30, inst=BINARY_AND(arg=None, lineno=1048)
2024-09-08 00:12:29,788 - stack ['$14compare_op.6', '$28compare_op.13']
2024-09-08 00:12:29,788 - dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1048)
2024-09-08 00:12:29,788 - stack ['$30binary_and.14']
2024-09-08 00:12:29,788 - end state. edges=[]
2024-09-08 00:12:29,788 - -------------------------Prune PHIs-------------------------
2024-09-08 00:12:29,788 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-08 00:12:29,788 - defmap: {}
2024-09-08 00:12:29,788 - phismap: defaultdict(<class 'set'>, {})
2024-09-08 00:12:29,788 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-08 00:12:29,789 - keep phismap: {}
2024-09-08 00:12:29,789 - new_out: defaultdict(<class 'dict'>, {})
2024-09-08 00:12:29,789 - ----------------------DONE Prune PHIs-----------------------
2024-09-08 00:12:29,789 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14compare_op.6'}), (16, {'res': '$x16.7'}), (18, {'res': '$const18.8'}), (20, {'index': '$const18.8', 'target': '$x16.7', 'res': '$20binary_subscr.9'}), (22, {'res': '$x22.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$x22.10', 'res': '$26binary_subscr.12'}), (28, {'lhs': '$20binary_subscr.9', 'rhs': '$26binary_subscr.12', 'res': '$28compare_op.13'}), (30, {'lhs': '$14compare_op.6', 'rhs': '$28compare_op.13', 'res': '$30binary_and.14'}), (32, {'retval': '$30binary_and.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-08 00:12:29,790 - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14compare_op.6 = $6binary_subscr.2 < $12binary_subscr.5 ['$12binary_subscr.5', '$14compare_op.6', '$6binary_subscr.2']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20binary_subscr.9 = getitem(value=x, index=$const18.8, fn=<built-in function getitem>) ['$20binary_subscr.9', '$const18.8', 'x']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=x, index=$const24.11, fn=<built-in function getitem>) ['$26binary_subscr.12', '$const24.11', 'x']
    $28compare_op.13 = $20binary_subscr.9 <= $26binary_subscr.12 ['$20binary_subscr.9', '$26binary_subscr.12', '$28compare_op.13']
    $30binary_and.14 = $14compare_op.6 & $28compare_op.13 ['$14compare_op.6', '$28compare_op.13', '$30binary_and.14']
    $32return_value.15 = cast(value=$30binary_and.14) ['$30binary_and.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

2024-09-08 00:12:30,412 - bytecode dump:
>          0	NOP(arg=None, lineno=425)
           2	LOAD_FAST(arg=0, lineno=428)
           4	LOAD_CONST(arg=1, lineno=428)
           6	BINARY_SUBSCR(arg=None, lineno=428)
           8	LOAD_FAST(arg=0, lineno=428)
          10	LOAD_CONST(arg=2, lineno=428)
          12	BINARY_SUBSCR(arg=None, lineno=428)
          14	BINARY_ADD(arg=None, lineno=428)
          16	LOAD_CONST(arg=3, lineno=428)
          18	LOAD_FAST(arg=0, lineno=428)
          20	LOAD_CONST(arg=4, lineno=428)
          22	BINARY_SUBSCR(arg=None, lineno=428)
          24	BINARY_MULTIPLY(arg=None, lineno=428)
          26	BINARY_SUBTRACT(arg=None, lineno=428)
          28	STORE_FAST(arg=1, lineno=428)
          30	LOAD_FAST(arg=0, lineno=429)
          32	LOAD_CONST(arg=1, lineno=429)
          34	BINARY_SUBSCR(arg=None, lineno=429)
          36	LOAD_FAST(arg=0, lineno=429)
          38	LOAD_CONST(arg=2, lineno=429)
          40	BINARY_SUBSCR(arg=None, lineno=429)
          42	BINARY_SUBTRACT(arg=None, lineno=429)
          44	LOAD_CONST(arg=3, lineno=429)
          46	BINARY_TRUE_DIVIDE(arg=None, lineno=429)
          48	STORE_FAST(arg=2, lineno=429)
          50	LOAD_GLOBAL(arg=0, lineno=431)
          52	LOAD_METHOD(arg=1, lineno=431)
          54	LOAD_FAST(arg=2, lineno=431)
          56	CALL_METHOD(arg=1, lineno=431)
          58	LOAD_GLOBAL(arg=0, lineno=431)
          60	LOAD_METHOD(arg=1, lineno=431)
          62	LOAD_FAST(arg=1, lineno=431)
          64	CALL_METHOD(arg=1, lineno=431)
          66	COMPARE_OP(arg=5, lineno=431)
          68	POP_JUMP_IF_FALSE(arg=38, lineno=431)
          70	LOAD_CONST(arg=4, lineno=434)
          72	RETURN_VALUE(arg=None, lineno=434)
>         74	LOAD_FAST(arg=2, lineno=436)
          76	UNARY_NEGATIVE(arg=None, lineno=436)
          78	LOAD_FAST(arg=1, lineno=436)
          80	BINARY_TRUE_DIVIDE(arg=None, lineno=436)
          82	RETURN_VALUE(arg=None, lineno=436)
2024-09-08 00:12:30,413 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-08 00:12:30,413 - stack: []
2024-09-08 00:12:30,413 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-08 00:12:30,414 - dispatch pc=0, inst=NOP(arg=None, lineno=425)
2024-09-08 00:12:30,414 - stack []
2024-09-08 00:12:30,414 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=428)
2024-09-08 00:12:30,414 - stack []
2024-09-08 00:12:30,414 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=428)
2024-09-08 00:12:30,414 - stack ['$x2.0']
2024-09-08 00:12:30,415 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=428)
2024-09-08 00:12:30,415 - stack ['$x2.0', '$const4.1']
2024-09-08 00:12:30,415 - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=428)
2024-09-08 00:12:30,415 - stack ['$6binary_subscr.2']
2024-09-08 00:12:30,415 - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=428)
2024-09-08 00:12:30,416 - stack ['$6binary_subscr.2', '$x8.3']
2024-09-08 00:12:30,416 - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=428)
2024-09-08 00:12:30,416 - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2024-09-08 00:12:30,416 - dispatch pc=14, inst=BINARY_ADD(arg=None, lineno=428)
2024-09-08 00:12:30,416 - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2024-09-08 00:12:30,417 - dispatch pc=16, inst=LOAD_CONST(arg=3, lineno=428)
2024-09-08 00:12:30,417 - stack ['$14binary_add.6']
2024-09-08 00:12:30,417 - dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=428)
2024-09-08 00:12:30,417 - stack ['$14binary_add.6', '$const16.7']
2024-09-08 00:12:30,417 - dispatch pc=20, inst=LOAD_CONST(arg=4, lineno=428)
2024-09-08 00:12:30,417 - stack ['$14binary_add.6', '$const16.7', '$x18.8']
2024-09-08 00:12:30,417 - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=428)
2024-09-08 00:12:30,417 - stack ['$14binary_add.6', '$const16.7', '$x18.8', '$const20.9']
2024-09-08 00:12:30,418 - dispatch pc=24, inst=BINARY_MULTIPLY(arg=None, lineno=428)
2024-09-08 00:12:30,418 - stack ['$14binary_add.6', '$const16.7', '$22binary_subscr.10']
2024-09-08 00:12:30,418 - dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=428)
2024-09-08 00:12:30,418 - stack ['$14binary_add.6', '$24binary_multiply.11']
2024-09-08 00:12:30,418 - dispatch pc=28, inst=STORE_FAST(arg=1, lineno=428)
2024-09-08 00:12:30,418 - stack ['$26binary_subtract.12']
2024-09-08 00:12:30,418 - dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=429)
2024-09-08 00:12:30,418 - stack []
2024-09-08 00:12:30,418 - dispatch pc=32, inst=LOAD_CONST(arg=1, lineno=429)
2024-09-08 00:12:30,418 - stack ['$x30.13']
2024-09-08 00:12:30,418 - dispatch pc=34, inst=BINARY_SUBSCR(arg=None, lineno=429)
2024-09-08 00:12:30,419 - stack ['$x30.13', '$const32.14']
2024-09-08 00:12:30,419 - dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=429)
2024-09-08 00:12:30,419 - stack ['$34binary_subscr.15']
2024-09-08 00:12:30,419 - dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=429)
2024-09-08 00:12:30,419 - stack ['$34binary_subscr.15', '$x36.16']
2024-09-08 00:12:30,419 - dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=429)
2024-09-08 00:12:30,419 - stack ['$34binary_subscr.15', '$x36.16', '$const38.17']
2024-09-08 00:12:30,419 - dispatch pc=42, inst=BINARY_SUBTRACT(arg=None, lineno=429)
2024-09-08 00:12:30,419 - stack ['$34binary_subscr.15', '$40binary_subscr.18']
2024-09-08 00:12:30,419 - dispatch pc=44, inst=LOAD_CONST(arg=3, lineno=429)
2024-09-08 00:12:30,419 - stack ['$42binary_subtract.19']
2024-09-08 00:12:30,419 - dispatch pc=46, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=429)
2024-09-08 00:12:30,419 - stack ['$42binary_subtract.19', '$const44.20']
2024-09-08 00:12:30,419 - dispatch pc=48, inst=STORE_FAST(arg=2, lineno=429)
2024-09-08 00:12:30,420 - stack ['$46binary_true_divide.21']
2024-09-08 00:12:30,420 - dispatch pc=50, inst=LOAD_GLOBAL(arg=0, lineno=431)
2024-09-08 00:12:30,420 - stack []
2024-09-08 00:12:30,420 - dispatch pc=52, inst=LOAD_METHOD(arg=1, lineno=431)
2024-09-08 00:12:30,420 - stack ['$50load_global.22']
2024-09-08 00:12:30,420 - dispatch pc=54, inst=LOAD_FAST(arg=2, lineno=431)
2024-09-08 00:12:30,420 - stack ['$52load_method.23']
2024-09-08 00:12:30,420 - dispatch pc=56, inst=CALL_METHOD(arg=1, lineno=431)
2024-09-08 00:12:30,420 - stack ['$52load_method.23', '$b54.24']
2024-09-08 00:12:30,420 - dispatch pc=58, inst=LOAD_GLOBAL(arg=0, lineno=431)
2024-09-08 00:12:30,420 - stack ['$56call_method.25']
2024-09-08 00:12:30,420 - dispatch pc=60, inst=LOAD_METHOD(arg=1, lineno=431)
2024-09-08 00:12:30,420 - stack ['$56call_method.25', '$58load_global.26']
2024-09-08 00:12:30,421 - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=431)
2024-09-08 00:12:30,421 - stack ['$56call_method.25', '$60load_method.27']
2024-09-08 00:12:30,421 - dispatch pc=64, inst=CALL_METHOD(arg=1, lineno=431)
2024-09-08 00:12:30,421 - stack ['$56call_method.25', '$60load_method.27', '$a62.28']
2024-09-08 00:12:30,421 - dispatch pc=66, inst=COMPARE_OP(arg=5, lineno=431)
2024-09-08 00:12:30,421 - stack ['$56call_method.25', '$64call_method.29']
2024-09-08 00:12:30,421 - dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=38, lineno=431)
2024-09-08 00:12:30,421 - stack ['$66compare_op.30']
2024-09-08 00:12:30,421 - end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=74, stack=(), blockstack=(), npush=0)]
2024-09-08 00:12:30,421 - pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=74 nstack_initial=0)])
2024-09-08 00:12:30,421 - stack: []
2024-09-08 00:12:30,421 - state.pc_initial: State(pc_initial=70 nstack_initial=0)
2024-09-08 00:12:30,421 - dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=434)
2024-09-08 00:12:30,422 - stack []
2024-09-08 00:12:30,422 - dispatch pc=72, inst=RETURN_VALUE(arg=None, lineno=434)
2024-09-08 00:12:30,422 - stack ['$const70.0']
2024-09-08 00:12:30,422 - end state. edges=[]
2024-09-08 00:12:30,422 - pending: deque([State(pc_initial=74 nstack_initial=0)])
2024-09-08 00:12:30,422 - stack: []
2024-09-08 00:12:30,422 - state.pc_initial: State(pc_initial=74 nstack_initial=0)
2024-09-08 00:12:30,422 - dispatch pc=74, inst=LOAD_FAST(arg=2, lineno=436)
2024-09-08 00:12:30,422 - stack []
2024-09-08 00:12:30,422 - dispatch pc=76, inst=UNARY_NEGATIVE(arg=None, lineno=436)
2024-09-08 00:12:30,422 - stack ['$b74.0']
2024-09-08 00:12:30,422 - dispatch pc=78, inst=LOAD_FAST(arg=1, lineno=436)
2024-09-08 00:12:30,422 - stack ['$76unary_negative.1']
2024-09-08 00:12:30,423 - dispatch pc=80, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=436)
2024-09-08 00:12:30,423 - stack ['$76unary_negative.1', '$a78.2']
2024-09-08 00:12:30,423 - dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=436)
2024-09-08 00:12:30,423 - stack ['$80binary_true_divide.3']
2024-09-08 00:12:30,423 - end state. edges=[]
2024-09-08 00:12:30,423 - -------------------------Prune PHIs-------------------------
2024-09-08 00:12:30,423 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set()})
2024-09-08 00:12:30,423 - defmap: {}
2024-09-08 00:12:30,423 - phismap: defaultdict(<class 'set'>, {})
2024-09-08 00:12:30,424 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-08 00:12:30,424 - keep phismap: {}
2024-09-08 00:12:30,424 - new_out: defaultdict(<class 'dict'>, {})
2024-09-08 00:12:30,424 - ----------------------DONE Prune PHIs-----------------------
2024-09-08 00:12:30,424 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14binary_add.6'}), (16, {'res': '$const16.7'}), (18, {'res': '$x18.8'}), (20, {'res': '$const20.9'}), (22, {'index': '$const20.9', 'target': '$x18.8', 'res': '$22binary_subscr.10'}), (24, {'lhs': '$const16.7', 'rhs': '$22binary_subscr.10', 'res': '$24binary_multiply.11'}), (26, {'lhs': '$14binary_add.6', 'rhs': '$24binary_multiply.11', 'res': '$26binary_subtract.12'}), (28, {'value': '$26binary_subtract.12'}), (30, {'res': '$x30.13'}), (32, {'res': '$const32.14'}), (34, {'index': '$const32.14', 'target': '$x30.13', 'res': '$34binary_subscr.15'}), (36, {'res': '$x36.16'}), (38, {'res': '$const38.17'}), (40, {'index': '$const38.17', 'target': '$x36.16', 'res': '$40binary_subscr.18'}), (42, {'lhs': '$34binary_subscr.15', 'rhs': '$40binary_subscr.18', 'res': '$42binary_subtract.19'}), (44, {'res': '$const44.20'}), (46, {'lhs': '$42binary_subtract.19', 'rhs': '$const44.20', 'res': '$46binary_true_divide.21'}), (48, {'value': '$46binary_true_divide.21'}), (50, {'res': '$50load_global.22'}), (52, {'item': '$50load_global.22', 'res': '$52load_method.23'}), (54, {'res': '$b54.24'}), (56, {'func': '$52load_method.23', 'args': ['$b54.24'], 'res': '$56call_method.25'}), (58, {'res': '$58load_global.26'}), (60, {'item': '$58load_global.26', 'res': '$60load_method.27'}), (62, {'res': '$a62.28'}), (64, {'func': '$60load_method.27', 'args': ['$a62.28'], 'res': '$64call_method.29'}), (66, {'lhs': '$56call_method.25', 'rhs': '$64call_method.29', 'res': '$66compare_op.30'}), (68, {'pred': '$66compare_op.30'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 74: ()})
2024-09-08 00:12:30,424 - block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$const70.0'}), (72, {'retval': '$const70.0', 'castval': '$72return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-08 00:12:30,424 - block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$b74.0'}), (76, {'value': '$b74.0', 'res': '$76unary_negative.1'}), (78, {'res': '$a78.2'}), (80, {'lhs': '$76unary_negative.1', 'rhs': '$a78.2', 'res': '$80binary_true_divide.3'}), (82, {'retval': '$80binary_true_divide.3', 'castval': '$82return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-08 00:12:30,426 - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14binary_add.6 = $6binary_subscr.2 + $12binary_subscr.5 ['$12binary_subscr.5', '$14binary_add.6', '$6binary_subscr.2']
    $const16.7 = const(int, 2)               ['$const16.7']
    $const20.9 = const(int, 0)               ['$const20.9']
    $22binary_subscr.10 = getitem(value=x, index=$const20.9, fn=<built-in function getitem>) ['$22binary_subscr.10', '$const20.9', 'x']
    $24binary_multiply.11 = $const16.7 * $22binary_subscr.10 ['$22binary_subscr.10', '$24binary_multiply.11', '$const16.7']
    a = $14binary_add.6 - $24binary_multiply.11 ['$14binary_add.6', '$24binary_multiply.11', 'a']
    $const32.14 = const(int, 1)              ['$const32.14']
    $34binary_subscr.15 = getitem(value=x, index=$const32.14, fn=<built-in function getitem>) ['$34binary_subscr.15', '$const32.14', 'x']
    $const38.17 = const(int, -1)             ['$const38.17']
    $40binary_subscr.18 = getitem(value=x, index=$const38.17, fn=<built-in function getitem>) ['$40binary_subscr.18', '$const38.17', 'x']
    $42binary_subtract.19 = $34binary_subscr.15 - $40binary_subscr.18 ['$34binary_subscr.15', '$40binary_subscr.18', '$42binary_subtract.19']
    $const44.20 = const(int, 2)              ['$const44.20']
    b = $42binary_subtract.19 / $const44.20  ['$42binary_subtract.19', '$const44.20', 'b']
    $50load_global.22 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$50load_global.22']
    $52load_method.23 = getattr(value=$50load_global.22, attr=abs) ['$50load_global.22', '$52load_method.23']
    $56call_method.25 = call $52load_method.23(b, func=$52load_method.23, args=[Var(b, pitch.py:429)], kws=(), vararg=None, varkwarg=None, target=None) ['$52load_method.23', '$56call_method.25', 'b']
    $58load_global.26 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$58load_global.26']
    $60load_method.27 = getattr(value=$58load_global.26, attr=abs) ['$58load_global.26', '$60load_method.27']
    $64call_method.29 = call $60load_method.27(a, func=$60load_method.27, args=[Var(a, pitch.py:428)], kws=(), vararg=None, varkwarg=None, target=None) ['$60load_method.27', '$64call_method.29', 'a']
    $66compare_op.30 = $56call_method.25 >= $64call_method.29 ['$56call_method.25', '$64call_method.29', '$66compare_op.30']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.30, func=bool68, args=(Var($66compare_op.30, pitch.py:431),), kws=(), vararg=None, varkwarg=None, target=None) ['$66compare_op.30', '$68pred', 'bool68']
    branch $68pred, 70, 74                   ['$68pred']
label 70:
    $const70.0 = const(int, 0)               ['$const70.0']
    $72return_value.1 = cast(value=$const70.0) ['$72return_value.1', '$const70.0']
    return $72return_value.1                 ['$72return_value.1']
label 74:
    $76unary_negative.1 = unary(fn=<built-in function neg>, value=b) ['$76unary_negative.1', 'b']
    $80binary_true_divide.3 = $76unary_negative.1 / a ['$76unary_negative.1', '$80binary_true_divide.3', 'a']
    $82return_value.4 = cast(value=$80binary_true_divide.3) ['$80binary_true_divide.3', '$82return_value.4']
    return $82return_value.4                 ['$82return_value.4']

2024-09-08 00:15:18,885 - Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2024-09-08 00:15:19,865 - Creating converter from 7 to 5
2024-09-08 00:15:19,865 - Creating converter from 5 to 7
2024-09-08 00:15:19,865 - Creating converter from 7 to 5
2024-09-08 00:15:19,865 - Creating converter from 5 to 7
2024-09-08 00:15:27,054 - bytecode dump:
>          0	NOP(arg=None, lineno=1141)
           2	LOAD_FAST(arg=0, lineno=1144)
           4	LOAD_CONST(arg=1, lineno=1144)
           6	BINARY_SUBSCR(arg=None, lineno=1144)
           8	STORE_FAST(arg=3, lineno=1144)
          10	LOAD_FAST(arg=1, lineno=1145)
          12	UNARY_NEGATIVE(arg=None, lineno=1145)
          14	LOAD_FAST(arg=3, lineno=1145)
          16	DUP_TOP(arg=None, lineno=1145)
          18	ROT_THREE(arg=None, lineno=1145)
          20	COMPARE_OP(arg=1, lineno=1145)
          22	POP_JUMP_IF_FALSE(arg=17, lineno=1145)
          24	LOAD_FAST(arg=1, lineno=1145)
          26	COMPARE_OP(arg=1, lineno=1145)
          28	POP_JUMP_IF_FALSE(arg=21, lineno=1145)
          30	JUMP_FORWARD(arg=2, lineno=1145)
>         32	POP_TOP(arg=None, lineno=1145)
          34	JUMP_FORWARD(arg=2, lineno=1145)
>         36	LOAD_CONST(arg=1, lineno=1146)
          38	STORE_FAST(arg=3, lineno=1146)
>         40	LOAD_FAST(arg=0, lineno=1148)
          42	LOAD_CONST(arg=2, lineno=1148)
          44	BINARY_SUBSCR(arg=None, lineno=1148)
          46	STORE_FAST(arg=4, lineno=1148)
          48	LOAD_FAST(arg=1, lineno=1149)
          50	UNARY_NEGATIVE(arg=None, lineno=1149)
          52	LOAD_FAST(arg=4, lineno=1149)
          54	DUP_TOP(arg=None, lineno=1149)
          56	ROT_THREE(arg=None, lineno=1149)
          58	COMPARE_OP(arg=1, lineno=1149)
          60	POP_JUMP_IF_FALSE(arg=36, lineno=1149)
          62	LOAD_FAST(arg=1, lineno=1149)
          64	COMPARE_OP(arg=1, lineno=1149)
          66	POP_JUMP_IF_FALSE(arg=40, lineno=1149)
          68	JUMP_FORWARD(arg=2, lineno=1149)
>         70	POP_TOP(arg=None, lineno=1149)
          72	JUMP_FORWARD(arg=2, lineno=1149)
>         74	LOAD_CONST(arg=1, lineno=1150)
          76	STORE_FAST(arg=4, lineno=1150)
>         78	LOAD_FAST(arg=2, lineno=1152)
          80	POP_JUMP_IF_FALSE(arg=52, lineno=1152)
          82	LOAD_GLOBAL(arg=0, lineno=1153)
          84	LOAD_METHOD(arg=1, lineno=1153)
          86	LOAD_FAST(arg=3, lineno=1153)
          88	CALL_METHOD(arg=1, lineno=1153)
          90	LOAD_GLOBAL(arg=0, lineno=1153)
          92	LOAD_METHOD(arg=1, lineno=1153)
          94	LOAD_FAST(arg=4, lineno=1153)
          96	CALL_METHOD(arg=1, lineno=1153)
          98	COMPARE_OP(arg=3, lineno=1153)
         100	RETURN_VALUE(arg=None, lineno=1153)
>        102	LOAD_GLOBAL(arg=0, lineno=1155)
         104	LOAD_METHOD(arg=2, lineno=1155)
         106	LOAD_FAST(arg=3, lineno=1155)
         108	CALL_METHOD(arg=1, lineno=1155)
         110	LOAD_GLOBAL(arg=0, lineno=1155)
         112	LOAD_METHOD(arg=2, lineno=1155)
         114	LOAD_FAST(arg=4, lineno=1155)
         116	CALL_METHOD(arg=1, lineno=1155)
         118	COMPARE_OP(arg=3, lineno=1155)
         120	RETURN_VALUE(arg=None, lineno=1155)
2024-09-08 00:15:27,055 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-08 00:15:27,055 - stack: []
2024-09-08 00:15:27,055 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-08 00:15:27,055 - dispatch pc=0, inst=NOP(arg=None, lineno=1141)
2024-09-08 00:15:27,055 - stack []
2024-09-08 00:15:27,055 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1144)
2024-09-08 00:15:27,055 - stack []
2024-09-08 00:15:27,056 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1144)
2024-09-08 00:15:27,056 - stack ['$x2.0']
2024-09-08 00:15:27,056 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1144)
2024-09-08 00:15:27,056 - stack ['$x2.0', '$const4.1']
2024-09-08 00:15:27,056 - dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1144)
2024-09-08 00:15:27,056 - stack ['$6binary_subscr.2']
2024-09-08 00:15:27,056 - dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=1145)
2024-09-08 00:15:27,056 - stack []
2024-09-08 00:15:27,056 - dispatch pc=12, inst=UNARY_NEGATIVE(arg=None, lineno=1145)
2024-09-08 00:15:27,056 - stack ['$threshold10.3']
2024-09-08 00:15:27,056 - dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=1145)
2024-09-08 00:15:27,056 - stack ['$12unary_negative.4']
2024-09-08 00:15:27,056 - dispatch pc=16, inst=DUP_TOP(arg=None, lineno=1145)
2024-09-08 00:15:27,057 - stack ['$12unary_negative.4', '$x014.5']
2024-09-08 00:15:27,057 - dispatch pc=18, inst=ROT_THREE(arg=None, lineno=1145)
2024-09-08 00:15:27,057 - stack ['$12unary_negative.4', '$x014.5', '$16dup_top.6']
2024-09-08 00:15:27,057 - dispatch pc=20, inst=COMPARE_OP(arg=1, lineno=1145)
2024-09-08 00:15:27,057 - stack ['$16dup_top.6', '$12unary_negative.4', '$x014.5']
2024-09-08 00:15:27,057 - dispatch pc=22, inst=POP_JUMP_IF_FALSE(arg=17, lineno=1145)
2024-09-08 00:15:27,057 - stack ['$16dup_top.6', '$20compare_op.7']
2024-09-08 00:15:27,057 - end state. edges=[Edge(pc=24, stack=('$16dup_top.6',), blockstack=(), npush=0), Edge(pc=32, stack=('$16dup_top.6',), blockstack=(), npush=0)]
2024-09-08 00:15:27,057 - pending: deque([State(pc_initial=24 nstack_initial=1), State(pc_initial=32 nstack_initial=1)])
2024-09-08 00:15:27,057 - stack: ['$phi24.0']
2024-09-08 00:15:27,057 - state.pc_initial: State(pc_initial=24 nstack_initial=1)
2024-09-08 00:15:27,058 - dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=1145)
2024-09-08 00:15:27,058 - stack ['$phi24.0']
2024-09-08 00:15:27,058 - dispatch pc=26, inst=COMPARE_OP(arg=1, lineno=1145)
2024-09-08 00:15:27,058 - stack ['$phi24.0', '$threshold24.1']
2024-09-08 00:15:27,058 - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=21, lineno=1145)
2024-09-08 00:15:27,058 - stack ['$26compare_op.2']
2024-09-08 00:15:27,058 - end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=40, stack=(), blockstack=(), npush=0)]
2024-09-08 00:15:27,058 - pending: deque([State(pc_initial=32 nstack_initial=1), State(pc_initial=30 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2024-09-08 00:15:27,058 - stack: ['$phi32.0']
2024-09-08 00:15:27,058 - state.pc_initial: State(pc_initial=32 nstack_initial=1)
2024-09-08 00:15:27,058 - dispatch pc=32, inst=POP_TOP(arg=None, lineno=1145)
2024-09-08 00:15:27,058 - stack ['$phi32.0']
2024-09-08 00:15:27,058 - dispatch pc=34, inst=JUMP_FORWARD(arg=2, lineno=1145)
2024-09-08 00:15:27,059 - stack []
2024-09-08 00:15:27,059 - end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2024-09-08 00:15:27,059 - pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2024-09-08 00:15:27,059 - stack: []
2024-09-08 00:15:27,059 - state.pc_initial: State(pc_initial=30 nstack_initial=0)
2024-09-08 00:15:27,059 - dispatch pc=30, inst=JUMP_FORWARD(arg=2, lineno=1145)
2024-09-08 00:15:27,059 - stack []
2024-09-08 00:15:27,059 - end state. edges=[Edge(pc=36, stack=(), blockstack=(), npush=0)]
2024-09-08 00:15:27,059 - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2024-09-08 00:15:27,059 - stack: []
2024-09-08 00:15:27,059 - state.pc_initial: State(pc_initial=40 nstack_initial=0)
2024-09-08 00:15:27,059 - dispatch pc=40, inst=LOAD_FAST(arg=0, lineno=1148)
2024-09-08 00:15:27,059 - stack []
2024-09-08 00:15:27,060 - dispatch pc=42, inst=LOAD_CONST(arg=2, lineno=1148)
2024-09-08 00:15:27,060 - stack ['$x40.0']
2024-09-08 00:15:27,060 - dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=1148)
2024-09-08 00:15:27,060 - stack ['$x40.0', '$const42.1']
2024-09-08 00:15:27,060 - dispatch pc=46, inst=STORE_FAST(arg=4, lineno=1148)
2024-09-08 00:15:27,060 - stack ['$44binary_subscr.2']
2024-09-08 00:15:27,060 - dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=1149)
2024-09-08 00:15:27,060 - stack []
2024-09-08 00:15:27,060 - dispatch pc=50, inst=UNARY_NEGATIVE(arg=None, lineno=1149)
2024-09-08 00:15:27,060 - stack ['$threshold48.3']
2024-09-08 00:15:27,060 - dispatch pc=52, inst=LOAD_FAST(arg=4, lineno=1149)
2024-09-08 00:15:27,060 - stack ['$50unary_negative.4']
2024-09-08 00:15:27,060 - dispatch pc=54, inst=DUP_TOP(arg=None, lineno=1149)
2024-09-08 00:15:27,061 - stack ['$50unary_negative.4', '$x152.5']
2024-09-08 00:15:27,061 - dispatch pc=56, inst=ROT_THREE(arg=None, lineno=1149)
2024-09-08 00:15:27,061 - stack ['$50unary_negative.4', '$x152.5', '$54dup_top.6']
2024-09-08 00:15:27,061 - dispatch pc=58, inst=COMPARE_OP(arg=1, lineno=1149)
2024-09-08 00:15:27,061 - stack ['$54dup_top.6', '$50unary_negative.4', '$x152.5']
2024-09-08 00:15:27,061 - dispatch pc=60, inst=POP_JUMP_IF_FALSE(arg=36, lineno=1149)
2024-09-08 00:15:27,061 - stack ['$54dup_top.6', '$58compare_op.7']
2024-09-08 00:15:27,061 - end state. edges=[Edge(pc=62, stack=('$54dup_top.6',), blockstack=(), npush=0), Edge(pc=70, stack=('$54dup_top.6',), blockstack=(), npush=0)]
2024-09-08 00:15:27,061 - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
2024-09-08 00:15:27,061 - pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
2024-09-08 00:15:27,061 - stack: []
2024-09-08 00:15:27,061 - state.pc_initial: State(pc_initial=36 nstack_initial=0)
2024-09-08 00:15:27,062 - dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=1146)
2024-09-08 00:15:27,062 - stack []
2024-09-08 00:15:27,062 - dispatch pc=38, inst=STORE_FAST(arg=3, lineno=1146)
2024-09-08 00:15:27,062 - stack ['$const36.0']
2024-09-08 00:15:27,062 - end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2024-09-08 00:15:27,062 - pending: deque([State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1), State(pc_initial=40 nstack_initial=0)])
2024-09-08 00:15:27,062 - stack: ['$phi62.0']
2024-09-08 00:15:27,062 - state.pc_initial: State(pc_initial=62 nstack_initial=1)
2024-09-08 00:15:27,062 - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=1149)
2024-09-08 00:15:27,062 - stack ['$phi62.0']
2024-09-08 00:15:27,062 - dispatch pc=64, inst=COMPARE_OP(arg=1, lineno=1149)
2024-09-08 00:15:27,062 - stack ['$phi62.0', '$threshold62.1']
2024-09-08 00:15:27,062 - dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=40, lineno=1149)
2024-09-08 00:15:27,063 - stack ['$64compare_op.2']
2024-09-08 00:15:27,063 - end state. edges=[Edge(pc=68, stack=(), blockstack=(), npush=0), Edge(pc=78, stack=(), blockstack=(), npush=0)]
2024-09-08 00:15:27,063 - pending: deque([State(pc_initial=70 nstack_initial=1), State(pc_initial=40 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-08 00:15:27,063 - stack: ['$phi70.0']
2024-09-08 00:15:27,063 - state.pc_initial: State(pc_initial=70 nstack_initial=1)
2024-09-08 00:15:27,063 - dispatch pc=70, inst=POP_TOP(arg=None, lineno=1149)
2024-09-08 00:15:27,063 - stack ['$phi70.0']
2024-09-08 00:15:27,063 - dispatch pc=72, inst=JUMP_FORWARD(arg=2, lineno=1149)
2024-09-08 00:15:27,063 - stack []
2024-09-08 00:15:27,063 - end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0)]
2024-09-08 00:15:27,063 - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-08 00:15:27,063 - pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-08 00:15:27,063 - stack: []
2024-09-08 00:15:27,064 - state.pc_initial: State(pc_initial=68 nstack_initial=0)
2024-09-08 00:15:27,064 - dispatch pc=68, inst=JUMP_FORWARD(arg=2, lineno=1149)
2024-09-08 00:15:27,064 - stack []
2024-09-08 00:15:27,064 - end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0)]
2024-09-08 00:15:27,064 - pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=74 nstack_initial=0)])
2024-09-08 00:15:27,064 - stack: []
2024-09-08 00:15:27,064 - state.pc_initial: State(pc_initial=78 nstack_initial=0)
2024-09-08 00:15:27,064 - dispatch pc=78, inst=LOAD_FAST(arg=2, lineno=1152)
2024-09-08 00:15:27,064 - stack []
2024-09-08 00:15:27,066 - dispatch pc=80, inst=POP_JUMP_IF_FALSE(arg=52, lineno=1152)
2024-09-08 00:15:27,066 - stack ['$zero_pos78.0']
2024-09-08 00:15:27,066 - end state. edges=[Edge(pc=82, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
2024-09-08 00:15:27,067 - pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2024-09-08 00:15:27,067 - pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2024-09-08 00:15:27,067 - stack: []
2024-09-08 00:15:27,067 - state.pc_initial: State(pc_initial=74 nstack_initial=0)
2024-09-08 00:15:27,067 - dispatch pc=74, inst=LOAD_CONST(arg=1, lineno=1150)
2024-09-08 00:15:27,067 - stack []
2024-09-08 00:15:27,067 - dispatch pc=76, inst=STORE_FAST(arg=4, lineno=1150)
2024-09-08 00:15:27,067 - stack ['$const74.0']
2024-09-08 00:15:27,068 - end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0)]
2024-09-08 00:15:27,068 - pending: deque([State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-08 00:15:27,068 - stack: []
2024-09-08 00:15:27,068 - state.pc_initial: State(pc_initial=82 nstack_initial=0)
2024-09-08 00:15:27,068 - dispatch pc=82, inst=LOAD_GLOBAL(arg=0, lineno=1153)
2024-09-08 00:15:27,068 - stack []
2024-09-08 00:15:27,068 - dispatch pc=84, inst=LOAD_METHOD(arg=1, lineno=1153)
2024-09-08 00:15:27,068 - stack ['$82load_global.0']
2024-09-08 00:15:27,068 - dispatch pc=86, inst=LOAD_FAST(arg=3, lineno=1153)
2024-09-08 00:15:27,068 - stack ['$84load_method.1']
2024-09-08 00:15:27,068 - dispatch pc=88, inst=CALL_METHOD(arg=1, lineno=1153)
2024-09-08 00:15:27,068 - stack ['$84load_method.1', '$x086.2']
2024-09-08 00:15:27,069 - dispatch pc=90, inst=LOAD_GLOBAL(arg=0, lineno=1153)
2024-09-08 00:15:27,069 - stack ['$88call_method.3']
2024-09-08 00:15:27,069 - dispatch pc=92, inst=LOAD_METHOD(arg=1, lineno=1153)
2024-09-08 00:15:27,069 - stack ['$88call_method.3', '$90load_global.4']
2024-09-08 00:15:27,069 - dispatch pc=94, inst=LOAD_FAST(arg=4, lineno=1153)
2024-09-08 00:15:27,069 - stack ['$88call_method.3', '$92load_method.5']
2024-09-08 00:15:27,069 - dispatch pc=96, inst=CALL_METHOD(arg=1, lineno=1153)
2024-09-08 00:15:27,069 - stack ['$88call_method.3', '$92load_method.5', '$x194.6']
2024-09-08 00:15:27,069 - dispatch pc=98, inst=COMPARE_OP(arg=3, lineno=1153)
2024-09-08 00:15:27,069 - stack ['$88call_method.3', '$96call_method.7']
2024-09-08 00:15:27,069 - dispatch pc=100, inst=RETURN_VALUE(arg=None, lineno=1153)
2024-09-08 00:15:27,069 - stack ['$98compare_op.8']
2024-09-08 00:15:27,070 - end state. edges=[]
2024-09-08 00:15:27,070 - pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-08 00:15:27,070 - stack: []
2024-09-08 00:15:27,070 - state.pc_initial: State(pc_initial=102 nstack_initial=0)
2024-09-08 00:15:27,070 - dispatch pc=102, inst=LOAD_GLOBAL(arg=0, lineno=1155)
2024-09-08 00:15:27,070 - stack []
2024-09-08 00:15:27,070 - dispatch pc=104, inst=LOAD_METHOD(arg=2, lineno=1155)
2024-09-08 00:15:27,070 - stack ['$102load_global.0']
2024-09-08 00:15:27,070 - dispatch pc=106, inst=LOAD_FAST(arg=3, lineno=1155)
2024-09-08 00:15:27,070 - stack ['$104load_method.1']
2024-09-08 00:15:27,070 - dispatch pc=108, inst=CALL_METHOD(arg=1, lineno=1155)
2024-09-08 00:15:27,070 - stack ['$104load_method.1', '$x0106.2']
2024-09-08 00:15:27,071 - dispatch pc=110, inst=LOAD_GLOBAL(arg=0, lineno=1155)
2024-09-08 00:15:27,071 - stack ['$108call_method.3']
2024-09-08 00:15:27,071 - dispatch pc=112, inst=LOAD_METHOD(arg=2, lineno=1155)
2024-09-08 00:15:27,071 - stack ['$108call_method.3', '$110load_global.4']
2024-09-08 00:15:27,071 - dispatch pc=114, inst=LOAD_FAST(arg=4, lineno=1155)
2024-09-08 00:15:27,071 - stack ['$108call_method.3', '$112load_method.5']
2024-09-08 00:15:27,071 - dispatch pc=116, inst=CALL_METHOD(arg=1, lineno=1155)
2024-09-08 00:15:27,071 - stack ['$108call_method.3', '$112load_method.5', '$x1114.6']
2024-09-08 00:15:27,071 - dispatch pc=118, inst=COMPARE_OP(arg=3, lineno=1155)
2024-09-08 00:15:27,071 - stack ['$108call_method.3', '$116call_method.7']
2024-09-08 00:15:27,071 - dispatch pc=120, inst=RETURN_VALUE(arg=None, lineno=1155)
2024-09-08 00:15:27,071 - stack ['$118compare_op.8']
2024-09-08 00:15:27,071 - end state. edges=[]
2024-09-08 00:15:27,072 - pending: deque([State(pc_initial=78 nstack_initial=0)])
2024-09-08 00:15:27,072 - -------------------------Prune PHIs-------------------------
2024-09-08 00:15:27,072 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=1): {'$phi24.0'},
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=1): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=1): {'$phi62.0'},
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=1): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=82 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set()})
2024-09-08 00:15:27,072 - defmap: {'$phi24.0': State(pc_initial=0 nstack_initial=0),
 '$phi32.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.0': State(pc_initial=40 nstack_initial=0),
 '$phi70.0': State(pc_initial=40 nstack_initial=0)}
2024-09-08 00:15:27,073 - phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))},
             '$phi70.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))}})
2024-09-08 00:15:27,073 - changing phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))},
             '$phi70.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))}})
2024-09-08 00:15:27,073 - keep phismap: {'$phi24.0': {('$16dup_top.6', State(pc_initial=0 nstack_initial=0))},
 '$phi62.0': {('$54dup_top.6', State(pc_initial=40 nstack_initial=0))}}
2024-09-08 00:15:27,073 - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi24.0': '$16dup_top.6'},
             State(pc_initial=40 nstack_initial=0): {'$phi62.0': '$54dup_top.6'}})
2024-09-08 00:15:27,074 - ----------------------DONE Prune PHIs-----------------------
2024-09-08 00:15:27,074 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'value': '$6binary_subscr.2'}), (10, {'res': '$threshold10.3'}), (12, {'value': '$threshold10.3', 'res': '$12unary_negative.4'}), (14, {'res': '$x014.5'}), (16, {'orig': ['$x014.5'], 'duped': ['$16dup_top.6']}), (20, {'lhs': '$12unary_negative.4', 'rhs': '$x014.5', 'res': '$20compare_op.7'}), (22, {'pred': '$20compare_op.7'})), outgoing_phis={'$phi24.0': '$16dup_top.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={24: ('$16dup_top.6',), 32: ('$16dup_top.6',)})
2024-09-08 00:15:27,074 - block_infos State(pc_initial=24 nstack_initial=1):
AdaptBlockInfo(insts=((24, {'res': '$threshold24.1'}), (26, {'lhs': '$phi24.0', 'rhs': '$threshold24.1', 'res': '$26compare_op.2'}), (28, {'pred': '$26compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 40: ()})
2024-09-08 00:15:27,074 - block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ()})
2024-09-08 00:15:27,074 - block_infos State(pc_initial=32 nstack_initial=1):
AdaptBlockInfo(insts=((34, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2024-09-08 00:15:27,074 - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$const36.0'}), (38, {'value': '$const36.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2024-09-08 00:15:27,074 - block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$x40.0'}), (42, {'res': '$const42.1'}), (44, {'index': '$const42.1', 'target': '$x40.0', 'res': '$44binary_subscr.2'}), (46, {'value': '$44binary_subscr.2'}), (48, {'res': '$threshold48.3'}), (50, {'value': '$threshold48.3', 'res': '$50unary_negative.4'}), (52, {'res': '$x152.5'}), (54, {'orig': ['$x152.5'], 'duped': ['$54dup_top.6']}), (58, {'lhs': '$50unary_negative.4', 'rhs': '$x152.5', 'res': '$58compare_op.7'}), (60, {'pred': '$58compare_op.7'})), outgoing_phis={'$phi62.0': '$54dup_top.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ('$54dup_top.6',), 70: ('$54dup_top.6',)})
2024-09-08 00:15:27,075 - block_infos State(pc_initial=62 nstack_initial=1):
AdaptBlockInfo(insts=((62, {'res': '$threshold62.1'}), (64, {'lhs': '$phi62.0', 'rhs': '$threshold62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={68: (), 78: ()})
2024-09-08 00:15:27,075 - block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: ()})
2024-09-08 00:15:27,075 - block_infos State(pc_initial=70 nstack_initial=1):
AdaptBlockInfo(insts=((72, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: ()})
2024-09-08 00:15:27,075 - block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$const74.0'}), (76, {'value': '$const74.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: ()})
2024-09-08 00:15:27,075 - block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$zero_pos78.0'}), (80, {'pred': '$zero_pos78.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: (), 102: ()})
2024-09-08 00:15:27,075 - block_infos State(pc_initial=82 nstack_initial=0):
AdaptBlockInfo(insts=((82, {'res': '$82load_global.0'}), (84, {'item': '$82load_global.0', 'res': '$84load_method.1'}), (86, {'res': '$x086.2'}), (88, {'func': '$84load_method.1', 'args': ['$x086.2'], 'res': '$88call_method.3'}), (90, {'res': '$90load_global.4'}), (92, {'item': '$90load_global.4', 'res': '$92load_method.5'}), (94, {'res': '$x194.6'}), (96, {'func': '$92load_method.5', 'args': ['$x194.6'], 'res': '$96call_method.7'}), (98, {'lhs': '$88call_method.3', 'rhs': '$96call_method.7', 'res': '$98compare_op.8'}), (100, {'retval': '$98compare_op.8', 'castval': '$100return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-08 00:15:27,075 - block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$102load_global.0'}), (104, {'item': '$102load_global.0', 'res': '$104load_method.1'}), (106, {'res': '$x0106.2'}), (108, {'func': '$104load_method.1', 'args': ['$x0106.2'], 'res': '$108call_method.3'}), (110, {'res': '$110load_global.4'}), (112, {'item': '$110load_global.4', 'res': '$112load_method.5'}), (114, {'res': '$x1114.6'}), (116, {'func': '$112load_method.5', 'args': ['$x1114.6'], 'res': '$116call_method.7'}), (118, {'lhs': '$108call_method.3', 'rhs': '$116call_method.7', 'res': '$118compare_op.8'}), (120, {'retval': '$118compare_op.8', 'castval': '$120return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-08 00:15:27,078 - label 0:
    x = arg(0, name=x)                       ['x']
    threshold = arg(1, name=threshold)       ['threshold']
    zero_pos = arg(2, name=zero_pos)         ['zero_pos']
    $const4.1 = const(int, 0)                ['$const4.1']
    x0 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$const4.1', 'x', 'x0']
    $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$12unary_negative.4', 'threshold']
    $20compare_op.7 = $12unary_negative.4 <= x0 ['$12unary_negative.4', '$20compare_op.7', 'x0']
    bool22 = global(bool: <class 'bool'>)    ['bool22']
    $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None) ['$20compare_op.7', '$22pred', 'bool22']
    $phi24.0 = x0                            ['$phi24.0', 'x0']
    branch $22pred, 24, 32                   ['$22pred']
label 24:
    $26compare_op.2 = $phi24.0 <= threshold  ['$26compare_op.2', '$phi24.0', 'threshold']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.2', '$28pred', 'bool28']
    branch $28pred, 30, 40                   ['$28pred']
label 30:
    jump 36                                  []
label 32:
    jump 40                                  []
label 36:
    x0 = const(int, 0)                       ['x0']
    jump 40                                  []
label 40:
    $const42.1 = const(int, -1)              ['$const42.1']
    x1 = getitem(value=x, index=$const42.1, fn=<built-in function getitem>) ['$const42.1', 'x', 'x1']
    $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$50unary_negative.4', 'threshold']
    $58compare_op.7 = $50unary_negative.4 <= x1 ['$50unary_negative.4', '$58compare_op.7', 'x1']
    bool60 = global(bool: <class 'bool'>)    ['bool60']
    $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None) ['$58compare_op.7', '$60pred', 'bool60']
    $phi62.0 = x1                            ['$phi62.0', 'x1']
    branch $60pred, 62, 70                   ['$60pred']
label 62:
    $64compare_op.2 = $phi62.0 <= threshold  ['$64compare_op.2', '$phi62.0', 'threshold']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 78                   ['$66pred']
label 68:
    jump 74                                  []
label 70:
    jump 78                                  []
label 74:
    x1 = const(int, 0)                       ['x1']
    jump 78                                  []
label 78:
    bool80 = global(bool: <class 'bool'>)    ['bool80']
    $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None) ['$80pred', 'bool80', 'zero_pos']
    branch $80pred, 82, 102                  ['$80pred']
label 82:
    $82load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$82load_global.0']
    $84load_method.1 = getattr(value=$82load_global.0, attr=signbit) ['$82load_global.0', '$84load_method.1']
    $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None) ['$84load_method.1', '$88call_method.3', 'x0']
    $90load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$90load_global.4']
    $92load_method.5 = getattr(value=$90load_global.4, attr=signbit) ['$90load_global.4', '$92load_method.5']
    $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None) ['$92load_method.5', '$96call_method.7', 'x1']
    $98compare_op.8 = $88call_method.3 != $96call_method.7 ['$88call_method.3', '$96call_method.7', '$98compare_op.8']
    $100return_value.9 = cast(value=$98compare_op.8) ['$100return_value.9', '$98compare_op.8']
    return $100return_value.9                ['$100return_value.9']
label 102:
    $102load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$102load_global.0']
    $104load_method.1 = getattr(value=$102load_global.0, attr=sign) ['$102load_global.0', '$104load_method.1']
    $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None) ['$104load_method.1', '$108call_method.3', 'x0']
    $110load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$110load_global.4']
    $112load_method.5 = getattr(value=$110load_global.4, attr=sign) ['$110load_global.4', '$112load_method.5']
    $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None) ['$112load_method.5', '$116call_method.7', 'x1']
    $118compare_op.8 = $108call_method.3 != $116call_method.7 ['$108call_method.3', '$116call_method.7', '$118compare_op.8']
    $120return_value.9 = cast(value=$118compare_op.8) ['$118compare_op.8', '$120return_value.9']
    return $120return_value.9                ['$120return_value.9']

2024-09-08 00:15:28,245 - bytecode dump:
>          0	NOP(arg=None, lineno=1039)
           2	LOAD_FAST(arg=0, lineno=1042)
           4	LOAD_CONST(arg=1, lineno=1042)
           6	BINARY_SUBSCR(arg=None, lineno=1042)
           8	LOAD_FAST(arg=0, lineno=1042)
          10	LOAD_CONST(arg=2, lineno=1042)
          12	BINARY_SUBSCR(arg=None, lineno=1042)
          14	COMPARE_OP(arg=4, lineno=1042)
          16	LOAD_FAST(arg=0, lineno=1042)
          18	LOAD_CONST(arg=1, lineno=1042)
          20	BINARY_SUBSCR(arg=None, lineno=1042)
          22	LOAD_FAST(arg=0, lineno=1042)
          24	LOAD_CONST(arg=3, lineno=1042)
          26	BINARY_SUBSCR(arg=None, lineno=1042)
          28	COMPARE_OP(arg=5, lineno=1042)
          30	BINARY_AND(arg=None, lineno=1042)
          32	RETURN_VALUE(arg=None, lineno=1042)
2024-09-08 00:15:28,245 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-08 00:15:28,245 - stack: []
2024-09-08 00:15:28,245 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-08 00:15:28,245 - dispatch pc=0, inst=NOP(arg=None, lineno=1039)
2024-09-08 00:15:28,245 - stack []
2024-09-08 00:15:28,246 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-08 00:15:28,246 - stack []
2024-09-08 00:15:28,246 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1042)
2024-09-08 00:15:28,246 - stack ['$x2.0']
2024-09-08 00:15:28,246 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-08 00:15:28,246 - stack ['$x2.0', '$const4.1']
2024-09-08 00:15:28,246 - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-08 00:15:28,247 - stack ['$6binary_subscr.2']
2024-09-08 00:15:28,247 - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1042)
2024-09-08 00:15:28,247 - stack ['$6binary_subscr.2', '$x8.3']
2024-09-08 00:15:28,247 - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-08 00:15:28,247 - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2024-09-08 00:15:28,247 - dispatch pc=14, inst=COMPARE_OP(arg=4, lineno=1042)
2024-09-08 00:15:28,247 - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2024-09-08 00:15:28,248 - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-08 00:15:28,248 - stack ['$14compare_op.6']
2024-09-08 00:15:28,248 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1042)
2024-09-08 00:15:28,248 - stack ['$14compare_op.6', '$x16.7']
2024-09-08 00:15:28,249 - dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-08 00:15:28,249 - stack ['$14compare_op.6', '$x16.7', '$const18.8']
2024-09-08 00:15:28,249 - dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-08 00:15:28,249 - stack ['$14compare_op.6', '$20binary_subscr.9']
2024-09-08 00:15:28,249 - dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=1042)
2024-09-08 00:15:28,249 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10']
2024-09-08 00:15:28,249 - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-08 00:15:28,249 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10', '$const24.11']
2024-09-08 00:15:28,249 - dispatch pc=28, inst=COMPARE_OP(arg=5, lineno=1042)
2024-09-08 00:15:28,249 - stack ['$14compare_op.6', '$20binary_subscr.9', '$26binary_subscr.12']
2024-09-08 00:15:28,250 - dispatch pc=30, inst=BINARY_AND(arg=None, lineno=1042)
2024-09-08 00:15:28,250 - stack ['$14compare_op.6', '$28compare_op.13']
2024-09-08 00:15:28,250 - dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1042)
2024-09-08 00:15:28,250 - stack ['$30binary_and.14']
2024-09-08 00:15:28,250 - end state. edges=[]
2024-09-08 00:15:28,250 - -------------------------Prune PHIs-------------------------
2024-09-08 00:15:28,250 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-08 00:15:28,251 - defmap: {}
2024-09-08 00:15:28,251 - phismap: defaultdict(<class 'set'>, {})
2024-09-08 00:15:28,251 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-08 00:15:28,251 - keep phismap: {}
2024-09-08 00:15:28,251 - new_out: defaultdict(<class 'dict'>, {})
2024-09-08 00:15:28,251 - ----------------------DONE Prune PHIs-----------------------
2024-09-08 00:15:28,251 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14compare_op.6'}), (16, {'res': '$x16.7'}), (18, {'res': '$const18.8'}), (20, {'index': '$const18.8', 'target': '$x16.7', 'res': '$20binary_subscr.9'}), (22, {'res': '$x22.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$x22.10', 'res': '$26binary_subscr.12'}), (28, {'lhs': '$20binary_subscr.9', 'rhs': '$26binary_subscr.12', 'res': '$28compare_op.13'}), (30, {'lhs': '$14compare_op.6', 'rhs': '$28compare_op.13', 'res': '$30binary_and.14'}), (32, {'retval': '$30binary_and.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-08 00:15:28,252 - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14compare_op.6 = $6binary_subscr.2 > $12binary_subscr.5 ['$12binary_subscr.5', '$14compare_op.6', '$6binary_subscr.2']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20binary_subscr.9 = getitem(value=x, index=$const18.8, fn=<built-in function getitem>) ['$20binary_subscr.9', '$const18.8', 'x']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=x, index=$const24.11, fn=<built-in function getitem>) ['$26binary_subscr.12', '$const24.11', 'x']
    $28compare_op.13 = $20binary_subscr.9 >= $26binary_subscr.12 ['$20binary_subscr.9', '$26binary_subscr.12', '$28compare_op.13']
    $30binary_and.14 = $14compare_op.6 & $28compare_op.13 ['$14compare_op.6', '$28compare_op.13', '$30binary_and.14']
    $32return_value.15 = cast(value=$30binary_and.14) ['$30binary_and.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

2024-09-08 00:15:28,253 - bytecode dump:
>          0	NOP(arg=None, lineno=1045)
           2	LOAD_FAST(arg=0, lineno=1048)
           4	LOAD_CONST(arg=1, lineno=1048)
           6	BINARY_SUBSCR(arg=None, lineno=1048)
           8	LOAD_FAST(arg=0, lineno=1048)
          10	LOAD_CONST(arg=2, lineno=1048)
          12	BINARY_SUBSCR(arg=None, lineno=1048)
          14	COMPARE_OP(arg=0, lineno=1048)
          16	LOAD_FAST(arg=0, lineno=1048)
          18	LOAD_CONST(arg=1, lineno=1048)
          20	BINARY_SUBSCR(arg=None, lineno=1048)
          22	LOAD_FAST(arg=0, lineno=1048)
          24	LOAD_CONST(arg=3, lineno=1048)
          26	BINARY_SUBSCR(arg=None, lineno=1048)
          28	COMPARE_OP(arg=1, lineno=1048)
          30	BINARY_AND(arg=None, lineno=1048)
          32	RETURN_VALUE(arg=None, lineno=1048)
2024-09-08 00:15:28,254 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-08 00:15:28,254 - stack: []
2024-09-08 00:15:28,254 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-08 00:15:28,254 - dispatch pc=0, inst=NOP(arg=None, lineno=1045)
2024-09-08 00:15:28,254 - stack []
2024-09-08 00:15:28,254 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-08 00:15:28,254 - stack []
2024-09-08 00:15:28,254 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1048)
2024-09-08 00:15:28,254 - stack ['$x2.0']
2024-09-08 00:15:28,254 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-08 00:15:28,254 - stack ['$x2.0', '$const4.1']
2024-09-08 00:15:28,254 - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-08 00:15:28,254 - stack ['$6binary_subscr.2']
2024-09-08 00:15:28,255 - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1048)
2024-09-08 00:15:28,255 - stack ['$6binary_subscr.2', '$x8.3']
2024-09-08 00:15:28,255 - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-08 00:15:28,255 - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2024-09-08 00:15:28,255 - dispatch pc=14, inst=COMPARE_OP(arg=0, lineno=1048)
2024-09-08 00:15:28,255 - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2024-09-08 00:15:28,255 - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-08 00:15:28,255 - stack ['$14compare_op.6']
2024-09-08 00:15:28,255 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1048)
2024-09-08 00:15:28,255 - stack ['$14compare_op.6', '$x16.7']
2024-09-08 00:15:28,255 - dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-08 00:15:28,255 - stack ['$14compare_op.6', '$x16.7', '$const18.8']
2024-09-08 00:15:28,256 - dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-08 00:15:28,256 - stack ['$14compare_op.6', '$20binary_subscr.9']
2024-09-08 00:15:28,256 - dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=1048)
2024-09-08 00:15:28,256 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10']
2024-09-08 00:15:28,256 - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-08 00:15:28,256 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10', '$const24.11']
2024-09-08 00:15:28,256 - dispatch pc=28, inst=COMPARE_OP(arg=1, lineno=1048)
2024-09-08 00:15:28,256 - stack ['$14compare_op.6', '$20binary_subscr.9', '$26binary_subscr.12']
2024-09-08 00:15:28,256 - dispatch pc=30, inst=BINARY_AND(arg=None, lineno=1048)
2024-09-08 00:15:28,256 - stack ['$14compare_op.6', '$28compare_op.13']
2024-09-08 00:15:28,256 - dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1048)
2024-09-08 00:15:28,256 - stack ['$30binary_and.14']
2024-09-08 00:15:28,256 - end state. edges=[]
2024-09-08 00:15:28,257 - -------------------------Prune PHIs-------------------------
2024-09-08 00:15:28,257 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-08 00:15:28,257 - defmap: {}
2024-09-08 00:15:28,257 - phismap: defaultdict(<class 'set'>, {})
2024-09-08 00:15:28,257 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-08 00:15:28,257 - keep phismap: {}
2024-09-08 00:15:28,257 - new_out: defaultdict(<class 'dict'>, {})
2024-09-08 00:15:28,257 - ----------------------DONE Prune PHIs-----------------------
2024-09-08 00:15:28,257 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14compare_op.6'}), (16, {'res': '$x16.7'}), (18, {'res': '$const18.8'}), (20, {'index': '$const18.8', 'target': '$x16.7', 'res': '$20binary_subscr.9'}), (22, {'res': '$x22.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$x22.10', 'res': '$26binary_subscr.12'}), (28, {'lhs': '$20binary_subscr.9', 'rhs': '$26binary_subscr.12', 'res': '$28compare_op.13'}), (30, {'lhs': '$14compare_op.6', 'rhs': '$28compare_op.13', 'res': '$30binary_and.14'}), (32, {'retval': '$30binary_and.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-08 00:15:28,258 - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14compare_op.6 = $6binary_subscr.2 < $12binary_subscr.5 ['$12binary_subscr.5', '$14compare_op.6', '$6binary_subscr.2']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20binary_subscr.9 = getitem(value=x, index=$const18.8, fn=<built-in function getitem>) ['$20binary_subscr.9', '$const18.8', 'x']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=x, index=$const24.11, fn=<built-in function getitem>) ['$26binary_subscr.12', '$const24.11', 'x']
    $28compare_op.13 = $20binary_subscr.9 <= $26binary_subscr.12 ['$20binary_subscr.9', '$26binary_subscr.12', '$28compare_op.13']
    $30binary_and.14 = $14compare_op.6 & $28compare_op.13 ['$14compare_op.6', '$28compare_op.13', '$30binary_and.14']
    $32return_value.15 = cast(value=$30binary_and.14) ['$30binary_and.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

2024-09-08 00:15:28,937 - bytecode dump:
>          0	NOP(arg=None, lineno=425)
           2	LOAD_FAST(arg=0, lineno=428)
           4	LOAD_CONST(arg=1, lineno=428)
           6	BINARY_SUBSCR(arg=None, lineno=428)
           8	LOAD_FAST(arg=0, lineno=428)
          10	LOAD_CONST(arg=2, lineno=428)
          12	BINARY_SUBSCR(arg=None, lineno=428)
          14	BINARY_ADD(arg=None, lineno=428)
          16	LOAD_CONST(arg=3, lineno=428)
          18	LOAD_FAST(arg=0, lineno=428)
          20	LOAD_CONST(arg=4, lineno=428)
          22	BINARY_SUBSCR(arg=None, lineno=428)
          24	BINARY_MULTIPLY(arg=None, lineno=428)
          26	BINARY_SUBTRACT(arg=None, lineno=428)
          28	STORE_FAST(arg=1, lineno=428)
          30	LOAD_FAST(arg=0, lineno=429)
          32	LOAD_CONST(arg=1, lineno=429)
          34	BINARY_SUBSCR(arg=None, lineno=429)
          36	LOAD_FAST(arg=0, lineno=429)
          38	LOAD_CONST(arg=2, lineno=429)
          40	BINARY_SUBSCR(arg=None, lineno=429)
          42	BINARY_SUBTRACT(arg=None, lineno=429)
          44	LOAD_CONST(arg=3, lineno=429)
          46	BINARY_TRUE_DIVIDE(arg=None, lineno=429)
          48	STORE_FAST(arg=2, lineno=429)
          50	LOAD_GLOBAL(arg=0, lineno=431)
          52	LOAD_METHOD(arg=1, lineno=431)
          54	LOAD_FAST(arg=2, lineno=431)
          56	CALL_METHOD(arg=1, lineno=431)
          58	LOAD_GLOBAL(arg=0, lineno=431)
          60	LOAD_METHOD(arg=1, lineno=431)
          62	LOAD_FAST(arg=1, lineno=431)
          64	CALL_METHOD(arg=1, lineno=431)
          66	COMPARE_OP(arg=5, lineno=431)
          68	POP_JUMP_IF_FALSE(arg=38, lineno=431)
          70	LOAD_CONST(arg=4, lineno=434)
          72	RETURN_VALUE(arg=None, lineno=434)
>         74	LOAD_FAST(arg=2, lineno=436)
          76	UNARY_NEGATIVE(arg=None, lineno=436)
          78	LOAD_FAST(arg=1, lineno=436)
          80	BINARY_TRUE_DIVIDE(arg=None, lineno=436)
          82	RETURN_VALUE(arg=None, lineno=436)
2024-09-08 00:15:28,938 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-08 00:15:28,938 - stack: []
2024-09-08 00:15:28,938 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-08 00:15:28,938 - dispatch pc=0, inst=NOP(arg=None, lineno=425)
2024-09-08 00:15:28,938 - stack []
2024-09-08 00:15:28,939 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=428)
2024-09-08 00:15:28,939 - stack []
2024-09-08 00:15:28,939 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=428)
2024-09-08 00:15:28,939 - stack ['$x2.0']
2024-09-08 00:15:28,939 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=428)
2024-09-08 00:15:28,939 - stack ['$x2.0', '$const4.1']
2024-09-08 00:15:28,939 - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=428)
2024-09-08 00:15:28,939 - stack ['$6binary_subscr.2']
2024-09-08 00:15:28,939 - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=428)
2024-09-08 00:15:28,939 - stack ['$6binary_subscr.2', '$x8.3']
2024-09-08 00:15:28,939 - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=428)
2024-09-08 00:15:28,939 - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2024-09-08 00:15:28,940 - dispatch pc=14, inst=BINARY_ADD(arg=None, lineno=428)
2024-09-08 00:15:28,940 - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2024-09-08 00:15:28,940 - dispatch pc=16, inst=LOAD_CONST(arg=3, lineno=428)
2024-09-08 00:15:28,940 - stack ['$14binary_add.6']
2024-09-08 00:15:28,940 - dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=428)
2024-09-08 00:15:28,940 - stack ['$14binary_add.6', '$const16.7']
2024-09-08 00:15:28,940 - dispatch pc=20, inst=LOAD_CONST(arg=4, lineno=428)
2024-09-08 00:15:28,940 - stack ['$14binary_add.6', '$const16.7', '$x18.8']
2024-09-08 00:15:28,940 - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=428)
2024-09-08 00:15:28,940 - stack ['$14binary_add.6', '$const16.7', '$x18.8', '$const20.9']
2024-09-08 00:15:28,940 - dispatch pc=24, inst=BINARY_MULTIPLY(arg=None, lineno=428)
2024-09-08 00:15:28,940 - stack ['$14binary_add.6', '$const16.7', '$22binary_subscr.10']
2024-09-08 00:15:28,940 - dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=428)
2024-09-08 00:15:28,941 - stack ['$14binary_add.6', '$24binary_multiply.11']
2024-09-08 00:15:28,941 - dispatch pc=28, inst=STORE_FAST(arg=1, lineno=428)
2024-09-08 00:15:28,941 - stack ['$26binary_subtract.12']
2024-09-08 00:15:28,941 - dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=429)
2024-09-08 00:15:28,941 - stack []
2024-09-08 00:15:28,941 - dispatch pc=32, inst=LOAD_CONST(arg=1, lineno=429)
2024-09-08 00:15:28,941 - stack ['$x30.13']
2024-09-08 00:15:28,941 - dispatch pc=34, inst=BINARY_SUBSCR(arg=None, lineno=429)
2024-09-08 00:15:28,941 - stack ['$x30.13', '$const32.14']
2024-09-08 00:15:28,941 - dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=429)
2024-09-08 00:15:28,941 - stack ['$34binary_subscr.15']
2024-09-08 00:15:28,941 - dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=429)
2024-09-08 00:15:28,941 - stack ['$34binary_subscr.15', '$x36.16']
2024-09-08 00:15:28,942 - dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=429)
2024-09-08 00:15:28,942 - stack ['$34binary_subscr.15', '$x36.16', '$const38.17']
2024-09-08 00:15:28,942 - dispatch pc=42, inst=BINARY_SUBTRACT(arg=None, lineno=429)
2024-09-08 00:15:28,942 - stack ['$34binary_subscr.15', '$40binary_subscr.18']
2024-09-08 00:15:28,942 - dispatch pc=44, inst=LOAD_CONST(arg=3, lineno=429)
2024-09-08 00:15:28,942 - stack ['$42binary_subtract.19']
2024-09-08 00:15:28,942 - dispatch pc=46, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=429)
2024-09-08 00:15:28,942 - stack ['$42binary_subtract.19', '$const44.20']
2024-09-08 00:15:28,942 - dispatch pc=48, inst=STORE_FAST(arg=2, lineno=429)
2024-09-08 00:15:28,942 - stack ['$46binary_true_divide.21']
2024-09-08 00:15:28,942 - dispatch pc=50, inst=LOAD_GLOBAL(arg=0, lineno=431)
2024-09-08 00:15:28,942 - stack []
2024-09-08 00:15:28,943 - dispatch pc=52, inst=LOAD_METHOD(arg=1, lineno=431)
2024-09-08 00:15:28,943 - stack ['$50load_global.22']
2024-09-08 00:15:28,943 - dispatch pc=54, inst=LOAD_FAST(arg=2, lineno=431)
2024-09-08 00:15:28,943 - stack ['$52load_method.23']
2024-09-08 00:15:28,943 - dispatch pc=56, inst=CALL_METHOD(arg=1, lineno=431)
2024-09-08 00:15:28,943 - stack ['$52load_method.23', '$b54.24']
2024-09-08 00:15:28,943 - dispatch pc=58, inst=LOAD_GLOBAL(arg=0, lineno=431)
2024-09-08 00:15:28,943 - stack ['$56call_method.25']
2024-09-08 00:15:28,943 - dispatch pc=60, inst=LOAD_METHOD(arg=1, lineno=431)
2024-09-08 00:15:28,943 - stack ['$56call_method.25', '$58load_global.26']
2024-09-08 00:15:28,943 - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=431)
2024-09-08 00:15:28,943 - stack ['$56call_method.25', '$60load_method.27']
2024-09-08 00:15:28,944 - dispatch pc=64, inst=CALL_METHOD(arg=1, lineno=431)
2024-09-08 00:15:28,944 - stack ['$56call_method.25', '$60load_method.27', '$a62.28']
2024-09-08 00:15:28,944 - dispatch pc=66, inst=COMPARE_OP(arg=5, lineno=431)
2024-09-08 00:15:28,944 - stack ['$56call_method.25', '$64call_method.29']
2024-09-08 00:15:28,944 - dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=38, lineno=431)
2024-09-08 00:15:28,944 - stack ['$66compare_op.30']
2024-09-08 00:15:28,944 - end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=74, stack=(), blockstack=(), npush=0)]
2024-09-08 00:15:28,944 - pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=74 nstack_initial=0)])
2024-09-08 00:15:28,944 - stack: []
2024-09-08 00:15:28,944 - state.pc_initial: State(pc_initial=70 nstack_initial=0)
2024-09-08 00:15:28,944 - dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=434)
2024-09-08 00:15:28,944 - stack []
2024-09-08 00:15:28,944 - dispatch pc=72, inst=RETURN_VALUE(arg=None, lineno=434)
2024-09-08 00:15:28,945 - stack ['$const70.0']
2024-09-08 00:15:28,945 - end state. edges=[]
2024-09-08 00:15:28,945 - pending: deque([State(pc_initial=74 nstack_initial=0)])
2024-09-08 00:15:28,945 - stack: []
2024-09-08 00:15:28,945 - state.pc_initial: State(pc_initial=74 nstack_initial=0)
2024-09-08 00:15:28,945 - dispatch pc=74, inst=LOAD_FAST(arg=2, lineno=436)
2024-09-08 00:15:28,945 - stack []
2024-09-08 00:15:28,945 - dispatch pc=76, inst=UNARY_NEGATIVE(arg=None, lineno=436)
2024-09-08 00:15:28,945 - stack ['$b74.0']
2024-09-08 00:15:28,945 - dispatch pc=78, inst=LOAD_FAST(arg=1, lineno=436)
2024-09-08 00:15:28,945 - stack ['$76unary_negative.1']
2024-09-08 00:15:28,945 - dispatch pc=80, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=436)
2024-09-08 00:15:28,945 - stack ['$76unary_negative.1', '$a78.2']
2024-09-08 00:15:28,946 - dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=436)
2024-09-08 00:15:28,946 - stack ['$80binary_true_divide.3']
2024-09-08 00:15:28,946 - end state. edges=[]
2024-09-08 00:15:28,946 - -------------------------Prune PHIs-------------------------
2024-09-08 00:15:28,946 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set()})
2024-09-08 00:15:28,946 - defmap: {}
2024-09-08 00:15:28,946 - phismap: defaultdict(<class 'set'>, {})
2024-09-08 00:15:28,946 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-08 00:15:28,947 - keep phismap: {}
2024-09-08 00:15:28,947 - new_out: defaultdict(<class 'dict'>, {})
2024-09-08 00:15:28,947 - ----------------------DONE Prune PHIs-----------------------
2024-09-08 00:15:28,947 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14binary_add.6'}), (16, {'res': '$const16.7'}), (18, {'res': '$x18.8'}), (20, {'res': '$const20.9'}), (22, {'index': '$const20.9', 'target': '$x18.8', 'res': '$22binary_subscr.10'}), (24, {'lhs': '$const16.7', 'rhs': '$22binary_subscr.10', 'res': '$24binary_multiply.11'}), (26, {'lhs': '$14binary_add.6', 'rhs': '$24binary_multiply.11', 'res': '$26binary_subtract.12'}), (28, {'value': '$26binary_subtract.12'}), (30, {'res': '$x30.13'}), (32, {'res': '$const32.14'}), (34, {'index': '$const32.14', 'target': '$x30.13', 'res': '$34binary_subscr.15'}), (36, {'res': '$x36.16'}), (38, {'res': '$const38.17'}), (40, {'index': '$const38.17', 'target': '$x36.16', 'res': '$40binary_subscr.18'}), (42, {'lhs': '$34binary_subscr.15', 'rhs': '$40binary_subscr.18', 'res': '$42binary_subtract.19'}), (44, {'res': '$const44.20'}), (46, {'lhs': '$42binary_subtract.19', 'rhs': '$const44.20', 'res': '$46binary_true_divide.21'}), (48, {'value': '$46binary_true_divide.21'}), (50, {'res': '$50load_global.22'}), (52, {'item': '$50load_global.22', 'res': '$52load_method.23'}), (54, {'res': '$b54.24'}), (56, {'func': '$52load_method.23', 'args': ['$b54.24'], 'res': '$56call_method.25'}), (58, {'res': '$58load_global.26'}), (60, {'item': '$58load_global.26', 'res': '$60load_method.27'}), (62, {'res': '$a62.28'}), (64, {'func': '$60load_method.27', 'args': ['$a62.28'], 'res': '$64call_method.29'}), (66, {'lhs': '$56call_method.25', 'rhs': '$64call_method.29', 'res': '$66compare_op.30'}), (68, {'pred': '$66compare_op.30'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 74: ()})
2024-09-08 00:15:28,947 - block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$const70.0'}), (72, {'retval': '$const70.0', 'castval': '$72return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-08 00:15:28,947 - block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$b74.0'}), (76, {'value': '$b74.0', 'res': '$76unary_negative.1'}), (78, {'res': '$a78.2'}), (80, {'lhs': '$76unary_negative.1', 'rhs': '$a78.2', 'res': '$80binary_true_divide.3'}), (82, {'retval': '$80binary_true_divide.3', 'castval': '$82return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-08 00:15:28,950 - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14binary_add.6 = $6binary_subscr.2 + $12binary_subscr.5 ['$12binary_subscr.5', '$14binary_add.6', '$6binary_subscr.2']
    $const16.7 = const(int, 2)               ['$const16.7']
    $const20.9 = const(int, 0)               ['$const20.9']
    $22binary_subscr.10 = getitem(value=x, index=$const20.9, fn=<built-in function getitem>) ['$22binary_subscr.10', '$const20.9', 'x']
    $24binary_multiply.11 = $const16.7 * $22binary_subscr.10 ['$22binary_subscr.10', '$24binary_multiply.11', '$const16.7']
    a = $14binary_add.6 - $24binary_multiply.11 ['$14binary_add.6', '$24binary_multiply.11', 'a']
    $const32.14 = const(int, 1)              ['$const32.14']
    $34binary_subscr.15 = getitem(value=x, index=$const32.14, fn=<built-in function getitem>) ['$34binary_subscr.15', '$const32.14', 'x']
    $const38.17 = const(int, -1)             ['$const38.17']
    $40binary_subscr.18 = getitem(value=x, index=$const38.17, fn=<built-in function getitem>) ['$40binary_subscr.18', '$const38.17', 'x']
    $42binary_subtract.19 = $34binary_subscr.15 - $40binary_subscr.18 ['$34binary_subscr.15', '$40binary_subscr.18', '$42binary_subtract.19']
    $const44.20 = const(int, 2)              ['$const44.20']
    b = $42binary_subtract.19 / $const44.20  ['$42binary_subtract.19', '$const44.20', 'b']
    $50load_global.22 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$50load_global.22']
    $52load_method.23 = getattr(value=$50load_global.22, attr=abs) ['$50load_global.22', '$52load_method.23']
    $56call_method.25 = call $52load_method.23(b, func=$52load_method.23, args=[Var(b, pitch.py:429)], kws=(), vararg=None, varkwarg=None, target=None) ['$52load_method.23', '$56call_method.25', 'b']
    $58load_global.26 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$58load_global.26']
    $60load_method.27 = getattr(value=$58load_global.26, attr=abs) ['$58load_global.26', '$60load_method.27']
    $64call_method.29 = call $60load_method.27(a, func=$60load_method.27, args=[Var(a, pitch.py:428)], kws=(), vararg=None, varkwarg=None, target=None) ['$60load_method.27', '$64call_method.29', 'a']
    $66compare_op.30 = $56call_method.25 >= $64call_method.29 ['$56call_method.25', '$64call_method.29', '$66compare_op.30']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.30, func=bool68, args=(Var($66compare_op.30, pitch.py:431),), kws=(), vararg=None, varkwarg=None, target=None) ['$66compare_op.30', '$68pred', 'bool68']
    branch $68pred, 70, 74                   ['$68pred']
label 70:
    $const70.0 = const(int, 0)               ['$const70.0']
    $72return_value.1 = cast(value=$const70.0) ['$72return_value.1', '$const70.0']
    return $72return_value.1                 ['$72return_value.1']
label 74:
    $76unary_negative.1 = unary(fn=<built-in function neg>, value=b) ['$76unary_negative.1', 'b']
    $80binary_true_divide.3 = $76unary_negative.1 / a ['$76unary_negative.1', '$80binary_true_divide.3', 'a']
    $82return_value.4 = cast(value=$80binary_true_divide.3) ['$80binary_true_divide.3', '$82return_value.4']
    return $82return_value.4                 ['$82return_value.4']

2024-09-08 00:18:01,984 - Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2024-09-08 00:18:02,911 - Creating converter from 7 to 5
2024-09-08 00:18:02,911 - Creating converter from 5 to 7
2024-09-08 00:18:02,912 - Creating converter from 7 to 5
2024-09-08 00:18:02,912 - Creating converter from 5 to 7
2024-09-08 00:18:10,856 - bytecode dump:
>          0	NOP(arg=None, lineno=1141)
           2	LOAD_FAST(arg=0, lineno=1144)
           4	LOAD_CONST(arg=1, lineno=1144)
           6	BINARY_SUBSCR(arg=None, lineno=1144)
           8	STORE_FAST(arg=3, lineno=1144)
          10	LOAD_FAST(arg=1, lineno=1145)
          12	UNARY_NEGATIVE(arg=None, lineno=1145)
          14	LOAD_FAST(arg=3, lineno=1145)
          16	DUP_TOP(arg=None, lineno=1145)
          18	ROT_THREE(arg=None, lineno=1145)
          20	COMPARE_OP(arg=1, lineno=1145)
          22	POP_JUMP_IF_FALSE(arg=17, lineno=1145)
          24	LOAD_FAST(arg=1, lineno=1145)
          26	COMPARE_OP(arg=1, lineno=1145)
          28	POP_JUMP_IF_FALSE(arg=21, lineno=1145)
          30	JUMP_FORWARD(arg=2, lineno=1145)
>         32	POP_TOP(arg=None, lineno=1145)
          34	JUMP_FORWARD(arg=2, lineno=1145)
>         36	LOAD_CONST(arg=1, lineno=1146)
          38	STORE_FAST(arg=3, lineno=1146)
>         40	LOAD_FAST(arg=0, lineno=1148)
          42	LOAD_CONST(arg=2, lineno=1148)
          44	BINARY_SUBSCR(arg=None, lineno=1148)
          46	STORE_FAST(arg=4, lineno=1148)
          48	LOAD_FAST(arg=1, lineno=1149)
          50	UNARY_NEGATIVE(arg=None, lineno=1149)
          52	LOAD_FAST(arg=4, lineno=1149)
          54	DUP_TOP(arg=None, lineno=1149)
          56	ROT_THREE(arg=None, lineno=1149)
          58	COMPARE_OP(arg=1, lineno=1149)
          60	POP_JUMP_IF_FALSE(arg=36, lineno=1149)
          62	LOAD_FAST(arg=1, lineno=1149)
          64	COMPARE_OP(arg=1, lineno=1149)
          66	POP_JUMP_IF_FALSE(arg=40, lineno=1149)
          68	JUMP_FORWARD(arg=2, lineno=1149)
>         70	POP_TOP(arg=None, lineno=1149)
          72	JUMP_FORWARD(arg=2, lineno=1149)
>         74	LOAD_CONST(arg=1, lineno=1150)
          76	STORE_FAST(arg=4, lineno=1150)
>         78	LOAD_FAST(arg=2, lineno=1152)
          80	POP_JUMP_IF_FALSE(arg=52, lineno=1152)
          82	LOAD_GLOBAL(arg=0, lineno=1153)
          84	LOAD_METHOD(arg=1, lineno=1153)
          86	LOAD_FAST(arg=3, lineno=1153)
          88	CALL_METHOD(arg=1, lineno=1153)
          90	LOAD_GLOBAL(arg=0, lineno=1153)
          92	LOAD_METHOD(arg=1, lineno=1153)
          94	LOAD_FAST(arg=4, lineno=1153)
          96	CALL_METHOD(arg=1, lineno=1153)
          98	COMPARE_OP(arg=3, lineno=1153)
         100	RETURN_VALUE(arg=None, lineno=1153)
>        102	LOAD_GLOBAL(arg=0, lineno=1155)
         104	LOAD_METHOD(arg=2, lineno=1155)
         106	LOAD_FAST(arg=3, lineno=1155)
         108	CALL_METHOD(arg=1, lineno=1155)
         110	LOAD_GLOBAL(arg=0, lineno=1155)
         112	LOAD_METHOD(arg=2, lineno=1155)
         114	LOAD_FAST(arg=4, lineno=1155)
         116	CALL_METHOD(arg=1, lineno=1155)
         118	COMPARE_OP(arg=3, lineno=1155)
         120	RETURN_VALUE(arg=None, lineno=1155)
2024-09-08 00:18:10,856 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-08 00:18:10,856 - stack: []
2024-09-08 00:18:10,856 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-08 00:18:10,857 - dispatch pc=0, inst=NOP(arg=None, lineno=1141)
2024-09-08 00:18:10,857 - stack []
2024-09-08 00:18:10,857 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1144)
2024-09-08 00:18:10,857 - stack []
2024-09-08 00:18:10,857 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1144)
2024-09-08 00:18:10,857 - stack ['$x2.0']
2024-09-08 00:18:10,857 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1144)
2024-09-08 00:18:10,857 - stack ['$x2.0', '$const4.1']
2024-09-08 00:18:10,857 - dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1144)
2024-09-08 00:18:10,857 - stack ['$6binary_subscr.2']
2024-09-08 00:18:10,857 - dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=1145)
2024-09-08 00:18:10,857 - stack []
2024-09-08 00:18:10,858 - dispatch pc=12, inst=UNARY_NEGATIVE(arg=None, lineno=1145)
2024-09-08 00:18:10,858 - stack ['$threshold10.3']
2024-09-08 00:18:10,858 - dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=1145)
2024-09-08 00:18:10,858 - stack ['$12unary_negative.4']
2024-09-08 00:18:10,858 - dispatch pc=16, inst=DUP_TOP(arg=None, lineno=1145)
2024-09-08 00:18:10,858 - stack ['$12unary_negative.4', '$x014.5']
2024-09-08 00:18:10,858 - dispatch pc=18, inst=ROT_THREE(arg=None, lineno=1145)
2024-09-08 00:18:10,858 - stack ['$12unary_negative.4', '$x014.5', '$16dup_top.6']
2024-09-08 00:18:10,858 - dispatch pc=20, inst=COMPARE_OP(arg=1, lineno=1145)
2024-09-08 00:18:10,858 - stack ['$16dup_top.6', '$12unary_negative.4', '$x014.5']
2024-09-08 00:18:10,858 - dispatch pc=22, inst=POP_JUMP_IF_FALSE(arg=17, lineno=1145)
2024-09-08 00:18:10,858 - stack ['$16dup_top.6', '$20compare_op.7']
2024-09-08 00:18:10,858 - end state. edges=[Edge(pc=24, stack=('$16dup_top.6',), blockstack=(), npush=0), Edge(pc=32, stack=('$16dup_top.6',), blockstack=(), npush=0)]
2024-09-08 00:18:10,859 - pending: deque([State(pc_initial=24 nstack_initial=1), State(pc_initial=32 nstack_initial=1)])
2024-09-08 00:18:10,859 - stack: ['$phi24.0']
2024-09-08 00:18:10,859 - state.pc_initial: State(pc_initial=24 nstack_initial=1)
2024-09-08 00:18:10,859 - dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=1145)
2024-09-08 00:18:10,859 - stack ['$phi24.0']
2024-09-08 00:18:10,859 - dispatch pc=26, inst=COMPARE_OP(arg=1, lineno=1145)
2024-09-08 00:18:10,859 - stack ['$phi24.0', '$threshold24.1']
2024-09-08 00:18:10,859 - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=21, lineno=1145)
2024-09-08 00:18:10,859 - stack ['$26compare_op.2']
2024-09-08 00:18:10,859 - end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=40, stack=(), blockstack=(), npush=0)]
2024-09-08 00:18:10,860 - pending: deque([State(pc_initial=32 nstack_initial=1), State(pc_initial=30 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2024-09-08 00:18:10,860 - stack: ['$phi32.0']
2024-09-08 00:18:10,860 - state.pc_initial: State(pc_initial=32 nstack_initial=1)
2024-09-08 00:18:10,860 - dispatch pc=32, inst=POP_TOP(arg=None, lineno=1145)
2024-09-08 00:18:10,860 - stack ['$phi32.0']
2024-09-08 00:18:10,860 - dispatch pc=34, inst=JUMP_FORWARD(arg=2, lineno=1145)
2024-09-08 00:18:10,860 - stack []
2024-09-08 00:18:10,860 - end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2024-09-08 00:18:10,860 - pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2024-09-08 00:18:10,860 - stack: []
2024-09-08 00:18:10,860 - state.pc_initial: State(pc_initial=30 nstack_initial=0)
2024-09-08 00:18:10,860 - dispatch pc=30, inst=JUMP_FORWARD(arg=2, lineno=1145)
2024-09-08 00:18:10,860 - stack []
2024-09-08 00:18:10,861 - end state. edges=[Edge(pc=36, stack=(), blockstack=(), npush=0)]
2024-09-08 00:18:10,861 - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2024-09-08 00:18:10,861 - stack: []
2024-09-08 00:18:10,861 - state.pc_initial: State(pc_initial=40 nstack_initial=0)
2024-09-08 00:18:10,861 - dispatch pc=40, inst=LOAD_FAST(arg=0, lineno=1148)
2024-09-08 00:18:10,861 - stack []
2024-09-08 00:18:10,861 - dispatch pc=42, inst=LOAD_CONST(arg=2, lineno=1148)
2024-09-08 00:18:10,861 - stack ['$x40.0']
2024-09-08 00:18:10,861 - dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=1148)
2024-09-08 00:18:10,861 - stack ['$x40.0', '$const42.1']
2024-09-08 00:18:10,861 - dispatch pc=46, inst=STORE_FAST(arg=4, lineno=1148)
2024-09-08 00:18:10,861 - stack ['$44binary_subscr.2']
2024-09-08 00:18:10,861 - dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=1149)
2024-09-08 00:18:10,861 - stack []
2024-09-08 00:18:10,862 - dispatch pc=50, inst=UNARY_NEGATIVE(arg=None, lineno=1149)
2024-09-08 00:18:10,862 - stack ['$threshold48.3']
2024-09-08 00:18:10,862 - dispatch pc=52, inst=LOAD_FAST(arg=4, lineno=1149)
2024-09-08 00:18:10,862 - stack ['$50unary_negative.4']
2024-09-08 00:18:10,862 - dispatch pc=54, inst=DUP_TOP(arg=None, lineno=1149)
2024-09-08 00:18:10,862 - stack ['$50unary_negative.4', '$x152.5']
2024-09-08 00:18:10,862 - dispatch pc=56, inst=ROT_THREE(arg=None, lineno=1149)
2024-09-08 00:18:10,862 - stack ['$50unary_negative.4', '$x152.5', '$54dup_top.6']
2024-09-08 00:18:10,862 - dispatch pc=58, inst=COMPARE_OP(arg=1, lineno=1149)
2024-09-08 00:18:10,862 - stack ['$54dup_top.6', '$50unary_negative.4', '$x152.5']
2024-09-08 00:18:10,862 - dispatch pc=60, inst=POP_JUMP_IF_FALSE(arg=36, lineno=1149)
2024-09-08 00:18:10,862 - stack ['$54dup_top.6', '$58compare_op.7']
2024-09-08 00:18:10,862 - end state. edges=[Edge(pc=62, stack=('$54dup_top.6',), blockstack=(), npush=0), Edge(pc=70, stack=('$54dup_top.6',), blockstack=(), npush=0)]
2024-09-08 00:18:10,863 - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
2024-09-08 00:18:10,863 - pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
2024-09-08 00:18:10,863 - stack: []
2024-09-08 00:18:10,863 - state.pc_initial: State(pc_initial=36 nstack_initial=0)
2024-09-08 00:18:10,863 - dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=1146)
2024-09-08 00:18:10,863 - stack []
2024-09-08 00:18:10,863 - dispatch pc=38, inst=STORE_FAST(arg=3, lineno=1146)
2024-09-08 00:18:10,863 - stack ['$const36.0']
2024-09-08 00:18:10,863 - end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2024-09-08 00:18:10,863 - pending: deque([State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1), State(pc_initial=40 nstack_initial=0)])
2024-09-08 00:18:10,863 - stack: ['$phi62.0']
2024-09-08 00:18:10,863 - state.pc_initial: State(pc_initial=62 nstack_initial=1)
2024-09-08 00:18:10,864 - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=1149)
2024-09-08 00:18:10,864 - stack ['$phi62.0']
2024-09-08 00:18:10,864 - dispatch pc=64, inst=COMPARE_OP(arg=1, lineno=1149)
2024-09-08 00:18:10,864 - stack ['$phi62.0', '$threshold62.1']
2024-09-08 00:18:10,864 - dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=40, lineno=1149)
2024-09-08 00:18:10,864 - stack ['$64compare_op.2']
2024-09-08 00:18:10,864 - end state. edges=[Edge(pc=68, stack=(), blockstack=(), npush=0), Edge(pc=78, stack=(), blockstack=(), npush=0)]
2024-09-08 00:18:10,864 - pending: deque([State(pc_initial=70 nstack_initial=1), State(pc_initial=40 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-08 00:18:10,864 - stack: ['$phi70.0']
2024-09-08 00:18:10,864 - state.pc_initial: State(pc_initial=70 nstack_initial=1)
2024-09-08 00:18:10,864 - dispatch pc=70, inst=POP_TOP(arg=None, lineno=1149)
2024-09-08 00:18:10,864 - stack ['$phi70.0']
2024-09-08 00:18:10,864 - dispatch pc=72, inst=JUMP_FORWARD(arg=2, lineno=1149)
2024-09-08 00:18:10,865 - stack []
2024-09-08 00:18:10,865 - end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0)]
2024-09-08 00:18:10,865 - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-08 00:18:10,865 - pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-08 00:18:10,865 - stack: []
2024-09-08 00:18:10,865 - state.pc_initial: State(pc_initial=68 nstack_initial=0)
2024-09-08 00:18:10,865 - dispatch pc=68, inst=JUMP_FORWARD(arg=2, lineno=1149)
2024-09-08 00:18:10,865 - stack []
2024-09-08 00:18:10,865 - end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0)]
2024-09-08 00:18:10,865 - pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=74 nstack_initial=0)])
2024-09-08 00:18:10,866 - stack: []
2024-09-08 00:18:10,866 - state.pc_initial: State(pc_initial=78 nstack_initial=0)
2024-09-08 00:18:10,866 - dispatch pc=78, inst=LOAD_FAST(arg=2, lineno=1152)
2024-09-08 00:18:10,866 - stack []
2024-09-08 00:18:10,866 - dispatch pc=80, inst=POP_JUMP_IF_FALSE(arg=52, lineno=1152)
2024-09-08 00:18:10,866 - stack ['$zero_pos78.0']
2024-09-08 00:18:10,866 - end state. edges=[Edge(pc=82, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
2024-09-08 00:18:10,866 - pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2024-09-08 00:18:10,866 - pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2024-09-08 00:18:10,866 - stack: []
2024-09-08 00:18:10,867 - state.pc_initial: State(pc_initial=74 nstack_initial=0)
2024-09-08 00:18:10,867 - dispatch pc=74, inst=LOAD_CONST(arg=1, lineno=1150)
2024-09-08 00:18:10,867 - stack []
2024-09-08 00:18:10,867 - dispatch pc=76, inst=STORE_FAST(arg=4, lineno=1150)
2024-09-08 00:18:10,867 - stack ['$const74.0']
2024-09-08 00:18:10,867 - end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0)]
2024-09-08 00:18:10,867 - pending: deque([State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-08 00:18:10,867 - stack: []
2024-09-08 00:18:10,867 - state.pc_initial: State(pc_initial=82 nstack_initial=0)
2024-09-08 00:18:10,867 - dispatch pc=82, inst=LOAD_GLOBAL(arg=0, lineno=1153)
2024-09-08 00:18:10,867 - stack []
2024-09-08 00:18:10,867 - dispatch pc=84, inst=LOAD_METHOD(arg=1, lineno=1153)
2024-09-08 00:18:10,867 - stack ['$82load_global.0']
2024-09-08 00:18:10,867 - dispatch pc=86, inst=LOAD_FAST(arg=3, lineno=1153)
2024-09-08 00:18:10,868 - stack ['$84load_method.1']
2024-09-08 00:18:10,868 - dispatch pc=88, inst=CALL_METHOD(arg=1, lineno=1153)
2024-09-08 00:18:10,868 - stack ['$84load_method.1', '$x086.2']
2024-09-08 00:18:10,868 - dispatch pc=90, inst=LOAD_GLOBAL(arg=0, lineno=1153)
2024-09-08 00:18:10,868 - stack ['$88call_method.3']
2024-09-08 00:18:10,868 - dispatch pc=92, inst=LOAD_METHOD(arg=1, lineno=1153)
2024-09-08 00:18:10,868 - stack ['$88call_method.3', '$90load_global.4']
2024-09-08 00:18:10,868 - dispatch pc=94, inst=LOAD_FAST(arg=4, lineno=1153)
2024-09-08 00:18:10,868 - stack ['$88call_method.3', '$92load_method.5']
2024-09-08 00:18:10,868 - dispatch pc=96, inst=CALL_METHOD(arg=1, lineno=1153)
2024-09-08 00:18:10,868 - stack ['$88call_method.3', '$92load_method.5', '$x194.6']
2024-09-08 00:18:10,868 - dispatch pc=98, inst=COMPARE_OP(arg=3, lineno=1153)
2024-09-08 00:18:10,868 - stack ['$88call_method.3', '$96call_method.7']
2024-09-08 00:18:10,869 - dispatch pc=100, inst=RETURN_VALUE(arg=None, lineno=1153)
2024-09-08 00:18:10,869 - stack ['$98compare_op.8']
2024-09-08 00:18:10,869 - end state. edges=[]
2024-09-08 00:18:10,869 - pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-08 00:18:10,869 - stack: []
2024-09-08 00:18:10,869 - state.pc_initial: State(pc_initial=102 nstack_initial=0)
2024-09-08 00:18:10,869 - dispatch pc=102, inst=LOAD_GLOBAL(arg=0, lineno=1155)
2024-09-08 00:18:10,869 - stack []
2024-09-08 00:18:10,869 - dispatch pc=104, inst=LOAD_METHOD(arg=2, lineno=1155)
2024-09-08 00:18:10,869 - stack ['$102load_global.0']
2024-09-08 00:18:10,869 - dispatch pc=106, inst=LOAD_FAST(arg=3, lineno=1155)
2024-09-08 00:18:10,869 - stack ['$104load_method.1']
2024-09-08 00:18:10,869 - dispatch pc=108, inst=CALL_METHOD(arg=1, lineno=1155)
2024-09-08 00:18:10,869 - stack ['$104load_method.1', '$x0106.2']
2024-09-08 00:18:10,870 - dispatch pc=110, inst=LOAD_GLOBAL(arg=0, lineno=1155)
2024-09-08 00:18:10,870 - stack ['$108call_method.3']
2024-09-08 00:18:10,870 - dispatch pc=112, inst=LOAD_METHOD(arg=2, lineno=1155)
2024-09-08 00:18:10,870 - stack ['$108call_method.3', '$110load_global.4']
2024-09-08 00:18:10,870 - dispatch pc=114, inst=LOAD_FAST(arg=4, lineno=1155)
2024-09-08 00:18:10,870 - stack ['$108call_method.3', '$112load_method.5']
2024-09-08 00:18:10,870 - dispatch pc=116, inst=CALL_METHOD(arg=1, lineno=1155)
2024-09-08 00:18:10,870 - stack ['$108call_method.3', '$112load_method.5', '$x1114.6']
2024-09-08 00:18:10,870 - dispatch pc=118, inst=COMPARE_OP(arg=3, lineno=1155)
2024-09-08 00:18:10,870 - stack ['$108call_method.3', '$116call_method.7']
2024-09-08 00:18:10,870 - dispatch pc=120, inst=RETURN_VALUE(arg=None, lineno=1155)
2024-09-08 00:18:10,870 - stack ['$118compare_op.8']
2024-09-08 00:18:10,870 - end state. edges=[]
2024-09-08 00:18:10,870 - pending: deque([State(pc_initial=78 nstack_initial=0)])
2024-09-08 00:18:10,871 - -------------------------Prune PHIs-------------------------
2024-09-08 00:18:10,871 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=1): {'$phi24.0'},
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=1): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=1): {'$phi62.0'},
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=1): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=82 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set()})
2024-09-08 00:18:10,871 - defmap: {'$phi24.0': State(pc_initial=0 nstack_initial=0),
 '$phi32.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.0': State(pc_initial=40 nstack_initial=0),
 '$phi70.0': State(pc_initial=40 nstack_initial=0)}
2024-09-08 00:18:10,872 - phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))},
             '$phi70.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))}})
2024-09-08 00:18:10,872 - changing phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))},
             '$phi70.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))}})
2024-09-08 00:18:10,872 - keep phismap: {'$phi24.0': {('$16dup_top.6', State(pc_initial=0 nstack_initial=0))},
 '$phi62.0': {('$54dup_top.6', State(pc_initial=40 nstack_initial=0))}}
2024-09-08 00:18:10,872 - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi24.0': '$16dup_top.6'},
             State(pc_initial=40 nstack_initial=0): {'$phi62.0': '$54dup_top.6'}})
2024-09-08 00:18:10,873 - ----------------------DONE Prune PHIs-----------------------
2024-09-08 00:18:10,873 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'value': '$6binary_subscr.2'}), (10, {'res': '$threshold10.3'}), (12, {'value': '$threshold10.3', 'res': '$12unary_negative.4'}), (14, {'res': '$x014.5'}), (16, {'orig': ['$x014.5'], 'duped': ['$16dup_top.6']}), (20, {'lhs': '$12unary_negative.4', 'rhs': '$x014.5', 'res': '$20compare_op.7'}), (22, {'pred': '$20compare_op.7'})), outgoing_phis={'$phi24.0': '$16dup_top.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={24: ('$16dup_top.6',), 32: ('$16dup_top.6',)})
2024-09-08 00:18:10,873 - block_infos State(pc_initial=24 nstack_initial=1):
AdaptBlockInfo(insts=((24, {'res': '$threshold24.1'}), (26, {'lhs': '$phi24.0', 'rhs': '$threshold24.1', 'res': '$26compare_op.2'}), (28, {'pred': '$26compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 40: ()})
2024-09-08 00:18:10,873 - block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ()})
2024-09-08 00:18:10,873 - block_infos State(pc_initial=32 nstack_initial=1):
AdaptBlockInfo(insts=((34, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2024-09-08 00:18:10,873 - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$const36.0'}), (38, {'value': '$const36.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2024-09-08 00:18:10,873 - block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$x40.0'}), (42, {'res': '$const42.1'}), (44, {'index': '$const42.1', 'target': '$x40.0', 'res': '$44binary_subscr.2'}), (46, {'value': '$44binary_subscr.2'}), (48, {'res': '$threshold48.3'}), (50, {'value': '$threshold48.3', 'res': '$50unary_negative.4'}), (52, {'res': '$x152.5'}), (54, {'orig': ['$x152.5'], 'duped': ['$54dup_top.6']}), (58, {'lhs': '$50unary_negative.4', 'rhs': '$x152.5', 'res': '$58compare_op.7'}), (60, {'pred': '$58compare_op.7'})), outgoing_phis={'$phi62.0': '$54dup_top.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ('$54dup_top.6',), 70: ('$54dup_top.6',)})
2024-09-08 00:18:10,873 - block_infos State(pc_initial=62 nstack_initial=1):
AdaptBlockInfo(insts=((62, {'res': '$threshold62.1'}), (64, {'lhs': '$phi62.0', 'rhs': '$threshold62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={68: (), 78: ()})
2024-09-08 00:18:10,873 - block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: ()})
2024-09-08 00:18:10,873 - block_infos State(pc_initial=70 nstack_initial=1):
AdaptBlockInfo(insts=((72, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: ()})
2024-09-08 00:18:10,873 - block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$const74.0'}), (76, {'value': '$const74.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: ()})
2024-09-08 00:18:10,873 - block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$zero_pos78.0'}), (80, {'pred': '$zero_pos78.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: (), 102: ()})
2024-09-08 00:18:10,874 - block_infos State(pc_initial=82 nstack_initial=0):
AdaptBlockInfo(insts=((82, {'res': '$82load_global.0'}), (84, {'item': '$82load_global.0', 'res': '$84load_method.1'}), (86, {'res': '$x086.2'}), (88, {'func': '$84load_method.1', 'args': ['$x086.2'], 'res': '$88call_method.3'}), (90, {'res': '$90load_global.4'}), (92, {'item': '$90load_global.4', 'res': '$92load_method.5'}), (94, {'res': '$x194.6'}), (96, {'func': '$92load_method.5', 'args': ['$x194.6'], 'res': '$96call_method.7'}), (98, {'lhs': '$88call_method.3', 'rhs': '$96call_method.7', 'res': '$98compare_op.8'}), (100, {'retval': '$98compare_op.8', 'castval': '$100return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-08 00:18:10,874 - block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$102load_global.0'}), (104, {'item': '$102load_global.0', 'res': '$104load_method.1'}), (106, {'res': '$x0106.2'}), (108, {'func': '$104load_method.1', 'args': ['$x0106.2'], 'res': '$108call_method.3'}), (110, {'res': '$110load_global.4'}), (112, {'item': '$110load_global.4', 'res': '$112load_method.5'}), (114, {'res': '$x1114.6'}), (116, {'func': '$112load_method.5', 'args': ['$x1114.6'], 'res': '$116call_method.7'}), (118, {'lhs': '$108call_method.3', 'rhs': '$116call_method.7', 'res': '$118compare_op.8'}), (120, {'retval': '$118compare_op.8', 'castval': '$120return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-08 00:18:10,877 - label 0:
    x = arg(0, name=x)                       ['x']
    threshold = arg(1, name=threshold)       ['threshold']
    zero_pos = arg(2, name=zero_pos)         ['zero_pos']
    $const4.1 = const(int, 0)                ['$const4.1']
    x0 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$const4.1', 'x', 'x0']
    $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$12unary_negative.4', 'threshold']
    $20compare_op.7 = $12unary_negative.4 <= x0 ['$12unary_negative.4', '$20compare_op.7', 'x0']
    bool22 = global(bool: <class 'bool'>)    ['bool22']
    $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None) ['$20compare_op.7', '$22pred', 'bool22']
    $phi24.0 = x0                            ['$phi24.0', 'x0']
    branch $22pred, 24, 32                   ['$22pred']
label 24:
    $26compare_op.2 = $phi24.0 <= threshold  ['$26compare_op.2', '$phi24.0', 'threshold']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.2', '$28pred', 'bool28']
    branch $28pred, 30, 40                   ['$28pred']
label 30:
    jump 36                                  []
label 32:
    jump 40                                  []
label 36:
    x0 = const(int, 0)                       ['x0']
    jump 40                                  []
label 40:
    $const42.1 = const(int, -1)              ['$const42.1']
    x1 = getitem(value=x, index=$const42.1, fn=<built-in function getitem>) ['$const42.1', 'x', 'x1']
    $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$50unary_negative.4', 'threshold']
    $58compare_op.7 = $50unary_negative.4 <= x1 ['$50unary_negative.4', '$58compare_op.7', 'x1']
    bool60 = global(bool: <class 'bool'>)    ['bool60']
    $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None) ['$58compare_op.7', '$60pred', 'bool60']
    $phi62.0 = x1                            ['$phi62.0', 'x1']
    branch $60pred, 62, 70                   ['$60pred']
label 62:
    $64compare_op.2 = $phi62.0 <= threshold  ['$64compare_op.2', '$phi62.0', 'threshold']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 78                   ['$66pred']
label 68:
    jump 74                                  []
label 70:
    jump 78                                  []
label 74:
    x1 = const(int, 0)                       ['x1']
    jump 78                                  []
label 78:
    bool80 = global(bool: <class 'bool'>)    ['bool80']
    $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None) ['$80pred', 'bool80', 'zero_pos']
    branch $80pred, 82, 102                  ['$80pred']
label 82:
    $82load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$82load_global.0']
    $84load_method.1 = getattr(value=$82load_global.0, attr=signbit) ['$82load_global.0', '$84load_method.1']
    $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None) ['$84load_method.1', '$88call_method.3', 'x0']
    $90load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$90load_global.4']
    $92load_method.5 = getattr(value=$90load_global.4, attr=signbit) ['$90load_global.4', '$92load_method.5']
    $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None) ['$92load_method.5', '$96call_method.7', 'x1']
    $98compare_op.8 = $88call_method.3 != $96call_method.7 ['$88call_method.3', '$96call_method.7', '$98compare_op.8']
    $100return_value.9 = cast(value=$98compare_op.8) ['$100return_value.9', '$98compare_op.8']
    return $100return_value.9                ['$100return_value.9']
label 102:
    $102load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$102load_global.0']
    $104load_method.1 = getattr(value=$102load_global.0, attr=sign) ['$102load_global.0', '$104load_method.1']
    $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None) ['$104load_method.1', '$108call_method.3', 'x0']
    $110load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$110load_global.4']
    $112load_method.5 = getattr(value=$110load_global.4, attr=sign) ['$110load_global.4', '$112load_method.5']
    $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None) ['$112load_method.5', '$116call_method.7', 'x1']
    $118compare_op.8 = $108call_method.3 != $116call_method.7 ['$108call_method.3', '$116call_method.7', '$118compare_op.8']
    $120return_value.9 = cast(value=$118compare_op.8) ['$118compare_op.8', '$120return_value.9']
    return $120return_value.9                ['$120return_value.9']

2024-09-08 00:18:12,220 - bytecode dump:
>          0	NOP(arg=None, lineno=1039)
           2	LOAD_FAST(arg=0, lineno=1042)
           4	LOAD_CONST(arg=1, lineno=1042)
           6	BINARY_SUBSCR(arg=None, lineno=1042)
           8	LOAD_FAST(arg=0, lineno=1042)
          10	LOAD_CONST(arg=2, lineno=1042)
          12	BINARY_SUBSCR(arg=None, lineno=1042)
          14	COMPARE_OP(arg=4, lineno=1042)
          16	LOAD_FAST(arg=0, lineno=1042)
          18	LOAD_CONST(arg=1, lineno=1042)
          20	BINARY_SUBSCR(arg=None, lineno=1042)
          22	LOAD_FAST(arg=0, lineno=1042)
          24	LOAD_CONST(arg=3, lineno=1042)
          26	BINARY_SUBSCR(arg=None, lineno=1042)
          28	COMPARE_OP(arg=5, lineno=1042)
          30	BINARY_AND(arg=None, lineno=1042)
          32	RETURN_VALUE(arg=None, lineno=1042)
2024-09-08 00:18:12,220 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-08 00:18:12,220 - stack: []
2024-09-08 00:18:12,220 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-08 00:18:12,220 - dispatch pc=0, inst=NOP(arg=None, lineno=1039)
2024-09-08 00:18:12,221 - stack []
2024-09-08 00:18:12,221 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-08 00:18:12,221 - stack []
2024-09-08 00:18:12,221 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1042)
2024-09-08 00:18:12,221 - stack ['$x2.0']
2024-09-08 00:18:12,221 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-08 00:18:12,221 - stack ['$x2.0', '$const4.1']
2024-09-08 00:18:12,221 - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-08 00:18:12,221 - stack ['$6binary_subscr.2']
2024-09-08 00:18:12,222 - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1042)
2024-09-08 00:18:12,222 - stack ['$6binary_subscr.2', '$x8.3']
2024-09-08 00:18:12,222 - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-08 00:18:12,222 - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2024-09-08 00:18:12,222 - dispatch pc=14, inst=COMPARE_OP(arg=4, lineno=1042)
2024-09-08 00:18:12,222 - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2024-09-08 00:18:12,222 - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-08 00:18:12,222 - stack ['$14compare_op.6']
2024-09-08 00:18:12,222 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1042)
2024-09-08 00:18:12,222 - stack ['$14compare_op.6', '$x16.7']
2024-09-08 00:18:12,223 - dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-08 00:18:12,223 - stack ['$14compare_op.6', '$x16.7', '$const18.8']
2024-09-08 00:18:12,223 - dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-08 00:18:12,223 - stack ['$14compare_op.6', '$20binary_subscr.9']
2024-09-08 00:18:12,223 - dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=1042)
2024-09-08 00:18:12,223 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10']
2024-09-08 00:18:12,223 - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-08 00:18:12,223 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10', '$const24.11']
2024-09-08 00:18:12,223 - dispatch pc=28, inst=COMPARE_OP(arg=5, lineno=1042)
2024-09-08 00:18:12,223 - stack ['$14compare_op.6', '$20binary_subscr.9', '$26binary_subscr.12']
2024-09-08 00:18:12,224 - dispatch pc=30, inst=BINARY_AND(arg=None, lineno=1042)
2024-09-08 00:18:12,224 - stack ['$14compare_op.6', '$28compare_op.13']
2024-09-08 00:18:12,224 - dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1042)
2024-09-08 00:18:12,224 - stack ['$30binary_and.14']
2024-09-08 00:18:12,224 - end state. edges=[]
2024-09-08 00:18:12,224 - -------------------------Prune PHIs-------------------------
2024-09-08 00:18:12,224 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-08 00:18:12,224 - defmap: {}
2024-09-08 00:18:12,225 - phismap: defaultdict(<class 'set'>, {})
2024-09-08 00:18:12,225 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-08 00:18:12,225 - keep phismap: {}
2024-09-08 00:18:12,225 - new_out: defaultdict(<class 'dict'>, {})
2024-09-08 00:18:12,225 - ----------------------DONE Prune PHIs-----------------------
2024-09-08 00:18:12,225 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14compare_op.6'}), (16, {'res': '$x16.7'}), (18, {'res': '$const18.8'}), (20, {'index': '$const18.8', 'target': '$x16.7', 'res': '$20binary_subscr.9'}), (22, {'res': '$x22.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$x22.10', 'res': '$26binary_subscr.12'}), (28, {'lhs': '$20binary_subscr.9', 'rhs': '$26binary_subscr.12', 'res': '$28compare_op.13'}), (30, {'lhs': '$14compare_op.6', 'rhs': '$28compare_op.13', 'res': '$30binary_and.14'}), (32, {'retval': '$30binary_and.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-08 00:18:12,228 - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14compare_op.6 = $6binary_subscr.2 > $12binary_subscr.5 ['$12binary_subscr.5', '$14compare_op.6', '$6binary_subscr.2']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20binary_subscr.9 = getitem(value=x, index=$const18.8, fn=<built-in function getitem>) ['$20binary_subscr.9', '$const18.8', 'x']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=x, index=$const24.11, fn=<built-in function getitem>) ['$26binary_subscr.12', '$const24.11', 'x']
    $28compare_op.13 = $20binary_subscr.9 >= $26binary_subscr.12 ['$20binary_subscr.9', '$26binary_subscr.12', '$28compare_op.13']
    $30binary_and.14 = $14compare_op.6 & $28compare_op.13 ['$14compare_op.6', '$28compare_op.13', '$30binary_and.14']
    $32return_value.15 = cast(value=$30binary_and.14) ['$30binary_and.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

2024-09-08 00:18:12,230 - bytecode dump:
>          0	NOP(arg=None, lineno=1045)
           2	LOAD_FAST(arg=0, lineno=1048)
           4	LOAD_CONST(arg=1, lineno=1048)
           6	BINARY_SUBSCR(arg=None, lineno=1048)
           8	LOAD_FAST(arg=0, lineno=1048)
          10	LOAD_CONST(arg=2, lineno=1048)
          12	BINARY_SUBSCR(arg=None, lineno=1048)
          14	COMPARE_OP(arg=0, lineno=1048)
          16	LOAD_FAST(arg=0, lineno=1048)
          18	LOAD_CONST(arg=1, lineno=1048)
          20	BINARY_SUBSCR(arg=None, lineno=1048)
          22	LOAD_FAST(arg=0, lineno=1048)
          24	LOAD_CONST(arg=3, lineno=1048)
          26	BINARY_SUBSCR(arg=None, lineno=1048)
          28	COMPARE_OP(arg=1, lineno=1048)
          30	BINARY_AND(arg=None, lineno=1048)
          32	RETURN_VALUE(arg=None, lineno=1048)
2024-09-08 00:18:12,231 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-08 00:18:12,231 - stack: []
2024-09-08 00:18:12,231 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-08 00:18:12,231 - dispatch pc=0, inst=NOP(arg=None, lineno=1045)
2024-09-08 00:18:12,231 - stack []
2024-09-08 00:18:12,231 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-08 00:18:12,232 - stack []
2024-09-08 00:18:12,232 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1048)
2024-09-08 00:18:12,232 - stack ['$x2.0']
2024-09-08 00:18:12,232 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-08 00:18:12,232 - stack ['$x2.0', '$const4.1']
2024-09-08 00:18:12,232 - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-08 00:18:12,232 - stack ['$6binary_subscr.2']
2024-09-08 00:18:12,232 - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1048)
2024-09-08 00:18:12,232 - stack ['$6binary_subscr.2', '$x8.3']
2024-09-08 00:18:12,233 - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-08 00:18:12,233 - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2024-09-08 00:18:12,233 - dispatch pc=14, inst=COMPARE_OP(arg=0, lineno=1048)
2024-09-08 00:18:12,233 - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2024-09-08 00:18:12,233 - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-08 00:18:12,233 - stack ['$14compare_op.6']
2024-09-08 00:18:12,233 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1048)
2024-09-08 00:18:12,233 - stack ['$14compare_op.6', '$x16.7']
2024-09-08 00:18:12,233 - dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-08 00:18:12,234 - stack ['$14compare_op.6', '$x16.7', '$const18.8']
2024-09-08 00:18:12,234 - dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-08 00:18:12,234 - stack ['$14compare_op.6', '$20binary_subscr.9']
2024-09-08 00:18:12,234 - dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=1048)
2024-09-08 00:18:12,234 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10']
2024-09-08 00:18:12,234 - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-08 00:18:12,234 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10', '$const24.11']
2024-09-08 00:18:12,234 - dispatch pc=28, inst=COMPARE_OP(arg=1, lineno=1048)
2024-09-08 00:18:12,234 - stack ['$14compare_op.6', '$20binary_subscr.9', '$26binary_subscr.12']
2024-09-08 00:18:12,234 - dispatch pc=30, inst=BINARY_AND(arg=None, lineno=1048)
2024-09-08 00:18:12,235 - stack ['$14compare_op.6', '$28compare_op.13']
2024-09-08 00:18:12,235 - dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1048)
2024-09-08 00:18:12,235 - stack ['$30binary_and.14']
2024-09-08 00:18:12,235 - end state. edges=[]
2024-09-08 00:18:12,235 - -------------------------Prune PHIs-------------------------
2024-09-08 00:18:12,235 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-08 00:18:12,235 - defmap: {}
2024-09-08 00:18:12,235 - phismap: defaultdict(<class 'set'>, {})
2024-09-08 00:18:12,236 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-08 00:18:12,236 - keep phismap: {}
2024-09-08 00:18:12,236 - new_out: defaultdict(<class 'dict'>, {})
2024-09-08 00:18:12,236 - ----------------------DONE Prune PHIs-----------------------
2024-09-08 00:18:12,236 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14compare_op.6'}), (16, {'res': '$x16.7'}), (18, {'res': '$const18.8'}), (20, {'index': '$const18.8', 'target': '$x16.7', 'res': '$20binary_subscr.9'}), (22, {'res': '$x22.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$x22.10', 'res': '$26binary_subscr.12'}), (28, {'lhs': '$20binary_subscr.9', 'rhs': '$26binary_subscr.12', 'res': '$28compare_op.13'}), (30, {'lhs': '$14compare_op.6', 'rhs': '$28compare_op.13', 'res': '$30binary_and.14'}), (32, {'retval': '$30binary_and.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-08 00:18:12,237 - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14compare_op.6 = $6binary_subscr.2 < $12binary_subscr.5 ['$12binary_subscr.5', '$14compare_op.6', '$6binary_subscr.2']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20binary_subscr.9 = getitem(value=x, index=$const18.8, fn=<built-in function getitem>) ['$20binary_subscr.9', '$const18.8', 'x']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=x, index=$const24.11, fn=<built-in function getitem>) ['$26binary_subscr.12', '$const24.11', 'x']
    $28compare_op.13 = $20binary_subscr.9 <= $26binary_subscr.12 ['$20binary_subscr.9', '$26binary_subscr.12', '$28compare_op.13']
    $30binary_and.14 = $14compare_op.6 & $28compare_op.13 ['$14compare_op.6', '$28compare_op.13', '$30binary_and.14']
    $32return_value.15 = cast(value=$30binary_and.14) ['$30binary_and.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

2024-09-08 00:18:12,962 - bytecode dump:
>          0	NOP(arg=None, lineno=425)
           2	LOAD_FAST(arg=0, lineno=428)
           4	LOAD_CONST(arg=1, lineno=428)
           6	BINARY_SUBSCR(arg=None, lineno=428)
           8	LOAD_FAST(arg=0, lineno=428)
          10	LOAD_CONST(arg=2, lineno=428)
          12	BINARY_SUBSCR(arg=None, lineno=428)
          14	BINARY_ADD(arg=None, lineno=428)
          16	LOAD_CONST(arg=3, lineno=428)
          18	LOAD_FAST(arg=0, lineno=428)
          20	LOAD_CONST(arg=4, lineno=428)
          22	BINARY_SUBSCR(arg=None, lineno=428)
          24	BINARY_MULTIPLY(arg=None, lineno=428)
          26	BINARY_SUBTRACT(arg=None, lineno=428)
          28	STORE_FAST(arg=1, lineno=428)
          30	LOAD_FAST(arg=0, lineno=429)
          32	LOAD_CONST(arg=1, lineno=429)
          34	BINARY_SUBSCR(arg=None, lineno=429)
          36	LOAD_FAST(arg=0, lineno=429)
          38	LOAD_CONST(arg=2, lineno=429)
          40	BINARY_SUBSCR(arg=None, lineno=429)
          42	BINARY_SUBTRACT(arg=None, lineno=429)
          44	LOAD_CONST(arg=3, lineno=429)
          46	BINARY_TRUE_DIVIDE(arg=None, lineno=429)
          48	STORE_FAST(arg=2, lineno=429)
          50	LOAD_GLOBAL(arg=0, lineno=431)
          52	LOAD_METHOD(arg=1, lineno=431)
          54	LOAD_FAST(arg=2, lineno=431)
          56	CALL_METHOD(arg=1, lineno=431)
          58	LOAD_GLOBAL(arg=0, lineno=431)
          60	LOAD_METHOD(arg=1, lineno=431)
          62	LOAD_FAST(arg=1, lineno=431)
          64	CALL_METHOD(arg=1, lineno=431)
          66	COMPARE_OP(arg=5, lineno=431)
          68	POP_JUMP_IF_FALSE(arg=38, lineno=431)
          70	LOAD_CONST(arg=4, lineno=434)
          72	RETURN_VALUE(arg=None, lineno=434)
>         74	LOAD_FAST(arg=2, lineno=436)
          76	UNARY_NEGATIVE(arg=None, lineno=436)
          78	LOAD_FAST(arg=1, lineno=436)
          80	BINARY_TRUE_DIVIDE(arg=None, lineno=436)
          82	RETURN_VALUE(arg=None, lineno=436)
2024-09-08 00:18:12,962 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-08 00:18:12,962 - stack: []
2024-09-08 00:18:12,963 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-08 00:18:12,963 - dispatch pc=0, inst=NOP(arg=None, lineno=425)
2024-09-08 00:18:12,963 - stack []
2024-09-08 00:18:12,963 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=428)
2024-09-08 00:18:12,963 - stack []
2024-09-08 00:18:12,963 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=428)
2024-09-08 00:18:12,963 - stack ['$x2.0']
2024-09-08 00:18:12,963 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=428)
2024-09-08 00:18:12,963 - stack ['$x2.0', '$const4.1']
2024-09-08 00:18:12,963 - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=428)
2024-09-08 00:18:12,964 - stack ['$6binary_subscr.2']
2024-09-08 00:18:12,964 - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=428)
2024-09-08 00:18:12,964 - stack ['$6binary_subscr.2', '$x8.3']
2024-09-08 00:18:12,964 - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=428)
2024-09-08 00:18:12,964 - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2024-09-08 00:18:12,964 - dispatch pc=14, inst=BINARY_ADD(arg=None, lineno=428)
2024-09-08 00:18:12,964 - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2024-09-08 00:18:12,964 - dispatch pc=16, inst=LOAD_CONST(arg=3, lineno=428)
2024-09-08 00:18:12,964 - stack ['$14binary_add.6']
2024-09-08 00:18:12,964 - dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=428)
2024-09-08 00:18:12,964 - stack ['$14binary_add.6', '$const16.7']
2024-09-08 00:18:12,964 - dispatch pc=20, inst=LOAD_CONST(arg=4, lineno=428)
2024-09-08 00:18:12,964 - stack ['$14binary_add.6', '$const16.7', '$x18.8']
2024-09-08 00:18:12,965 - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=428)
2024-09-08 00:18:12,965 - stack ['$14binary_add.6', '$const16.7', '$x18.8', '$const20.9']
2024-09-08 00:18:12,965 - dispatch pc=24, inst=BINARY_MULTIPLY(arg=None, lineno=428)
2024-09-08 00:18:12,965 - stack ['$14binary_add.6', '$const16.7', '$22binary_subscr.10']
2024-09-08 00:18:12,965 - dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=428)
2024-09-08 00:18:12,965 - stack ['$14binary_add.6', '$24binary_multiply.11']
2024-09-08 00:18:12,965 - dispatch pc=28, inst=STORE_FAST(arg=1, lineno=428)
2024-09-08 00:18:12,965 - stack ['$26binary_subtract.12']
2024-09-08 00:18:12,965 - dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=429)
2024-09-08 00:18:12,965 - stack []
2024-09-08 00:18:12,965 - dispatch pc=32, inst=LOAD_CONST(arg=1, lineno=429)
2024-09-08 00:18:12,965 - stack ['$x30.13']
2024-09-08 00:18:12,965 - dispatch pc=34, inst=BINARY_SUBSCR(arg=None, lineno=429)
2024-09-08 00:18:12,966 - stack ['$x30.13', '$const32.14']
2024-09-08 00:18:12,966 - dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=429)
2024-09-08 00:18:12,966 - stack ['$34binary_subscr.15']
2024-09-08 00:18:12,966 - dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=429)
2024-09-08 00:18:12,966 - stack ['$34binary_subscr.15', '$x36.16']
2024-09-08 00:18:12,966 - dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=429)
2024-09-08 00:18:12,966 - stack ['$34binary_subscr.15', '$x36.16', '$const38.17']
2024-09-08 00:18:12,966 - dispatch pc=42, inst=BINARY_SUBTRACT(arg=None, lineno=429)
2024-09-08 00:18:12,966 - stack ['$34binary_subscr.15', '$40binary_subscr.18']
2024-09-08 00:18:12,966 - dispatch pc=44, inst=LOAD_CONST(arg=3, lineno=429)
2024-09-08 00:18:12,966 - stack ['$42binary_subtract.19']
2024-09-08 00:18:12,966 - dispatch pc=46, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=429)
2024-09-08 00:18:12,966 - stack ['$42binary_subtract.19', '$const44.20']
2024-09-08 00:18:12,967 - dispatch pc=48, inst=STORE_FAST(arg=2, lineno=429)
2024-09-08 00:18:12,967 - stack ['$46binary_true_divide.21']
2024-09-08 00:18:12,967 - dispatch pc=50, inst=LOAD_GLOBAL(arg=0, lineno=431)
2024-09-08 00:18:12,967 - stack []
2024-09-08 00:18:12,967 - dispatch pc=52, inst=LOAD_METHOD(arg=1, lineno=431)
2024-09-08 00:18:12,967 - stack ['$50load_global.22']
2024-09-08 00:18:12,967 - dispatch pc=54, inst=LOAD_FAST(arg=2, lineno=431)
2024-09-08 00:18:12,967 - stack ['$52load_method.23']
2024-09-08 00:18:12,967 - dispatch pc=56, inst=CALL_METHOD(arg=1, lineno=431)
2024-09-08 00:18:12,967 - stack ['$52load_method.23', '$b54.24']
2024-09-08 00:18:12,967 - dispatch pc=58, inst=LOAD_GLOBAL(arg=0, lineno=431)
2024-09-08 00:18:12,967 - stack ['$56call_method.25']
2024-09-08 00:18:12,967 - dispatch pc=60, inst=LOAD_METHOD(arg=1, lineno=431)
2024-09-08 00:18:12,968 - stack ['$56call_method.25', '$58load_global.26']
2024-09-08 00:18:12,968 - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=431)
2024-09-08 00:18:12,968 - stack ['$56call_method.25', '$60load_method.27']
2024-09-08 00:18:12,968 - dispatch pc=64, inst=CALL_METHOD(arg=1, lineno=431)
2024-09-08 00:18:12,968 - stack ['$56call_method.25', '$60load_method.27', '$a62.28']
2024-09-08 00:18:12,968 - dispatch pc=66, inst=COMPARE_OP(arg=5, lineno=431)
2024-09-08 00:18:12,968 - stack ['$56call_method.25', '$64call_method.29']
2024-09-08 00:18:12,968 - dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=38, lineno=431)
2024-09-08 00:18:12,968 - stack ['$66compare_op.30']
2024-09-08 00:18:12,968 - end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=74, stack=(), blockstack=(), npush=0)]
2024-09-08 00:18:12,968 - pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=74 nstack_initial=0)])
2024-09-08 00:18:12,968 - stack: []
2024-09-08 00:18:12,968 - state.pc_initial: State(pc_initial=70 nstack_initial=0)
2024-09-08 00:18:12,969 - dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=434)
2024-09-08 00:18:12,969 - stack []
2024-09-08 00:18:12,969 - dispatch pc=72, inst=RETURN_VALUE(arg=None, lineno=434)
2024-09-08 00:18:12,969 - stack ['$const70.0']
2024-09-08 00:18:12,969 - end state. edges=[]
2024-09-08 00:18:12,969 - pending: deque([State(pc_initial=74 nstack_initial=0)])
2024-09-08 00:18:12,969 - stack: []
2024-09-08 00:18:12,969 - state.pc_initial: State(pc_initial=74 nstack_initial=0)
2024-09-08 00:18:12,969 - dispatch pc=74, inst=LOAD_FAST(arg=2, lineno=436)
2024-09-08 00:18:12,969 - stack []
2024-09-08 00:18:12,969 - dispatch pc=76, inst=UNARY_NEGATIVE(arg=None, lineno=436)
2024-09-08 00:18:12,969 - stack ['$b74.0']
2024-09-08 00:18:12,969 - dispatch pc=78, inst=LOAD_FAST(arg=1, lineno=436)
2024-09-08 00:18:12,970 - stack ['$76unary_negative.1']
2024-09-08 00:18:12,970 - dispatch pc=80, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=436)
2024-09-08 00:18:12,970 - stack ['$76unary_negative.1', '$a78.2']
2024-09-08 00:18:12,970 - dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=436)
2024-09-08 00:18:12,970 - stack ['$80binary_true_divide.3']
2024-09-08 00:18:12,970 - end state. edges=[]
2024-09-08 00:18:12,970 - -------------------------Prune PHIs-------------------------
2024-09-08 00:18:12,970 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set()})
2024-09-08 00:18:12,970 - defmap: {}
2024-09-08 00:18:12,971 - phismap: defaultdict(<class 'set'>, {})
2024-09-08 00:18:12,971 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-08 00:18:12,971 - keep phismap: {}
2024-09-08 00:18:12,971 - new_out: defaultdict(<class 'dict'>, {})
2024-09-08 00:18:12,971 - ----------------------DONE Prune PHIs-----------------------
2024-09-08 00:18:12,971 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14binary_add.6'}), (16, {'res': '$const16.7'}), (18, {'res': '$x18.8'}), (20, {'res': '$const20.9'}), (22, {'index': '$const20.9', 'target': '$x18.8', 'res': '$22binary_subscr.10'}), (24, {'lhs': '$const16.7', 'rhs': '$22binary_subscr.10', 'res': '$24binary_multiply.11'}), (26, {'lhs': '$14binary_add.6', 'rhs': '$24binary_multiply.11', 'res': '$26binary_subtract.12'}), (28, {'value': '$26binary_subtract.12'}), (30, {'res': '$x30.13'}), (32, {'res': '$const32.14'}), (34, {'index': '$const32.14', 'target': '$x30.13', 'res': '$34binary_subscr.15'}), (36, {'res': '$x36.16'}), (38, {'res': '$const38.17'}), (40, {'index': '$const38.17', 'target': '$x36.16', 'res': '$40binary_subscr.18'}), (42, {'lhs': '$34binary_subscr.15', 'rhs': '$40binary_subscr.18', 'res': '$42binary_subtract.19'}), (44, {'res': '$const44.20'}), (46, {'lhs': '$42binary_subtract.19', 'rhs': '$const44.20', 'res': '$46binary_true_divide.21'}), (48, {'value': '$46binary_true_divide.21'}), (50, {'res': '$50load_global.22'}), (52, {'item': '$50load_global.22', 'res': '$52load_method.23'}), (54, {'res': '$b54.24'}), (56, {'func': '$52load_method.23', 'args': ['$b54.24'], 'res': '$56call_method.25'}), (58, {'res': '$58load_global.26'}), (60, {'item': '$58load_global.26', 'res': '$60load_method.27'}), (62, {'res': '$a62.28'}), (64, {'func': '$60load_method.27', 'args': ['$a62.28'], 'res': '$64call_method.29'}), (66, {'lhs': '$56call_method.25', 'rhs': '$64call_method.29', 'res': '$66compare_op.30'}), (68, {'pred': '$66compare_op.30'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 74: ()})
2024-09-08 00:18:12,971 - block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$const70.0'}), (72, {'retval': '$const70.0', 'castval': '$72return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-08 00:18:12,971 - block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$b74.0'}), (76, {'value': '$b74.0', 'res': '$76unary_negative.1'}), (78, {'res': '$a78.2'}), (80, {'lhs': '$76unary_negative.1', 'rhs': '$a78.2', 'res': '$80binary_true_divide.3'}), (82, {'retval': '$80binary_true_divide.3', 'castval': '$82return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-08 00:18:12,973 - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14binary_add.6 = $6binary_subscr.2 + $12binary_subscr.5 ['$12binary_subscr.5', '$14binary_add.6', '$6binary_subscr.2']
    $const16.7 = const(int, 2)               ['$const16.7']
    $const20.9 = const(int, 0)               ['$const20.9']
    $22binary_subscr.10 = getitem(value=x, index=$const20.9, fn=<built-in function getitem>) ['$22binary_subscr.10', '$const20.9', 'x']
    $24binary_multiply.11 = $const16.7 * $22binary_subscr.10 ['$22binary_subscr.10', '$24binary_multiply.11', '$const16.7']
    a = $14binary_add.6 - $24binary_multiply.11 ['$14binary_add.6', '$24binary_multiply.11', 'a']
    $const32.14 = const(int, 1)              ['$const32.14']
    $34binary_subscr.15 = getitem(value=x, index=$const32.14, fn=<built-in function getitem>) ['$34binary_subscr.15', '$const32.14', 'x']
    $const38.17 = const(int, -1)             ['$const38.17']
    $40binary_subscr.18 = getitem(value=x, index=$const38.17, fn=<built-in function getitem>) ['$40binary_subscr.18', '$const38.17', 'x']
    $42binary_subtract.19 = $34binary_subscr.15 - $40binary_subscr.18 ['$34binary_subscr.15', '$40binary_subscr.18', '$42binary_subtract.19']
    $const44.20 = const(int, 2)              ['$const44.20']
    b = $42binary_subtract.19 / $const44.20  ['$42binary_subtract.19', '$const44.20', 'b']
    $50load_global.22 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$50load_global.22']
    $52load_method.23 = getattr(value=$50load_global.22, attr=abs) ['$50load_global.22', '$52load_method.23']
    $56call_method.25 = call $52load_method.23(b, func=$52load_method.23, args=[Var(b, pitch.py:429)], kws=(), vararg=None, varkwarg=None, target=None) ['$52load_method.23', '$56call_method.25', 'b']
    $58load_global.26 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$58load_global.26']
    $60load_method.27 = getattr(value=$58load_global.26, attr=abs) ['$58load_global.26', '$60load_method.27']
    $64call_method.29 = call $60load_method.27(a, func=$60load_method.27, args=[Var(a, pitch.py:428)], kws=(), vararg=None, varkwarg=None, target=None) ['$60load_method.27', '$64call_method.29', 'a']
    $66compare_op.30 = $56call_method.25 >= $64call_method.29 ['$56call_method.25', '$64call_method.29', '$66compare_op.30']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.30, func=bool68, args=(Var($66compare_op.30, pitch.py:431),), kws=(), vararg=None, varkwarg=None, target=None) ['$66compare_op.30', '$68pred', 'bool68']
    branch $68pred, 70, 74                   ['$68pred']
label 70:
    $const70.0 = const(int, 0)               ['$const70.0']
    $72return_value.1 = cast(value=$const70.0) ['$72return_value.1', '$const70.0']
    return $72return_value.1                 ['$72return_value.1']
label 74:
    $76unary_negative.1 = unary(fn=<built-in function neg>, value=b) ['$76unary_negative.1', 'b']
    $80binary_true_divide.3 = $76unary_negative.1 / a ['$76unary_negative.1', '$80binary_true_divide.3', 'a']
    $82return_value.4 = cast(value=$80binary_true_divide.3) ['$80binary_true_divide.3', '$82return_value.4']
    return $82return_value.4                 ['$82return_value.4']

2024-09-08 00:20:24,592 - Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2024-09-08 00:20:25,423 - Creating converter from 7 to 5
2024-09-08 00:20:25,423 - Creating converter from 5 to 7
2024-09-08 00:20:25,423 - Creating converter from 7 to 5
2024-09-08 00:20:25,423 - Creating converter from 5 to 7
2024-09-08 00:20:32,647 - bytecode dump:
>          0	NOP(arg=None, lineno=1141)
           2	LOAD_FAST(arg=0, lineno=1144)
           4	LOAD_CONST(arg=1, lineno=1144)
           6	BINARY_SUBSCR(arg=None, lineno=1144)
           8	STORE_FAST(arg=3, lineno=1144)
          10	LOAD_FAST(arg=1, lineno=1145)
          12	UNARY_NEGATIVE(arg=None, lineno=1145)
          14	LOAD_FAST(arg=3, lineno=1145)
          16	DUP_TOP(arg=None, lineno=1145)
          18	ROT_THREE(arg=None, lineno=1145)
          20	COMPARE_OP(arg=1, lineno=1145)
          22	POP_JUMP_IF_FALSE(arg=17, lineno=1145)
          24	LOAD_FAST(arg=1, lineno=1145)
          26	COMPARE_OP(arg=1, lineno=1145)
          28	POP_JUMP_IF_FALSE(arg=21, lineno=1145)
          30	JUMP_FORWARD(arg=2, lineno=1145)
>         32	POP_TOP(arg=None, lineno=1145)
          34	JUMP_FORWARD(arg=2, lineno=1145)
>         36	LOAD_CONST(arg=1, lineno=1146)
          38	STORE_FAST(arg=3, lineno=1146)
>         40	LOAD_FAST(arg=0, lineno=1148)
          42	LOAD_CONST(arg=2, lineno=1148)
          44	BINARY_SUBSCR(arg=None, lineno=1148)
          46	STORE_FAST(arg=4, lineno=1148)
          48	LOAD_FAST(arg=1, lineno=1149)
          50	UNARY_NEGATIVE(arg=None, lineno=1149)
          52	LOAD_FAST(arg=4, lineno=1149)
          54	DUP_TOP(arg=None, lineno=1149)
          56	ROT_THREE(arg=None, lineno=1149)
          58	COMPARE_OP(arg=1, lineno=1149)
          60	POP_JUMP_IF_FALSE(arg=36, lineno=1149)
          62	LOAD_FAST(arg=1, lineno=1149)
          64	COMPARE_OP(arg=1, lineno=1149)
          66	POP_JUMP_IF_FALSE(arg=40, lineno=1149)
          68	JUMP_FORWARD(arg=2, lineno=1149)
>         70	POP_TOP(arg=None, lineno=1149)
          72	JUMP_FORWARD(arg=2, lineno=1149)
>         74	LOAD_CONST(arg=1, lineno=1150)
          76	STORE_FAST(arg=4, lineno=1150)
>         78	LOAD_FAST(arg=2, lineno=1152)
          80	POP_JUMP_IF_FALSE(arg=52, lineno=1152)
          82	LOAD_GLOBAL(arg=0, lineno=1153)
          84	LOAD_METHOD(arg=1, lineno=1153)
          86	LOAD_FAST(arg=3, lineno=1153)
          88	CALL_METHOD(arg=1, lineno=1153)
          90	LOAD_GLOBAL(arg=0, lineno=1153)
          92	LOAD_METHOD(arg=1, lineno=1153)
          94	LOAD_FAST(arg=4, lineno=1153)
          96	CALL_METHOD(arg=1, lineno=1153)
          98	COMPARE_OP(arg=3, lineno=1153)
         100	RETURN_VALUE(arg=None, lineno=1153)
>        102	LOAD_GLOBAL(arg=0, lineno=1155)
         104	LOAD_METHOD(arg=2, lineno=1155)
         106	LOAD_FAST(arg=3, lineno=1155)
         108	CALL_METHOD(arg=1, lineno=1155)
         110	LOAD_GLOBAL(arg=0, lineno=1155)
         112	LOAD_METHOD(arg=2, lineno=1155)
         114	LOAD_FAST(arg=4, lineno=1155)
         116	CALL_METHOD(arg=1, lineno=1155)
         118	COMPARE_OP(arg=3, lineno=1155)
         120	RETURN_VALUE(arg=None, lineno=1155)
2024-09-08 00:20:32,647 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-08 00:20:32,648 - stack: []
2024-09-08 00:20:32,648 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-08 00:20:32,648 - dispatch pc=0, inst=NOP(arg=None, lineno=1141)
2024-09-08 00:20:32,648 - stack []
2024-09-08 00:20:32,648 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1144)
2024-09-08 00:20:32,649 - stack []
2024-09-08 00:20:32,649 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1144)
2024-09-08 00:20:32,649 - stack ['$x2.0']
2024-09-08 00:20:32,649 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1144)
2024-09-08 00:20:32,649 - stack ['$x2.0', '$const4.1']
2024-09-08 00:20:32,649 - dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1144)
2024-09-08 00:20:32,649 - stack ['$6binary_subscr.2']
2024-09-08 00:20:32,649 - dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=1145)
2024-09-08 00:20:32,649 - stack []
2024-09-08 00:20:32,650 - dispatch pc=12, inst=UNARY_NEGATIVE(arg=None, lineno=1145)
2024-09-08 00:20:32,650 - stack ['$threshold10.3']
2024-09-08 00:20:32,650 - dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=1145)
2024-09-08 00:20:32,650 - stack ['$12unary_negative.4']
2024-09-08 00:20:32,650 - dispatch pc=16, inst=DUP_TOP(arg=None, lineno=1145)
2024-09-08 00:20:32,650 - stack ['$12unary_negative.4', '$x014.5']
2024-09-08 00:20:32,650 - dispatch pc=18, inst=ROT_THREE(arg=None, lineno=1145)
2024-09-08 00:20:32,650 - stack ['$12unary_negative.4', '$x014.5', '$16dup_top.6']
2024-09-08 00:20:32,650 - dispatch pc=20, inst=COMPARE_OP(arg=1, lineno=1145)
2024-09-08 00:20:32,650 - stack ['$16dup_top.6', '$12unary_negative.4', '$x014.5']
2024-09-08 00:20:32,651 - dispatch pc=22, inst=POP_JUMP_IF_FALSE(arg=17, lineno=1145)
2024-09-08 00:20:32,651 - stack ['$16dup_top.6', '$20compare_op.7']
2024-09-08 00:20:32,651 - end state. edges=[Edge(pc=24, stack=('$16dup_top.6',), blockstack=(), npush=0), Edge(pc=32, stack=('$16dup_top.6',), blockstack=(), npush=0)]
2024-09-08 00:20:32,651 - pending: deque([State(pc_initial=24 nstack_initial=1), State(pc_initial=32 nstack_initial=1)])
2024-09-08 00:20:32,651 - stack: ['$phi24.0']
2024-09-08 00:20:32,651 - state.pc_initial: State(pc_initial=24 nstack_initial=1)
2024-09-08 00:20:32,651 - dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=1145)
2024-09-08 00:20:32,651 - stack ['$phi24.0']
2024-09-08 00:20:32,651 - dispatch pc=26, inst=COMPARE_OP(arg=1, lineno=1145)
2024-09-08 00:20:32,651 - stack ['$phi24.0', '$threshold24.1']
2024-09-08 00:20:32,651 - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=21, lineno=1145)
2024-09-08 00:20:32,651 - stack ['$26compare_op.2']
2024-09-08 00:20:32,651 - end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=40, stack=(), blockstack=(), npush=0)]
2024-09-08 00:20:32,652 - pending: deque([State(pc_initial=32 nstack_initial=1), State(pc_initial=30 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2024-09-08 00:20:32,652 - stack: ['$phi32.0']
2024-09-08 00:20:32,652 - state.pc_initial: State(pc_initial=32 nstack_initial=1)
2024-09-08 00:20:32,652 - dispatch pc=32, inst=POP_TOP(arg=None, lineno=1145)
2024-09-08 00:20:32,652 - stack ['$phi32.0']
2024-09-08 00:20:32,652 - dispatch pc=34, inst=JUMP_FORWARD(arg=2, lineno=1145)
2024-09-08 00:20:32,652 - stack []
2024-09-08 00:20:32,652 - end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2024-09-08 00:20:32,652 - pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2024-09-08 00:20:32,652 - stack: []
2024-09-08 00:20:32,652 - state.pc_initial: State(pc_initial=30 nstack_initial=0)
2024-09-08 00:20:32,652 - dispatch pc=30, inst=JUMP_FORWARD(arg=2, lineno=1145)
2024-09-08 00:20:32,653 - stack []
2024-09-08 00:20:32,653 - end state. edges=[Edge(pc=36, stack=(), blockstack=(), npush=0)]
2024-09-08 00:20:32,653 - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2024-09-08 00:20:32,653 - stack: []
2024-09-08 00:20:32,653 - state.pc_initial: State(pc_initial=40 nstack_initial=0)
2024-09-08 00:20:32,653 - dispatch pc=40, inst=LOAD_FAST(arg=0, lineno=1148)
2024-09-08 00:20:32,653 - stack []
2024-09-08 00:20:32,653 - dispatch pc=42, inst=LOAD_CONST(arg=2, lineno=1148)
2024-09-08 00:20:32,653 - stack ['$x40.0']
2024-09-08 00:20:32,653 - dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=1148)
2024-09-08 00:20:32,653 - stack ['$x40.0', '$const42.1']
2024-09-08 00:20:32,653 - dispatch pc=46, inst=STORE_FAST(arg=4, lineno=1148)
2024-09-08 00:20:32,653 - stack ['$44binary_subscr.2']
2024-09-08 00:20:32,653 - dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=1149)
2024-09-08 00:20:32,654 - stack []
2024-09-08 00:20:32,654 - dispatch pc=50, inst=UNARY_NEGATIVE(arg=None, lineno=1149)
2024-09-08 00:20:32,654 - stack ['$threshold48.3']
2024-09-08 00:20:32,654 - dispatch pc=52, inst=LOAD_FAST(arg=4, lineno=1149)
2024-09-08 00:20:32,654 - stack ['$50unary_negative.4']
2024-09-08 00:20:32,654 - dispatch pc=54, inst=DUP_TOP(arg=None, lineno=1149)
2024-09-08 00:20:32,654 - stack ['$50unary_negative.4', '$x152.5']
2024-09-08 00:20:32,654 - dispatch pc=56, inst=ROT_THREE(arg=None, lineno=1149)
2024-09-08 00:20:32,654 - stack ['$50unary_negative.4', '$x152.5', '$54dup_top.6']
2024-09-08 00:20:32,654 - dispatch pc=58, inst=COMPARE_OP(arg=1, lineno=1149)
2024-09-08 00:20:32,654 - stack ['$54dup_top.6', '$50unary_negative.4', '$x152.5']
2024-09-08 00:20:32,654 - dispatch pc=60, inst=POP_JUMP_IF_FALSE(arg=36, lineno=1149)
2024-09-08 00:20:32,654 - stack ['$54dup_top.6', '$58compare_op.7']
2024-09-08 00:20:32,654 - end state. edges=[Edge(pc=62, stack=('$54dup_top.6',), blockstack=(), npush=0), Edge(pc=70, stack=('$54dup_top.6',), blockstack=(), npush=0)]
2024-09-08 00:20:32,655 - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
2024-09-08 00:20:32,655 - pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
2024-09-08 00:20:32,655 - stack: []
2024-09-08 00:20:32,655 - state.pc_initial: State(pc_initial=36 nstack_initial=0)
2024-09-08 00:20:32,655 - dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=1146)
2024-09-08 00:20:32,655 - stack []
2024-09-08 00:20:32,655 - dispatch pc=38, inst=STORE_FAST(arg=3, lineno=1146)
2024-09-08 00:20:32,655 - stack ['$const36.0']
2024-09-08 00:20:32,655 - end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2024-09-08 00:20:32,655 - pending: deque([State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1), State(pc_initial=40 nstack_initial=0)])
2024-09-08 00:20:32,655 - stack: ['$phi62.0']
2024-09-08 00:20:32,655 - state.pc_initial: State(pc_initial=62 nstack_initial=1)
2024-09-08 00:20:32,655 - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=1149)
2024-09-08 00:20:32,656 - stack ['$phi62.0']
2024-09-08 00:20:32,656 - dispatch pc=64, inst=COMPARE_OP(arg=1, lineno=1149)
2024-09-08 00:20:32,656 - stack ['$phi62.0', '$threshold62.1']
2024-09-08 00:20:32,656 - dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=40, lineno=1149)
2024-09-08 00:20:32,656 - stack ['$64compare_op.2']
2024-09-08 00:20:32,656 - end state. edges=[Edge(pc=68, stack=(), blockstack=(), npush=0), Edge(pc=78, stack=(), blockstack=(), npush=0)]
2024-09-08 00:20:32,656 - pending: deque([State(pc_initial=70 nstack_initial=1), State(pc_initial=40 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-08 00:20:32,656 - stack: ['$phi70.0']
2024-09-08 00:20:32,656 - state.pc_initial: State(pc_initial=70 nstack_initial=1)
2024-09-08 00:20:32,656 - dispatch pc=70, inst=POP_TOP(arg=None, lineno=1149)
2024-09-08 00:20:32,656 - stack ['$phi70.0']
2024-09-08 00:20:32,656 - dispatch pc=72, inst=JUMP_FORWARD(arg=2, lineno=1149)
2024-09-08 00:20:32,656 - stack []
2024-09-08 00:20:32,656 - end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0)]
2024-09-08 00:20:32,657 - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-08 00:20:32,657 - pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-08 00:20:32,657 - stack: []
2024-09-08 00:20:32,657 - state.pc_initial: State(pc_initial=68 nstack_initial=0)
2024-09-08 00:20:32,657 - dispatch pc=68, inst=JUMP_FORWARD(arg=2, lineno=1149)
2024-09-08 00:20:32,657 - stack []
2024-09-08 00:20:32,657 - end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0)]
2024-09-08 00:20:32,657 - pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=74 nstack_initial=0)])
2024-09-08 00:20:32,657 - stack: []
2024-09-08 00:20:32,657 - state.pc_initial: State(pc_initial=78 nstack_initial=0)
2024-09-08 00:20:32,657 - dispatch pc=78, inst=LOAD_FAST(arg=2, lineno=1152)
2024-09-08 00:20:32,657 - stack []
2024-09-08 00:20:32,657 - dispatch pc=80, inst=POP_JUMP_IF_FALSE(arg=52, lineno=1152)
2024-09-08 00:20:32,657 - stack ['$zero_pos78.0']
2024-09-08 00:20:32,658 - end state. edges=[Edge(pc=82, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
2024-09-08 00:20:32,658 - pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2024-09-08 00:20:32,658 - pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2024-09-08 00:20:32,658 - stack: []
2024-09-08 00:20:32,658 - state.pc_initial: State(pc_initial=74 nstack_initial=0)
2024-09-08 00:20:32,658 - dispatch pc=74, inst=LOAD_CONST(arg=1, lineno=1150)
2024-09-08 00:20:32,658 - stack []
2024-09-08 00:20:32,658 - dispatch pc=76, inst=STORE_FAST(arg=4, lineno=1150)
2024-09-08 00:20:32,658 - stack ['$const74.0']
2024-09-08 00:20:32,658 - end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0)]
2024-09-08 00:20:32,659 - pending: deque([State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-08 00:20:32,659 - stack: []
2024-09-08 00:20:32,659 - state.pc_initial: State(pc_initial=82 nstack_initial=0)
2024-09-08 00:20:32,659 - dispatch pc=82, inst=LOAD_GLOBAL(arg=0, lineno=1153)
2024-09-08 00:20:32,659 - stack []
2024-09-08 00:20:32,659 - dispatch pc=84, inst=LOAD_METHOD(arg=1, lineno=1153)
2024-09-08 00:20:32,659 - stack ['$82load_global.0']
2024-09-08 00:20:32,659 - dispatch pc=86, inst=LOAD_FAST(arg=3, lineno=1153)
2024-09-08 00:20:32,659 - stack ['$84load_method.1']
2024-09-08 00:20:32,660 - dispatch pc=88, inst=CALL_METHOD(arg=1, lineno=1153)
2024-09-08 00:20:32,660 - stack ['$84load_method.1', '$x086.2']
2024-09-08 00:20:32,660 - dispatch pc=90, inst=LOAD_GLOBAL(arg=0, lineno=1153)
2024-09-08 00:20:32,660 - stack ['$88call_method.3']
2024-09-08 00:20:32,660 - dispatch pc=92, inst=LOAD_METHOD(arg=1, lineno=1153)
2024-09-08 00:20:32,660 - stack ['$88call_method.3', '$90load_global.4']
2024-09-08 00:20:32,660 - dispatch pc=94, inst=LOAD_FAST(arg=4, lineno=1153)
2024-09-08 00:20:32,660 - stack ['$88call_method.3', '$92load_method.5']
2024-09-08 00:20:32,660 - dispatch pc=96, inst=CALL_METHOD(arg=1, lineno=1153)
2024-09-08 00:20:32,660 - stack ['$88call_method.3', '$92load_method.5', '$x194.6']
2024-09-08 00:20:32,660 - dispatch pc=98, inst=COMPARE_OP(arg=3, lineno=1153)
2024-09-08 00:20:32,660 - stack ['$88call_method.3', '$96call_method.7']
2024-09-08 00:20:32,661 - dispatch pc=100, inst=RETURN_VALUE(arg=None, lineno=1153)
2024-09-08 00:20:32,661 - stack ['$98compare_op.8']
2024-09-08 00:20:32,661 - end state. edges=[]
2024-09-08 00:20:32,661 - pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-08 00:20:32,661 - stack: []
2024-09-08 00:20:32,661 - state.pc_initial: State(pc_initial=102 nstack_initial=0)
2024-09-08 00:20:32,661 - dispatch pc=102, inst=LOAD_GLOBAL(arg=0, lineno=1155)
2024-09-08 00:20:32,661 - stack []
2024-09-08 00:20:32,661 - dispatch pc=104, inst=LOAD_METHOD(arg=2, lineno=1155)
2024-09-08 00:20:32,661 - stack ['$102load_global.0']
2024-09-08 00:20:32,661 - dispatch pc=106, inst=LOAD_FAST(arg=3, lineno=1155)
2024-09-08 00:20:32,661 - stack ['$104load_method.1']
2024-09-08 00:20:32,661 - dispatch pc=108, inst=CALL_METHOD(arg=1, lineno=1155)
2024-09-08 00:20:32,662 - stack ['$104load_method.1', '$x0106.2']
2024-09-08 00:20:32,662 - dispatch pc=110, inst=LOAD_GLOBAL(arg=0, lineno=1155)
2024-09-08 00:20:32,662 - stack ['$108call_method.3']
2024-09-08 00:20:32,662 - dispatch pc=112, inst=LOAD_METHOD(arg=2, lineno=1155)
2024-09-08 00:20:32,662 - stack ['$108call_method.3', '$110load_global.4']
2024-09-08 00:20:32,662 - dispatch pc=114, inst=LOAD_FAST(arg=4, lineno=1155)
2024-09-08 00:20:32,662 - stack ['$108call_method.3', '$112load_method.5']
2024-09-08 00:20:32,662 - dispatch pc=116, inst=CALL_METHOD(arg=1, lineno=1155)
2024-09-08 00:20:32,662 - stack ['$108call_method.3', '$112load_method.5', '$x1114.6']
2024-09-08 00:20:32,662 - dispatch pc=118, inst=COMPARE_OP(arg=3, lineno=1155)
2024-09-08 00:20:32,662 - stack ['$108call_method.3', '$116call_method.7']
2024-09-08 00:20:32,662 - dispatch pc=120, inst=RETURN_VALUE(arg=None, lineno=1155)
2024-09-08 00:20:32,662 - stack ['$118compare_op.8']
2024-09-08 00:20:32,663 - end state. edges=[]
2024-09-08 00:20:32,663 - pending: deque([State(pc_initial=78 nstack_initial=0)])
2024-09-08 00:20:32,663 - -------------------------Prune PHIs-------------------------
2024-09-08 00:20:32,663 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=1): {'$phi24.0'},
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=1): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=1): {'$phi62.0'},
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=1): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=82 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set()})
2024-09-08 00:20:32,664 - defmap: {'$phi24.0': State(pc_initial=0 nstack_initial=0),
 '$phi32.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.0': State(pc_initial=40 nstack_initial=0),
 '$phi70.0': State(pc_initial=40 nstack_initial=0)}
2024-09-08 00:20:32,664 - phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))},
             '$phi70.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))}})
2024-09-08 00:20:32,664 - changing phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))},
             '$phi70.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))}})
2024-09-08 00:20:32,664 - keep phismap: {'$phi24.0': {('$16dup_top.6', State(pc_initial=0 nstack_initial=0))},
 '$phi62.0': {('$54dup_top.6', State(pc_initial=40 nstack_initial=0))}}
2024-09-08 00:20:32,664 - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi24.0': '$16dup_top.6'},
             State(pc_initial=40 nstack_initial=0): {'$phi62.0': '$54dup_top.6'}})
2024-09-08 00:20:32,665 - ----------------------DONE Prune PHIs-----------------------
2024-09-08 00:20:32,665 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'value': '$6binary_subscr.2'}), (10, {'res': '$threshold10.3'}), (12, {'value': '$threshold10.3', 'res': '$12unary_negative.4'}), (14, {'res': '$x014.5'}), (16, {'orig': ['$x014.5'], 'duped': ['$16dup_top.6']}), (20, {'lhs': '$12unary_negative.4', 'rhs': '$x014.5', 'res': '$20compare_op.7'}), (22, {'pred': '$20compare_op.7'})), outgoing_phis={'$phi24.0': '$16dup_top.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={24: ('$16dup_top.6',), 32: ('$16dup_top.6',)})
2024-09-08 00:20:32,665 - block_infos State(pc_initial=24 nstack_initial=1):
AdaptBlockInfo(insts=((24, {'res': '$threshold24.1'}), (26, {'lhs': '$phi24.0', 'rhs': '$threshold24.1', 'res': '$26compare_op.2'}), (28, {'pred': '$26compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 40: ()})
2024-09-08 00:20:32,665 - block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ()})
2024-09-08 00:20:32,665 - block_infos State(pc_initial=32 nstack_initial=1):
AdaptBlockInfo(insts=((34, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2024-09-08 00:20:32,665 - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$const36.0'}), (38, {'value': '$const36.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2024-09-08 00:20:32,665 - block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$x40.0'}), (42, {'res': '$const42.1'}), (44, {'index': '$const42.1', 'target': '$x40.0', 'res': '$44binary_subscr.2'}), (46, {'value': '$44binary_subscr.2'}), (48, {'res': '$threshold48.3'}), (50, {'value': '$threshold48.3', 'res': '$50unary_negative.4'}), (52, {'res': '$x152.5'}), (54, {'orig': ['$x152.5'], 'duped': ['$54dup_top.6']}), (58, {'lhs': '$50unary_negative.4', 'rhs': '$x152.5', 'res': '$58compare_op.7'}), (60, {'pred': '$58compare_op.7'})), outgoing_phis={'$phi62.0': '$54dup_top.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ('$54dup_top.6',), 70: ('$54dup_top.6',)})
2024-09-08 00:20:32,665 - block_infos State(pc_initial=62 nstack_initial=1):
AdaptBlockInfo(insts=((62, {'res': '$threshold62.1'}), (64, {'lhs': '$phi62.0', 'rhs': '$threshold62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={68: (), 78: ()})
2024-09-08 00:20:32,665 - block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: ()})
2024-09-08 00:20:32,666 - block_infos State(pc_initial=70 nstack_initial=1):
AdaptBlockInfo(insts=((72, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: ()})
2024-09-08 00:20:32,666 - block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$const74.0'}), (76, {'value': '$const74.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: ()})
2024-09-08 00:20:32,666 - block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$zero_pos78.0'}), (80, {'pred': '$zero_pos78.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: (), 102: ()})
2024-09-08 00:20:32,666 - block_infos State(pc_initial=82 nstack_initial=0):
AdaptBlockInfo(insts=((82, {'res': '$82load_global.0'}), (84, {'item': '$82load_global.0', 'res': '$84load_method.1'}), (86, {'res': '$x086.2'}), (88, {'func': '$84load_method.1', 'args': ['$x086.2'], 'res': '$88call_method.3'}), (90, {'res': '$90load_global.4'}), (92, {'item': '$90load_global.4', 'res': '$92load_method.5'}), (94, {'res': '$x194.6'}), (96, {'func': '$92load_method.5', 'args': ['$x194.6'], 'res': '$96call_method.7'}), (98, {'lhs': '$88call_method.3', 'rhs': '$96call_method.7', 'res': '$98compare_op.8'}), (100, {'retval': '$98compare_op.8', 'castval': '$100return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-08 00:20:32,666 - block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$102load_global.0'}), (104, {'item': '$102load_global.0', 'res': '$104load_method.1'}), (106, {'res': '$x0106.2'}), (108, {'func': '$104load_method.1', 'args': ['$x0106.2'], 'res': '$108call_method.3'}), (110, {'res': '$110load_global.4'}), (112, {'item': '$110load_global.4', 'res': '$112load_method.5'}), (114, {'res': '$x1114.6'}), (116, {'func': '$112load_method.5', 'args': ['$x1114.6'], 'res': '$116call_method.7'}), (118, {'lhs': '$108call_method.3', 'rhs': '$116call_method.7', 'res': '$118compare_op.8'}), (120, {'retval': '$118compare_op.8', 'castval': '$120return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-08 00:20:32,669 - label 0:
    x = arg(0, name=x)                       ['x']
    threshold = arg(1, name=threshold)       ['threshold']
    zero_pos = arg(2, name=zero_pos)         ['zero_pos']
    $const4.1 = const(int, 0)                ['$const4.1']
    x0 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$const4.1', 'x', 'x0']
    $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$12unary_negative.4', 'threshold']
    $20compare_op.7 = $12unary_negative.4 <= x0 ['$12unary_negative.4', '$20compare_op.7', 'x0']
    bool22 = global(bool: <class 'bool'>)    ['bool22']
    $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None) ['$20compare_op.7', '$22pred', 'bool22']
    $phi24.0 = x0                            ['$phi24.0', 'x0']
    branch $22pred, 24, 32                   ['$22pred']
label 24:
    $26compare_op.2 = $phi24.0 <= threshold  ['$26compare_op.2', '$phi24.0', 'threshold']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.2', '$28pred', 'bool28']
    branch $28pred, 30, 40                   ['$28pred']
label 30:
    jump 36                                  []
label 32:
    jump 40                                  []
label 36:
    x0 = const(int, 0)                       ['x0']
    jump 40                                  []
label 40:
    $const42.1 = const(int, -1)              ['$const42.1']
    x1 = getitem(value=x, index=$const42.1, fn=<built-in function getitem>) ['$const42.1', 'x', 'x1']
    $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$50unary_negative.4', 'threshold']
    $58compare_op.7 = $50unary_negative.4 <= x1 ['$50unary_negative.4', '$58compare_op.7', 'x1']
    bool60 = global(bool: <class 'bool'>)    ['bool60']
    $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None) ['$58compare_op.7', '$60pred', 'bool60']
    $phi62.0 = x1                            ['$phi62.0', 'x1']
    branch $60pred, 62, 70                   ['$60pred']
label 62:
    $64compare_op.2 = $phi62.0 <= threshold  ['$64compare_op.2', '$phi62.0', 'threshold']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 78                   ['$66pred']
label 68:
    jump 74                                  []
label 70:
    jump 78                                  []
label 74:
    x1 = const(int, 0)                       ['x1']
    jump 78                                  []
label 78:
    bool80 = global(bool: <class 'bool'>)    ['bool80']
    $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None) ['$80pred', 'bool80', 'zero_pos']
    branch $80pred, 82, 102                  ['$80pred']
label 82:
    $82load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$82load_global.0']
    $84load_method.1 = getattr(value=$82load_global.0, attr=signbit) ['$82load_global.0', '$84load_method.1']
    $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None) ['$84load_method.1', '$88call_method.3', 'x0']
    $90load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$90load_global.4']
    $92load_method.5 = getattr(value=$90load_global.4, attr=signbit) ['$90load_global.4', '$92load_method.5']
    $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None) ['$92load_method.5', '$96call_method.7', 'x1']
    $98compare_op.8 = $88call_method.3 != $96call_method.7 ['$88call_method.3', '$96call_method.7', '$98compare_op.8']
    $100return_value.9 = cast(value=$98compare_op.8) ['$100return_value.9', '$98compare_op.8']
    return $100return_value.9                ['$100return_value.9']
label 102:
    $102load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$102load_global.0']
    $104load_method.1 = getattr(value=$102load_global.0, attr=sign) ['$102load_global.0', '$104load_method.1']
    $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None) ['$104load_method.1', '$108call_method.3', 'x0']
    $110load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$110load_global.4']
    $112load_method.5 = getattr(value=$110load_global.4, attr=sign) ['$110load_global.4', '$112load_method.5']
    $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None) ['$112load_method.5', '$116call_method.7', 'x1']
    $118compare_op.8 = $108call_method.3 != $116call_method.7 ['$108call_method.3', '$116call_method.7', '$118compare_op.8']
    $120return_value.9 = cast(value=$118compare_op.8) ['$118compare_op.8', '$120return_value.9']
    return $120return_value.9                ['$120return_value.9']

2024-09-08 00:20:33,675 - bytecode dump:
>          0	NOP(arg=None, lineno=1039)
           2	LOAD_FAST(arg=0, lineno=1042)
           4	LOAD_CONST(arg=1, lineno=1042)
           6	BINARY_SUBSCR(arg=None, lineno=1042)
           8	LOAD_FAST(arg=0, lineno=1042)
          10	LOAD_CONST(arg=2, lineno=1042)
          12	BINARY_SUBSCR(arg=None, lineno=1042)
          14	COMPARE_OP(arg=4, lineno=1042)
          16	LOAD_FAST(arg=0, lineno=1042)
          18	LOAD_CONST(arg=1, lineno=1042)
          20	BINARY_SUBSCR(arg=None, lineno=1042)
          22	LOAD_FAST(arg=0, lineno=1042)
          24	LOAD_CONST(arg=3, lineno=1042)
          26	BINARY_SUBSCR(arg=None, lineno=1042)
          28	COMPARE_OP(arg=5, lineno=1042)
          30	BINARY_AND(arg=None, lineno=1042)
          32	RETURN_VALUE(arg=None, lineno=1042)
2024-09-08 00:20:33,675 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-08 00:20:33,675 - stack: []
2024-09-08 00:20:33,675 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-08 00:20:33,675 - dispatch pc=0, inst=NOP(arg=None, lineno=1039)
2024-09-08 00:20:33,675 - stack []
2024-09-08 00:20:33,675 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-08 00:20:33,676 - stack []
2024-09-08 00:20:33,676 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1042)
2024-09-08 00:20:33,676 - stack ['$x2.0']
2024-09-08 00:20:33,676 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-08 00:20:33,676 - stack ['$x2.0', '$const4.1']
2024-09-08 00:20:33,676 - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-08 00:20:33,676 - stack ['$6binary_subscr.2']
2024-09-08 00:20:33,676 - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1042)
2024-09-08 00:20:33,676 - stack ['$6binary_subscr.2', '$x8.3']
2024-09-08 00:20:33,677 - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-08 00:20:33,677 - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2024-09-08 00:20:33,677 - dispatch pc=14, inst=COMPARE_OP(arg=4, lineno=1042)
2024-09-08 00:20:33,677 - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2024-09-08 00:20:33,677 - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-08 00:20:33,677 - stack ['$14compare_op.6']
2024-09-08 00:20:33,677 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1042)
2024-09-08 00:20:33,677 - stack ['$14compare_op.6', '$x16.7']
2024-09-08 00:20:33,677 - dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-08 00:20:33,678 - stack ['$14compare_op.6', '$x16.7', '$const18.8']
2024-09-08 00:20:33,678 - dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-08 00:20:33,678 - stack ['$14compare_op.6', '$20binary_subscr.9']
2024-09-08 00:20:33,678 - dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=1042)
2024-09-08 00:20:33,678 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10']
2024-09-08 00:20:33,678 - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-08 00:20:33,678 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10', '$const24.11']
2024-09-08 00:20:33,678 - dispatch pc=28, inst=COMPARE_OP(arg=5, lineno=1042)
2024-09-08 00:20:33,679 - stack ['$14compare_op.6', '$20binary_subscr.9', '$26binary_subscr.12']
2024-09-08 00:20:33,679 - dispatch pc=30, inst=BINARY_AND(arg=None, lineno=1042)
2024-09-08 00:20:33,679 - stack ['$14compare_op.6', '$28compare_op.13']
2024-09-08 00:20:33,679 - dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1042)
2024-09-08 00:20:33,679 - stack ['$30binary_and.14']
2024-09-08 00:20:33,679 - end state. edges=[]
2024-09-08 00:20:33,679 - -------------------------Prune PHIs-------------------------
2024-09-08 00:20:33,679 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-08 00:20:33,679 - defmap: {}
2024-09-08 00:20:33,680 - phismap: defaultdict(<class 'set'>, {})
2024-09-08 00:20:33,680 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-08 00:20:33,680 - keep phismap: {}
2024-09-08 00:20:33,680 - new_out: defaultdict(<class 'dict'>, {})
2024-09-08 00:20:33,680 - ----------------------DONE Prune PHIs-----------------------
2024-09-08 00:20:33,680 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14compare_op.6'}), (16, {'res': '$x16.7'}), (18, {'res': '$const18.8'}), (20, {'index': '$const18.8', 'target': '$x16.7', 'res': '$20binary_subscr.9'}), (22, {'res': '$x22.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$x22.10', 'res': '$26binary_subscr.12'}), (28, {'lhs': '$20binary_subscr.9', 'rhs': '$26binary_subscr.12', 'res': '$28compare_op.13'}), (30, {'lhs': '$14compare_op.6', 'rhs': '$28compare_op.13', 'res': '$30binary_and.14'}), (32, {'retval': '$30binary_and.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-08 00:20:33,681 - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14compare_op.6 = $6binary_subscr.2 > $12binary_subscr.5 ['$12binary_subscr.5', '$14compare_op.6', '$6binary_subscr.2']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20binary_subscr.9 = getitem(value=x, index=$const18.8, fn=<built-in function getitem>) ['$20binary_subscr.9', '$const18.8', 'x']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=x, index=$const24.11, fn=<built-in function getitem>) ['$26binary_subscr.12', '$const24.11', 'x']
    $28compare_op.13 = $20binary_subscr.9 >= $26binary_subscr.12 ['$20binary_subscr.9', '$26binary_subscr.12', '$28compare_op.13']
    $30binary_and.14 = $14compare_op.6 & $28compare_op.13 ['$14compare_op.6', '$28compare_op.13', '$30binary_and.14']
    $32return_value.15 = cast(value=$30binary_and.14) ['$30binary_and.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

2024-09-08 00:20:33,682 - bytecode dump:
>          0	NOP(arg=None, lineno=1045)
           2	LOAD_FAST(arg=0, lineno=1048)
           4	LOAD_CONST(arg=1, lineno=1048)
           6	BINARY_SUBSCR(arg=None, lineno=1048)
           8	LOAD_FAST(arg=0, lineno=1048)
          10	LOAD_CONST(arg=2, lineno=1048)
          12	BINARY_SUBSCR(arg=None, lineno=1048)
          14	COMPARE_OP(arg=0, lineno=1048)
          16	LOAD_FAST(arg=0, lineno=1048)
          18	LOAD_CONST(arg=1, lineno=1048)
          20	BINARY_SUBSCR(arg=None, lineno=1048)
          22	LOAD_FAST(arg=0, lineno=1048)
          24	LOAD_CONST(arg=3, lineno=1048)
          26	BINARY_SUBSCR(arg=None, lineno=1048)
          28	COMPARE_OP(arg=1, lineno=1048)
          30	BINARY_AND(arg=None, lineno=1048)
          32	RETURN_VALUE(arg=None, lineno=1048)
2024-09-08 00:20:33,682 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-08 00:20:33,682 - stack: []
2024-09-08 00:20:33,683 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-08 00:20:33,683 - dispatch pc=0, inst=NOP(arg=None, lineno=1045)
2024-09-08 00:20:33,683 - stack []
2024-09-08 00:20:33,683 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-08 00:20:33,683 - stack []
2024-09-08 00:20:33,683 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1048)
2024-09-08 00:20:33,683 - stack ['$x2.0']
2024-09-08 00:20:33,683 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-08 00:20:33,683 - stack ['$x2.0', '$const4.1']
2024-09-08 00:20:33,683 - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-08 00:20:33,683 - stack ['$6binary_subscr.2']
2024-09-08 00:20:33,683 - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1048)
2024-09-08 00:20:33,683 - stack ['$6binary_subscr.2', '$x8.3']
2024-09-08 00:20:33,683 - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-08 00:20:33,684 - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2024-09-08 00:20:33,684 - dispatch pc=14, inst=COMPARE_OP(arg=0, lineno=1048)
2024-09-08 00:20:33,684 - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2024-09-08 00:20:33,684 - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-08 00:20:33,684 - stack ['$14compare_op.6']
2024-09-08 00:20:33,684 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1048)
2024-09-08 00:20:33,684 - stack ['$14compare_op.6', '$x16.7']
2024-09-08 00:20:33,684 - dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-08 00:20:33,684 - stack ['$14compare_op.6', '$x16.7', '$const18.8']
2024-09-08 00:20:33,684 - dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-08 00:20:33,684 - stack ['$14compare_op.6', '$20binary_subscr.9']
2024-09-08 00:20:33,684 - dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=1048)
2024-09-08 00:20:33,685 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10']
2024-09-08 00:20:33,685 - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-08 00:20:33,685 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10', '$const24.11']
2024-09-08 00:20:33,685 - dispatch pc=28, inst=COMPARE_OP(arg=1, lineno=1048)
2024-09-08 00:20:33,685 - stack ['$14compare_op.6', '$20binary_subscr.9', '$26binary_subscr.12']
2024-09-08 00:20:33,685 - dispatch pc=30, inst=BINARY_AND(arg=None, lineno=1048)
2024-09-08 00:20:33,685 - stack ['$14compare_op.6', '$28compare_op.13']
2024-09-08 00:20:33,685 - dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1048)
2024-09-08 00:20:33,685 - stack ['$30binary_and.14']
2024-09-08 00:20:33,685 - end state. edges=[]
2024-09-08 00:20:33,685 - -------------------------Prune PHIs-------------------------
2024-09-08 00:20:33,685 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-08 00:20:33,685 - defmap: {}
2024-09-08 00:20:33,686 - phismap: defaultdict(<class 'set'>, {})
2024-09-08 00:20:33,686 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-08 00:20:33,686 - keep phismap: {}
2024-09-08 00:20:33,686 - new_out: defaultdict(<class 'dict'>, {})
2024-09-08 00:20:33,686 - ----------------------DONE Prune PHIs-----------------------
2024-09-08 00:20:33,686 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14compare_op.6'}), (16, {'res': '$x16.7'}), (18, {'res': '$const18.8'}), (20, {'index': '$const18.8', 'target': '$x16.7', 'res': '$20binary_subscr.9'}), (22, {'res': '$x22.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$x22.10', 'res': '$26binary_subscr.12'}), (28, {'lhs': '$20binary_subscr.9', 'rhs': '$26binary_subscr.12', 'res': '$28compare_op.13'}), (30, {'lhs': '$14compare_op.6', 'rhs': '$28compare_op.13', 'res': '$30binary_and.14'}), (32, {'retval': '$30binary_and.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-08 00:20:33,687 - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14compare_op.6 = $6binary_subscr.2 < $12binary_subscr.5 ['$12binary_subscr.5', '$14compare_op.6', '$6binary_subscr.2']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20binary_subscr.9 = getitem(value=x, index=$const18.8, fn=<built-in function getitem>) ['$20binary_subscr.9', '$const18.8', 'x']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=x, index=$const24.11, fn=<built-in function getitem>) ['$26binary_subscr.12', '$const24.11', 'x']
    $28compare_op.13 = $20binary_subscr.9 <= $26binary_subscr.12 ['$20binary_subscr.9', '$26binary_subscr.12', '$28compare_op.13']
    $30binary_and.14 = $14compare_op.6 & $28compare_op.13 ['$14compare_op.6', '$28compare_op.13', '$30binary_and.14']
    $32return_value.15 = cast(value=$30binary_and.14) ['$30binary_and.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

2024-09-08 00:20:34,309 - bytecode dump:
>          0	NOP(arg=None, lineno=425)
           2	LOAD_FAST(arg=0, lineno=428)
           4	LOAD_CONST(arg=1, lineno=428)
           6	BINARY_SUBSCR(arg=None, lineno=428)
           8	LOAD_FAST(arg=0, lineno=428)
          10	LOAD_CONST(arg=2, lineno=428)
          12	BINARY_SUBSCR(arg=None, lineno=428)
          14	BINARY_ADD(arg=None, lineno=428)
          16	LOAD_CONST(arg=3, lineno=428)
          18	LOAD_FAST(arg=0, lineno=428)
          20	LOAD_CONST(arg=4, lineno=428)
          22	BINARY_SUBSCR(arg=None, lineno=428)
          24	BINARY_MULTIPLY(arg=None, lineno=428)
          26	BINARY_SUBTRACT(arg=None, lineno=428)
          28	STORE_FAST(arg=1, lineno=428)
          30	LOAD_FAST(arg=0, lineno=429)
          32	LOAD_CONST(arg=1, lineno=429)
          34	BINARY_SUBSCR(arg=None, lineno=429)
          36	LOAD_FAST(arg=0, lineno=429)
          38	LOAD_CONST(arg=2, lineno=429)
          40	BINARY_SUBSCR(arg=None, lineno=429)
          42	BINARY_SUBTRACT(arg=None, lineno=429)
          44	LOAD_CONST(arg=3, lineno=429)
          46	BINARY_TRUE_DIVIDE(arg=None, lineno=429)
          48	STORE_FAST(arg=2, lineno=429)
          50	LOAD_GLOBAL(arg=0, lineno=431)
          52	LOAD_METHOD(arg=1, lineno=431)
          54	LOAD_FAST(arg=2, lineno=431)
          56	CALL_METHOD(arg=1, lineno=431)
          58	LOAD_GLOBAL(arg=0, lineno=431)
          60	LOAD_METHOD(arg=1, lineno=431)
          62	LOAD_FAST(arg=1, lineno=431)
          64	CALL_METHOD(arg=1, lineno=431)
          66	COMPARE_OP(arg=5, lineno=431)
          68	POP_JUMP_IF_FALSE(arg=38, lineno=431)
          70	LOAD_CONST(arg=4, lineno=434)
          72	RETURN_VALUE(arg=None, lineno=434)
>         74	LOAD_FAST(arg=2, lineno=436)
          76	UNARY_NEGATIVE(arg=None, lineno=436)
          78	LOAD_FAST(arg=1, lineno=436)
          80	BINARY_TRUE_DIVIDE(arg=None, lineno=436)
          82	RETURN_VALUE(arg=None, lineno=436)
2024-09-08 00:20:34,310 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-08 00:20:34,310 - stack: []
2024-09-08 00:20:34,310 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-08 00:20:34,311 - dispatch pc=0, inst=NOP(arg=None, lineno=425)
2024-09-08 00:20:34,311 - stack []
2024-09-08 00:20:34,311 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=428)
2024-09-08 00:20:34,311 - stack []
2024-09-08 00:20:34,311 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=428)
2024-09-08 00:20:34,311 - stack ['$x2.0']
2024-09-08 00:20:34,311 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=428)
2024-09-08 00:20:34,311 - stack ['$x2.0', '$const4.1']
2024-09-08 00:20:34,311 - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=428)
2024-09-08 00:20:34,311 - stack ['$6binary_subscr.2']
2024-09-08 00:20:34,312 - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=428)
2024-09-08 00:20:34,312 - stack ['$6binary_subscr.2', '$x8.3']
2024-09-08 00:20:34,312 - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=428)
2024-09-08 00:20:34,312 - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2024-09-08 00:20:34,312 - dispatch pc=14, inst=BINARY_ADD(arg=None, lineno=428)
2024-09-08 00:20:34,312 - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2024-09-08 00:20:34,313 - dispatch pc=16, inst=LOAD_CONST(arg=3, lineno=428)
2024-09-08 00:20:34,313 - stack ['$14binary_add.6']
2024-09-08 00:20:34,313 - dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=428)
2024-09-08 00:20:34,313 - stack ['$14binary_add.6', '$const16.7']
2024-09-08 00:20:34,313 - dispatch pc=20, inst=LOAD_CONST(arg=4, lineno=428)
2024-09-08 00:20:34,314 - stack ['$14binary_add.6', '$const16.7', '$x18.8']
2024-09-08 00:20:34,314 - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=428)
2024-09-08 00:20:34,314 - stack ['$14binary_add.6', '$const16.7', '$x18.8', '$const20.9']
2024-09-08 00:20:34,314 - dispatch pc=24, inst=BINARY_MULTIPLY(arg=None, lineno=428)
2024-09-08 00:20:34,314 - stack ['$14binary_add.6', '$const16.7', '$22binary_subscr.10']
2024-09-08 00:20:34,314 - dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=428)
2024-09-08 00:20:34,315 - stack ['$14binary_add.6', '$24binary_multiply.11']
2024-09-08 00:20:34,315 - dispatch pc=28, inst=STORE_FAST(arg=1, lineno=428)
2024-09-08 00:20:34,315 - stack ['$26binary_subtract.12']
2024-09-08 00:20:34,315 - dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=429)
2024-09-08 00:20:34,315 - stack []
2024-09-08 00:20:34,315 - dispatch pc=32, inst=LOAD_CONST(arg=1, lineno=429)
2024-09-08 00:20:34,315 - stack ['$x30.13']
2024-09-08 00:20:34,315 - dispatch pc=34, inst=BINARY_SUBSCR(arg=None, lineno=429)
2024-09-08 00:20:34,315 - stack ['$x30.13', '$const32.14']
2024-09-08 00:20:34,315 - dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=429)
2024-09-08 00:20:34,315 - stack ['$34binary_subscr.15']
2024-09-08 00:20:34,316 - dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=429)
2024-09-08 00:20:34,316 - stack ['$34binary_subscr.15', '$x36.16']
2024-09-08 00:20:34,316 - dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=429)
2024-09-08 00:20:34,316 - stack ['$34binary_subscr.15', '$x36.16', '$const38.17']
2024-09-08 00:20:34,316 - dispatch pc=42, inst=BINARY_SUBTRACT(arg=None, lineno=429)
2024-09-08 00:20:34,316 - stack ['$34binary_subscr.15', '$40binary_subscr.18']
2024-09-08 00:20:34,316 - dispatch pc=44, inst=LOAD_CONST(arg=3, lineno=429)
2024-09-08 00:20:34,316 - stack ['$42binary_subtract.19']
2024-09-08 00:20:34,316 - dispatch pc=46, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=429)
2024-09-08 00:20:34,316 - stack ['$42binary_subtract.19', '$const44.20']
2024-09-08 00:20:34,316 - dispatch pc=48, inst=STORE_FAST(arg=2, lineno=429)
2024-09-08 00:20:34,317 - stack ['$46binary_true_divide.21']
2024-09-08 00:20:34,317 - dispatch pc=50, inst=LOAD_GLOBAL(arg=0, lineno=431)
2024-09-08 00:20:34,317 - stack []
2024-09-08 00:20:34,317 - dispatch pc=52, inst=LOAD_METHOD(arg=1, lineno=431)
2024-09-08 00:20:34,317 - stack ['$50load_global.22']
2024-09-08 00:20:34,317 - dispatch pc=54, inst=LOAD_FAST(arg=2, lineno=431)
2024-09-08 00:20:34,317 - stack ['$52load_method.23']
2024-09-08 00:20:34,317 - dispatch pc=56, inst=CALL_METHOD(arg=1, lineno=431)
2024-09-08 00:20:34,317 - stack ['$52load_method.23', '$b54.24']
2024-09-08 00:20:34,317 - dispatch pc=58, inst=LOAD_GLOBAL(arg=0, lineno=431)
2024-09-08 00:20:34,317 - stack ['$56call_method.25']
2024-09-08 00:20:34,318 - dispatch pc=60, inst=LOAD_METHOD(arg=1, lineno=431)
2024-09-08 00:20:34,318 - stack ['$56call_method.25', '$58load_global.26']
2024-09-08 00:20:34,318 - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=431)
2024-09-08 00:20:34,318 - stack ['$56call_method.25', '$60load_method.27']
2024-09-08 00:20:34,318 - dispatch pc=64, inst=CALL_METHOD(arg=1, lineno=431)
2024-09-08 00:20:34,318 - stack ['$56call_method.25', '$60load_method.27', '$a62.28']
2024-09-08 00:20:34,318 - dispatch pc=66, inst=COMPARE_OP(arg=5, lineno=431)
2024-09-08 00:20:34,318 - stack ['$56call_method.25', '$64call_method.29']
2024-09-08 00:20:34,318 - dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=38, lineno=431)
2024-09-08 00:20:34,318 - stack ['$66compare_op.30']
2024-09-08 00:20:34,318 - end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=74, stack=(), blockstack=(), npush=0)]
2024-09-08 00:20:34,318 - pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=74 nstack_initial=0)])
2024-09-08 00:20:34,319 - stack: []
2024-09-08 00:20:34,319 - state.pc_initial: State(pc_initial=70 nstack_initial=0)
2024-09-08 00:20:34,319 - dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=434)
2024-09-08 00:20:34,319 - stack []
2024-09-08 00:20:34,319 - dispatch pc=72, inst=RETURN_VALUE(arg=None, lineno=434)
2024-09-08 00:20:34,319 - stack ['$const70.0']
2024-09-08 00:20:34,319 - end state. edges=[]
2024-09-08 00:20:34,319 - pending: deque([State(pc_initial=74 nstack_initial=0)])
2024-09-08 00:20:34,319 - stack: []
2024-09-08 00:20:34,319 - state.pc_initial: State(pc_initial=74 nstack_initial=0)
2024-09-08 00:20:34,319 - dispatch pc=74, inst=LOAD_FAST(arg=2, lineno=436)
2024-09-08 00:20:34,320 - stack []
2024-09-08 00:20:34,320 - dispatch pc=76, inst=UNARY_NEGATIVE(arg=None, lineno=436)
2024-09-08 00:20:34,320 - stack ['$b74.0']
2024-09-08 00:20:34,320 - dispatch pc=78, inst=LOAD_FAST(arg=1, lineno=436)
2024-09-08 00:20:34,320 - stack ['$76unary_negative.1']
2024-09-08 00:20:34,320 - dispatch pc=80, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=436)
2024-09-08 00:20:34,320 - stack ['$76unary_negative.1', '$a78.2']
2024-09-08 00:20:34,321 - dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=436)
2024-09-08 00:20:34,321 - stack ['$80binary_true_divide.3']
2024-09-08 00:20:34,321 - end state. edges=[]
2024-09-08 00:20:34,321 - -------------------------Prune PHIs-------------------------
2024-09-08 00:20:34,321 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set()})
2024-09-08 00:20:34,322 - defmap: {}
2024-09-08 00:20:34,322 - phismap: defaultdict(<class 'set'>, {})
2024-09-08 00:20:34,322 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-08 00:20:34,322 - keep phismap: {}
2024-09-08 00:20:34,322 - new_out: defaultdict(<class 'dict'>, {})
2024-09-08 00:20:34,322 - ----------------------DONE Prune PHIs-----------------------
2024-09-08 00:20:34,322 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14binary_add.6'}), (16, {'res': '$const16.7'}), (18, {'res': '$x18.8'}), (20, {'res': '$const20.9'}), (22, {'index': '$const20.9', 'target': '$x18.8', 'res': '$22binary_subscr.10'}), (24, {'lhs': '$const16.7', 'rhs': '$22binary_subscr.10', 'res': '$24binary_multiply.11'}), (26, {'lhs': '$14binary_add.6', 'rhs': '$24binary_multiply.11', 'res': '$26binary_subtract.12'}), (28, {'value': '$26binary_subtract.12'}), (30, {'res': '$x30.13'}), (32, {'res': '$const32.14'}), (34, {'index': '$const32.14', 'target': '$x30.13', 'res': '$34binary_subscr.15'}), (36, {'res': '$x36.16'}), (38, {'res': '$const38.17'}), (40, {'index': '$const38.17', 'target': '$x36.16', 'res': '$40binary_subscr.18'}), (42, {'lhs': '$34binary_subscr.15', 'rhs': '$40binary_subscr.18', 'res': '$42binary_subtract.19'}), (44, {'res': '$const44.20'}), (46, {'lhs': '$42binary_subtract.19', 'rhs': '$const44.20', 'res': '$46binary_true_divide.21'}), (48, {'value': '$46binary_true_divide.21'}), (50, {'res': '$50load_global.22'}), (52, {'item': '$50load_global.22', 'res': '$52load_method.23'}), (54, {'res': '$b54.24'}), (56, {'func': '$52load_method.23', 'args': ['$b54.24'], 'res': '$56call_method.25'}), (58, {'res': '$58load_global.26'}), (60, {'item': '$58load_global.26', 'res': '$60load_method.27'}), (62, {'res': '$a62.28'}), (64, {'func': '$60load_method.27', 'args': ['$a62.28'], 'res': '$64call_method.29'}), (66, {'lhs': '$56call_method.25', 'rhs': '$64call_method.29', 'res': '$66compare_op.30'}), (68, {'pred': '$66compare_op.30'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 74: ()})
2024-09-08 00:20:34,322 - block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$const70.0'}), (72, {'retval': '$const70.0', 'castval': '$72return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-08 00:20:34,322 - block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$b74.0'}), (76, {'value': '$b74.0', 'res': '$76unary_negative.1'}), (78, {'res': '$a78.2'}), (80, {'lhs': '$76unary_negative.1', 'rhs': '$a78.2', 'res': '$80binary_true_divide.3'}), (82, {'retval': '$80binary_true_divide.3', 'castval': '$82return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-08 00:20:34,325 - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14binary_add.6 = $6binary_subscr.2 + $12binary_subscr.5 ['$12binary_subscr.5', '$14binary_add.6', '$6binary_subscr.2']
    $const16.7 = const(int, 2)               ['$const16.7']
    $const20.9 = const(int, 0)               ['$const20.9']
    $22binary_subscr.10 = getitem(value=x, index=$const20.9, fn=<built-in function getitem>) ['$22binary_subscr.10', '$const20.9', 'x']
    $24binary_multiply.11 = $const16.7 * $22binary_subscr.10 ['$22binary_subscr.10', '$24binary_multiply.11', '$const16.7']
    a = $14binary_add.6 - $24binary_multiply.11 ['$14binary_add.6', '$24binary_multiply.11', 'a']
    $const32.14 = const(int, 1)              ['$const32.14']
    $34binary_subscr.15 = getitem(value=x, index=$const32.14, fn=<built-in function getitem>) ['$34binary_subscr.15', '$const32.14', 'x']
    $const38.17 = const(int, -1)             ['$const38.17']
    $40binary_subscr.18 = getitem(value=x, index=$const38.17, fn=<built-in function getitem>) ['$40binary_subscr.18', '$const38.17', 'x']
    $42binary_subtract.19 = $34binary_subscr.15 - $40binary_subscr.18 ['$34binary_subscr.15', '$40binary_subscr.18', '$42binary_subtract.19']
    $const44.20 = const(int, 2)              ['$const44.20']
    b = $42binary_subtract.19 / $const44.20  ['$42binary_subtract.19', '$const44.20', 'b']
    $50load_global.22 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$50load_global.22']
    $52load_method.23 = getattr(value=$50load_global.22, attr=abs) ['$50load_global.22', '$52load_method.23']
    $56call_method.25 = call $52load_method.23(b, func=$52load_method.23, args=[Var(b, pitch.py:429)], kws=(), vararg=None, varkwarg=None, target=None) ['$52load_method.23', '$56call_method.25', 'b']
    $58load_global.26 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$58load_global.26']
    $60load_method.27 = getattr(value=$58load_global.26, attr=abs) ['$58load_global.26', '$60load_method.27']
    $64call_method.29 = call $60load_method.27(a, func=$60load_method.27, args=[Var(a, pitch.py:428)], kws=(), vararg=None, varkwarg=None, target=None) ['$60load_method.27', '$64call_method.29', 'a']
    $66compare_op.30 = $56call_method.25 >= $64call_method.29 ['$56call_method.25', '$64call_method.29', '$66compare_op.30']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.30, func=bool68, args=(Var($66compare_op.30, pitch.py:431),), kws=(), vararg=None, varkwarg=None, target=None) ['$66compare_op.30', '$68pred', 'bool68']
    branch $68pred, 70, 74                   ['$68pred']
label 70:
    $const70.0 = const(int, 0)               ['$const70.0']
    $72return_value.1 = cast(value=$const70.0) ['$72return_value.1', '$const70.0']
    return $72return_value.1                 ['$72return_value.1']
label 74:
    $76unary_negative.1 = unary(fn=<built-in function neg>, value=b) ['$76unary_negative.1', 'b']
    $80binary_true_divide.3 = $76unary_negative.1 / a ['$76unary_negative.1', '$80binary_true_divide.3', 'a']
    $82return_value.4 = cast(value=$80binary_true_divide.3) ['$80binary_true_divide.3', '$82return_value.4']
    return $82return_value.4                 ['$82return_value.4']

2024-09-08 17:17:46,462 - Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2024-09-08 17:17:47,621 - Creating converter from 7 to 5
2024-09-08 17:17:47,621 - Creating converter from 5 to 7
2024-09-08 17:17:47,621 - Creating converter from 7 to 5
2024-09-08 17:17:47,622 - Creating converter from 5 to 7
2024-09-08 17:17:57,095 - bytecode dump:
>          0	NOP(arg=None, lineno=1141)
           2	LOAD_FAST(arg=0, lineno=1144)
           4	LOAD_CONST(arg=1, lineno=1144)
           6	BINARY_SUBSCR(arg=None, lineno=1144)
           8	STORE_FAST(arg=3, lineno=1144)
          10	LOAD_FAST(arg=1, lineno=1145)
          12	UNARY_NEGATIVE(arg=None, lineno=1145)
          14	LOAD_FAST(arg=3, lineno=1145)
          16	DUP_TOP(arg=None, lineno=1145)
          18	ROT_THREE(arg=None, lineno=1145)
          20	COMPARE_OP(arg=1, lineno=1145)
          22	POP_JUMP_IF_FALSE(arg=17, lineno=1145)
          24	LOAD_FAST(arg=1, lineno=1145)
          26	COMPARE_OP(arg=1, lineno=1145)
          28	POP_JUMP_IF_FALSE(arg=21, lineno=1145)
          30	JUMP_FORWARD(arg=2, lineno=1145)
>         32	POP_TOP(arg=None, lineno=1145)
          34	JUMP_FORWARD(arg=2, lineno=1145)
>         36	LOAD_CONST(arg=1, lineno=1146)
          38	STORE_FAST(arg=3, lineno=1146)
>         40	LOAD_FAST(arg=0, lineno=1148)
          42	LOAD_CONST(arg=2, lineno=1148)
          44	BINARY_SUBSCR(arg=None, lineno=1148)
          46	STORE_FAST(arg=4, lineno=1148)
          48	LOAD_FAST(arg=1, lineno=1149)
          50	UNARY_NEGATIVE(arg=None, lineno=1149)
          52	LOAD_FAST(arg=4, lineno=1149)
          54	DUP_TOP(arg=None, lineno=1149)
          56	ROT_THREE(arg=None, lineno=1149)
          58	COMPARE_OP(arg=1, lineno=1149)
          60	POP_JUMP_IF_FALSE(arg=36, lineno=1149)
          62	LOAD_FAST(arg=1, lineno=1149)
          64	COMPARE_OP(arg=1, lineno=1149)
          66	POP_JUMP_IF_FALSE(arg=40, lineno=1149)
          68	JUMP_FORWARD(arg=2, lineno=1149)
>         70	POP_TOP(arg=None, lineno=1149)
          72	JUMP_FORWARD(arg=2, lineno=1149)
>         74	LOAD_CONST(arg=1, lineno=1150)
          76	STORE_FAST(arg=4, lineno=1150)
>         78	LOAD_FAST(arg=2, lineno=1152)
          80	POP_JUMP_IF_FALSE(arg=52, lineno=1152)
          82	LOAD_GLOBAL(arg=0, lineno=1153)
          84	LOAD_METHOD(arg=1, lineno=1153)
          86	LOAD_FAST(arg=3, lineno=1153)
          88	CALL_METHOD(arg=1, lineno=1153)
          90	LOAD_GLOBAL(arg=0, lineno=1153)
          92	LOAD_METHOD(arg=1, lineno=1153)
          94	LOAD_FAST(arg=4, lineno=1153)
          96	CALL_METHOD(arg=1, lineno=1153)
          98	COMPARE_OP(arg=3, lineno=1153)
         100	RETURN_VALUE(arg=None, lineno=1153)
>        102	LOAD_GLOBAL(arg=0, lineno=1155)
         104	LOAD_METHOD(arg=2, lineno=1155)
         106	LOAD_FAST(arg=3, lineno=1155)
         108	CALL_METHOD(arg=1, lineno=1155)
         110	LOAD_GLOBAL(arg=0, lineno=1155)
         112	LOAD_METHOD(arg=2, lineno=1155)
         114	LOAD_FAST(arg=4, lineno=1155)
         116	CALL_METHOD(arg=1, lineno=1155)
         118	COMPARE_OP(arg=3, lineno=1155)
         120	RETURN_VALUE(arg=None, lineno=1155)
2024-09-08 17:17:57,096 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-08 17:17:57,096 - stack: []
2024-09-08 17:17:57,096 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-08 17:17:57,096 - dispatch pc=0, inst=NOP(arg=None, lineno=1141)
2024-09-08 17:17:57,096 - stack []
2024-09-08 17:17:57,097 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1144)
2024-09-08 17:17:57,097 - stack []
2024-09-08 17:17:57,097 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1144)
2024-09-08 17:17:57,097 - stack ['$x2.0']
2024-09-08 17:17:57,121 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1144)
2024-09-08 17:17:57,121 - stack ['$x2.0', '$const4.1']
2024-09-08 17:17:57,121 - dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1144)
2024-09-08 17:17:57,121 - stack ['$6binary_subscr.2']
2024-09-08 17:17:57,121 - dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=1145)
2024-09-08 17:17:57,121 - stack []
2024-09-08 17:17:57,121 - dispatch pc=12, inst=UNARY_NEGATIVE(arg=None, lineno=1145)
2024-09-08 17:17:57,122 - stack ['$threshold10.3']
2024-09-08 17:17:57,122 - dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=1145)
2024-09-08 17:17:57,122 - stack ['$12unary_negative.4']
2024-09-08 17:17:57,122 - dispatch pc=16, inst=DUP_TOP(arg=None, lineno=1145)
2024-09-08 17:17:57,122 - stack ['$12unary_negative.4', '$x014.5']
2024-09-08 17:17:57,122 - dispatch pc=18, inst=ROT_THREE(arg=None, lineno=1145)
2024-09-08 17:17:57,122 - stack ['$12unary_negative.4', '$x014.5', '$16dup_top.6']
2024-09-08 17:17:57,122 - dispatch pc=20, inst=COMPARE_OP(arg=1, lineno=1145)
2024-09-08 17:17:57,122 - stack ['$16dup_top.6', '$12unary_negative.4', '$x014.5']
2024-09-08 17:17:57,122 - dispatch pc=22, inst=POP_JUMP_IF_FALSE(arg=17, lineno=1145)
2024-09-08 17:17:57,123 - stack ['$16dup_top.6', '$20compare_op.7']
2024-09-08 17:17:57,123 - end state. edges=[Edge(pc=24, stack=('$16dup_top.6',), blockstack=(), npush=0), Edge(pc=32, stack=('$16dup_top.6',), blockstack=(), npush=0)]
2024-09-08 17:17:57,123 - pending: deque([State(pc_initial=24 nstack_initial=1), State(pc_initial=32 nstack_initial=1)])
2024-09-08 17:17:57,123 - stack: ['$phi24.0']
2024-09-08 17:17:57,123 - state.pc_initial: State(pc_initial=24 nstack_initial=1)
2024-09-08 17:17:57,123 - dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=1145)
2024-09-08 17:17:57,123 - stack ['$phi24.0']
2024-09-08 17:17:57,123 - dispatch pc=26, inst=COMPARE_OP(arg=1, lineno=1145)
2024-09-08 17:17:57,123 - stack ['$phi24.0', '$threshold24.1']
2024-09-08 17:17:57,124 - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=21, lineno=1145)
2024-09-08 17:17:57,124 - stack ['$26compare_op.2']
2024-09-08 17:17:57,124 - end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=40, stack=(), blockstack=(), npush=0)]
2024-09-08 17:17:57,124 - pending: deque([State(pc_initial=32 nstack_initial=1), State(pc_initial=30 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2024-09-08 17:17:57,124 - stack: ['$phi32.0']
2024-09-08 17:17:57,124 - state.pc_initial: State(pc_initial=32 nstack_initial=1)
2024-09-08 17:17:57,124 - dispatch pc=32, inst=POP_TOP(arg=None, lineno=1145)
2024-09-08 17:17:57,124 - stack ['$phi32.0']
2024-09-08 17:17:57,124 - dispatch pc=34, inst=JUMP_FORWARD(arg=2, lineno=1145)
2024-09-08 17:17:57,124 - stack []
2024-09-08 17:17:57,124 - end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2024-09-08 17:17:57,125 - pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2024-09-08 17:17:57,125 - stack: []
2024-09-08 17:17:57,125 - state.pc_initial: State(pc_initial=30 nstack_initial=0)
2024-09-08 17:17:57,125 - dispatch pc=30, inst=JUMP_FORWARD(arg=2, lineno=1145)
2024-09-08 17:17:57,125 - stack []
2024-09-08 17:17:57,125 - end state. edges=[Edge(pc=36, stack=(), blockstack=(), npush=0)]
2024-09-08 17:17:57,125 - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2024-09-08 17:17:57,125 - stack: []
2024-09-08 17:17:57,125 - state.pc_initial: State(pc_initial=40 nstack_initial=0)
2024-09-08 17:17:57,125 - dispatch pc=40, inst=LOAD_FAST(arg=0, lineno=1148)
2024-09-08 17:17:57,125 - stack []
2024-09-08 17:17:57,126 - dispatch pc=42, inst=LOAD_CONST(arg=2, lineno=1148)
2024-09-08 17:17:57,126 - stack ['$x40.0']
2024-09-08 17:17:57,126 - dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=1148)
2024-09-08 17:17:57,126 - stack ['$x40.0', '$const42.1']
2024-09-08 17:17:57,126 - dispatch pc=46, inst=STORE_FAST(arg=4, lineno=1148)
2024-09-08 17:17:57,126 - stack ['$44binary_subscr.2']
2024-09-08 17:17:57,126 - dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=1149)
2024-09-08 17:17:57,126 - stack []
2024-09-08 17:17:57,126 - dispatch pc=50, inst=UNARY_NEGATIVE(arg=None, lineno=1149)
2024-09-08 17:17:57,126 - stack ['$threshold48.3']
2024-09-08 17:17:57,127 - dispatch pc=52, inst=LOAD_FAST(arg=4, lineno=1149)
2024-09-08 17:17:57,127 - stack ['$50unary_negative.4']
2024-09-08 17:17:57,127 - dispatch pc=54, inst=DUP_TOP(arg=None, lineno=1149)
2024-09-08 17:17:57,127 - stack ['$50unary_negative.4', '$x152.5']
2024-09-08 17:17:57,127 - dispatch pc=56, inst=ROT_THREE(arg=None, lineno=1149)
2024-09-08 17:17:57,127 - stack ['$50unary_negative.4', '$x152.5', '$54dup_top.6']
2024-09-08 17:17:57,127 - dispatch pc=58, inst=COMPARE_OP(arg=1, lineno=1149)
2024-09-08 17:17:57,127 - stack ['$54dup_top.6', '$50unary_negative.4', '$x152.5']
2024-09-08 17:17:57,127 - dispatch pc=60, inst=POP_JUMP_IF_FALSE(arg=36, lineno=1149)
2024-09-08 17:17:57,127 - stack ['$54dup_top.6', '$58compare_op.7']
2024-09-08 17:17:57,127 - end state. edges=[Edge(pc=62, stack=('$54dup_top.6',), blockstack=(), npush=0), Edge(pc=70, stack=('$54dup_top.6',), blockstack=(), npush=0)]
2024-09-08 17:17:57,127 - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
2024-09-08 17:17:57,128 - pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
2024-09-08 17:17:57,128 - stack: []
2024-09-08 17:17:57,128 - state.pc_initial: State(pc_initial=36 nstack_initial=0)
2024-09-08 17:17:57,128 - dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=1146)
2024-09-08 17:17:57,128 - stack []
2024-09-08 17:17:57,128 - dispatch pc=38, inst=STORE_FAST(arg=3, lineno=1146)
2024-09-08 17:17:57,128 - stack ['$const36.0']
2024-09-08 17:17:57,128 - end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2024-09-08 17:17:57,128 - pending: deque([State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1), State(pc_initial=40 nstack_initial=0)])
2024-09-08 17:17:57,128 - stack: ['$phi62.0']
2024-09-08 17:17:57,128 - state.pc_initial: State(pc_initial=62 nstack_initial=1)
2024-09-08 17:17:57,128 - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=1149)
2024-09-08 17:17:57,128 - stack ['$phi62.0']
2024-09-08 17:17:57,128 - dispatch pc=64, inst=COMPARE_OP(arg=1, lineno=1149)
2024-09-08 17:17:57,129 - stack ['$phi62.0', '$threshold62.1']
2024-09-08 17:17:57,129 - dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=40, lineno=1149)
2024-09-08 17:17:57,129 - stack ['$64compare_op.2']
2024-09-08 17:17:57,129 - end state. edges=[Edge(pc=68, stack=(), blockstack=(), npush=0), Edge(pc=78, stack=(), blockstack=(), npush=0)]
2024-09-08 17:17:57,129 - pending: deque([State(pc_initial=70 nstack_initial=1), State(pc_initial=40 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-08 17:17:57,129 - stack: ['$phi70.0']
2024-09-08 17:17:57,129 - state.pc_initial: State(pc_initial=70 nstack_initial=1)
2024-09-08 17:17:57,129 - dispatch pc=70, inst=POP_TOP(arg=None, lineno=1149)
2024-09-08 17:17:57,129 - stack ['$phi70.0']
2024-09-08 17:17:57,129 - dispatch pc=72, inst=JUMP_FORWARD(arg=2, lineno=1149)
2024-09-08 17:17:57,129 - stack []
2024-09-08 17:17:57,129 - end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0)]
2024-09-08 17:17:57,129 - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-08 17:17:57,129 - pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-08 17:17:57,130 - stack: []
2024-09-08 17:17:57,130 - state.pc_initial: State(pc_initial=68 nstack_initial=0)
2024-09-08 17:17:57,130 - dispatch pc=68, inst=JUMP_FORWARD(arg=2, lineno=1149)
2024-09-08 17:17:57,130 - stack []
2024-09-08 17:17:57,130 - end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0)]
2024-09-08 17:17:57,130 - pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=74 nstack_initial=0)])
2024-09-08 17:17:57,130 - stack: []
2024-09-08 17:17:57,130 - state.pc_initial: State(pc_initial=78 nstack_initial=0)
2024-09-08 17:17:57,130 - dispatch pc=78, inst=LOAD_FAST(arg=2, lineno=1152)
2024-09-08 17:17:57,130 - stack []
2024-09-08 17:17:57,130 - dispatch pc=80, inst=POP_JUMP_IF_FALSE(arg=52, lineno=1152)
2024-09-08 17:17:57,130 - stack ['$zero_pos78.0']
2024-09-08 17:17:57,130 - end state. edges=[Edge(pc=82, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
2024-09-08 17:17:57,130 - pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2024-09-08 17:17:57,131 - pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2024-09-08 17:17:57,131 - stack: []
2024-09-08 17:17:57,131 - state.pc_initial: State(pc_initial=74 nstack_initial=0)
2024-09-08 17:17:57,131 - dispatch pc=74, inst=LOAD_CONST(arg=1, lineno=1150)
2024-09-08 17:17:57,131 - stack []
2024-09-08 17:17:57,131 - dispatch pc=76, inst=STORE_FAST(arg=4, lineno=1150)
2024-09-08 17:17:57,131 - stack ['$const74.0']
2024-09-08 17:17:57,131 - end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0)]
2024-09-08 17:17:57,131 - pending: deque([State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-08 17:17:57,132 - stack: []
2024-09-08 17:17:57,132 - state.pc_initial: State(pc_initial=82 nstack_initial=0)
2024-09-08 17:17:57,132 - dispatch pc=82, inst=LOAD_GLOBAL(arg=0, lineno=1153)
2024-09-08 17:17:57,132 - stack []
2024-09-08 17:17:57,132 - dispatch pc=84, inst=LOAD_METHOD(arg=1, lineno=1153)
2024-09-08 17:17:57,132 - stack ['$82load_global.0']
2024-09-08 17:17:57,132 - dispatch pc=86, inst=LOAD_FAST(arg=3, lineno=1153)
2024-09-08 17:17:57,132 - stack ['$84load_method.1']
2024-09-08 17:17:57,132 - dispatch pc=88, inst=CALL_METHOD(arg=1, lineno=1153)
2024-09-08 17:17:57,132 - stack ['$84load_method.1', '$x086.2']
2024-09-08 17:17:57,132 - dispatch pc=90, inst=LOAD_GLOBAL(arg=0, lineno=1153)
2024-09-08 17:17:57,132 - stack ['$88call_method.3']
2024-09-08 17:17:57,132 - dispatch pc=92, inst=LOAD_METHOD(arg=1, lineno=1153)
2024-09-08 17:17:57,133 - stack ['$88call_method.3', '$90load_global.4']
2024-09-08 17:17:57,133 - dispatch pc=94, inst=LOAD_FAST(arg=4, lineno=1153)
2024-09-08 17:17:57,133 - stack ['$88call_method.3', '$92load_method.5']
2024-09-08 17:17:57,133 - dispatch pc=96, inst=CALL_METHOD(arg=1, lineno=1153)
2024-09-08 17:17:57,133 - stack ['$88call_method.3', '$92load_method.5', '$x194.6']
2024-09-08 17:17:57,133 - dispatch pc=98, inst=COMPARE_OP(arg=3, lineno=1153)
2024-09-08 17:17:57,133 - stack ['$88call_method.3', '$96call_method.7']
2024-09-08 17:17:57,133 - dispatch pc=100, inst=RETURN_VALUE(arg=None, lineno=1153)
2024-09-08 17:17:57,133 - stack ['$98compare_op.8']
2024-09-08 17:17:57,133 - end state. edges=[]
2024-09-08 17:17:57,133 - pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-08 17:17:57,133 - stack: []
2024-09-08 17:17:57,133 - state.pc_initial: State(pc_initial=102 nstack_initial=0)
2024-09-08 17:17:57,133 - dispatch pc=102, inst=LOAD_GLOBAL(arg=0, lineno=1155)
2024-09-08 17:17:57,134 - stack []
2024-09-08 17:17:57,134 - dispatch pc=104, inst=LOAD_METHOD(arg=2, lineno=1155)
2024-09-08 17:17:57,134 - stack ['$102load_global.0']
2024-09-08 17:17:57,134 - dispatch pc=106, inst=LOAD_FAST(arg=3, lineno=1155)
2024-09-08 17:17:57,134 - stack ['$104load_method.1']
2024-09-08 17:17:57,134 - dispatch pc=108, inst=CALL_METHOD(arg=1, lineno=1155)
2024-09-08 17:17:57,134 - stack ['$104load_method.1', '$x0106.2']
2024-09-08 17:17:57,134 - dispatch pc=110, inst=LOAD_GLOBAL(arg=0, lineno=1155)
2024-09-08 17:17:57,134 - stack ['$108call_method.3']
2024-09-08 17:17:57,134 - dispatch pc=112, inst=LOAD_METHOD(arg=2, lineno=1155)
2024-09-08 17:17:57,134 - stack ['$108call_method.3', '$110load_global.4']
2024-09-08 17:17:57,134 - dispatch pc=114, inst=LOAD_FAST(arg=4, lineno=1155)
2024-09-08 17:17:57,134 - stack ['$108call_method.3', '$112load_method.5']
2024-09-08 17:17:57,134 - dispatch pc=116, inst=CALL_METHOD(arg=1, lineno=1155)
2024-09-08 17:17:57,135 - stack ['$108call_method.3', '$112load_method.5', '$x1114.6']
2024-09-08 17:17:57,135 - dispatch pc=118, inst=COMPARE_OP(arg=3, lineno=1155)
2024-09-08 17:17:57,135 - stack ['$108call_method.3', '$116call_method.7']
2024-09-08 17:17:57,135 - dispatch pc=120, inst=RETURN_VALUE(arg=None, lineno=1155)
2024-09-08 17:17:57,135 - stack ['$118compare_op.8']
2024-09-08 17:17:57,135 - end state. edges=[]
2024-09-08 17:17:57,135 - pending: deque([State(pc_initial=78 nstack_initial=0)])
2024-09-08 17:17:57,135 - -------------------------Prune PHIs-------------------------
2024-09-08 17:17:57,135 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=1): {'$phi24.0'},
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=1): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=1): {'$phi62.0'},
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=1): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=82 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set()})
2024-09-08 17:17:57,136 - defmap: {'$phi24.0': State(pc_initial=0 nstack_initial=0),
 '$phi32.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.0': State(pc_initial=40 nstack_initial=0),
 '$phi70.0': State(pc_initial=40 nstack_initial=0)}
2024-09-08 17:17:57,136 - phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))},
             '$phi70.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))}})
2024-09-08 17:17:57,136 - changing phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))},
             '$phi70.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))}})
2024-09-08 17:17:57,136 - keep phismap: {'$phi24.0': {('$16dup_top.6', State(pc_initial=0 nstack_initial=0))},
 '$phi62.0': {('$54dup_top.6', State(pc_initial=40 nstack_initial=0))}}
2024-09-08 17:17:57,137 - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi24.0': '$16dup_top.6'},
             State(pc_initial=40 nstack_initial=0): {'$phi62.0': '$54dup_top.6'}})
2024-09-08 17:17:57,137 - ----------------------DONE Prune PHIs-----------------------
2024-09-08 17:17:57,137 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'value': '$6binary_subscr.2'}), (10, {'res': '$threshold10.3'}), (12, {'value': '$threshold10.3', 'res': '$12unary_negative.4'}), (14, {'res': '$x014.5'}), (16, {'orig': ['$x014.5'], 'duped': ['$16dup_top.6']}), (20, {'lhs': '$12unary_negative.4', 'rhs': '$x014.5', 'res': '$20compare_op.7'}), (22, {'pred': '$20compare_op.7'})), outgoing_phis={'$phi24.0': '$16dup_top.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={24: ('$16dup_top.6',), 32: ('$16dup_top.6',)})
2024-09-08 17:17:57,137 - block_infos State(pc_initial=24 nstack_initial=1):
AdaptBlockInfo(insts=((24, {'res': '$threshold24.1'}), (26, {'lhs': '$phi24.0', 'rhs': '$threshold24.1', 'res': '$26compare_op.2'}), (28, {'pred': '$26compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 40: ()})
2024-09-08 17:17:57,137 - block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ()})
2024-09-08 17:17:57,137 - block_infos State(pc_initial=32 nstack_initial=1):
AdaptBlockInfo(insts=((34, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2024-09-08 17:17:57,137 - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$const36.0'}), (38, {'value': '$const36.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2024-09-08 17:17:57,138 - block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$x40.0'}), (42, {'res': '$const42.1'}), (44, {'index': '$const42.1', 'target': '$x40.0', 'res': '$44binary_subscr.2'}), (46, {'value': '$44binary_subscr.2'}), (48, {'res': '$threshold48.3'}), (50, {'value': '$threshold48.3', 'res': '$50unary_negative.4'}), (52, {'res': '$x152.5'}), (54, {'orig': ['$x152.5'], 'duped': ['$54dup_top.6']}), (58, {'lhs': '$50unary_negative.4', 'rhs': '$x152.5', 'res': '$58compare_op.7'}), (60, {'pred': '$58compare_op.7'})), outgoing_phis={'$phi62.0': '$54dup_top.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ('$54dup_top.6',), 70: ('$54dup_top.6',)})
2024-09-08 17:17:57,138 - block_infos State(pc_initial=62 nstack_initial=1):
AdaptBlockInfo(insts=((62, {'res': '$threshold62.1'}), (64, {'lhs': '$phi62.0', 'rhs': '$threshold62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={68: (), 78: ()})
2024-09-08 17:17:57,138 - block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: ()})
2024-09-08 17:17:57,138 - block_infos State(pc_initial=70 nstack_initial=1):
AdaptBlockInfo(insts=((72, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: ()})
2024-09-08 17:17:57,138 - block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$const74.0'}), (76, {'value': '$const74.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: ()})
2024-09-08 17:17:57,138 - block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$zero_pos78.0'}), (80, {'pred': '$zero_pos78.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: (), 102: ()})
2024-09-08 17:17:57,138 - block_infos State(pc_initial=82 nstack_initial=0):
AdaptBlockInfo(insts=((82, {'res': '$82load_global.0'}), (84, {'item': '$82load_global.0', 'res': '$84load_method.1'}), (86, {'res': '$x086.2'}), (88, {'func': '$84load_method.1', 'args': ['$x086.2'], 'res': '$88call_method.3'}), (90, {'res': '$90load_global.4'}), (92, {'item': '$90load_global.4', 'res': '$92load_method.5'}), (94, {'res': '$x194.6'}), (96, {'func': '$92load_method.5', 'args': ['$x194.6'], 'res': '$96call_method.7'}), (98, {'lhs': '$88call_method.3', 'rhs': '$96call_method.7', 'res': '$98compare_op.8'}), (100, {'retval': '$98compare_op.8', 'castval': '$100return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-08 17:17:57,138 - block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$102load_global.0'}), (104, {'item': '$102load_global.0', 'res': '$104load_method.1'}), (106, {'res': '$x0106.2'}), (108, {'func': '$104load_method.1', 'args': ['$x0106.2'], 'res': '$108call_method.3'}), (110, {'res': '$110load_global.4'}), (112, {'item': '$110load_global.4', 'res': '$112load_method.5'}), (114, {'res': '$x1114.6'}), (116, {'func': '$112load_method.5', 'args': ['$x1114.6'], 'res': '$116call_method.7'}), (118, {'lhs': '$108call_method.3', 'rhs': '$116call_method.7', 'res': '$118compare_op.8'}), (120, {'retval': '$118compare_op.8', 'castval': '$120return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-08 17:17:57,141 - label 0:
    x = arg(0, name=x)                       ['x']
    threshold = arg(1, name=threshold)       ['threshold']
    zero_pos = arg(2, name=zero_pos)         ['zero_pos']
    $const4.1 = const(int, 0)                ['$const4.1']
    x0 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$const4.1', 'x', 'x0']
    $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$12unary_negative.4', 'threshold']
    $20compare_op.7 = $12unary_negative.4 <= x0 ['$12unary_negative.4', '$20compare_op.7', 'x0']
    bool22 = global(bool: <class 'bool'>)    ['bool22']
    $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None) ['$20compare_op.7', '$22pred', 'bool22']
    $phi24.0 = x0                            ['$phi24.0', 'x0']
    branch $22pred, 24, 32                   ['$22pred']
label 24:
    $26compare_op.2 = $phi24.0 <= threshold  ['$26compare_op.2', '$phi24.0', 'threshold']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.2', '$28pred', 'bool28']
    branch $28pred, 30, 40                   ['$28pred']
label 30:
    jump 36                                  []
label 32:
    jump 40                                  []
label 36:
    x0 = const(int, 0)                       ['x0']
    jump 40                                  []
label 40:
    $const42.1 = const(int, -1)              ['$const42.1']
    x1 = getitem(value=x, index=$const42.1, fn=<built-in function getitem>) ['$const42.1', 'x', 'x1']
    $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$50unary_negative.4', 'threshold']
    $58compare_op.7 = $50unary_negative.4 <= x1 ['$50unary_negative.4', '$58compare_op.7', 'x1']
    bool60 = global(bool: <class 'bool'>)    ['bool60']
    $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None) ['$58compare_op.7', '$60pred', 'bool60']
    $phi62.0 = x1                            ['$phi62.0', 'x1']
    branch $60pred, 62, 70                   ['$60pred']
label 62:
    $64compare_op.2 = $phi62.0 <= threshold  ['$64compare_op.2', '$phi62.0', 'threshold']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 78                   ['$66pred']
label 68:
    jump 74                                  []
label 70:
    jump 78                                  []
label 74:
    x1 = const(int, 0)                       ['x1']
    jump 78                                  []
label 78:
    bool80 = global(bool: <class 'bool'>)    ['bool80']
    $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None) ['$80pred', 'bool80', 'zero_pos']
    branch $80pred, 82, 102                  ['$80pred']
label 82:
    $82load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$82load_global.0']
    $84load_method.1 = getattr(value=$82load_global.0, attr=signbit) ['$82load_global.0', '$84load_method.1']
    $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None) ['$84load_method.1', '$88call_method.3', 'x0']
    $90load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$90load_global.4']
    $92load_method.5 = getattr(value=$90load_global.4, attr=signbit) ['$90load_global.4', '$92load_method.5']
    $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None) ['$92load_method.5', '$96call_method.7', 'x1']
    $98compare_op.8 = $88call_method.3 != $96call_method.7 ['$88call_method.3', '$96call_method.7', '$98compare_op.8']
    $100return_value.9 = cast(value=$98compare_op.8) ['$100return_value.9', '$98compare_op.8']
    return $100return_value.9                ['$100return_value.9']
label 102:
    $102load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$102load_global.0']
    $104load_method.1 = getattr(value=$102load_global.0, attr=sign) ['$102load_global.0', '$104load_method.1']
    $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None) ['$104load_method.1', '$108call_method.3', 'x0']
    $110load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$110load_global.4']
    $112load_method.5 = getattr(value=$110load_global.4, attr=sign) ['$110load_global.4', '$112load_method.5']
    $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None) ['$112load_method.5', '$116call_method.7', 'x1']
    $118compare_op.8 = $108call_method.3 != $116call_method.7 ['$108call_method.3', '$116call_method.7', '$118compare_op.8']
    $120return_value.9 = cast(value=$118compare_op.8) ['$118compare_op.8', '$120return_value.9']
    return $120return_value.9                ['$120return_value.9']

2024-09-08 17:17:58,686 - bytecode dump:
>          0	NOP(arg=None, lineno=1039)
           2	LOAD_FAST(arg=0, lineno=1042)
           4	LOAD_CONST(arg=1, lineno=1042)
           6	BINARY_SUBSCR(arg=None, lineno=1042)
           8	LOAD_FAST(arg=0, lineno=1042)
          10	LOAD_CONST(arg=2, lineno=1042)
          12	BINARY_SUBSCR(arg=None, lineno=1042)
          14	COMPARE_OP(arg=4, lineno=1042)
          16	LOAD_FAST(arg=0, lineno=1042)
          18	LOAD_CONST(arg=1, lineno=1042)
          20	BINARY_SUBSCR(arg=None, lineno=1042)
          22	LOAD_FAST(arg=0, lineno=1042)
          24	LOAD_CONST(arg=3, lineno=1042)
          26	BINARY_SUBSCR(arg=None, lineno=1042)
          28	COMPARE_OP(arg=5, lineno=1042)
          30	BINARY_AND(arg=None, lineno=1042)
          32	RETURN_VALUE(arg=None, lineno=1042)
2024-09-08 17:17:58,686 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-08 17:17:58,686 - stack: []
2024-09-08 17:17:58,687 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-08 17:17:58,687 - dispatch pc=0, inst=NOP(arg=None, lineno=1039)
2024-09-08 17:17:58,687 - stack []
2024-09-08 17:17:58,687 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-08 17:17:58,687 - stack []
2024-09-08 17:17:58,687 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1042)
2024-09-08 17:17:58,687 - stack ['$x2.0']
2024-09-08 17:17:58,688 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-08 17:17:58,688 - stack ['$x2.0', '$const4.1']
2024-09-08 17:17:58,688 - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-08 17:17:58,688 - stack ['$6binary_subscr.2']
2024-09-08 17:17:58,688 - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1042)
2024-09-08 17:17:58,688 - stack ['$6binary_subscr.2', '$x8.3']
2024-09-08 17:17:58,688 - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-08 17:17:58,688 - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2024-09-08 17:17:58,688 - dispatch pc=14, inst=COMPARE_OP(arg=4, lineno=1042)
2024-09-08 17:17:58,688 - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2024-09-08 17:17:58,688 - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-08 17:17:58,689 - stack ['$14compare_op.6']
2024-09-08 17:17:58,689 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1042)
2024-09-08 17:17:58,689 - stack ['$14compare_op.6', '$x16.7']
2024-09-08 17:17:58,689 - dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-08 17:17:58,689 - stack ['$14compare_op.6', '$x16.7', '$const18.8']
2024-09-08 17:17:58,689 - dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-08 17:17:58,689 - stack ['$14compare_op.6', '$20binary_subscr.9']
2024-09-08 17:17:58,689 - dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=1042)
2024-09-08 17:17:58,689 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10']
2024-09-08 17:17:58,689 - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-08 17:17:58,690 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10', '$const24.11']
2024-09-08 17:17:58,690 - dispatch pc=28, inst=COMPARE_OP(arg=5, lineno=1042)
2024-09-08 17:17:58,690 - stack ['$14compare_op.6', '$20binary_subscr.9', '$26binary_subscr.12']
2024-09-08 17:17:58,690 - dispatch pc=30, inst=BINARY_AND(arg=None, lineno=1042)
2024-09-08 17:17:58,690 - stack ['$14compare_op.6', '$28compare_op.13']
2024-09-08 17:17:58,690 - dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1042)
2024-09-08 17:17:58,690 - stack ['$30binary_and.14']
2024-09-08 17:17:58,690 - end state. edges=[]
2024-09-08 17:17:58,690 - -------------------------Prune PHIs-------------------------
2024-09-08 17:17:58,690 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-08 17:17:58,691 - defmap: {}
2024-09-08 17:17:58,691 - phismap: defaultdict(<class 'set'>, {})
2024-09-08 17:17:58,691 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-08 17:17:58,691 - keep phismap: {}
2024-09-08 17:17:58,691 - new_out: defaultdict(<class 'dict'>, {})
2024-09-08 17:17:58,691 - ----------------------DONE Prune PHIs-----------------------
2024-09-08 17:17:58,691 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14compare_op.6'}), (16, {'res': '$x16.7'}), (18, {'res': '$const18.8'}), (20, {'index': '$const18.8', 'target': '$x16.7', 'res': '$20binary_subscr.9'}), (22, {'res': '$x22.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$x22.10', 'res': '$26binary_subscr.12'}), (28, {'lhs': '$20binary_subscr.9', 'rhs': '$26binary_subscr.12', 'res': '$28compare_op.13'}), (30, {'lhs': '$14compare_op.6', 'rhs': '$28compare_op.13', 'res': '$30binary_and.14'}), (32, {'retval': '$30binary_and.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-08 17:17:58,692 - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14compare_op.6 = $6binary_subscr.2 > $12binary_subscr.5 ['$12binary_subscr.5', '$14compare_op.6', '$6binary_subscr.2']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20binary_subscr.9 = getitem(value=x, index=$const18.8, fn=<built-in function getitem>) ['$20binary_subscr.9', '$const18.8', 'x']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=x, index=$const24.11, fn=<built-in function getitem>) ['$26binary_subscr.12', '$const24.11', 'x']
    $28compare_op.13 = $20binary_subscr.9 >= $26binary_subscr.12 ['$20binary_subscr.9', '$26binary_subscr.12', '$28compare_op.13']
    $30binary_and.14 = $14compare_op.6 & $28compare_op.13 ['$14compare_op.6', '$28compare_op.13', '$30binary_and.14']
    $32return_value.15 = cast(value=$30binary_and.14) ['$30binary_and.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

2024-09-08 17:17:58,694 - bytecode dump:
>          0	NOP(arg=None, lineno=1045)
           2	LOAD_FAST(arg=0, lineno=1048)
           4	LOAD_CONST(arg=1, lineno=1048)
           6	BINARY_SUBSCR(arg=None, lineno=1048)
           8	LOAD_FAST(arg=0, lineno=1048)
          10	LOAD_CONST(arg=2, lineno=1048)
          12	BINARY_SUBSCR(arg=None, lineno=1048)
          14	COMPARE_OP(arg=0, lineno=1048)
          16	LOAD_FAST(arg=0, lineno=1048)
          18	LOAD_CONST(arg=1, lineno=1048)
          20	BINARY_SUBSCR(arg=None, lineno=1048)
          22	LOAD_FAST(arg=0, lineno=1048)
          24	LOAD_CONST(arg=3, lineno=1048)
          26	BINARY_SUBSCR(arg=None, lineno=1048)
          28	COMPARE_OP(arg=1, lineno=1048)
          30	BINARY_AND(arg=None, lineno=1048)
          32	RETURN_VALUE(arg=None, lineno=1048)
2024-09-08 17:17:58,694 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-08 17:17:58,694 - stack: []
2024-09-08 17:17:58,694 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-08 17:17:58,694 - dispatch pc=0, inst=NOP(arg=None, lineno=1045)
2024-09-08 17:17:58,694 - stack []
2024-09-08 17:17:58,694 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-08 17:17:58,694 - stack []
2024-09-08 17:17:58,694 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1048)
2024-09-08 17:17:58,694 - stack ['$x2.0']
2024-09-08 17:17:58,695 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-08 17:17:58,695 - stack ['$x2.0', '$const4.1']
2024-09-08 17:17:58,695 - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-08 17:17:58,695 - stack ['$6binary_subscr.2']
2024-09-08 17:17:58,695 - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1048)
2024-09-08 17:17:58,695 - stack ['$6binary_subscr.2', '$x8.3']
2024-09-08 17:17:58,695 - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-08 17:17:58,695 - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2024-09-08 17:17:58,695 - dispatch pc=14, inst=COMPARE_OP(arg=0, lineno=1048)
2024-09-08 17:17:58,695 - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2024-09-08 17:17:58,696 - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-08 17:17:58,696 - stack ['$14compare_op.6']
2024-09-08 17:17:58,696 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1048)
2024-09-08 17:17:58,696 - stack ['$14compare_op.6', '$x16.7']
2024-09-08 17:17:58,696 - dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-08 17:17:58,696 - stack ['$14compare_op.6', '$x16.7', '$const18.8']
2024-09-08 17:17:58,697 - dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-08 17:17:58,697 - stack ['$14compare_op.6', '$20binary_subscr.9']
2024-09-08 17:17:58,697 - dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=1048)
2024-09-08 17:17:58,697 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10']
2024-09-08 17:17:58,697 - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-08 17:17:58,697 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10', '$const24.11']
2024-09-08 17:17:58,697 - dispatch pc=28, inst=COMPARE_OP(arg=1, lineno=1048)
2024-09-08 17:17:58,697 - stack ['$14compare_op.6', '$20binary_subscr.9', '$26binary_subscr.12']
2024-09-08 17:17:58,697 - dispatch pc=30, inst=BINARY_AND(arg=None, lineno=1048)
2024-09-08 17:17:58,697 - stack ['$14compare_op.6', '$28compare_op.13']
2024-09-08 17:17:58,698 - dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1048)
2024-09-08 17:17:58,698 - stack ['$30binary_and.14']
2024-09-08 17:17:58,698 - end state. edges=[]
2024-09-08 17:17:58,698 - -------------------------Prune PHIs-------------------------
2024-09-08 17:17:58,698 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-08 17:17:58,698 - defmap: {}
2024-09-08 17:17:58,698 - phismap: defaultdict(<class 'set'>, {})
2024-09-08 17:17:58,699 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-08 17:17:58,699 - keep phismap: {}
2024-09-08 17:17:58,699 - new_out: defaultdict(<class 'dict'>, {})
2024-09-08 17:17:58,699 - ----------------------DONE Prune PHIs-----------------------
2024-09-08 17:17:58,699 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14compare_op.6'}), (16, {'res': '$x16.7'}), (18, {'res': '$const18.8'}), (20, {'index': '$const18.8', 'target': '$x16.7', 'res': '$20binary_subscr.9'}), (22, {'res': '$x22.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$x22.10', 'res': '$26binary_subscr.12'}), (28, {'lhs': '$20binary_subscr.9', 'rhs': '$26binary_subscr.12', 'res': '$28compare_op.13'}), (30, {'lhs': '$14compare_op.6', 'rhs': '$28compare_op.13', 'res': '$30binary_and.14'}), (32, {'retval': '$30binary_and.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-08 17:17:58,700 - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14compare_op.6 = $6binary_subscr.2 < $12binary_subscr.5 ['$12binary_subscr.5', '$14compare_op.6', '$6binary_subscr.2']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20binary_subscr.9 = getitem(value=x, index=$const18.8, fn=<built-in function getitem>) ['$20binary_subscr.9', '$const18.8', 'x']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=x, index=$const24.11, fn=<built-in function getitem>) ['$26binary_subscr.12', '$const24.11', 'x']
    $28compare_op.13 = $20binary_subscr.9 <= $26binary_subscr.12 ['$20binary_subscr.9', '$26binary_subscr.12', '$28compare_op.13']
    $30binary_and.14 = $14compare_op.6 & $28compare_op.13 ['$14compare_op.6', '$28compare_op.13', '$30binary_and.14']
    $32return_value.15 = cast(value=$30binary_and.14) ['$30binary_and.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

2024-09-08 17:17:59,643 - bytecode dump:
>          0	NOP(arg=None, lineno=425)
           2	LOAD_FAST(arg=0, lineno=428)
           4	LOAD_CONST(arg=1, lineno=428)
           6	BINARY_SUBSCR(arg=None, lineno=428)
           8	LOAD_FAST(arg=0, lineno=428)
          10	LOAD_CONST(arg=2, lineno=428)
          12	BINARY_SUBSCR(arg=None, lineno=428)
          14	BINARY_ADD(arg=None, lineno=428)
          16	LOAD_CONST(arg=3, lineno=428)
          18	LOAD_FAST(arg=0, lineno=428)
          20	LOAD_CONST(arg=4, lineno=428)
          22	BINARY_SUBSCR(arg=None, lineno=428)
          24	BINARY_MULTIPLY(arg=None, lineno=428)
          26	BINARY_SUBTRACT(arg=None, lineno=428)
          28	STORE_FAST(arg=1, lineno=428)
          30	LOAD_FAST(arg=0, lineno=429)
          32	LOAD_CONST(arg=1, lineno=429)
          34	BINARY_SUBSCR(arg=None, lineno=429)
          36	LOAD_FAST(arg=0, lineno=429)
          38	LOAD_CONST(arg=2, lineno=429)
          40	BINARY_SUBSCR(arg=None, lineno=429)
          42	BINARY_SUBTRACT(arg=None, lineno=429)
          44	LOAD_CONST(arg=3, lineno=429)
          46	BINARY_TRUE_DIVIDE(arg=None, lineno=429)
          48	STORE_FAST(arg=2, lineno=429)
          50	LOAD_GLOBAL(arg=0, lineno=431)
          52	LOAD_METHOD(arg=1, lineno=431)
          54	LOAD_FAST(arg=2, lineno=431)
          56	CALL_METHOD(arg=1, lineno=431)
          58	LOAD_GLOBAL(arg=0, lineno=431)
          60	LOAD_METHOD(arg=1, lineno=431)
          62	LOAD_FAST(arg=1, lineno=431)
          64	CALL_METHOD(arg=1, lineno=431)
          66	COMPARE_OP(arg=5, lineno=431)
          68	POP_JUMP_IF_FALSE(arg=38, lineno=431)
          70	LOAD_CONST(arg=4, lineno=434)
          72	RETURN_VALUE(arg=None, lineno=434)
>         74	LOAD_FAST(arg=2, lineno=436)
          76	UNARY_NEGATIVE(arg=None, lineno=436)
          78	LOAD_FAST(arg=1, lineno=436)
          80	BINARY_TRUE_DIVIDE(arg=None, lineno=436)
          82	RETURN_VALUE(arg=None, lineno=436)
2024-09-08 17:17:59,644 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-08 17:17:59,644 - stack: []
2024-09-08 17:17:59,644 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-08 17:17:59,644 - dispatch pc=0, inst=NOP(arg=None, lineno=425)
2024-09-08 17:17:59,644 - stack []
2024-09-08 17:17:59,644 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=428)
2024-09-08 17:17:59,644 - stack []
2024-09-08 17:17:59,644 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=428)
2024-09-08 17:17:59,644 - stack ['$x2.0']
2024-09-08 17:17:59,645 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=428)
2024-09-08 17:17:59,645 - stack ['$x2.0', '$const4.1']
2024-09-08 17:17:59,645 - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=428)
2024-09-08 17:17:59,645 - stack ['$6binary_subscr.2']
2024-09-08 17:17:59,645 - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=428)
2024-09-08 17:17:59,645 - stack ['$6binary_subscr.2', '$x8.3']
2024-09-08 17:17:59,645 - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=428)
2024-09-08 17:17:59,645 - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2024-09-08 17:17:59,645 - dispatch pc=14, inst=BINARY_ADD(arg=None, lineno=428)
2024-09-08 17:17:59,645 - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2024-09-08 17:17:59,645 - dispatch pc=16, inst=LOAD_CONST(arg=3, lineno=428)
2024-09-08 17:17:59,645 - stack ['$14binary_add.6']
2024-09-08 17:17:59,646 - dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=428)
2024-09-08 17:17:59,646 - stack ['$14binary_add.6', '$const16.7']
2024-09-08 17:17:59,646 - dispatch pc=20, inst=LOAD_CONST(arg=4, lineno=428)
2024-09-08 17:17:59,646 - stack ['$14binary_add.6', '$const16.7', '$x18.8']
2024-09-08 17:17:59,646 - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=428)
2024-09-08 17:17:59,646 - stack ['$14binary_add.6', '$const16.7', '$x18.8', '$const20.9']
2024-09-08 17:17:59,646 - dispatch pc=24, inst=BINARY_MULTIPLY(arg=None, lineno=428)
2024-09-08 17:17:59,646 - stack ['$14binary_add.6', '$const16.7', '$22binary_subscr.10']
2024-09-08 17:17:59,646 - dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=428)
2024-09-08 17:17:59,646 - stack ['$14binary_add.6', '$24binary_multiply.11']
2024-09-08 17:17:59,646 - dispatch pc=28, inst=STORE_FAST(arg=1, lineno=428)
2024-09-08 17:17:59,646 - stack ['$26binary_subtract.12']
2024-09-08 17:17:59,647 - dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=429)
2024-09-08 17:17:59,647 - stack []
2024-09-08 17:17:59,647 - dispatch pc=32, inst=LOAD_CONST(arg=1, lineno=429)
2024-09-08 17:17:59,647 - stack ['$x30.13']
2024-09-08 17:17:59,647 - dispatch pc=34, inst=BINARY_SUBSCR(arg=None, lineno=429)
2024-09-08 17:17:59,647 - stack ['$x30.13', '$const32.14']
2024-09-08 17:17:59,647 - dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=429)
2024-09-08 17:17:59,647 - stack ['$34binary_subscr.15']
2024-09-08 17:17:59,647 - dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=429)
2024-09-08 17:17:59,647 - stack ['$34binary_subscr.15', '$x36.16']
2024-09-08 17:17:59,647 - dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=429)
2024-09-08 17:17:59,647 - stack ['$34binary_subscr.15', '$x36.16', '$const38.17']
2024-09-08 17:17:59,648 - dispatch pc=42, inst=BINARY_SUBTRACT(arg=None, lineno=429)
2024-09-08 17:17:59,648 - stack ['$34binary_subscr.15', '$40binary_subscr.18']
2024-09-08 17:17:59,648 - dispatch pc=44, inst=LOAD_CONST(arg=3, lineno=429)
2024-09-08 17:17:59,648 - stack ['$42binary_subtract.19']
2024-09-08 17:17:59,648 - dispatch pc=46, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=429)
2024-09-08 17:17:59,648 - stack ['$42binary_subtract.19', '$const44.20']
2024-09-08 17:17:59,648 - dispatch pc=48, inst=STORE_FAST(arg=2, lineno=429)
2024-09-08 17:17:59,648 - stack ['$46binary_true_divide.21']
2024-09-08 17:17:59,648 - dispatch pc=50, inst=LOAD_GLOBAL(arg=0, lineno=431)
2024-09-08 17:17:59,648 - stack []
2024-09-08 17:17:59,648 - dispatch pc=52, inst=LOAD_METHOD(arg=1, lineno=431)
2024-09-08 17:17:59,649 - stack ['$50load_global.22']
2024-09-08 17:17:59,649 - dispatch pc=54, inst=LOAD_FAST(arg=2, lineno=431)
2024-09-08 17:17:59,649 - stack ['$52load_method.23']
2024-09-08 17:17:59,649 - dispatch pc=56, inst=CALL_METHOD(arg=1, lineno=431)
2024-09-08 17:17:59,649 - stack ['$52load_method.23', '$b54.24']
2024-09-08 17:17:59,649 - dispatch pc=58, inst=LOAD_GLOBAL(arg=0, lineno=431)
2024-09-08 17:17:59,649 - stack ['$56call_method.25']
2024-09-08 17:17:59,649 - dispatch pc=60, inst=LOAD_METHOD(arg=1, lineno=431)
2024-09-08 17:17:59,649 - stack ['$56call_method.25', '$58load_global.26']
2024-09-08 17:17:59,649 - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=431)
2024-09-08 17:17:59,649 - stack ['$56call_method.25', '$60load_method.27']
2024-09-08 17:17:59,649 - dispatch pc=64, inst=CALL_METHOD(arg=1, lineno=431)
2024-09-08 17:17:59,649 - stack ['$56call_method.25', '$60load_method.27', '$a62.28']
2024-09-08 17:17:59,650 - dispatch pc=66, inst=COMPARE_OP(arg=5, lineno=431)
2024-09-08 17:17:59,650 - stack ['$56call_method.25', '$64call_method.29']
2024-09-08 17:17:59,650 - dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=38, lineno=431)
2024-09-08 17:17:59,650 - stack ['$66compare_op.30']
2024-09-08 17:17:59,650 - end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=74, stack=(), blockstack=(), npush=0)]
2024-09-08 17:17:59,650 - pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=74 nstack_initial=0)])
2024-09-08 17:17:59,650 - stack: []
2024-09-08 17:17:59,650 - state.pc_initial: State(pc_initial=70 nstack_initial=0)
2024-09-08 17:17:59,650 - dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=434)
2024-09-08 17:17:59,650 - stack []
2024-09-08 17:17:59,650 - dispatch pc=72, inst=RETURN_VALUE(arg=None, lineno=434)
2024-09-08 17:17:59,650 - stack ['$const70.0']
2024-09-08 17:17:59,651 - end state. edges=[]
2024-09-08 17:17:59,651 - pending: deque([State(pc_initial=74 nstack_initial=0)])
2024-09-08 17:17:59,651 - stack: []
2024-09-08 17:17:59,651 - state.pc_initial: State(pc_initial=74 nstack_initial=0)
2024-09-08 17:17:59,651 - dispatch pc=74, inst=LOAD_FAST(arg=2, lineno=436)
2024-09-08 17:17:59,651 - stack []
2024-09-08 17:17:59,651 - dispatch pc=76, inst=UNARY_NEGATIVE(arg=None, lineno=436)
2024-09-08 17:17:59,651 - stack ['$b74.0']
2024-09-08 17:17:59,651 - dispatch pc=78, inst=LOAD_FAST(arg=1, lineno=436)
2024-09-08 17:17:59,651 - stack ['$76unary_negative.1']
2024-09-08 17:17:59,651 - dispatch pc=80, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=436)
2024-09-08 17:17:59,651 - stack ['$76unary_negative.1', '$a78.2']
2024-09-08 17:17:59,652 - dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=436)
2024-09-08 17:17:59,652 - stack ['$80binary_true_divide.3']
2024-09-08 17:17:59,652 - end state. edges=[]
2024-09-08 17:17:59,652 - -------------------------Prune PHIs-------------------------
2024-09-08 17:17:59,652 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set()})
2024-09-08 17:17:59,652 - defmap: {}
2024-09-08 17:17:59,652 - phismap: defaultdict(<class 'set'>, {})
2024-09-08 17:17:59,653 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-08 17:17:59,653 - keep phismap: {}
2024-09-08 17:17:59,653 - new_out: defaultdict(<class 'dict'>, {})
2024-09-08 17:17:59,653 - ----------------------DONE Prune PHIs-----------------------
2024-09-08 17:17:59,653 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14binary_add.6'}), (16, {'res': '$const16.7'}), (18, {'res': '$x18.8'}), (20, {'res': '$const20.9'}), (22, {'index': '$const20.9', 'target': '$x18.8', 'res': '$22binary_subscr.10'}), (24, {'lhs': '$const16.7', 'rhs': '$22binary_subscr.10', 'res': '$24binary_multiply.11'}), (26, {'lhs': '$14binary_add.6', 'rhs': '$24binary_multiply.11', 'res': '$26binary_subtract.12'}), (28, {'value': '$26binary_subtract.12'}), (30, {'res': '$x30.13'}), (32, {'res': '$const32.14'}), (34, {'index': '$const32.14', 'target': '$x30.13', 'res': '$34binary_subscr.15'}), (36, {'res': '$x36.16'}), (38, {'res': '$const38.17'}), (40, {'index': '$const38.17', 'target': '$x36.16', 'res': '$40binary_subscr.18'}), (42, {'lhs': '$34binary_subscr.15', 'rhs': '$40binary_subscr.18', 'res': '$42binary_subtract.19'}), (44, {'res': '$const44.20'}), (46, {'lhs': '$42binary_subtract.19', 'rhs': '$const44.20', 'res': '$46binary_true_divide.21'}), (48, {'value': '$46binary_true_divide.21'}), (50, {'res': '$50load_global.22'}), (52, {'item': '$50load_global.22', 'res': '$52load_method.23'}), (54, {'res': '$b54.24'}), (56, {'func': '$52load_method.23', 'args': ['$b54.24'], 'res': '$56call_method.25'}), (58, {'res': '$58load_global.26'}), (60, {'item': '$58load_global.26', 'res': '$60load_method.27'}), (62, {'res': '$a62.28'}), (64, {'func': '$60load_method.27', 'args': ['$a62.28'], 'res': '$64call_method.29'}), (66, {'lhs': '$56call_method.25', 'rhs': '$64call_method.29', 'res': '$66compare_op.30'}), (68, {'pred': '$66compare_op.30'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 74: ()})
2024-09-08 17:17:59,653 - block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$const70.0'}), (72, {'retval': '$const70.0', 'castval': '$72return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-08 17:17:59,653 - block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$b74.0'}), (76, {'value': '$b74.0', 'res': '$76unary_negative.1'}), (78, {'res': '$a78.2'}), (80, {'lhs': '$76unary_negative.1', 'rhs': '$a78.2', 'res': '$80binary_true_divide.3'}), (82, {'retval': '$80binary_true_divide.3', 'castval': '$82return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-08 17:17:59,655 - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14binary_add.6 = $6binary_subscr.2 + $12binary_subscr.5 ['$12binary_subscr.5', '$14binary_add.6', '$6binary_subscr.2']
    $const16.7 = const(int, 2)               ['$const16.7']
    $const20.9 = const(int, 0)               ['$const20.9']
    $22binary_subscr.10 = getitem(value=x, index=$const20.9, fn=<built-in function getitem>) ['$22binary_subscr.10', '$const20.9', 'x']
    $24binary_multiply.11 = $const16.7 * $22binary_subscr.10 ['$22binary_subscr.10', '$24binary_multiply.11', '$const16.7']
    a = $14binary_add.6 - $24binary_multiply.11 ['$14binary_add.6', '$24binary_multiply.11', 'a']
    $const32.14 = const(int, 1)              ['$const32.14']
    $34binary_subscr.15 = getitem(value=x, index=$const32.14, fn=<built-in function getitem>) ['$34binary_subscr.15', '$const32.14', 'x']
    $const38.17 = const(int, -1)             ['$const38.17']
    $40binary_subscr.18 = getitem(value=x, index=$const38.17, fn=<built-in function getitem>) ['$40binary_subscr.18', '$const38.17', 'x']
    $42binary_subtract.19 = $34binary_subscr.15 - $40binary_subscr.18 ['$34binary_subscr.15', '$40binary_subscr.18', '$42binary_subtract.19']
    $const44.20 = const(int, 2)              ['$const44.20']
    b = $42binary_subtract.19 / $const44.20  ['$42binary_subtract.19', '$const44.20', 'b']
    $50load_global.22 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$50load_global.22']
    $52load_method.23 = getattr(value=$50load_global.22, attr=abs) ['$50load_global.22', '$52load_method.23']
    $56call_method.25 = call $52load_method.23(b, func=$52load_method.23, args=[Var(b, pitch.py:429)], kws=(), vararg=None, varkwarg=None, target=None) ['$52load_method.23', '$56call_method.25', 'b']
    $58load_global.26 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$58load_global.26']
    $60load_method.27 = getattr(value=$58load_global.26, attr=abs) ['$58load_global.26', '$60load_method.27']
    $64call_method.29 = call $60load_method.27(a, func=$60load_method.27, args=[Var(a, pitch.py:428)], kws=(), vararg=None, varkwarg=None, target=None) ['$60load_method.27', '$64call_method.29', 'a']
    $66compare_op.30 = $56call_method.25 >= $64call_method.29 ['$56call_method.25', '$64call_method.29', '$66compare_op.30']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.30, func=bool68, args=(Var($66compare_op.30, pitch.py:431),), kws=(), vararg=None, varkwarg=None, target=None) ['$66compare_op.30', '$68pred', 'bool68']
    branch $68pred, 70, 74                   ['$68pred']
label 70:
    $const70.0 = const(int, 0)               ['$const70.0']
    $72return_value.1 = cast(value=$const70.0) ['$72return_value.1', '$const70.0']
    return $72return_value.1                 ['$72return_value.1']
label 74:
    $76unary_negative.1 = unary(fn=<built-in function neg>, value=b) ['$76unary_negative.1', 'b']
    $80binary_true_divide.3 = $76unary_negative.1 / a ['$76unary_negative.1', '$80binary_true_divide.3', 'a']
    $82return_value.4 = cast(value=$80binary_true_divide.3) ['$80binary_true_divide.3', '$82return_value.4']
    return $82return_value.4                 ['$82return_value.4']

2024-09-08 17:18:29,910 - Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2024-09-08 17:18:31,123 - Creating converter from 7 to 5
2024-09-08 17:18:31,123 - Creating converter from 5 to 7
2024-09-08 17:18:31,123 - Creating converter from 7 to 5
2024-09-08 17:18:31,123 - Creating converter from 5 to 7
2024-09-08 17:20:33,636 - Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2024-09-08 17:20:34,555 - Creating converter from 7 to 5
2024-09-08 17:20:34,556 - Creating converter from 5 to 7
2024-09-08 17:20:34,556 - Creating converter from 7 to 5
2024-09-08 17:20:34,556 - Creating converter from 5 to 7
2024-09-08 17:41:32,934 - Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2024-09-08 17:41:33,995 - Creating converter from 7 to 5
2024-09-08 17:41:33,995 - Creating converter from 5 to 7
2024-09-08 17:41:33,995 - Creating converter from 7 to 5
2024-09-08 17:41:33,995 - Creating converter from 5 to 7
2024-09-08 17:41:42,582 - bytecode dump:
>          0	NOP(arg=None, lineno=1141)
           2	LOAD_FAST(arg=0, lineno=1144)
           4	LOAD_CONST(arg=1, lineno=1144)
           6	BINARY_SUBSCR(arg=None, lineno=1144)
           8	STORE_FAST(arg=3, lineno=1144)
          10	LOAD_FAST(arg=1, lineno=1145)
          12	UNARY_NEGATIVE(arg=None, lineno=1145)
          14	LOAD_FAST(arg=3, lineno=1145)
          16	DUP_TOP(arg=None, lineno=1145)
          18	ROT_THREE(arg=None, lineno=1145)
          20	COMPARE_OP(arg=1, lineno=1145)
          22	POP_JUMP_IF_FALSE(arg=17, lineno=1145)
          24	LOAD_FAST(arg=1, lineno=1145)
          26	COMPARE_OP(arg=1, lineno=1145)
          28	POP_JUMP_IF_FALSE(arg=21, lineno=1145)
          30	JUMP_FORWARD(arg=2, lineno=1145)
>         32	POP_TOP(arg=None, lineno=1145)
          34	JUMP_FORWARD(arg=2, lineno=1145)
>         36	LOAD_CONST(arg=1, lineno=1146)
          38	STORE_FAST(arg=3, lineno=1146)
>         40	LOAD_FAST(arg=0, lineno=1148)
          42	LOAD_CONST(arg=2, lineno=1148)
          44	BINARY_SUBSCR(arg=None, lineno=1148)
          46	STORE_FAST(arg=4, lineno=1148)
          48	LOAD_FAST(arg=1, lineno=1149)
          50	UNARY_NEGATIVE(arg=None, lineno=1149)
          52	LOAD_FAST(arg=4, lineno=1149)
          54	DUP_TOP(arg=None, lineno=1149)
          56	ROT_THREE(arg=None, lineno=1149)
          58	COMPARE_OP(arg=1, lineno=1149)
          60	POP_JUMP_IF_FALSE(arg=36, lineno=1149)
          62	LOAD_FAST(arg=1, lineno=1149)
          64	COMPARE_OP(arg=1, lineno=1149)
          66	POP_JUMP_IF_FALSE(arg=40, lineno=1149)
          68	JUMP_FORWARD(arg=2, lineno=1149)
>         70	POP_TOP(arg=None, lineno=1149)
          72	JUMP_FORWARD(arg=2, lineno=1149)
>         74	LOAD_CONST(arg=1, lineno=1150)
          76	STORE_FAST(arg=4, lineno=1150)
>         78	LOAD_FAST(arg=2, lineno=1152)
          80	POP_JUMP_IF_FALSE(arg=52, lineno=1152)
          82	LOAD_GLOBAL(arg=0, lineno=1153)
          84	LOAD_METHOD(arg=1, lineno=1153)
          86	LOAD_FAST(arg=3, lineno=1153)
          88	CALL_METHOD(arg=1, lineno=1153)
          90	LOAD_GLOBAL(arg=0, lineno=1153)
          92	LOAD_METHOD(arg=1, lineno=1153)
          94	LOAD_FAST(arg=4, lineno=1153)
          96	CALL_METHOD(arg=1, lineno=1153)
          98	COMPARE_OP(arg=3, lineno=1153)
         100	RETURN_VALUE(arg=None, lineno=1153)
>        102	LOAD_GLOBAL(arg=0, lineno=1155)
         104	LOAD_METHOD(arg=2, lineno=1155)
         106	LOAD_FAST(arg=3, lineno=1155)
         108	CALL_METHOD(arg=1, lineno=1155)
         110	LOAD_GLOBAL(arg=0, lineno=1155)
         112	LOAD_METHOD(arg=2, lineno=1155)
         114	LOAD_FAST(arg=4, lineno=1155)
         116	CALL_METHOD(arg=1, lineno=1155)
         118	COMPARE_OP(arg=3, lineno=1155)
         120	RETURN_VALUE(arg=None, lineno=1155)
2024-09-08 17:41:42,583 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-08 17:41:42,583 - stack: []
2024-09-08 17:41:42,583 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-08 17:41:42,583 - dispatch pc=0, inst=NOP(arg=None, lineno=1141)
2024-09-08 17:41:42,583 - stack []
2024-09-08 17:41:42,583 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1144)
2024-09-08 17:41:42,583 - stack []
2024-09-08 17:41:42,584 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1144)
2024-09-08 17:41:42,584 - stack ['$x2.0']
2024-09-08 17:41:42,584 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1144)
2024-09-08 17:41:42,584 - stack ['$x2.0', '$const4.1']
2024-09-08 17:41:42,584 - dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1144)
2024-09-08 17:41:42,584 - stack ['$6binary_subscr.2']
2024-09-08 17:41:42,584 - dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=1145)
2024-09-08 17:41:42,584 - stack []
2024-09-08 17:41:42,584 - dispatch pc=12, inst=UNARY_NEGATIVE(arg=None, lineno=1145)
2024-09-08 17:41:42,584 - stack ['$threshold10.3']
2024-09-08 17:41:42,585 - dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=1145)
2024-09-08 17:41:42,585 - stack ['$12unary_negative.4']
2024-09-08 17:41:42,585 - dispatch pc=16, inst=DUP_TOP(arg=None, lineno=1145)
2024-09-08 17:41:42,585 - stack ['$12unary_negative.4', '$x014.5']
2024-09-08 17:41:42,585 - dispatch pc=18, inst=ROT_THREE(arg=None, lineno=1145)
2024-09-08 17:41:42,585 - stack ['$12unary_negative.4', '$x014.5', '$16dup_top.6']
2024-09-08 17:41:42,585 - dispatch pc=20, inst=COMPARE_OP(arg=1, lineno=1145)
2024-09-08 17:41:42,585 - stack ['$16dup_top.6', '$12unary_negative.4', '$x014.5']
2024-09-08 17:41:42,585 - dispatch pc=22, inst=POP_JUMP_IF_FALSE(arg=17, lineno=1145)
2024-09-08 17:41:42,585 - stack ['$16dup_top.6', '$20compare_op.7']
2024-09-08 17:41:42,585 - end state. edges=[Edge(pc=24, stack=('$16dup_top.6',), blockstack=(), npush=0), Edge(pc=32, stack=('$16dup_top.6',), blockstack=(), npush=0)]
2024-09-08 17:41:42,585 - pending: deque([State(pc_initial=24 nstack_initial=1), State(pc_initial=32 nstack_initial=1)])
2024-09-08 17:41:42,586 - stack: ['$phi24.0']
2024-09-08 17:41:42,586 - state.pc_initial: State(pc_initial=24 nstack_initial=1)
2024-09-08 17:41:42,586 - dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=1145)
2024-09-08 17:41:42,586 - stack ['$phi24.0']
2024-09-08 17:41:42,586 - dispatch pc=26, inst=COMPARE_OP(arg=1, lineno=1145)
2024-09-08 17:41:42,586 - stack ['$phi24.0', '$threshold24.1']
2024-09-08 17:41:42,586 - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=21, lineno=1145)
2024-09-08 17:41:42,586 - stack ['$26compare_op.2']
2024-09-08 17:41:42,586 - end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=40, stack=(), blockstack=(), npush=0)]
2024-09-08 17:41:42,586 - pending: deque([State(pc_initial=32 nstack_initial=1), State(pc_initial=30 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2024-09-08 17:41:42,586 - stack: ['$phi32.0']
2024-09-08 17:41:42,586 - state.pc_initial: State(pc_initial=32 nstack_initial=1)
2024-09-08 17:41:42,586 - dispatch pc=32, inst=POP_TOP(arg=None, lineno=1145)
2024-09-08 17:41:42,587 - stack ['$phi32.0']
2024-09-08 17:41:42,587 - dispatch pc=34, inst=JUMP_FORWARD(arg=2, lineno=1145)
2024-09-08 17:41:42,587 - stack []
2024-09-08 17:41:42,587 - end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2024-09-08 17:41:42,587 - pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2024-09-08 17:41:42,587 - stack: []
2024-09-08 17:41:42,587 - state.pc_initial: State(pc_initial=30 nstack_initial=0)
2024-09-08 17:41:42,587 - dispatch pc=30, inst=JUMP_FORWARD(arg=2, lineno=1145)
2024-09-08 17:41:42,587 - stack []
2024-09-08 17:41:42,587 - end state. edges=[Edge(pc=36, stack=(), blockstack=(), npush=0)]
2024-09-08 17:41:42,587 - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2024-09-08 17:41:42,587 - stack: []
2024-09-08 17:41:42,587 - state.pc_initial: State(pc_initial=40 nstack_initial=0)
2024-09-08 17:41:42,587 - dispatch pc=40, inst=LOAD_FAST(arg=0, lineno=1148)
2024-09-08 17:41:42,588 - stack []
2024-09-08 17:41:42,588 - dispatch pc=42, inst=LOAD_CONST(arg=2, lineno=1148)
2024-09-08 17:41:42,588 - stack ['$x40.0']
2024-09-08 17:41:42,588 - dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=1148)
2024-09-08 17:41:42,588 - stack ['$x40.0', '$const42.1']
2024-09-08 17:41:42,588 - dispatch pc=46, inst=STORE_FAST(arg=4, lineno=1148)
2024-09-08 17:41:42,588 - stack ['$44binary_subscr.2']
2024-09-08 17:41:42,588 - dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=1149)
2024-09-08 17:41:42,588 - stack []
2024-09-08 17:41:42,588 - dispatch pc=50, inst=UNARY_NEGATIVE(arg=None, lineno=1149)
2024-09-08 17:41:42,588 - stack ['$threshold48.3']
2024-09-08 17:41:42,588 - dispatch pc=52, inst=LOAD_FAST(arg=4, lineno=1149)
2024-09-08 17:41:42,588 - stack ['$50unary_negative.4']
2024-09-08 17:41:42,589 - dispatch pc=54, inst=DUP_TOP(arg=None, lineno=1149)
2024-09-08 17:41:42,589 - stack ['$50unary_negative.4', '$x152.5']
2024-09-08 17:41:42,589 - dispatch pc=56, inst=ROT_THREE(arg=None, lineno=1149)
2024-09-08 17:41:42,589 - stack ['$50unary_negative.4', '$x152.5', '$54dup_top.6']
2024-09-08 17:41:42,589 - dispatch pc=58, inst=COMPARE_OP(arg=1, lineno=1149)
2024-09-08 17:41:42,589 - stack ['$54dup_top.6', '$50unary_negative.4', '$x152.5']
2024-09-08 17:41:42,589 - dispatch pc=60, inst=POP_JUMP_IF_FALSE(arg=36, lineno=1149)
2024-09-08 17:41:42,589 - stack ['$54dup_top.6', '$58compare_op.7']
2024-09-08 17:41:42,589 - end state. edges=[Edge(pc=62, stack=('$54dup_top.6',), blockstack=(), npush=0), Edge(pc=70, stack=('$54dup_top.6',), blockstack=(), npush=0)]
2024-09-08 17:41:42,589 - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
2024-09-08 17:41:42,589 - pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
2024-09-08 17:41:42,589 - stack: []
2024-09-08 17:41:42,589 - state.pc_initial: State(pc_initial=36 nstack_initial=0)
2024-09-08 17:41:42,590 - dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=1146)
2024-09-08 17:41:42,590 - stack []
2024-09-08 17:41:42,590 - dispatch pc=38, inst=STORE_FAST(arg=3, lineno=1146)
2024-09-08 17:41:42,590 - stack ['$const36.0']
2024-09-08 17:41:42,590 - end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2024-09-08 17:41:42,590 - pending: deque([State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1), State(pc_initial=40 nstack_initial=0)])
2024-09-08 17:41:42,590 - stack: ['$phi62.0']
2024-09-08 17:41:42,590 - state.pc_initial: State(pc_initial=62 nstack_initial=1)
2024-09-08 17:41:42,590 - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=1149)
2024-09-08 17:41:42,590 - stack ['$phi62.0']
2024-09-08 17:41:42,590 - dispatch pc=64, inst=COMPARE_OP(arg=1, lineno=1149)
2024-09-08 17:41:42,590 - stack ['$phi62.0', '$threshold62.1']
2024-09-08 17:41:42,590 - dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=40, lineno=1149)
2024-09-08 17:41:42,590 - stack ['$64compare_op.2']
2024-09-08 17:41:42,591 - end state. edges=[Edge(pc=68, stack=(), blockstack=(), npush=0), Edge(pc=78, stack=(), blockstack=(), npush=0)]
2024-09-08 17:41:42,591 - pending: deque([State(pc_initial=70 nstack_initial=1), State(pc_initial=40 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-08 17:41:42,591 - stack: ['$phi70.0']
2024-09-08 17:41:42,591 - state.pc_initial: State(pc_initial=70 nstack_initial=1)
2024-09-08 17:41:42,591 - dispatch pc=70, inst=POP_TOP(arg=None, lineno=1149)
2024-09-08 17:41:42,591 - stack ['$phi70.0']
2024-09-08 17:41:42,591 - dispatch pc=72, inst=JUMP_FORWARD(arg=2, lineno=1149)
2024-09-08 17:41:42,591 - stack []
2024-09-08 17:41:42,591 - end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0)]
2024-09-08 17:41:42,591 - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-08 17:41:42,591 - pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-08 17:41:42,591 - stack: []
2024-09-08 17:41:42,591 - state.pc_initial: State(pc_initial=68 nstack_initial=0)
2024-09-08 17:41:42,591 - dispatch pc=68, inst=JUMP_FORWARD(arg=2, lineno=1149)
2024-09-08 17:41:42,592 - stack []
2024-09-08 17:41:42,592 - end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0)]
2024-09-08 17:41:42,592 - pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=74 nstack_initial=0)])
2024-09-08 17:41:42,592 - stack: []
2024-09-08 17:41:42,592 - state.pc_initial: State(pc_initial=78 nstack_initial=0)
2024-09-08 17:41:42,592 - dispatch pc=78, inst=LOAD_FAST(arg=2, lineno=1152)
2024-09-08 17:41:42,592 - stack []
2024-09-08 17:41:42,592 - dispatch pc=80, inst=POP_JUMP_IF_FALSE(arg=52, lineno=1152)
2024-09-08 17:41:42,592 - stack ['$zero_pos78.0']
2024-09-08 17:41:42,593 - end state. edges=[Edge(pc=82, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
2024-09-08 17:41:42,593 - pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2024-09-08 17:41:42,593 - pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2024-09-08 17:41:42,593 - stack: []
2024-09-08 17:41:42,593 - state.pc_initial: State(pc_initial=74 nstack_initial=0)
2024-09-08 17:41:42,593 - dispatch pc=74, inst=LOAD_CONST(arg=1, lineno=1150)
2024-09-08 17:41:42,593 - stack []
2024-09-08 17:41:42,593 - dispatch pc=76, inst=STORE_FAST(arg=4, lineno=1150)
2024-09-08 17:41:42,593 - stack ['$const74.0']
2024-09-08 17:41:42,593 - end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0)]
2024-09-08 17:41:42,593 - pending: deque([State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-08 17:41:42,593 - stack: []
2024-09-08 17:41:42,593 - state.pc_initial: State(pc_initial=82 nstack_initial=0)
2024-09-08 17:41:42,594 - dispatch pc=82, inst=LOAD_GLOBAL(arg=0, lineno=1153)
2024-09-08 17:41:42,594 - stack []
2024-09-08 17:41:42,594 - dispatch pc=84, inst=LOAD_METHOD(arg=1, lineno=1153)
2024-09-08 17:41:42,594 - stack ['$82load_global.0']
2024-09-08 17:41:42,594 - dispatch pc=86, inst=LOAD_FAST(arg=3, lineno=1153)
2024-09-08 17:41:42,594 - stack ['$84load_method.1']
2024-09-08 17:41:42,594 - dispatch pc=88, inst=CALL_METHOD(arg=1, lineno=1153)
2024-09-08 17:41:42,594 - stack ['$84load_method.1', '$x086.2']
2024-09-08 17:41:42,594 - dispatch pc=90, inst=LOAD_GLOBAL(arg=0, lineno=1153)
2024-09-08 17:41:42,594 - stack ['$88call_method.3']
2024-09-08 17:41:42,594 - dispatch pc=92, inst=LOAD_METHOD(arg=1, lineno=1153)
2024-09-08 17:41:42,594 - stack ['$88call_method.3', '$90load_global.4']
2024-09-08 17:41:42,594 - dispatch pc=94, inst=LOAD_FAST(arg=4, lineno=1153)
2024-09-08 17:41:42,594 - stack ['$88call_method.3', '$92load_method.5']
2024-09-08 17:41:42,595 - dispatch pc=96, inst=CALL_METHOD(arg=1, lineno=1153)
2024-09-08 17:41:42,595 - stack ['$88call_method.3', '$92load_method.5', '$x194.6']
2024-09-08 17:41:42,595 - dispatch pc=98, inst=COMPARE_OP(arg=3, lineno=1153)
2024-09-08 17:41:42,595 - stack ['$88call_method.3', '$96call_method.7']
2024-09-08 17:41:42,595 - dispatch pc=100, inst=RETURN_VALUE(arg=None, lineno=1153)
2024-09-08 17:41:42,595 - stack ['$98compare_op.8']
2024-09-08 17:41:42,595 - end state. edges=[]
2024-09-08 17:41:42,595 - pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2024-09-08 17:41:42,596 - stack: []
2024-09-08 17:41:42,596 - state.pc_initial: State(pc_initial=102 nstack_initial=0)
2024-09-08 17:41:42,596 - dispatch pc=102, inst=LOAD_GLOBAL(arg=0, lineno=1155)
2024-09-08 17:41:42,596 - stack []
2024-09-08 17:41:42,596 - dispatch pc=104, inst=LOAD_METHOD(arg=2, lineno=1155)
2024-09-08 17:41:42,596 - stack ['$102load_global.0']
2024-09-08 17:41:42,596 - dispatch pc=106, inst=LOAD_FAST(arg=3, lineno=1155)
2024-09-08 17:41:42,596 - stack ['$104load_method.1']
2024-09-08 17:41:42,597 - dispatch pc=108, inst=CALL_METHOD(arg=1, lineno=1155)
2024-09-08 17:41:42,597 - stack ['$104load_method.1', '$x0106.2']
2024-09-08 17:41:42,597 - dispatch pc=110, inst=LOAD_GLOBAL(arg=0, lineno=1155)
2024-09-08 17:41:42,597 - stack ['$108call_method.3']
2024-09-08 17:41:42,597 - dispatch pc=112, inst=LOAD_METHOD(arg=2, lineno=1155)
2024-09-08 17:41:42,597 - stack ['$108call_method.3', '$110load_global.4']
2024-09-08 17:41:42,597 - dispatch pc=114, inst=LOAD_FAST(arg=4, lineno=1155)
2024-09-08 17:41:42,597 - stack ['$108call_method.3', '$112load_method.5']
2024-09-08 17:41:42,597 - dispatch pc=116, inst=CALL_METHOD(arg=1, lineno=1155)
2024-09-08 17:41:42,597 - stack ['$108call_method.3', '$112load_method.5', '$x1114.6']
2024-09-08 17:41:42,597 - dispatch pc=118, inst=COMPARE_OP(arg=3, lineno=1155)
2024-09-08 17:41:42,598 - stack ['$108call_method.3', '$116call_method.7']
2024-09-08 17:41:42,598 - dispatch pc=120, inst=RETURN_VALUE(arg=None, lineno=1155)
2024-09-08 17:41:42,598 - stack ['$118compare_op.8']
2024-09-08 17:41:42,598 - end state. edges=[]
2024-09-08 17:41:42,598 - pending: deque([State(pc_initial=78 nstack_initial=0)])
2024-09-08 17:41:42,598 - -------------------------Prune PHIs-------------------------
2024-09-08 17:41:42,598 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=1): {'$phi24.0'},
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=1): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=1): {'$phi62.0'},
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=1): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=82 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set()})
2024-09-08 17:41:42,599 - defmap: {'$phi24.0': State(pc_initial=0 nstack_initial=0),
 '$phi32.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.0': State(pc_initial=40 nstack_initial=0),
 '$phi70.0': State(pc_initial=40 nstack_initial=0)}
2024-09-08 17:41:42,599 - phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))},
             '$phi70.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))}})
2024-09-08 17:41:42,599 - changing phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))},
             '$phi70.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))}})
2024-09-08 17:41:42,599 - keep phismap: {'$phi24.0': {('$16dup_top.6', State(pc_initial=0 nstack_initial=0))},
 '$phi62.0': {('$54dup_top.6', State(pc_initial=40 nstack_initial=0))}}
2024-09-08 17:41:42,599 - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi24.0': '$16dup_top.6'},
             State(pc_initial=40 nstack_initial=0): {'$phi62.0': '$54dup_top.6'}})
2024-09-08 17:41:42,600 - ----------------------DONE Prune PHIs-----------------------
2024-09-08 17:41:42,600 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'value': '$6binary_subscr.2'}), (10, {'res': '$threshold10.3'}), (12, {'value': '$threshold10.3', 'res': '$12unary_negative.4'}), (14, {'res': '$x014.5'}), (16, {'orig': ['$x014.5'], 'duped': ['$16dup_top.6']}), (20, {'lhs': '$12unary_negative.4', 'rhs': '$x014.5', 'res': '$20compare_op.7'}), (22, {'pred': '$20compare_op.7'})), outgoing_phis={'$phi24.0': '$16dup_top.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={24: ('$16dup_top.6',), 32: ('$16dup_top.6',)})
2024-09-08 17:41:42,600 - block_infos State(pc_initial=24 nstack_initial=1):
AdaptBlockInfo(insts=((24, {'res': '$threshold24.1'}), (26, {'lhs': '$phi24.0', 'rhs': '$threshold24.1', 'res': '$26compare_op.2'}), (28, {'pred': '$26compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 40: ()})
2024-09-08 17:41:42,600 - block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ()})
2024-09-08 17:41:42,600 - block_infos State(pc_initial=32 nstack_initial=1):
AdaptBlockInfo(insts=((34, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2024-09-08 17:41:42,600 - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$const36.0'}), (38, {'value': '$const36.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2024-09-08 17:41:42,600 - block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$x40.0'}), (42, {'res': '$const42.1'}), (44, {'index': '$const42.1', 'target': '$x40.0', 'res': '$44binary_subscr.2'}), (46, {'value': '$44binary_subscr.2'}), (48, {'res': '$threshold48.3'}), (50, {'value': '$threshold48.3', 'res': '$50unary_negative.4'}), (52, {'res': '$x152.5'}), (54, {'orig': ['$x152.5'], 'duped': ['$54dup_top.6']}), (58, {'lhs': '$50unary_negative.4', 'rhs': '$x152.5', 'res': '$58compare_op.7'}), (60, {'pred': '$58compare_op.7'})), outgoing_phis={'$phi62.0': '$54dup_top.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ('$54dup_top.6',), 70: ('$54dup_top.6',)})
2024-09-08 17:41:42,600 - block_infos State(pc_initial=62 nstack_initial=1):
AdaptBlockInfo(insts=((62, {'res': '$threshold62.1'}), (64, {'lhs': '$phi62.0', 'rhs': '$threshold62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={68: (), 78: ()})
2024-09-08 17:41:42,601 - block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: ()})
2024-09-08 17:41:42,601 - block_infos State(pc_initial=70 nstack_initial=1):
AdaptBlockInfo(insts=((72, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: ()})
2024-09-08 17:41:42,601 - block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$const74.0'}), (76, {'value': '$const74.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: ()})
2024-09-08 17:41:42,601 - block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$zero_pos78.0'}), (80, {'pred': '$zero_pos78.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: (), 102: ()})
2024-09-08 17:41:42,601 - block_infos State(pc_initial=82 nstack_initial=0):
AdaptBlockInfo(insts=((82, {'res': '$82load_global.0'}), (84, {'item': '$82load_global.0', 'res': '$84load_method.1'}), (86, {'res': '$x086.2'}), (88, {'func': '$84load_method.1', 'args': ['$x086.2'], 'res': '$88call_method.3'}), (90, {'res': '$90load_global.4'}), (92, {'item': '$90load_global.4', 'res': '$92load_method.5'}), (94, {'res': '$x194.6'}), (96, {'func': '$92load_method.5', 'args': ['$x194.6'], 'res': '$96call_method.7'}), (98, {'lhs': '$88call_method.3', 'rhs': '$96call_method.7', 'res': '$98compare_op.8'}), (100, {'retval': '$98compare_op.8', 'castval': '$100return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-08 17:41:42,601 - block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$102load_global.0'}), (104, {'item': '$102load_global.0', 'res': '$104load_method.1'}), (106, {'res': '$x0106.2'}), (108, {'func': '$104load_method.1', 'args': ['$x0106.2'], 'res': '$108call_method.3'}), (110, {'res': '$110load_global.4'}), (112, {'item': '$110load_global.4', 'res': '$112load_method.5'}), (114, {'res': '$x1114.6'}), (116, {'func': '$112load_method.5', 'args': ['$x1114.6'], 'res': '$116call_method.7'}), (118, {'lhs': '$108call_method.3', 'rhs': '$116call_method.7', 'res': '$118compare_op.8'}), (120, {'retval': '$118compare_op.8', 'castval': '$120return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-08 17:41:42,604 - label 0:
    x = arg(0, name=x)                       ['x']
    threshold = arg(1, name=threshold)       ['threshold']
    zero_pos = arg(2, name=zero_pos)         ['zero_pos']
    $const4.1 = const(int, 0)                ['$const4.1']
    x0 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$const4.1', 'x', 'x0']
    $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$12unary_negative.4', 'threshold']
    $20compare_op.7 = $12unary_negative.4 <= x0 ['$12unary_negative.4', '$20compare_op.7', 'x0']
    bool22 = global(bool: <class 'bool'>)    ['bool22']
    $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None) ['$20compare_op.7', '$22pred', 'bool22']
    $phi24.0 = x0                            ['$phi24.0', 'x0']
    branch $22pred, 24, 32                   ['$22pred']
label 24:
    $26compare_op.2 = $phi24.0 <= threshold  ['$26compare_op.2', '$phi24.0', 'threshold']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.2', '$28pred', 'bool28']
    branch $28pred, 30, 40                   ['$28pred']
label 30:
    jump 36                                  []
label 32:
    jump 40                                  []
label 36:
    x0 = const(int, 0)                       ['x0']
    jump 40                                  []
label 40:
    $const42.1 = const(int, -1)              ['$const42.1']
    x1 = getitem(value=x, index=$const42.1, fn=<built-in function getitem>) ['$const42.1', 'x', 'x1']
    $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$50unary_negative.4', 'threshold']
    $58compare_op.7 = $50unary_negative.4 <= x1 ['$50unary_negative.4', '$58compare_op.7', 'x1']
    bool60 = global(bool: <class 'bool'>)    ['bool60']
    $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None) ['$58compare_op.7', '$60pred', 'bool60']
    $phi62.0 = x1                            ['$phi62.0', 'x1']
    branch $60pred, 62, 70                   ['$60pred']
label 62:
    $64compare_op.2 = $phi62.0 <= threshold  ['$64compare_op.2', '$phi62.0', 'threshold']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 78                   ['$66pred']
label 68:
    jump 74                                  []
label 70:
    jump 78                                  []
label 74:
    x1 = const(int, 0)                       ['x1']
    jump 78                                  []
label 78:
    bool80 = global(bool: <class 'bool'>)    ['bool80']
    $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None) ['$80pred', 'bool80', 'zero_pos']
    branch $80pred, 82, 102                  ['$80pred']
label 82:
    $82load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$82load_global.0']
    $84load_method.1 = getattr(value=$82load_global.0, attr=signbit) ['$82load_global.0', '$84load_method.1']
    $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None) ['$84load_method.1', '$88call_method.3', 'x0']
    $90load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$90load_global.4']
    $92load_method.5 = getattr(value=$90load_global.4, attr=signbit) ['$90load_global.4', '$92load_method.5']
    $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None) ['$92load_method.5', '$96call_method.7', 'x1']
    $98compare_op.8 = $88call_method.3 != $96call_method.7 ['$88call_method.3', '$96call_method.7', '$98compare_op.8']
    $100return_value.9 = cast(value=$98compare_op.8) ['$100return_value.9', '$98compare_op.8']
    return $100return_value.9                ['$100return_value.9']
label 102:
    $102load_global.0 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$102load_global.0']
    $104load_method.1 = getattr(value=$102load_global.0, attr=sign) ['$102load_global.0', '$104load_method.1']
    $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None) ['$104load_method.1', '$108call_method.3', 'x0']
    $110load_global.4 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$110load_global.4']
    $112load_method.5 = getattr(value=$110load_global.4, attr=sign) ['$110load_global.4', '$112load_method.5']
    $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None) ['$112load_method.5', '$116call_method.7', 'x1']
    $118compare_op.8 = $108call_method.3 != $116call_method.7 ['$108call_method.3', '$116call_method.7', '$118compare_op.8']
    $120return_value.9 = cast(value=$118compare_op.8) ['$118compare_op.8', '$120return_value.9']
    return $120return_value.9                ['$120return_value.9']

2024-09-08 17:41:44,446 - bytecode dump:
>          0	NOP(arg=None, lineno=1039)
           2	LOAD_FAST(arg=0, lineno=1042)
           4	LOAD_CONST(arg=1, lineno=1042)
           6	BINARY_SUBSCR(arg=None, lineno=1042)
           8	LOAD_FAST(arg=0, lineno=1042)
          10	LOAD_CONST(arg=2, lineno=1042)
          12	BINARY_SUBSCR(arg=None, lineno=1042)
          14	COMPARE_OP(arg=4, lineno=1042)
          16	LOAD_FAST(arg=0, lineno=1042)
          18	LOAD_CONST(arg=1, lineno=1042)
          20	BINARY_SUBSCR(arg=None, lineno=1042)
          22	LOAD_FAST(arg=0, lineno=1042)
          24	LOAD_CONST(arg=3, lineno=1042)
          26	BINARY_SUBSCR(arg=None, lineno=1042)
          28	COMPARE_OP(arg=5, lineno=1042)
          30	BINARY_AND(arg=None, lineno=1042)
          32	RETURN_VALUE(arg=None, lineno=1042)
2024-09-08 17:41:44,447 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-08 17:41:44,447 - stack: []
2024-09-08 17:41:44,447 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-08 17:41:44,447 - dispatch pc=0, inst=NOP(arg=None, lineno=1039)
2024-09-08 17:41:44,447 - stack []
2024-09-08 17:41:44,447 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-08 17:41:44,448 - stack []
2024-09-08 17:41:44,448 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1042)
2024-09-08 17:41:44,448 - stack ['$x2.0']
2024-09-08 17:41:44,448 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-08 17:41:44,448 - stack ['$x2.0', '$const4.1']
2024-09-08 17:41:44,448 - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-08 17:41:44,448 - stack ['$6binary_subscr.2']
2024-09-08 17:41:44,448 - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1042)
2024-09-08 17:41:44,448 - stack ['$6binary_subscr.2', '$x8.3']
2024-09-08 17:41:44,449 - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-08 17:41:44,449 - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2024-09-08 17:41:44,449 - dispatch pc=14, inst=COMPARE_OP(arg=4, lineno=1042)
2024-09-08 17:41:44,449 - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2024-09-08 17:41:44,449 - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-08 17:41:44,449 - stack ['$14compare_op.6']
2024-09-08 17:41:44,449 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1042)
2024-09-08 17:41:44,449 - stack ['$14compare_op.6', '$x16.7']
2024-09-08 17:41:44,449 - dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-08 17:41:44,449 - stack ['$14compare_op.6', '$x16.7', '$const18.8']
2024-09-08 17:41:44,450 - dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1042)
2024-09-08 17:41:44,450 - stack ['$14compare_op.6', '$20binary_subscr.9']
2024-09-08 17:41:44,450 - dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=1042)
2024-09-08 17:41:44,450 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10']
2024-09-08 17:41:44,450 - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2024-09-08 17:41:44,450 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10', '$const24.11']
2024-09-08 17:41:44,450 - dispatch pc=28, inst=COMPARE_OP(arg=5, lineno=1042)
2024-09-08 17:41:44,450 - stack ['$14compare_op.6', '$20binary_subscr.9', '$26binary_subscr.12']
2024-09-08 17:41:44,450 - dispatch pc=30, inst=BINARY_AND(arg=None, lineno=1042)
2024-09-08 17:41:44,450 - stack ['$14compare_op.6', '$28compare_op.13']
2024-09-08 17:41:44,451 - dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1042)
2024-09-08 17:41:44,451 - stack ['$30binary_and.14']
2024-09-08 17:41:44,451 - end state. edges=[]
2024-09-08 17:41:44,451 - -------------------------Prune PHIs-------------------------
2024-09-08 17:41:44,451 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-08 17:41:44,451 - defmap: {}
2024-09-08 17:41:44,451 - phismap: defaultdict(<class 'set'>, {})
2024-09-08 17:41:44,451 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-08 17:41:44,451 - keep phismap: {}
2024-09-08 17:41:44,451 - new_out: defaultdict(<class 'dict'>, {})
2024-09-08 17:41:44,452 - ----------------------DONE Prune PHIs-----------------------
2024-09-08 17:41:44,452 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14compare_op.6'}), (16, {'res': '$x16.7'}), (18, {'res': '$const18.8'}), (20, {'index': '$const18.8', 'target': '$x16.7', 'res': '$20binary_subscr.9'}), (22, {'res': '$x22.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$x22.10', 'res': '$26binary_subscr.12'}), (28, {'lhs': '$20binary_subscr.9', 'rhs': '$26binary_subscr.12', 'res': '$28compare_op.13'}), (30, {'lhs': '$14compare_op.6', 'rhs': '$28compare_op.13', 'res': '$30binary_and.14'}), (32, {'retval': '$30binary_and.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-08 17:41:44,453 - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14compare_op.6 = $6binary_subscr.2 > $12binary_subscr.5 ['$12binary_subscr.5', '$14compare_op.6', '$6binary_subscr.2']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20binary_subscr.9 = getitem(value=x, index=$const18.8, fn=<built-in function getitem>) ['$20binary_subscr.9', '$const18.8', 'x']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=x, index=$const24.11, fn=<built-in function getitem>) ['$26binary_subscr.12', '$const24.11', 'x']
    $28compare_op.13 = $20binary_subscr.9 >= $26binary_subscr.12 ['$20binary_subscr.9', '$26binary_subscr.12', '$28compare_op.13']
    $30binary_and.14 = $14compare_op.6 & $28compare_op.13 ['$14compare_op.6', '$28compare_op.13', '$30binary_and.14']
    $32return_value.15 = cast(value=$30binary_and.14) ['$30binary_and.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

2024-09-08 17:41:44,454 - bytecode dump:
>          0	NOP(arg=None, lineno=1045)
           2	LOAD_FAST(arg=0, lineno=1048)
           4	LOAD_CONST(arg=1, lineno=1048)
           6	BINARY_SUBSCR(arg=None, lineno=1048)
           8	LOAD_FAST(arg=0, lineno=1048)
          10	LOAD_CONST(arg=2, lineno=1048)
          12	BINARY_SUBSCR(arg=None, lineno=1048)
          14	COMPARE_OP(arg=0, lineno=1048)
          16	LOAD_FAST(arg=0, lineno=1048)
          18	LOAD_CONST(arg=1, lineno=1048)
          20	BINARY_SUBSCR(arg=None, lineno=1048)
          22	LOAD_FAST(arg=0, lineno=1048)
          24	LOAD_CONST(arg=3, lineno=1048)
          26	BINARY_SUBSCR(arg=None, lineno=1048)
          28	COMPARE_OP(arg=1, lineno=1048)
          30	BINARY_AND(arg=None, lineno=1048)
          32	RETURN_VALUE(arg=None, lineno=1048)
2024-09-08 17:41:44,454 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-08 17:41:44,454 - stack: []
2024-09-08 17:41:44,455 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-08 17:41:44,455 - dispatch pc=0, inst=NOP(arg=None, lineno=1045)
2024-09-08 17:41:44,455 - stack []
2024-09-08 17:41:44,455 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-08 17:41:44,455 - stack []
2024-09-08 17:41:44,455 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1048)
2024-09-08 17:41:44,455 - stack ['$x2.0']
2024-09-08 17:41:44,455 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-08 17:41:44,455 - stack ['$x2.0', '$const4.1']
2024-09-08 17:41:44,455 - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-08 17:41:44,455 - stack ['$6binary_subscr.2']
2024-09-08 17:41:44,456 - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1048)
2024-09-08 17:41:44,456 - stack ['$6binary_subscr.2', '$x8.3']
2024-09-08 17:41:44,456 - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-08 17:41:44,456 - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2024-09-08 17:41:44,456 - dispatch pc=14, inst=COMPARE_OP(arg=0, lineno=1048)
2024-09-08 17:41:44,456 - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2024-09-08 17:41:44,456 - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-08 17:41:44,456 - stack ['$14compare_op.6']
2024-09-08 17:41:44,456 - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1048)
2024-09-08 17:41:44,456 - stack ['$14compare_op.6', '$x16.7']
2024-09-08 17:41:44,456 - dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-08 17:41:44,456 - stack ['$14compare_op.6', '$x16.7', '$const18.8']
2024-09-08 17:41:44,456 - dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1048)
2024-09-08 17:41:44,457 - stack ['$14compare_op.6', '$20binary_subscr.9']
2024-09-08 17:41:44,457 - dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=1048)
2024-09-08 17:41:44,457 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10']
2024-09-08 17:41:44,457 - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2024-09-08 17:41:44,457 - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10', '$const24.11']
2024-09-08 17:41:44,457 - dispatch pc=28, inst=COMPARE_OP(arg=1, lineno=1048)
2024-09-08 17:41:44,457 - stack ['$14compare_op.6', '$20binary_subscr.9', '$26binary_subscr.12']
2024-09-08 17:41:44,457 - dispatch pc=30, inst=BINARY_AND(arg=None, lineno=1048)
2024-09-08 17:41:44,457 - stack ['$14compare_op.6', '$28compare_op.13']
2024-09-08 17:41:44,457 - dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1048)
2024-09-08 17:41:44,457 - stack ['$30binary_and.14']
2024-09-08 17:41:44,457 - end state. edges=[]
2024-09-08 17:41:44,458 - -------------------------Prune PHIs-------------------------
2024-09-08 17:41:44,458 - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2024-09-08 17:41:44,458 - defmap: {}
2024-09-08 17:41:44,458 - phismap: defaultdict(<class 'set'>, {})
2024-09-08 17:41:44,458 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-08 17:41:44,458 - keep phismap: {}
2024-09-08 17:41:44,458 - new_out: defaultdict(<class 'dict'>, {})
2024-09-08 17:41:44,458 - ----------------------DONE Prune PHIs-----------------------
2024-09-08 17:41:44,458 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14compare_op.6'}), (16, {'res': '$x16.7'}), (18, {'res': '$const18.8'}), (20, {'index': '$const18.8', 'target': '$x16.7', 'res': '$20binary_subscr.9'}), (22, {'res': '$x22.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$x22.10', 'res': '$26binary_subscr.12'}), (28, {'lhs': '$20binary_subscr.9', 'rhs': '$26binary_subscr.12', 'res': '$28compare_op.13'}), (30, {'lhs': '$14compare_op.6', 'rhs': '$28compare_op.13', 'res': '$30binary_and.14'}), (32, {'retval': '$30binary_and.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-08 17:41:44,459 - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14compare_op.6 = $6binary_subscr.2 < $12binary_subscr.5 ['$12binary_subscr.5', '$14compare_op.6', '$6binary_subscr.2']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20binary_subscr.9 = getitem(value=x, index=$const18.8, fn=<built-in function getitem>) ['$20binary_subscr.9', '$const18.8', 'x']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=x, index=$const24.11, fn=<built-in function getitem>) ['$26binary_subscr.12', '$const24.11', 'x']
    $28compare_op.13 = $20binary_subscr.9 <= $26binary_subscr.12 ['$20binary_subscr.9', '$26binary_subscr.12', '$28compare_op.13']
    $30binary_and.14 = $14compare_op.6 & $28compare_op.13 ['$14compare_op.6', '$28compare_op.13', '$30binary_and.14']
    $32return_value.15 = cast(value=$30binary_and.14) ['$30binary_and.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

2024-09-08 17:41:45,209 - bytecode dump:
>          0	NOP(arg=None, lineno=425)
           2	LOAD_FAST(arg=0, lineno=428)
           4	LOAD_CONST(arg=1, lineno=428)
           6	BINARY_SUBSCR(arg=None, lineno=428)
           8	LOAD_FAST(arg=0, lineno=428)
          10	LOAD_CONST(arg=2, lineno=428)
          12	BINARY_SUBSCR(arg=None, lineno=428)
          14	BINARY_ADD(arg=None, lineno=428)
          16	LOAD_CONST(arg=3, lineno=428)
          18	LOAD_FAST(arg=0, lineno=428)
          20	LOAD_CONST(arg=4, lineno=428)
          22	BINARY_SUBSCR(arg=None, lineno=428)
          24	BINARY_MULTIPLY(arg=None, lineno=428)
          26	BINARY_SUBTRACT(arg=None, lineno=428)
          28	STORE_FAST(arg=1, lineno=428)
          30	LOAD_FAST(arg=0, lineno=429)
          32	LOAD_CONST(arg=1, lineno=429)
          34	BINARY_SUBSCR(arg=None, lineno=429)
          36	LOAD_FAST(arg=0, lineno=429)
          38	LOAD_CONST(arg=2, lineno=429)
          40	BINARY_SUBSCR(arg=None, lineno=429)
          42	BINARY_SUBTRACT(arg=None, lineno=429)
          44	LOAD_CONST(arg=3, lineno=429)
          46	BINARY_TRUE_DIVIDE(arg=None, lineno=429)
          48	STORE_FAST(arg=2, lineno=429)
          50	LOAD_GLOBAL(arg=0, lineno=431)
          52	LOAD_METHOD(arg=1, lineno=431)
          54	LOAD_FAST(arg=2, lineno=431)
          56	CALL_METHOD(arg=1, lineno=431)
          58	LOAD_GLOBAL(arg=0, lineno=431)
          60	LOAD_METHOD(arg=1, lineno=431)
          62	LOAD_FAST(arg=1, lineno=431)
          64	CALL_METHOD(arg=1, lineno=431)
          66	COMPARE_OP(arg=5, lineno=431)
          68	POP_JUMP_IF_FALSE(arg=38, lineno=431)
          70	LOAD_CONST(arg=4, lineno=434)
          72	RETURN_VALUE(arg=None, lineno=434)
>         74	LOAD_FAST(arg=2, lineno=436)
          76	UNARY_NEGATIVE(arg=None, lineno=436)
          78	LOAD_FAST(arg=1, lineno=436)
          80	BINARY_TRUE_DIVIDE(arg=None, lineno=436)
          82	RETURN_VALUE(arg=None, lineno=436)
2024-09-08 17:41:45,210 - pending: deque([State(pc_initial=0 nstack_initial=0)])
2024-09-08 17:41:45,210 - stack: []
2024-09-08 17:41:45,210 - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2024-09-08 17:41:45,211 - dispatch pc=0, inst=NOP(arg=None, lineno=425)
2024-09-08 17:41:45,211 - stack []
2024-09-08 17:41:45,211 - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=428)
2024-09-08 17:41:45,211 - stack []
2024-09-08 17:41:45,211 - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=428)
2024-09-08 17:41:45,211 - stack ['$x2.0']
2024-09-08 17:41:45,211 - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=428)
2024-09-08 17:41:45,211 - stack ['$x2.0', '$const4.1']
2024-09-08 17:41:45,211 - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=428)
2024-09-08 17:41:45,211 - stack ['$6binary_subscr.2']
2024-09-08 17:41:45,212 - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=428)
2024-09-08 17:41:45,212 - stack ['$6binary_subscr.2', '$x8.3']
2024-09-08 17:41:45,212 - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=428)
2024-09-08 17:41:45,212 - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2024-09-08 17:41:45,212 - dispatch pc=14, inst=BINARY_ADD(arg=None, lineno=428)
2024-09-08 17:41:45,212 - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2024-09-08 17:41:45,212 - dispatch pc=16, inst=LOAD_CONST(arg=3, lineno=428)
2024-09-08 17:41:45,212 - stack ['$14binary_add.6']
2024-09-08 17:41:45,212 - dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=428)
2024-09-08 17:41:45,212 - stack ['$14binary_add.6', '$const16.7']
2024-09-08 17:41:45,213 - dispatch pc=20, inst=LOAD_CONST(arg=4, lineno=428)
2024-09-08 17:41:45,213 - stack ['$14binary_add.6', '$const16.7', '$x18.8']
2024-09-08 17:41:45,213 - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=428)
2024-09-08 17:41:45,213 - stack ['$14binary_add.6', '$const16.7', '$x18.8', '$const20.9']
2024-09-08 17:41:45,213 - dispatch pc=24, inst=BINARY_MULTIPLY(arg=None, lineno=428)
2024-09-08 17:41:45,213 - stack ['$14binary_add.6', '$const16.7', '$22binary_subscr.10']
2024-09-08 17:41:45,214 - dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=428)
2024-09-08 17:41:45,214 - stack ['$14binary_add.6', '$24binary_multiply.11']
2024-09-08 17:41:45,214 - dispatch pc=28, inst=STORE_FAST(arg=1, lineno=428)
2024-09-08 17:41:45,214 - stack ['$26binary_subtract.12']
2024-09-08 17:41:45,214 - dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=429)
2024-09-08 17:41:45,214 - stack []
2024-09-08 17:41:45,214 - dispatch pc=32, inst=LOAD_CONST(arg=1, lineno=429)
2024-09-08 17:41:45,214 - stack ['$x30.13']
2024-09-08 17:41:45,214 - dispatch pc=34, inst=BINARY_SUBSCR(arg=None, lineno=429)
2024-09-08 17:41:45,214 - stack ['$x30.13', '$const32.14']
2024-09-08 17:41:45,214 - dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=429)
2024-09-08 17:41:45,214 - stack ['$34binary_subscr.15']
2024-09-08 17:41:45,215 - dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=429)
2024-09-08 17:41:45,215 - stack ['$34binary_subscr.15', '$x36.16']
2024-09-08 17:41:45,215 - dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=429)
2024-09-08 17:41:45,215 - stack ['$34binary_subscr.15', '$x36.16', '$const38.17']
2024-09-08 17:41:45,215 - dispatch pc=42, inst=BINARY_SUBTRACT(arg=None, lineno=429)
2024-09-08 17:41:45,215 - stack ['$34binary_subscr.15', '$40binary_subscr.18']
2024-09-08 17:41:45,215 - dispatch pc=44, inst=LOAD_CONST(arg=3, lineno=429)
2024-09-08 17:41:45,215 - stack ['$42binary_subtract.19']
2024-09-08 17:41:45,215 - dispatch pc=46, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=429)
2024-09-08 17:41:45,215 - stack ['$42binary_subtract.19', '$const44.20']
2024-09-08 17:41:45,215 - dispatch pc=48, inst=STORE_FAST(arg=2, lineno=429)
2024-09-08 17:41:45,215 - stack ['$46binary_true_divide.21']
2024-09-08 17:41:45,216 - dispatch pc=50, inst=LOAD_GLOBAL(arg=0, lineno=431)
2024-09-08 17:41:45,216 - stack []
2024-09-08 17:41:45,216 - dispatch pc=52, inst=LOAD_METHOD(arg=1, lineno=431)
2024-09-08 17:41:45,216 - stack ['$50load_global.22']
2024-09-08 17:41:45,216 - dispatch pc=54, inst=LOAD_FAST(arg=2, lineno=431)
2024-09-08 17:41:45,216 - stack ['$52load_method.23']
2024-09-08 17:41:45,216 - dispatch pc=56, inst=CALL_METHOD(arg=1, lineno=431)
2024-09-08 17:41:45,216 - stack ['$52load_method.23', '$b54.24']
2024-09-08 17:41:45,216 - dispatch pc=58, inst=LOAD_GLOBAL(arg=0, lineno=431)
2024-09-08 17:41:45,216 - stack ['$56call_method.25']
2024-09-08 17:41:45,216 - dispatch pc=60, inst=LOAD_METHOD(arg=1, lineno=431)
2024-09-08 17:41:45,216 - stack ['$56call_method.25', '$58load_global.26']
2024-09-08 17:41:45,217 - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=431)
2024-09-08 17:41:45,217 - stack ['$56call_method.25', '$60load_method.27']
2024-09-08 17:41:45,217 - dispatch pc=64, inst=CALL_METHOD(arg=1, lineno=431)
2024-09-08 17:41:45,217 - stack ['$56call_method.25', '$60load_method.27', '$a62.28']
2024-09-08 17:41:45,217 - dispatch pc=66, inst=COMPARE_OP(arg=5, lineno=431)
2024-09-08 17:41:45,217 - stack ['$56call_method.25', '$64call_method.29']
2024-09-08 17:41:45,217 - dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=38, lineno=431)
2024-09-08 17:41:45,217 - stack ['$66compare_op.30']
2024-09-08 17:41:45,217 - end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=74, stack=(), blockstack=(), npush=0)]
2024-09-08 17:41:45,217 - pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=74 nstack_initial=0)])
2024-09-08 17:41:45,217 - stack: []
2024-09-08 17:41:45,218 - state.pc_initial: State(pc_initial=70 nstack_initial=0)
2024-09-08 17:41:45,218 - dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=434)
2024-09-08 17:41:45,218 - stack []
2024-09-08 17:41:45,218 - dispatch pc=72, inst=RETURN_VALUE(arg=None, lineno=434)
2024-09-08 17:41:45,218 - stack ['$const70.0']
2024-09-08 17:41:45,218 - end state. edges=[]
2024-09-08 17:41:45,218 - pending: deque([State(pc_initial=74 nstack_initial=0)])
2024-09-08 17:41:45,218 - stack: []
2024-09-08 17:41:45,218 - state.pc_initial: State(pc_initial=74 nstack_initial=0)
2024-09-08 17:41:45,218 - dispatch pc=74, inst=LOAD_FAST(arg=2, lineno=436)
2024-09-08 17:41:45,218 - stack []
2024-09-08 17:41:45,218 - dispatch pc=76, inst=UNARY_NEGATIVE(arg=None, lineno=436)
2024-09-08 17:41:45,218 - stack ['$b74.0']
2024-09-08 17:41:45,219 - dispatch pc=78, inst=LOAD_FAST(arg=1, lineno=436)
2024-09-08 17:41:45,219 - stack ['$76unary_negative.1']
2024-09-08 17:41:45,219 - dispatch pc=80, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=436)
2024-09-08 17:41:45,219 - stack ['$76unary_negative.1', '$a78.2']
2024-09-08 17:41:45,219 - dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=436)
2024-09-08 17:41:45,219 - stack ['$80binary_true_divide.3']
2024-09-08 17:41:45,219 - end state. edges=[]
2024-09-08 17:41:45,219 - -------------------------Prune PHIs-------------------------
2024-09-08 17:41:45,219 - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set()})
2024-09-08 17:41:45,220 - defmap: {}
2024-09-08 17:41:45,220 - phismap: defaultdict(<class 'set'>, {})
2024-09-08 17:41:45,220 - changing phismap: defaultdict(<class 'set'>, {})
2024-09-08 17:41:45,220 - keep phismap: {}
2024-09-08 17:41:45,220 - new_out: defaultdict(<class 'dict'>, {})
2024-09-08 17:41:45,220 - ----------------------DONE Prune PHIs-----------------------
2024-09-08 17:41:45,220 - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14binary_add.6'}), (16, {'res': '$const16.7'}), (18, {'res': '$x18.8'}), (20, {'res': '$const20.9'}), (22, {'index': '$const20.9', 'target': '$x18.8', 'res': '$22binary_subscr.10'}), (24, {'lhs': '$const16.7', 'rhs': '$22binary_subscr.10', 'res': '$24binary_multiply.11'}), (26, {'lhs': '$14binary_add.6', 'rhs': '$24binary_multiply.11', 'res': '$26binary_subtract.12'}), (28, {'value': '$26binary_subtract.12'}), (30, {'res': '$x30.13'}), (32, {'res': '$const32.14'}), (34, {'index': '$const32.14', 'target': '$x30.13', 'res': '$34binary_subscr.15'}), (36, {'res': '$x36.16'}), (38, {'res': '$const38.17'}), (40, {'index': '$const38.17', 'target': '$x36.16', 'res': '$40binary_subscr.18'}), (42, {'lhs': '$34binary_subscr.15', 'rhs': '$40binary_subscr.18', 'res': '$42binary_subtract.19'}), (44, {'res': '$const44.20'}), (46, {'lhs': '$42binary_subtract.19', 'rhs': '$const44.20', 'res': '$46binary_true_divide.21'}), (48, {'value': '$46binary_true_divide.21'}), (50, {'res': '$50load_global.22'}), (52, {'item': '$50load_global.22', 'res': '$52load_method.23'}), (54, {'res': '$b54.24'}), (56, {'func': '$52load_method.23', 'args': ['$b54.24'], 'res': '$56call_method.25'}), (58, {'res': '$58load_global.26'}), (60, {'item': '$58load_global.26', 'res': '$60load_method.27'}), (62, {'res': '$a62.28'}), (64, {'func': '$60load_method.27', 'args': ['$a62.28'], 'res': '$64call_method.29'}), (66, {'lhs': '$56call_method.25', 'rhs': '$64call_method.29', 'res': '$66compare_op.30'}), (68, {'pred': '$66compare_op.30'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 74: ()})
2024-09-08 17:41:45,220 - block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$const70.0'}), (72, {'retval': '$const70.0', 'castval': '$72return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-08 17:41:45,221 - block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$b74.0'}), (76, {'value': '$b74.0', 'res': '$76unary_negative.1'}), (78, {'res': '$a78.2'}), (80, {'lhs': '$76unary_negative.1', 'rhs': '$a78.2', 'res': '$80binary_true_divide.3'}), (82, {'retval': '$80binary_true_divide.3', 'castval': '$82return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2024-09-08 17:41:45,223 - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14binary_add.6 = $6binary_subscr.2 + $12binary_subscr.5 ['$12binary_subscr.5', '$14binary_add.6', '$6binary_subscr.2']
    $const16.7 = const(int, 2)               ['$const16.7']
    $const20.9 = const(int, 0)               ['$const20.9']
    $22binary_subscr.10 = getitem(value=x, index=$const20.9, fn=<built-in function getitem>) ['$22binary_subscr.10', '$const20.9', 'x']
    $24binary_multiply.11 = $const16.7 * $22binary_subscr.10 ['$22binary_subscr.10', '$24binary_multiply.11', '$const16.7']
    a = $14binary_add.6 - $24binary_multiply.11 ['$14binary_add.6', '$24binary_multiply.11', 'a']
    $const32.14 = const(int, 1)              ['$const32.14']
    $34binary_subscr.15 = getitem(value=x, index=$const32.14, fn=<built-in function getitem>) ['$34binary_subscr.15', '$const32.14', 'x']
    $const38.17 = const(int, -1)             ['$const38.17']
    $40binary_subscr.18 = getitem(value=x, index=$const38.17, fn=<built-in function getitem>) ['$40binary_subscr.18', '$const38.17', 'x']
    $42binary_subtract.19 = $34binary_subscr.15 - $40binary_subscr.18 ['$34binary_subscr.15', '$40binary_subscr.18', '$42binary_subtract.19']
    $const44.20 = const(int, 2)              ['$const44.20']
    b = $42binary_subtract.19 / $const44.20  ['$42binary_subtract.19', '$const44.20', 'b']
    $50load_global.22 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$50load_global.22']
    $52load_method.23 = getattr(value=$50load_global.22, attr=abs) ['$50load_global.22', '$52load_method.23']
    $56call_method.25 = call $52load_method.23(b, func=$52load_method.23, args=[Var(b, pitch.py:429)], kws=(), vararg=None, varkwarg=None, target=None) ['$52load_method.23', '$56call_method.25', 'b']
    $58load_global.26 = global(np: <module 'numpy' from 'c:\\Users\\darsh\\anaconda3\\envs\\latestEnv\\lib\\site-packages\\numpy\\__init__.py'>) ['$58load_global.26']
    $60load_method.27 = getattr(value=$58load_global.26, attr=abs) ['$58load_global.26', '$60load_method.27']
    $64call_method.29 = call $60load_method.27(a, func=$60load_method.27, args=[Var(a, pitch.py:428)], kws=(), vararg=None, varkwarg=None, target=None) ['$60load_method.27', '$64call_method.29', 'a']
    $66compare_op.30 = $56call_method.25 >= $64call_method.29 ['$56call_method.25', '$64call_method.29', '$66compare_op.30']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.30, func=bool68, args=(Var($66compare_op.30, pitch.py:431),), kws=(), vararg=None, varkwarg=None, target=None) ['$66compare_op.30', '$68pred', 'bool68']
    branch $68pred, 70, 74                   ['$68pred']
label 70:
    $const70.0 = const(int, 0)               ['$const70.0']
    $72return_value.1 = cast(value=$const70.0) ['$72return_value.1', '$const70.0']
    return $72return_value.1                 ['$72return_value.1']
label 74:
    $76unary_negative.1 = unary(fn=<built-in function neg>, value=b) ['$76unary_negative.1', 'b']
    $80binary_true_divide.3 = $76unary_negative.1 / a ['$76unary_negative.1', '$80binary_true_divide.3', 'a']
    $82return_value.4 = cast(value=$80binary_true_divide.3) ['$80binary_true_divide.3', '$82return_value.4']
    return $82return_value.4                 ['$82return_value.4']

2024-09-08 17:47:04,480 - Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2024-09-08 17:47:10,609 - Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2024-09-08 17:47:11,419 - Creating converter from 7 to 5
2024-09-08 17:47:11,419 - Creating converter from 5 to 7
2024-09-08 17:47:11,420 - Creating converter from 7 to 5
2024-09-08 17:47:11,420 - Creating converter from 5 to 7
2024-09-08 17:52:03,875 - Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2024-09-08 17:52:05,058 - Creating converter from 7 to 5
2024-09-08 17:52:05,058 - Creating converter from 5 to 7
2024-09-08 17:52:05,058 - Creating converter from 7 to 5
2024-09-08 17:52:05,058 - Creating converter from 5 to 7
2024-09-08 17:54:33,832 - Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2024-09-08 17:54:35,012 - Creating converter from 7 to 5
2024-09-08 17:54:35,012 - Creating converter from 5 to 7
2024-09-08 17:54:35,012 - Creating converter from 7 to 5
2024-09-08 17:54:35,012 - Creating converter from 5 to 7
